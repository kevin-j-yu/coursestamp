{
    "Title=BAD VIDEO WITH ROBOT AUDIO._Id=u5TiYOAjsq0": {
        "118": " \n",
        "120": "thank you\n",
        "417": " \n",
        "459": " \n"
    },
    "Title=[Classes, Video 2a] Defining and Instantiating Classes_Id=xDPUHRjsgA4": {
        "0": " \n",
        "1": "our next topic and this one's it's going\n",
        "4": "to be a bit of a doozy is going to the\n",
        "6": "definition and instantiation of classes\n",
        "8": "we've already done this we're going to\n",
        "10": "do a more sophisticated version of what\n",
        "13": "we've seen before so let's suppose we\n",
        "16": "create a new class called dog right what\n",
        "17": "I'm going to do it's different than\n",
        "19": "before is I'm going to take away the\n",
        "22": "main lab and we'll see why I do then I'm\n",
        "25": "going to give it a method make noise and\n",
        "31": "what that's going to do is work ok so we\n",
        "34": "can compile this class just like before\n",
        "36": "and it'll compile the sign\n",
        "39": "here's dog class but if I do dog jaw\n",
        "41": "it's a hog I get this error we saw in\n",
        "42": "lecture 1 there's no main method dogs\n",
        "45": "don't know how to run well this doctor\n",
        "48": "ok now this file right here I guess just\n",
        "50": "for comparison to those of you know\n",
        "52": "Python this file is the equivalent more\n",
        "57": "or less of def make noise press print\n",
        "60": "work big dogs on pi\n",
        "63": "ok you'll notice that this Python\n",
        "65": "program right there's no no point where\n",
        "67": "it's calling make noise because there's\n",
        "69": "no name right the stuff that goes down\n",
        "71": "here this is basically main like stuff\n",
        "73": "that lives outside of a function in\n",
        "76": "Python is me so I decided to put back\n",
        "82": "name by void main string args no way to\n",
        "86": "make noise now we recompile dog and run\n",
        "90": "dog we get marks just like that here it\n",
        "92": "would just do make noise right that's\n",
        "95": "the Python version of this ok so it's\n",
        "98": "often the case though the classes we\n",
        "100": "created Java do not have main methods I\n",
        "102": "just going to take this away entirely\n",
        "104": "often we'll have it and we'll see why in\n",
        "106": "project zero but so just trust me for\n",
        "108": "now often we won't actually on the main\n",
        "110": "method in the dog class instead we'll\n",
        "111": "method in the dog class instead we'll\n",
        "113": "often as other classes this use the dog\n",
        "114": "class I'm going to create dog launcher\n",
        "117": "high so every dog up to be launched this\n",
        "119": "is a class that if you're looking at our\n",
        "122": "optional textbook the dog launcher class\n",
        "126": "well test-drive the dog class let's just\n",
        "131": "dare to be to show the dogs work so in\n",
        "133": "this case dog launcher does have a main\n",
        "136": "lesson and what I'm going to do is okay\n",
        "139": "my goal is I want to call the make know\n",
        "142": "his method of our dog class over here so\n",
        "143": "what I'm going to do here is I'm going\n",
        "147": "to say dog doc make noise so if this\n",
        "150": "says is it says Java I want you to go to\n",
        "152": "the dog class find the make noise method\n",
        "157": "and run by the way I don't think I\n",
        "158": "mentioned this before in these videos\n",
        "160": "but method is just a word people use in\n",
        "163": "Java for function so we do Java dog\n",
        "166": "launcher now I get a bark right so what\n",
        "168": "is on watcher do well when it starts\n",
        "171": "running it goes to the dog class says\n",
        "173": "make noise and this happens all right\n",
        "177": "that's the extra core of what what the\n",
        "180": "finding classes is all about okay so as\n",
        "183": "we saw last time every method in Java\n",
        "185": "right any code you want to run it must\n",
        "187": "be associated with some class every file\n",
        "189": "contains a class and all code has to go\n",
        "191": "inside of a class there's no right of no\n",
        "193": "way to write code that is not inside of\n",
        "198": "a class and so what we want to do is if\n",
        "200": "we want to actually run a class then we\n",
        "202": "have to define a main method right we\n",
        "203": "actually wanna run something we have to\n",
        "205": "have a main so the dog class as we saw\n",
        "207": "as we've written it on the side just now\n",
        "211": "it has no command method right you\n",
        "212": "cannot run it directly there is no main\n",
        "215": "method and that's common pattern but we\n",
        "216": "could have other classes that have a\n",
        "219": "main message that may be call methods in\n",
        "221": "our function other other classes right\n",
        "224": "so this dog launcher class it calls a\n",
        "225": "method from another class which is a\n",
        "228": "nice feature that that one class can use\n",
        "230": "another because that's the entire basis\n",
        "231": "upon which were able to break down\n",
        "233": "problems in the smaller pieces and so\n",
        "235": "again our optional textbook headfirst\n",
        "238": "Java it calls this a test-drive class\n",
        "242": "now of course not all dogs are equal\n",
        "246": " \n",
        "254": " \n",
        "266": "here's a different little dogs are equal\n",
        "269": "and we're going to capture that in our\n",
        "271": "Java code we want our dog class to be\n",
        "273": "able to often we write programs that\n",
        "274": "recapitulate features of the real world\n",
        "275": "recapitulate features of the real world\n",
        "277": "around us so we want to for writing dogs\n",
        "278": "simulators we don't want the mold to\n",
        "283": "bark the same how can we achieve well\n",
        "285": "one approach would be for every single\n",
        "287": "dog out there just make a new class from\n",
        "289": "Maya the Malamute this dog hearing will\n",
        "293": "have a no room sound for ya stir the\n",
        "295": "dogs I don't know if that dog's name was\n",
        "297": "maybe it has this just hideous\n",
        "299": "barking Miller's here we could do this\n",
        "301": "maybe but this is going to get redundant\n",
        "303": "in a hurry so basically good NP just\n"
    },
    "Title=[Classes, Video 2b] Defining and Instantianing Classes_Id=Hsor-iZ6-a4": {
        "0": " \n",
        "2": "the key language feature that we're\n",
        "4": "going to use to make it more natural to\n",
        "6": "represent the entire universe of dogs or\n",
        "8": "whatever else is that classes in Java\n",
        "10": "can contain not just functions but also\n",
        "13": "data so what I mean by that is that we\n",
        "15": "are going to augment our dog class so\n",
        "17": "the dogs have properties like size and\n",
        "20": "that class is going to serve as the\n",
        "22": "blueprint for all dogs out there and\n",
        "24": "then we're going to instantiate that\n",
        "26": "class and two specific objects that we\n",
        "28": "can then manipulate now that'll make\n",
        "30": "more sense once we actually try out an\n",
        "32": "example so let's jump right up so\n",
        "34": "hopefully you've seen something pretty\n",
        "35": "much like this I know some of the people\n",
        "37": "taking this class are coming from a\n",
        "39": "MATLAB only background I have a little\n",
        "41": "example here that you can read to get a\n",
        "43": "sense of what this is all about but\n",
        "44": "let's try it out in Java and see what\n",
        "49": "it's like to make a dog blueprint so\n",
        "52": "what I'm going to do I'll reopen my dog\n",
        "54": "class and I'm gonna say a dog is not\n",
        "57": "just a noise making machine actually a\n",
        "60": "dog also has a property that property is\n",
        "63": "a dog is going to have let's say a\n",
        "67": "weight in pounds so as an American I use\n",
        "69": "the bizarre pounds system as opposed to\n",
        "71": "kilograms we're just going to roll with\n",
        "74": "it and that specifies how big the dog is\n",
        "77": "then what I'm gonna do is I'm gonna\n",
        "79": "change the make noise method and it's\n",
        "83": "going to have a few cases so if the\n",
        "84": "weight in pounds of a dog is less than\n",
        "90": " \n",
        "93": "otherwise if the wave in pounds is less\n",
        "98": "than 30 then we will say that it barks\n",
        "103": "otherwise it's such a large dog that it\n",
        "106": "has a wolf sound okay so there's no\n",
        "107": "Malamutes here like that dog we had with\n",
        "109": "the beautiful hmm\n",
        "112": "so will default to wolf for large dogs\n",
        "116": "so that's the make noise method and now\n",
        "119": "if we try and compile our dog class I\n",
        "123": "get this funny message non-static\n",
        "126": "variable weight in pounds cannot be\n",
        "128": "referenced from a static context so\n",
        "129": "we'll get a better sense for what that\n",
        "130": "means women\n",
        "132": "tell you that the simple solution for us\n",
        "134": "right now this is not always the right\n",
        "135": "solution we get this compiler message\n",
        "137": "but what I'm gonna do here is just\n",
        "139": "delete the word static and we'll pick\n",
        "142": "apart why that is now if I try copilot\n",
        "145": "dog Java compiles and this is now a\n",
        "147": "blueprint for all dogs it can have\n",
        "149": "different behavior based on the weight\n",
        "151": "and pounds of the dog and just glorious\n",
        "154": "then let's go into dog launcher and see\n",
        "156": "what things are like so if we now try to\n",
        "160": "compile dog launcher we get a non static\n",
        "162": "method make noise cannot be referenced\n",
        "165": "from a static context okay so you might\n",
        "166": "be tempted to delete the word static\n",
        "169": "that is not the right answer here what\n",
        "170": "we want to do instead this is gonna be a\n",
        "173": "new piece of syntax I'm gonna say I need\n",
        "175": "a specific dog okay so I'm gonna say\n",
        "178": "this is totally new syntax dog t equals\n",
        "181": "new dog this means create a dog okay a\n",
        "184": "new dog and let's call that dog in this\n",
        "187": "case D okay then what I'm gonna do is\n",
        "191": "say D dot weight in pounds equals let's\n",
        "194": "say 25 so the dog now gains a certain\n",
        "196": "weight and then instead of saying dog\n",
        "199": "not make noise I'm gonna say D make\n",
        "201": "noise okay that's a really important\n",
        "204": "point so this is like saying great sky\n",
        "207": "dog the Platonic ideal of all dogs\n",
        "209": "please make a noise but if we look at\n",
        "212": "the dog class this is expecting a\n",
        "214": "specific dog to be making noise it's\n",
        "216": "saying if my weight if me me you know\n",
        "219": "Maya or whoever Yap stir if my weight in\n",
        "220": "pounds is less than 10 I'm going to do\n",
        "222": "this and so forth so instead what I need\n",
        "225": "to do is reference a specific dog in\n",
        "226": "fact in this case it's the one I just\n",
        "230": "made so if I do Java C dog watcher Java\n",
        "234": "and then do GABA dog launcher I get bark\n",
        "236": "because it's a 25 pound dog\n",
        "240": "I do 51 and I recompile and run it then\n",
        "243": "I get move all right so what this piece\n",
        "246": "of code does is it creates a dog sets\n",
        "248": "its weight and then makes that specific\n",
        "251": "dog make noise okay and we'll be picking\n",
        "252": "more carefully what static means apart\n",
        "253": "in a minute but it's want to make sure\n",
        "256": "this syntax makes it is clear for naught\n",
        "260": "so what I'm gonna do is one last little\n",
        "263": "tweak to this dog class and dog launcher\n",
        "265": "class before I move on and kind of\n",
        "267": "reflect on what we've done so for those\n",
        "268": "of you with some object-oriented\n",
        "269": "programming experience which is\n",
        "270": "programming experience which is\n",
        "271": "hopefully almost everybody you're\n",
        "274": "probably used to the idea that setting\n",
        "276": "variables like this manually is kind of\n",
        "279": "so more typically what we'll do is the\n",
        "281": "dog launcher class when we create the\n",
        "282": "dog will actually give it as a parameter\n",
        "285": "to the dog creation process so I'm gonna\n",
        "288": "get rid of this and so in order to\n",
        "289": "enable this I mean if I try it right now\n",
        "291": "it's not gonna work it's gonna say\n",
        "293": "constructor class and dog cannot be\n",
        "296": "applied to given types data so what it's\n",
        "297": "saying is I don't know what to do with\n",
        "300": "this number so to fix that what we're\n",
        "304": "gonna do is create a special thing kind\n",
        "306": "of like a method known as a constructor\n",
        "310": "so I'm just gonna say public dog in W\n",
        "314": "and this is a this is the constructor\n",
        "317": "for I'll call the one integer\n",
        "321": "constructor for dogs so what's that what\n",
        "323": "that's going to do is if I say new dog\n",
        "325": "and give an integer this constructor\n",
        "326": "will get called and that will specify\n",
        "329": "how the dog is created so in this case\n",
        "331": "the constructor is kind of trivial the\n",
        "333": "weight in pounds should just be set\n",
        "336": "equal to W and so now if I try running\n",
        "341": "dog launcher I run it and I get wolf\n",
        "343": "right so this code is now functioning\n",
        "345": "because now I've added this constructor\n",
        "347": "if you came from a language like Python\n",
        "350": "this is very similar to the init method\n",
        "355": "the classes have one little side note\n",
        "356": "I'll make is you'll notice I didn't\n",
        "359": "recompile the dog class it turns out\n",
        "360": "that the java c command in Java is very\n",
        "362": "smart and if you make a change the dog\n",
        "365": "and recompile a dog launcher it'll\n",
        "367": "realize there's a dependency dog launch\n",
        "368": "or needs dog to work and it'll actually\n"
    },
    "Title=[Classes, Video 2c] Terminology_Id=ewMzZBy1RO4": {
        "0": " \n",
        "1": "now if we really want to impress people\n",
        "3": "or be able to communicate which part get\n",
        "5": "our terminology straight so let's talk\n",
        "7": "about some terms up top here we have an\n",
        "9": "instance variable this is a variable\n",
        "11": "that tracks a property of a specific\n",
        "14": "instance of the current class so here we\n",
        "16": "have weight in pounds but we could in\n",
        "18": "principle have other properties of a dog\n",
        "21": "like the wait wait where did I have the\n",
        "23": "weight sorry the height the favorite\n",
        "27": "color like job favorite food favorite\n",
        "29": "city in Italy whatever it is a dog might\n",
        "33": "want to do here we have the constructor\n",
        "35": "and in our case we just have one\n",
        "37": "parameter that set a single instance\n",
        "40": "variable and in principle you could do\n",
        "42": "whatever you want in this constructor\n",
        "43": "though typically one of the most\n",
        "45": "important things is setting all the\n",
        "46": "instance variables but you don't have to\n",
        "48": "set all of them you can let it stay at\n",
        "50": "the default value we won't talk about\n",
        "52": "this in these videos but you know\n",
        "53": "there's various fun corner cases about\n",
        "55": "setting or not setting things but the\n",
        "56": "constructor tells you how to construct\n",
        "59": "an instance of the object and then\n",
        "62": "lastly here we have a so called non\n",
        "64": "static or also known as an instance\n",
        "67": "method and the basic idea here we\n",
        "71": "noticed that static is not there and an\n",
        "73": "instance method is one that is invoked\n",
        "76": "by a specific instance so you can think\n",
        "79": "about it this way if we have a dog named\n",
        "81": "Steve right it's in the Steve variable\n",
        "84": "we tell Steve Steve dot make noise then\n",
        "86": "Steve will use Steve's weight in pounds\n",
        "89": "to decide which behavior Steve is going\n",
        "91": "to do so roughly speaking if when you're\n",
        "94": "reading the method you can say if my\n",
        "96": "weight is less than 10 then yep yep yep\n",
        "98": "and so forth then that means it's a\n",
        "100": "method that is non static and in fact if\n",
        "101": "you need to use any of my instance\n",
        "103": "variables if you have the static keyword\n",
        "105": "it'll get confused and it'll say you\n",
        "108": "cannot and you cannot access an instance\n",
        "111": "variable from a static context so that's\n",
        "114": "the we'll get a more nuanced view of\n",
        "116": "that in the next little section of these\n",
        "119": "videos so a little more terminology when\n",
        "123": "we did our dog launching we had a pretty\n",
        "125": "simple dog launching procedure where we\n",
        "130": "go if we look at it no we look at our\n",
        "131": "dog launching procedure it was very\n",
        "132": "simple we could\n",
        "135": "dog and haven't make noise but we could\n",
        "137": "have a more complicated situation so\n",
        "138": "here's a little more detailed\n",
        "141": "terminology on this first line we have\n",
        "144": "the declaration of a dog variable we say\n",
        "146": "there's a dog variable called small dog\n",
        "148": "but at this point we haven't actually\n",
        "150": "created any kind of dog at all\n",
        "152": "there's been no instantiation there's\n",
        "155": "just a place that a dog could go this is\n",
        "157": "the opposite this is creating a dog of\n",
        "159": "size 20 but then not putting it anywhere\n",
        "162": "and in this case since nobody uses it it\n",
        "164": "will just get destroyed by the so called\n",
        "168": "garbage collector very scary but we'll\n",
        "169": "cover that stuff later and for now you\n",
        "170": "can just know that if you instantiate\n",
        "172": "dogs they'll be destroyed by some kind\n",
        "175": "of ruthless garbage collector now if you\n",
        "178": "want to avoid losing your dog you want\n",
        "181": "to put it somewhere so in this case this\n",
        "183": "line of code instantiates a dog and then\n",
        "185": "assigns it to an already declared\n",
        "186": "variable so this is instantiation an\n",
        "188": "assignment so often what you'll do is\n",
        "191": "you'll do all three I declare there is a\n",
        "193": "variable named huge dog we instantiate\n",
        "196": "it and then we ensign we assign that new\n",
        "198": "dog to the huge dog\n",
        "200": "and then here we have a couple of\n",
        "202": "so-called invocations so here I'm saying\n",
        "205": "huge dog I would like you to invoke your\n",
        "208": "make a noise method and this dot you can\n",
        "210": "think of as meaning a member of right so\n",
        "214": "it's it belongs to this class and so as\n",
        "216": "far as terminology goes that's all we\n",
        "219": "need for now and we'll move towards\n",
        "221": "looking at a little more in-depth\n",
        "223": "picture of what static means but first\n"
    },
    "Title=[Classes, Video 3a] Static vs  Instance Methods_Id=l8Q6NXbAwNk": {
        "0": " \n",
        "2": "so let's really dig in and make sure we\n",
        "3": "understand the difference between a\n",
        "7": "static and an instance method so what do\n",
        "9": "right well we know that there exist\n",
        "11": "static methods which have the word\n",
        "13": "static in their declaration and non\n",
        "14": "static methods also known as instance\n",
        "18": "methods which do not yeah we're done so\n",
        "20": "static methods are invoked using the\n",
        "23": "class name so we know for example if we\n",
        "24": "want to call a make noise method that\n",
        "26": "was declared like this we would say dog\n",
        "30": "great ethereal sky dog I would like you\n",
        "34": "to make a noise and so it will instant\n",
        "36": "methods by contrast are invoked using an\n",
        "39": "instance name so I might say Maya the\n",
        "41": "dog please make noise right so I create\n",
        "43": "a specific dog and they say Maya make\n",
        "46": "your noise and an important distinction\n",
        "48": "between them is the static variable plus\n",
        "51": "our static methods they cannot access my\n",
        "54": "instance variables I couldn't say system\n",
        "56": "dot out dot print line weight and pounds\n",
        "58": "because in this case there is no me\n",
        "60": "there's just the idea of dogs trying to\n",
        "62": "make the noise and over here it's a\n",
        "65": "specific dog okay so why what good is a\n",
        "67": "static method it seems like the way I've\n",
        "69": "described it the non static methods are\n",
        "72": "simply more powerful but we'll see that\n",
        "73": "there is a natural place for a static\n",
        "76": "method so for example some classes there\n",
        "78": "just never instantiated for example the\n",
        "80": "math class the way we'll usually or I\n",
        "83": "mean yeah the way we would use the round\n",
        "86": "method of the math class is I would say\n",
        "88": "mathematics please round five point six\n",
        "90": "which just makes more sense than saying\n",
        "93": "let's create a specific math whatever\n",
        "96": "that would mean and then use Em's round\n",
        "98": "right so static methods they have their\n",
        "99": "right so static methods they have their\n",
        "100": "place that are more natural\n",
        "102": "now sometimes classes can actually have\n",
        "104": "a mix you can have a class that has both\n",
        "107": "static and non-static methods and what\n",
        "108": "we'll do is we'll build one right here\n",
        "110": "but I think it'll be more interesting if\n",
        "115": " \n",
        "118": "so let's open up our dog glass and let's\n",
        "122": "say our goal is we want to be able to\n",
        "124": "compare two dogs so I'm gonna make\n",
        "128": "another dog be to 100 and I want to\n",
        "130": "compare these dogs so I might do\n",
        "133": "something like bigger equals and now I\n",
        "138": "want to say dog got max dog bd2 okay now\n",
        "141": "the idea here is that I don't want\n",
        "142": "the idea here is that I don't want\n",
        "143": "either of the dogs to be doing the\n",
        "146": "judging I want you know an expert of\n",
        "148": "dogs last the the god version of dog to\n",
        "151": "the judgment and in that case it's\n",
        "155": "pretty natural so let's try it out in\n",
        "156": "this case we want to make a method\n",
        "159": "called max dog and it's supposed to take\n",
        "163": "two dogs b1 and b2 and if t1 is bigger\n",
        "166": "than d2 we're gonna rip no sorry if v1\n",
        "168": "dot weight in pounds is bigger than d2\n",
        "170": "that weight in pounds will return d1\n",
        "171": "that weight in pounds will return d1\n",
        "174": "otherwise we'll return due to now this\n",
        "176": "is not done yet so don't want you to do\n",
        "178": "is think for a moment what is missing\n",
        "181": "here other than obvious so what's\n",
        "186": "missing there's two things so one of\n",
        "189": "them is this needs a return type and the\n",
        "192": "other is static because in this case\n",
        "193": "we're invoking the method using the\n",
        "197": "class name so let's try doing dog\n",
        "201": "launcher see if everything works can we\n",
        "202": "try running it probably nothing\n",
        "204": "yeah nothing happens so we'll make the\n",
        "208": "bigger dog make a sound and let's change\n",
        "209": "the numbers so we actually know what's\n",
        "211": "going on it's at fifteen and a hundred\n",
        "213": "so in this case if it's working properly\n",
        "215": "we should get a look and a deed we get a\n",
        "217": "woof\n",
        "220": "so you might ask yourself couldn't I\n",
        "223": "also make a non-static version like\n",
        "232": "public dog max dog dog b2 and then I\n",
        "234": "could compare my own self and yes you\n",
        "236": "could you could say in this case if my\n",
        "239": "weight in pounds is greater than d two's\n",
        "240": "weight in pounds\n",
        "242": "then return and in this particular\n",
        "244": "instance I want to return a reference to\n",
        "247": "my own self so we'll use that keyword\n",
        "248": "that I very briefly alluded to earlier\n",
        "251": "and say return this otherwise we'll\n",
        "255": "return v2 now for clarity you can also\n",
        "257": "end this so that a reader of your code\n",
        "259": "might say okay it's my weight in pounds\n",
        "261": "because this is a non static method so a\n",
        "263": "specific dog is going to do the judging\n",
        "266": "in an exercise you might do now is try\n",
        "268": "and ponder how would I call that method\n",
        "272": "okay so what would the call look like it\n",
        "273": "might look like this dog the bigger\n",
        "277": "equals d-max dog b2 and so in that case\n",
        "281": "this dog does the judging to see am i\n",
        "284": "bigger and it decides to know and so\n",
        "285": "this method will return the larger dog\n",
        "287": "so it's up to you like do you feel\n",
        "289": "comfortable having dogs judge themselves\n",
        "291": "against other dogs\n",
        "293": "where'd you rather have an impartial\n",
        "297": "judge that will just feel more\n",
        "299": "aesthetically correct to you either\n",
        "301": "approach is fine either will work\n",
        "303": "perfectly just a matter of your dog\n",
        "308": "related moral aesthetics so one last\n",
        "309": "thing I want to bring up in terms of\n",
        "311": "static we're mostly talking about\n",
        "314": "methods but just as a quick note we can\n",
        "317": "actually also make static variables so\n",
        "318": "these are interesting because their\n",
        "320": "properties that apply to all dogs and\n",
        "323": "they all share that variable so for\n",
        "326": "example we might say all dogs have a so\n",
        "328": "called they have a scientific name\n",
        "330": "should be a Canis familiaris assuming my\n",
        "332": "spelling and capitalization is right and\n",
        "334": "so what that will do is it will\n",
        "336": "establish that all dogs have the same\n",
        "339": "scientific name so I can then go through\n",
        "342": "and say system dot out dot print line\n",
        "348": "the scientific name and so if I run this\n",
        "351": "should hopefully get Canis familiaris if\n",
        "356": " \n",
        "360": "I get Canis familiaris though I would\n",
        "362": "argue that both of these are bad style\n",
        "365": "and then if you're ever accessing a\n",
        "367": "static variable should really probably\n",
        "370": "only be using I mean in any case I can\n",
        "373": "think of the actual class so instead of\n",
        "375": "saying hey Maya the dog what's your\n",
        "376": "scientific name I'll say what is the\n",
        "379": "scientific name for all dogs so while\n",
        "380": "this syntax works I don't think it's\n",
        "382": "ever really useful and it's probably\n",
        "385": "just confusing and might lead you to do\n",
        "386": "bad things so what I'm gonna saying is\n",
        "387": "bad things so what I'm gonna saying is\n",
        "388": "if you ever have a static variable let's\n",
        "391": "use the class name as a nice\n",
        "393": "straightforward way of making sure we\n",
        "394": "know exactly what we're dealing with\n",
        "398": "okay so if we look again at this method\n",
        "401": "this is what we've just built but I\n",
        "402": "think it's a little more interesting in\n",
        "405": "this bigger context and so I'll note\n",
        "407": "that a class may have a mix of static\n",
        "410": "and non-static members and a member is\n",
        "412": "either an instance variable or a method\n",
        "415": "okay so a static member you should\n",
        "418": "access it using the class name right so\n",
        "420": "if I'm saying what is a dog scientific\n",
        "422": "name I would use this notation if I want\n",
        "423": "name I would use this notation if I want\n",
        "425": "to call the static version of max dog I\n",
        "429": "would use dog max top you can use an\n",
        "432": "instance variable but again I think it's\n",
        "434": "confusing so I would say that static\n",
        "436": "members you really really should strive\n",
        "438": "to use dog I mean what I mean by that is\n",
        "440": "yes this technically works but please do\n",
        "441": "yes this technically works but please do\n",
        "443": "this I'll just make our lives easier\n",
        "446": "well your life is here non-static\n",
        "448": "members by contrast you cannot invoke\n",
        "449": "them using the class name\n",
        "452": "you cannot say great sky dog please make\n",
        "454": "noise if the method is declared as\n",
        "456": "follows like if I have here and dog I\n",
        "460": "can't call dog max dog it'll say cannot\n",
        "462": "call a non static method from static\n",
        "464": "make no actually what will it say no no\n",
        "470": "let's find out what happens if we delete\n",
        "472": "this method\n",
        "477": "do jog launcher and then say yeah okay\n",
        "482": "in this case max dog it gets confused he\n",
        "483": "gives us an error message that's not\n",
        "485": "particularly useful sorry a little bit\n",
        "489": "of a digression but non-static members\n",
        "493": "if you only have a non-static version of\n",
        "495": "a method you cannot use the class name\n",
        "497": "to make noise it just doesn't make sense\n",
        "499": "and it's just not what static method is\n",
        "503": "and lastly if you have a static method\n",
        "505": "and you want to access some kind of\n",
        "507": "instance variables so for example this\n",
        "510": "method here max dog if we wanted to\n",
        "512": "actually access an instance variable we\n",
        "514": "have to specify which instance we can't\n",
        "516": "take this away because if we do we're\n",
        "519": "asking about my instance variables but\n",
        "521": "this great the great sky dog he does not\n",
        "523": "have a weight in pounds he transcends\n",
        "526": "petty things like particular sizes okay\n",
        "530": "so at this point if you're new to static\n",
        "532": "versus non-static it's probably a little\n",
        "533": "confusing right I mean that's just how\n",
        "535": "these programming things go you probably\n",
        "536": "have questions that I haven't answered\n",
        "539": "so I encourage you to try out the code\n",
        "541": "link that's on the website experiment\n",
        "543": "with the code but especially project\n",
        "544": "zero will give you a chance to really\n",
        "549": "deeply look into this issue and see how\n",
        "551": "static non static and all this place\n"
    },
    "Title=[Classes, Video 3b] Exercise_Id=8Gq-8mVbyFU": {
        "0": " \n",
        "3": "as an exercise to make sure everything\n",
        "5": "makes sense what I'd like you to do is\n",
        "7": "look at this code and try and guess what\n",
        "8": "will it do\n",
        "10": "I already told you almost everything you\n",
        "12": "need to know to answer this question so\n",
        "14": "give it your best guess and I encourage\n",
        "15": "you to actually really try this problem\n",
        "16": "instead of just skipping to the next\n",
        "19": "video to see the answer so give it a\n"
    },
    "Title=[Classes, Video 3c] Exercise Solution_Id=Osuy8UEH03M": {
        "0": " \n",
        "2": "alright let's see the answer rather than\n",
        "4": "just give it away I'm going to use this\n",
        "7": "really handy job of visual answer so\n",
        "10": "click this link and it'll take you to\n",
        "11": "some code that you can run in the\n",
        "13": "browser and I'll show you step by step\n",
        "15": "what's going on so I'll click visualize\n",
        "17": "execution and we'll go through\n",
        "19": "everything line by line now if you can't\n",
        "21": "find the slides because it's the year\n",
        "24": "twenty five fifty and you're I don't\n",
        "25": "know though we're in a post-apocalyptic\n",
        "28": "situation where these slides are gone\n",
        "30": "there's no Google slides anymore you can\n",
        "32": "instead go to this link right here and\n",
        "35": "it should take you to the visualizer so\n",
        "37": "let's try running the code so in this\n",
        "39": "case every time I click forward it's\n",
        "41": "gonna step forward in the code one line\n",
        "44": "so when I say dog small dog equals new\n",
        "47": "dog five when I click forward we're down\n",
        "49": "here in the constructor they click a few\n",
        "52": "more times and we find ourselves with a\n",
        "54": "small dog with this arrow pointing at\n",
        "57": "the instance here which has the dog of\n",
        "60": "okay we create a couple more dogs so\n",
        "63": "I'll just click quickly and finally what\n",
        "64": "we end up with after running these three\n",
        "66": "lines of code is we have three dogs one\n",
        "69": "of size 525 150 stored in variables\n",
        "71": "small dog medium dog and huge dog\n",
        "75": "respectively so here we have an array of\n",
        "77": "dogs we're gonna create called mini dogs\n",
        "80": "and it's gonna be of size four so when\n",
        "81": "we create this array we see that they're\n",
        "84": "each null now we haven't said what null\n",
        "86": "is before but just suffice it to say\n",
        "89": "it's an empty hole in our array of dogs\n",
        "91": "right it's a these are empty dog houses\n",
        "94": "so then we'll say mini dog is a zero\n",
        "96": "you're gonna be the small dog many dogs\n",
        "98": "one you'll be the huge dog and then\n",
        "101": "finally many dogs too in this box we'll\n",
        "104": "put a new dog of size 130 and so it gets\n",
        "106": "created and there it is now this dog\n",
        "109": "does not have a name in the sense that\n",
        "111": "there's no main variable that points at\n",
        "113": "it but nonetheless it is an actual dog\n",
        "115": "that lives in dog house number two and\n",
        "118": "it can be manipulated and utilized next\n",
        "121": "up comes this loop so we'll set a equal\n",
        "123": "to zero and then we're just gonna go\n",
        "124": "through each item of the\n",
        "127": "and we're going to compare the ice dog\n",
        "129": "with medium dog and whichever ones\n",
        "132": "bigger is gonna make a noise so in other\n",
        "133": "words this first comparison is between\n",
        "136": "the size 5 dog and the medium dog here\n",
        "139": "and so we expect this dog to be the one\n",
        "142": "that barks we should get a bark sound so\n",
        "145": "in the comparison happens d1 and Max dog\n",
        "149": "is this dog here and d2 is the medium\n",
        "152": "sized dog and so since d1 is not less\n",
        "155": "than d2 which I tends d1 is not bigger\n",
        "157": "than d2 the medium dog is the returned\n",
        "160": "guy it's just another way of saying when\n",
        "162": "we made this comparison the medium dog\n",
        "165": "won and so then the noise is made the\n",
        "167": "medium dog will say ok it's my size less\n",
        "172": "than 10 here's me I'm this no okay so\n",
        "174": "I'm good luck is my size less than 30\n",
        "177": "yes so I'm gonna make a bark sound\n",
        "180": "alright and so forth so the next\n",
        "182": "comparison is gonna be between dog 1\n",
        "185": "which is the 150 dog and medium dog and\n",
        "189": "this time the 150 dog will win and we\n",
        "191": "see this dog will consider his own size\n",
        "192": "and say ok\n",
        "197": "no no woof alright next we get to the\n",
        "199": "size 130 dog versus the medium dog and\n",
        "202": "so in this comparison happens we expect\n",
        "205": "this dog here to win and indeed it does\n",
        "208": "this is the larger one so it will also\n",
        "212": "woof so we have bark woof woof because\n",
        "217": "this is medium dog 1 huge dog 1 huge dog\n",
        "221": "1 and the final comparison is between\n",
        "224": "the null dog the no dog at all and the\n",
        "226": "medium dog now I didn't actually tell\n",
        "227": "you what would happen here right this is\n",
        "229": "the piece of information you didn't have\n",
        "231": "to solve the problem properly but what\n",
        "233": "will happen is when we try and compare\n",
        "234": "these dogs we get error\n",
        "236": "nullpointerexception\n",
        "238": "you may not compare a normal dog with a\n",
        "240": "real dog that's just not allowed in Java\n",
        "242": "because this isn't actually a dog at all\n",
        "245": "now I don't expect that all of that made\n",
        "246": "sense especially if you hadn't tried the\n",
        "249": "problem so I really highly encourage you\n",
        "252": "to go look at this Java visualizer that\n",
        "254": "is click this link and step through it\n",
        "255": "and make sure you understand why it's\n",
        "257": "bark woof woof No\n",
        "261": "dear exception okay so that's the the\n",
        "265": "heart of classes instantiation static\n",
        "267": "versus non static methods but project\n",
        "269": "zeros were is really gonna click because\n",
        "271": "right now you know I've given you a\n",
        "273": "surface level understanding I've walked\n",
        "274": "us through some very specific examples\n",
        "276": "but it's only when you start working to\n",
        "278": "that project that it will all really\n"
    },
    "Title=[Classes, Video 5] Using Libraries_Id=C6kbrsdNQaQ": {
        "0": " \n",
        "1": "the last thing I want to talk about\n",
        "3": "today and something that'll be really\n",
        "4": "important for project zero and indeed\n",
        "7": "your entire future programming career is\n",
        "9": "using libraries so one of the most\n",
        "11": "amazing things about computer science is\n",
        "14": "that any piece of code I write can be\n",
        "17": "instantly sent to you and reused and\n",
        "19": "doesn't matter how complicated it is I\n",
        "21": "can write a function that for example\n",
        "24": "takes the human genome and simulates\n",
        "26": "what the person's face looks like in\n",
        "28": "theory that might be possible\n",
        "30": "and once I wrote it I could just send\n",
        "31": "that to the library and you could just\n",
        "33": "use it as a function and whatever you\n",
        "35": "wanted to use it for right and that's\n",
        "37": "something that is really one of the most\n",
        "39": "amazing and cool things about being a\n",
        "42": "programmer right anything anybody builds\n",
        "46": "it's yours so you should learn how to\n",
        "48": "take advantage all the libraries people\n",
        "50": "out there have written so there's tons\n",
        "51": "of things out there that people have\n",
        "54": "written and in this class we're gonna\n",
        "55": "give you everything you need we're not\n",
        "57": "gonna ask you to go find the appropriate\n",
        "59": "library on the internet and use it and\n",
        "61": "in fact we're gonna ask that you don't\n",
        "63": "so the libraries we're gonna use include\n",
        "65": "all those things like the math the built\n",
        "68": "in libraries so the math class can\n",
        "70": "compute square roots the integer class\n",
        "72": "can convert strings to integers and so\n",
        "74": "forth and we're also going to use\n",
        "75": "another big library known as the\n",
        "77": "Princeton standard library I'll describe\n",
        "79": "in a moment now we may add additional\n",
        "81": "libraries for the later projects well\n",
        "84": "have at least these I was a programmer\n",
        "86": "you really want to use what's out there\n",
        "88": "because it'll first save you the trouble\n",
        "91": "of writing code but secondly that it\n",
        "93": "avoids you introducing any kind of weird\n",
        "95": "bugs so there's all kinds of stories of\n",
        "96": "bugs so there's all kinds of stories of\n",
        "97": "people trying to write their own\n",
        "99": "cryptographic libraries because they\n",
        "101": "think okay well you know I'm writing\n",
        "103": "this program so really I ought to be the\n",
        "105": "one writing the key exchange code or\n",
        "107": "whatever it may be and you get some tiny\n",
        "109": "little details so I'm set a little\n",
        "110": "detail and it really compromises your\n",
        "111": "detail and it really compromises your\n",
        "113": "security so if you use libraries that\n",
        "117": "have already been tested and used by\n",
        "118": "tons of people out there in the world\n",
        "120": "chances are it's gonna be less buggy I\n",
        "122": "mean might not be you know there have\n",
        "125": "been major bugs and widely used pieces\n",
        "127": "of software but chances are you will do\n",
        "130": "a worse job now the downside is you're\n",
        "131": "gonna have to spend some time learning\n",
        "134": "we're his works right so it's sort of\n",
        "136": "like the equivalent of when you first\n",
        "138": "start programming it's so tempting to\n",
        "141": "write everything yourself and I kind of\n",
        "144": "liken it to imagine you have a giant\n",
        "145": "chunk of wood and you want to cut it in\n",
        "148": "half and you have a saw so you could\n",
        "150": "mean you know how saw works you go like\n",
        "154": "this and it gets chopped in half and\n",
        "155": "even if it takes you two hours or two\n",
        "159": "days you know you can get there now the\n",
        "160": "better way to chop giant pieces of wood\n",
        "162": "is probably to use a big machine like\n",
        "166": "some kind of giant say you know a table\n",
        "168": "saw or whatever but that means you have\n",
        "169": "to learn how the tool works and\n",
        "171": "sometimes that could be really annoying\n",
        "174": "now what I advise you to do is avoid the\n",
        "177": "temptation to hacksaw everything and to\n",
        "180": "think smart wherever you can and often\n",
        "183": "that process involves it using a light\n",
        "187": "ray okay so if you want to use a library\n",
        "189": "you have to know that the library exists\n",
        "191": "and you have to know how it works so how\n",
        "194": "do you use one once you find one well\n",
        "195": "one way is to find a tutorial you'll\n",
        "197": "find on the web or on YouTube people\n",
        "199": "have videos for commonly used libraries\n",
        "202": "like let's say the jingle library if\n",
        "204": "you're doing web programming right so\n",
        "206": "out there there's I bet you dozens of\n",
        "208": "videos on YouTube that explain how it\n",
        "211": "works that's great now sometimes you\n",
        "212": "just want to look at the documentation\n",
        "216": "and see how it works in a way that the\n",
        "217": "designers the library I thought was most\n",
        "219": "important and one of the things that's\n",
        "221": "really nice about Java is that the\n",
        "223": "library documentation is often quite\n",
        "227": "good so we had here converting string to\n",
        "229": "integer in Java but we can actually look\n",
        "232": "up the official documentation for the\n",
        "233": "integer class it's actually usually\n",
        "234": "pretty easy to find if I just do Java\n",
        "237": "integer and in this case takes me\n",
        "239": "straight to this page and so what I add\n",
        "242": "here is if we look in this file it lists\n",
        "244": "everything you might want to know about\n",
        "247": "the integer class it's all of the\n",
        "249": "interfaces all of the methods that you\n",
        "251": "might call and so if we look at this\n",
        "253": "parson method we can see that it tells\n",
        "256": "us what it does Pat parses the string\n",
        "257": "argument as a sign\n",
        "259": "decimal integer so it tells you\n",
        "261": "everything you want to know and maybe\n",
        "262": "some extra stuff that you don't really\n",
        "265": "care about or quite understand now one\n",
        "266": "thing that's fun about this\n",
        "268": "documentation is even just with what we\n",
        "269": "know so far just a couple of days of\n",
        "271": "videos you can already read this I mean\n",
        "273": "that says it's a public method we know\n",
        "275": "that public seems to be associated with\n",
        "277": "methods somehow static well it's a\n",
        "279": "static method so you're using integer\n",
        "282": "dot not like a specific integer it\n",
        "284": "returns an int it's called par set and\n",
        "286": "it takes a string argument and you know\n",
        "288": "we don't know what that means quite yet\n",
        "292": "okay so what I'm gonna say\n",
        "294": "here we're what I'm saying here is just\n",
        "296": "that the documentation is often quite\n",
        "297": "good and I encourage you to check it out\n",
        "299": "because sometimes the concise answer in\n",
        "300": "because sometimes the concise answer in\n",
        "301": "the library is better than trying to dig\n",
        "303": "through a bunch of tutorials on web and\n",
        "305": "then lastly looking at example code\n",
        "307": "snippets that use a particular library\n",
        "310": "is a great technique and that for\n",
        "312": "example is why I love Stack Overflow\n",
        "315": "because here look a code snippet so\n",
        "317": "whenever you use those I do remind you\n",
        "321": "to cite your sources just in line with\n",
        "324": "good practices as any kind of creative\n",
        "326": "person you should always be citing their\n",
        "328": "sources and later we'll talk a little\n",
        "330": "bit more about the official rules for\n",
        "333": "citing things in this course so in 61v\n",
        "335": "again we're giving you all the libraries\n",
        "336": "you need you don't need to get any new\n",
        "338": "ones and in fact we asked you not to\n",
        "339": "because it'll make the grater get\n",
        "342": "confused so for example if we have not\n",
        "344": "given you the Apache Commons library\n",
        "348": "don't go use that okay this right here\n",
        "350": "is just a picture of what the integer\n",
        "352": "documentation looks like but you know\n",
        "354": "this is a video so who cares but if\n",
        "357": "you're a slide reader and then lastly I\n",
        "361": "want to let you know a little bit more\n",
        "364": "about the Princeton standard library so\n",
        "365": "used to teach at Princeton and one of my\n",
        "367": "colleagues Kevin Wayne built this\n",
        "370": "beautiful library for Java that does all\n",
        "371": "kinds of awesome stuff like getting\n",
        "373": "input from the user reading from files\n",
        "377": "drawing sound and all of it is a really\n",
        "379": "nice interface so we're gonna make heavy\n",
        "381": "use of it especially in the early parts\n",
        "383": "of the course later on we'll kind of\n",
        "384": "wean ourselves off of it because it's an\n",
        "387": "standard library but early on you'll\n",
        "388": "find it's really useful and especially\n",
        "390": "for project zero you're going to use\n",
        "392": "these heavily because we'll be drawing\n",
        "394": "you know planets and all kinds of fun\n",
        "397": "stuff so next move for you is to go\n",
        "399": "check out project zero get started and\n",
        "402": "get cracking and really start cementing\n",
        "403": "all the knowledge we have from the video\n",
        "406": "so far and I encourage you to before you\n",
        "408": "move on to the next videos really try\n",
        "409": "and make some major headway on project\n",
        "411": "zero because that's where you're gonna\n",
        "412": "learn quite a lot it's actually trying\n",
        "414": "to build things so that's it for today\n"
    },
    "Title=[DataStructures5, Video 1] Introducing the Priority Queue_Id=iCG9IDkoorY": {
        "0": " \n",
        "2": "in the last several videos we've talked\n",
        "3": "about different ways of implementing the\n",
        "6": "set and map abstract data types binary\n",
        "8": "search trees hash tables that sort of\n",
        "9": "search trees hash tables that sort of\n",
        "11": "thing in this video and in fact in this\n",
        "12": "lecture we're going to talk about a\n",
        "14": "totally new abstract data type you may\n",
        "16": "have never seen before known as a\n",
        "18": "priority queue and later we'll talk\n",
        "20": "about its implementations so what is the\n",
        "22": "priority queue you can think of it as\n",
        "25": "like a bag of stuff or a sack of things\n",
        "29": "and the you can put stuff in it it could\n",
        "30": "take stuff back out you can look inside\n",
        "32": "the bag but what's special is that this\n",
        "34": "sack it only lets you interact with the\n",
        "37": "smallest thing in any given time and\n",
        "38": "with that constraint we'll actually get\n",
        "40": "better performance than we would out of\n",
        "42": "some other more complex data structure\n",
        "45": "like a list or a set so maybe it's a\n",
        "50": "visual example of this sock I will just\n",
        "51": "kind of show off the operations you're\n",
        "53": "gonna have here this this add operation\n",
        "55": "here you can think of it as since you\n",
        "56": "take this pick some garbage up from this\n",
        "59": "table here's my zip card so I'll put\n",
        "61": "that in there I've added it okay I'm\n",
        "66": "gonna grab this kind bar present here\n",
        "70": "screwdriver that's probably enough right\n",
        "72": "okay so now I have three items in the\n",
        "74": "sack and so if I say what's the size it\n",
        "78": "should say three okay good now if I try\n",
        "81": "to get back the smallest thing I say hey\n",
        "83": "what's the smallest item I say get\n",
        "86": "smallest and it will return for me a\n",
        "89": "reference note dear where is that little\n",
        "90": "thing here we go it'll turn a reference\n",
        "93": "to the zip card now if I say remove\n",
        "94": "smallest it actually gives me the\n",
        "96": "reference the zip card is no longer on\n",
        "99": "the bag I call remove smallest again and\n",
        "104": "now I get find a bar and then finally\n",
        "107": "I'll do remove smallest using the power\n",
        "108": "jeez\n",
        "110": "okay screwdrivers and socks don't get\n",
        "112": "along well when you do remove smallest\n",
        "114": "and that's the last thing now the size\n",
        "116": "is zero so that's basically at a\n",
        "118": "priority queue is and it's really handy\n",
        "119": "for keeping track of the smallest\n",
        "121": "largest best whatever else thing so far\n",
        "124": "so let's imagine that you're part of\n",
        "126": "let's say this is an example of why this\n",
        "128": "might be useful the grand leaders\n",
        "130": "information compliance and happiness\n",
        "132": "enhancement team okay so you're deep in\n",
        "133": "the bowels of the earth\n",
        "135": "trying to make sure that your citizens\n",
        "138": "are not having any kind of unharmonious\n",
        "139": "conversations with each other using\n",
        "143": "texts so your job is each day you\n",
        "145": "prepare a report of the in messages that\n",
        "148": "seem most unharmonious using a\n",
        "149": "harmonious Mis comparator that takes two\n",
        "150": "harmonious Mis comparator that takes two\n",
        "151": "strings and says which one seems less\n",
        "154": "harmonious so the naive approach it's\n",
        "156": "just to create a list of all messages\n",
        "158": "sent over the entire day all text\n",
        "160": "messages sort it using your comparator\n",
        "163": "and then return the in Mart messages\n",
        "165": "that are largest and so this is not\n",
        "167": "using a priority queue but the code\n",
        "169": "might look like is as follows so we have\n",
        "172": "an unharmonious texts method we give it\n",
        "174": "a sniffer which listens in on text\n",
        "176": "messages and the number of messages we\n",
        "179": "want for our report write this number so\n",
        "181": "one way to do it we create a list of all\n",
        "184": "messages we see all day we set up a\n",
        "185": "timer and this is just kind of\n",
        "186": "pseudocode I mean the exact details\n",
        "190": "don't matter here just the story so as\n",
        "191": "the timer is running we wait 24 hours\n",
        "194": "and as the day goes on we just add every\n",
        "196": "message that we can see sorry we add\n",
        "199": "every message that we see using our\n",
        "201": "sniffer and then after we've created\n",
        "204": "this big old list after 24 hours then we\n",
        "206": "will create a comparator which is for\n",
        "207": "comparing the harmonious nough\n",
        "209": "sub-strings we will then sort all of our\n",
        "211": "messages using this comparator and we'll\n",
        "214": "tell the sorting algorithm to do it in\n",
        "216": "the reverse order and again the exact\n",
        "218": "calls here don't make much they're not\n",
        "220": "important I don't expect you to know\n",
        "221": "what these mean exactly off the top your\n",
        "224": "head but the story is I'm then able to\n",
        "225": "sort all of them and then I'll return\n",
        "228": "the first end messages from the list\n",
        "230": "which will be the largest so this\n",
        "232": "approach will work fine but the problem\n",
        "234": "is that it might use a law actually it\n",
        "236": "will use quite a lot of memory it could\n",
        "240": "be well it will be theta M where n is\n",
        "242": "the number of texts and if a lot of\n",
        "244": "messages get sent in a given day that's\n",
        "246": "potentially quite a lot right so if n is\n",
        "247": "big and we're using theta and memory\n",
        "249": "we're using a lot of memory so now your\n",
        "251": "goal is to try and do this and theta m\n",
        "254": "time using a priority queue and how\n",
        "255": "that's going to work is you will create\n",
        "258": "a priority queue of unharmonious texts\n",
        "261": "let's say and we'll set it up like this\n",
        "263": "so this is just going to be some\n",
        "265": "specific implemented sorry it specific\n",
        "267": "implementation we'll talk about later\n",
        "269": "and I'll let you try and think about\n",
        "271": "what this code looks like now I don't\n",
        "272": "encourage you to sit there and write\n",
        "274": "Java code maybe just sit down with a\n",
        "275": "pencil and paper and write some\n",
        "277": "pseudocode and see if you could figure\n",
        "278": "out what the trick is here because it's\n",
        "280": "actually a pretty interesting puzzle and\n",
        "281": "I'll reveal it in a moment\n",
        "284": "okay so I will stop here and let you\n",
        "286": "check me out in the next video where\n"
    },
    "Title=[DataStructures5, Video 3] Introducing the Heap_Id=4WHrtiKTkA4": {
        "0": " \n",
        "3": "the heap while it's not as famous or as\n",
        "5": "versatile as its cousin the binary\n",
        "7": "search tree it is still extremely famous\n",
        "9": "and is well known particularly for the\n",
        "11": "application we're gonna do in this\n",
        "12": "lecture which is the priority queue\n",
        "15": "heaps by the way are not at all related\n",
        "16": "to something you might hear sometimes\n",
        "18": "called the heap on your computer that's\n",
        "20": "something you learn in some other course\n",
        "24": "say 61c at berkeley and it is just\n",
        "26": "unfortunate that it happens to share\n",
        "29": "names but completely unrelated so unlike\n",
        "30": "other data structures I'm actually just\n",
        "32": "gonna give the structure of this one\n",
        "34": "instead I haven't you interactively\n",
        "36": "develop it with me and I think it's just\n",
        "37": "cuz I haven't figured out a way to make\n",
        "38": "it interesting and I'm not sure that\n",
        "40": "it's possible instead I'm gonna give\n",
        "42": "away the structure and I'll let you come\n",
        "44": "up with the way to do the operations ok\n",
        "48": "so the idea with a heap is what is it\n",
        "50": "okay we're gonna define a binary min\n",
        "53": "heap as a binary tree that is complete\n",
        "56": "and it obeys the min heap property so\n",
        "58": "what are these two terms mean well the\n",
        "60": "mid heap property means that every node\n",
        "61": "is less than or equal to both of its\n",
        "64": "children that's a simple idea the other\n",
        "66": "idea is a little more complicated it's\n",
        "67": "known as completeness and we'll say that\n",
        "69": "a tree is complete if it's missing items\n",
        "72": "only at the bottom level if anything is\n",
        "74": "missing at all and all nodes are as far\n",
        "77": "left as possible now this isn't exactly\n",
        "79": "a mathematical definition but what it's\n",
        "81": "trying to do is capture the notion of\n",
        "83": "bushiness and so I'll give you a few\n",
        "84": "examples at the bottom of the page\n",
        "86": "because rather than write out some kind\n",
        "87": "of long symbolic definition of\n",
        "89": "completeness I think the idea here is\n",
        "92": "very intuitive from examples so here we\n",
        "95": "have a tree that is a binary min heap\n",
        "97": "and every node is less than or equal to\n",
        "98": "both of its children and we're not\n",
        "100": "missing any items at all it's really\n",
        "103": "bushy here's a tree that's great\n",
        "105": "wonderfully bushy nothing's missing look\n",
        "107": "right there's no gaps if you are a bird\n",
        "108": "you can safely land anywhere and feel\n",
        "112": "great and every item will note is less\n",
        "114": "than or equal to both of its children\n",
        "116": "here is a tree which is actually also a\n",
        "119": "binary many now it's not as wondrous as\n",
        "121": "this one in terms of its you know you\n",
        "123": "might think of this as not quite as\n",
        "125": "bushy but I mean you know if you had to\n",
        "127": "draw a tree there was this bushy as\n",
        "129": "possible that only had six elements this\n",
        "130": "is what it would look like in that sense\n",
        "132": "it's complete\n",
        "134": "here is a tree which is incomplete and\n",
        "136": "the reason it's incomplete is there is\n",
        "138": "something missing and it's at the bottom\n",
        "141": "level which is okay but not all nodes\n",
        "143": "are as far left as possible\n",
        "144": "so those are kind of like a hole in the\n",
        "147": "middle whereas this one its compact all\n",
        "151": "the way to the bottom to the left right\n",
        "153": "that's probably little confusing anyway\n",
        "155": "sorry people reading captions instead of\n",
        "157": "listening but all the nodes are all the\n",
        "162": "way intellect and this last one is it\n",
        "164": "lacks the min heap property here we see\n",
        "168": "that the values that if we look on this\n",
        "171": "branch on the right we see 0 is less\n",
        "174": "than 1 is less than 6 good but on the\n",
        "176": "left branch it's 0 is less than 5 is\n",
        "179": "less than 4 no that's false right it\n",
        "181": "doesn't work out and so this right here\n",
        "185": "lacks the min-hee property okay\n",
        "186": "now to make sure that all makes sense\n",
        "188": "I'd like you to think about how many of\n",
        "190": "these trees are min heaps and I'll give\n",
        "191": "you guys a little bit of a chance to\n",
        "193": "think about this and I'll be waiting\n",
        "203": "here ok so this first one total a heap\n",
        "204": "right has duplicates but every item is\n",
        "207": "less than or equal to its child and it\n",
        "209": "does also complete this tree is\n",
        "212": "incomplete while it's true it's you know\n",
        "217": "it has if you think of it as a entity\n",
        "219": "there's no like holes in the middle or\n",
        "221": "anything we noticed that there are\n",
        "222": "missing items not just at the bottom\n",
        "225": "level but also the top level so by\n",
        "228": "missing I mean that every node should\n",
        "229": "have two children unless it's at the\n",
        "232": "bottom level and here we see this one is\n",
        "235": "missing a left child I'm sorry right\n",
        "238": "child I have to do this thing by the way\n",
        "240": "when I'm doing these videos we have to\n",
        "242": "keep in mind that your left is my right\n",
        "244": "but it only applies to real life this is\n",
        "246": "left even though it's my right but on\n",
        "249": "the screen this is right and this is\n",
        "253": "left anyway not important so this last\n",
        "255": "one here this one this tree here it\n",
        "257": "lacks the min heap property the last bad\n",
        "259": "tree it lacks the min heap property and\n",
        "261": "if we look very carefully the problem\n",
        "264": "here is that 4 is less than 7 good\n",
        "266": "seven is not less than or equal to five\n",
        "268": "and this tree actually as it happens on\n",
        "270": "the far right it is actually a min-heap\n",
        "272": "right it's complete the only thing\n",
        "274": "missing is on this bottom level and all\n",
        "276": "the notes are as far left as then go and\n",
        "279": "it is also obeys the mid heap property\n",
        "283": "so why do we care about heaps what's\n",
        "285": "well heaps lend themselves very\n",
        "287": "naturally to building a priority queue\n",
        "289": "they're basically invented to do\n",
        "291": "priority queues so one question that\n",
        "293": "pops up then is how do we start\n",
        "295": "supporting all the operations so the\n",
        "296": "first question I hope is fairly easy\n",
        "298": "which is how would you support get\n",
        "300": "smallest if I gave you an entity like\n",
        "303": "this right a tree possibly unimaginably\n",
        "305": "large with quadrillions of elements and\n",
        "308": "I told you where's the smallest thing\n",
        "311": "how would you return it okay so the\n",
        "312": "answer is it's always going to be at the\n",
        "314": "root because this is the item which is\n",
        "316": "smaller than everything on the left and\n",
        "317": "the right subtree so the smallest must\n",
        "321": "always be at the top so now I turn to\n",
        "323": "you how do we support the other\n",
        "325": "operations how do we support ad and if\n",
        "328": "you're game for it remove smallest so if\n",
        "329": "we look at this heap which is what I'm\n",
        "331": "going to be using in my demo the\n",
        "333": "question is how would we insert three\n",
        "335": "into this heap right here and you could\n",
        "336": "think about it however you want right\n",
        "338": "you might even I think this is actually\n",
        "340": "a really interesting exercise and it's\n",
        "341": "worth spending five or ten minutes\n",
        "343": "actually really thinking about this and\n",
        "344": "seeing if you can come up with the right\n",
        "346": "answer and there is a right answer once\n",
        "349": "you find that you'll know and but I'll\n",
        "351": "spoil it in the next video anyway but\n",
        "353": "the run time right if you want to do it\n",
        "354": "correctly if you want it to be fast I\n",
        "357": "want it to be logarithmic so I'll see\n",
        "359": "you in the next video and good luck with\n"
    },
    "Title=[DataStructures5, Video 4] Heap Operations_Id=NNS9srVjnOw": {
        "0": " \n",
        "3": "how might this work let's check out this\n",
        "6": "animated demo so in this demo we're\n",
        "7": "gonna start with the exact heap we had\n",
        "9": "in the question we're gonna insert three\n",
        "12": "so the way to think about this and maybe\n",
        "14": "you can just watch only this part and\n",
        "16": "this may give you a clue is we want to\n",
        "18": "first and foremost ensure that our tree\n",
        "20": "is still a heap when it's done so in\n",
        "23": "other words we need it to be a first of\n",
        "25": "all complete tree and second we need it\n",
        "27": "to be a min heap so in order to ensure\n",
        "29": "ensure completeness we could just throw\n",
        "32": "our item in here and at that point if we\n",
        "33": "look at this tree if we think about its\n",
        "36": "heap properties it has the min or it has\n",
        "38": "the completeness property but it is\n",
        "40": "missing the min heap property so we need\n",
        "41": "to fix that\n",
        "42": "so if you didn't quite figure it out\n",
        "44": "before maybe pause this video and figure\n",
        "45": "out what happens next\n",
        "47": "but in this case we can look at this we\n",
        "50": "could say what's wrong well 3 is not in\n",
        "52": "the right place right 5 is greater than\n",
        "55": "3 so 3 should be up higher and so what\n",
        "57": "we can do actually is say 3 you should\n",
        "58": "move up you should climb the tree to\n",
        "60": "your rightful place this is not for you\n",
        "63": "you're you're greater than this so we\n",
        "65": "swap my some above tree sometimes where\n",
        "68": "it's swim is used and swap up with 5 or\n",
        "71": "swap to 5 so 3 is better now if we think\n",
        "73": "about this this is a little tiny heap\n",
        "76": "this is recursive data structure but the\n",
        "78": "global structure is not a heap in\n",
        "81": "particular this right here starting at 5\n",
        "84": "is not heap and so we need to move this\n",
        "87": "3 up even higher so we move 3 up and at\n",
        "89": "this point we have guaranteed that this\n",
        "90": "this point we have guaranteed that this\n",
        "92": "whole thing over here is a heap right we\n",
        "93": "don't have to think about this left side\n",
        "95": "that's an important point and the reason\n",
        "97": "we don't need to think about it is that\n",
        "100": "5 which used to be there is less than 6\n",
        "102": "and so when 3 takes its place it is also\n",
        "104": "gonna be left less than this left tree\n",
        "106": "in other words we can climb up greedily\n",
        "109": "and end up in our correct place now at\n",
        "111": "this point 3 says this is my true place\n",
        "112": "good\n",
        "114": "so suppose we add another number let's\n",
        "117": "say 5 well in this case the end of the\n",
        "118": "heap is now here right it's not down\n",
        "121": "here somewhere it's gonna be here and 5\n",
        "123": "in this case is not in its right place\n",
        "124": "so I'll climb up until we find our\n",
        "128": "correct place ok so we go up and we find\n",
        "130": "ourself home for the first time in our\n",
        "131": "finally\n",
        "134": "now let's take it about the deletion\n",
        "136": "operation and again if you didn't quite\n",
        "137": "figure it out before might be worth\n",
        "139": "pausing this video to think about how\n",
        "142": "you do this so again we're going to take\n",
        "144": "advantage of this idea that we want it\n",
        "147": "to always be complete that's against\n",
        "150": "straight it makes our lives easier so I\n",
        "152": "have to delete the minimum operation\n",
        "156": "item which is here and so if I wanted as\n",
        "158": "i'ma preserve completeness maybe the\n",
        "160": "most natural thing to do is to take the\n",
        "162": "last item and just stick it in the root\n",
        "163": "last item and just stick it in the root\n",
        "168": "right so well delete it and then 6 finds\n",
        "170": "itself transported magically into the\n",
        "171": "top level\n",
        "173": "now of course 6 is very unlikely to\n",
        "175": "actually be a great new route in fact it\n",
        "177": "might be impossible it's always\n",
        "180": "impossible not certain anyway but at\n",
        "181": "this point 6 says you know I'm\n",
        "183": "definitely not cut out for this I'm I'm\n",
        "184": "like a lowly person on the totem pole I\n",
        "185": "should not be in charge of the whole\n",
        "188": "tree and so the person below says now\n",
        "190": "get out of here so 6 will now sync and\n",
        "192": "you'll wait you'll basically sync your\n",
        "194": "way down the hierarchy yielding to the\n",
        "196": "most qualified folks and your heat here\n",
        "198": "6 is still not quite in the right place\n",
        "200": "and so finally 6 is like whew that's\n",
        "204": "good if we delete again now 1 goes away\n",
        "207": "5 is now gonna get thrown to the wolves\n",
        "209": "in charge of the whole thing in this\n",
        "211": "case we actually have a tie so if we're\n",
        "213": "gonna sink we can actually just break\n",
        "215": "the tie totally arbitrarily it doesn't\n",
        "218": "matter to let's say I go left and then 5\n",
        "219": "will basically say I'm not gonna descend\n",
        "221": "further you know I found my right place\n",
        "223": "so I happened to get thrown into the\n",
        "225": "root of the whole tree and now when I\n",
        "228": "sink I'm gonna go down until I found\n",
        "231": "like I felt my found my place ok and so\n",
        "234": "that's that so in other words we could\n",
        "236": "think about the whole heap process as\n",
        "238": "the following right so given a heap how\n",
        "240": "do we implement the priority queue get\n",
        "241": "smallest we return the item in the root\n",
        "243": "node add we can think of it like a\n",
        "245": "company right so you can imagine that X\n",
        "247": "is a new employee you'd place the new\n",
        "249": "employee in the last position and you'll\n",
        "251": "throw at them as high as possible so you\n",
        "254": "stick them down in the low level you\n",
        "256": "know factory floor job and then you see\n",
        "259": "how high they can go and remove smallest\n",
        "260": "you basically assassinate the president\n",
        "263": "of the company promote the rightmost\n",
        "264": "person in the company\n",
        "266": "to president whoever that person is so\n",
        "267": "you go to the bottom of the org chart\n",
        "269": "and you're just like okay the last\n",
        "273": "department on the list is let's say just\n",
        "275": "arbitrarily gardening\n",
        "277": "okay so among among all the landscaping\n",
        "278": "folks who's the lowest person on the\n",
        "281": "totem pole they're okay you know it's\n",
        "283": "the guy that like bites the twigs\n",
        "284": "okay well we'll take the twig biting guy\n",
        "285": "okay well we'll take the twig biting guy\n",
        "286": "put him in charge of the company and\n",
        "287": "then we'll just demote that person\n",
        "288": "then we'll just demote that person\n",
        "290": "repeatedly until you find yourself in\n",
        "292": "the appropriate location and when you do\n",
        "294": "the demotion a really important thing is\n",
        "296": "you have to basically vice-presidents\n",
        "297": "you pick the stronger of the two\n",
        "299": "vice-presidents and so there's a\n",
        "301": "remaining question which is how can we\n",
        "303": "do this all all this in java and well\n",
        "305": "we'll talk about that a little bit in in\n",
        "308": "these next little bits but before we do\n",
        "309": "that we have to think carefully about\n"
    },
    "Title=[DataStructures5, Video 5] Tree Representations_Id=yCrjolcI5Wg": {
        "0": " \n",
        "2": "in lecture we're not gonna see the\n",
        "3": "entire implementation of what a heat\n",
        "5": "might look like but let's get some\n",
        "7": "insight and in lab 9 you'll get a chance\n",
        "9": "to do it yourself so the first thing I'm\n",
        "10": "going to do is talk about general\n",
        "13": "approaches to implementing trees in Java\n",
        "15": "or in other programming languages so\n",
        "16": "proach 1a is going to be the most\n",
        "19": "natural thing imagine I have a tree\n",
        "23": "which has W as the root and XY and Z as\n",
        "25": "its children so as many ways we could\n",
        "27": "represent this tree but the most natural\n",
        "28": "approach is something like what you've\n",
        "30": "done in the past this first approach\n",
        "32": "tree 1a in this approach which is a\n",
        "35": "naked recursive tree we have a key with\n",
        "38": "a key memory box called K and then we\n",
        "39": "have three memory boxes for the left\n",
        "42": "middle and right child so in this case\n",
        "45": "if we look at this diagram we have W any\n",
        "47": "left memory lay a left memory box that\n",
        "49": "points at the left subtree a middle\n",
        "50": "memory box that points at the middle\n",
        "52": "subtree and a right memory box that\n",
        "53": "points at the right subtree and that\n",
        "56": "right there gives us a tree now you\n",
        "57": "might say Josh are we talking bout heaps\n",
        "60": "why why we have a 3-way tree all of a\n",
        "62": "sudden well the goal here is simply to\n",
        "63": "say there are many ways to represent\n",
        "64": "trees not just the way you've done in\n",
        "66": "the past now this is the approach you\n",
        "68": "used with BST Maps you've probably used\n",
        "69": "in the past but there are other ways we\n",
        "72": "can do this so let me show an alternate\n",
        "74": "approach I'll call this tree one be in\n",
        "77": "tree one be by contrast we have instead\n",
        "80": "of a link a set of links directly to our\n",
        "82": "children like hardwired links we instead\n",
        "84": "have a memory box that stores the\n",
        "86": "location of an array of links to\n",
        "89": "children so here we have tree our two\n",
        "91": "instance variables our key K and we have\n",
        "95": "tree one B which is going to be an array\n",
        "98": "sorry array of tree would be children so\n",
        "99": "this memory block could give us a link\n",
        "102": "to an array of children so this approach\n",
        "104": "well what's good about it it lets us in\n",
        "106": "theory have array of how many children\n",
        "108": "we want we could have some kind of\n",
        "110": "heterogeneous tree where some of the\n",
        "111": "nodes have like eight children at some\n",
        "113": "f2 and that will give us more\n",
        "115": "flexibility but the downside is that our\n",
        "117": "code will be a little more awkward and\n",
        "118": "our performance will be a little worse\n",
        "120": "because to get to a child we have to\n",
        "122": "follow two links instead of just one\n",
        "125": "link now you get another stranger\n",
        "128": "approach is what I'll call approach 1c\n",
        "130": "in this approach we notice that W have\n",
        "132": "tooth has two memory boxes one that\n",
        "134": "points to one of its children and the\n",
        "137": "null X its leftmost child\n",
        "139": "it has pointer off to whoever its child\n",
        "141": "is and also pointing pointer to its\n",
        "144": "sibling Y and then Y has a similar deal\n",
        "146": "where it points that its siblings E and\n",
        "148": "so we end up with this tree which I call\n",
        "150": "a sibling tree so this sibling tree\n",
        "153": "approach is another way that we could\n",
        "155": "have heterogeneous trees a little\n",
        "157": "different than what we had before and\n",
        "159": "this approach you might figure well\n",
        "160": "let's maybe think of what the instance\n",
        "163": "variables are so we have this first link\n",
        "165": "which seems to be to a child and the\n",
        "167": "other one is to a sibling and so maybe\n",
        "168": "we'll call this one we gotta think of an\n",
        "170": "instance variable name I picked a\n",
        "172": "favorite kid or you know a favorite\n",
        "174": "okay so that's what our instance\n",
        "176": "variables are claimed and this also\n",
        "178": "works so all three of these approaches\n",
        "180": "are pretty natural right they all give\n",
        "183": "us some mapping from our node to our\n",
        "185": "children we store explicit references to\n",
        "187": "who is below us now there's actually\n",
        "189": "more exotic approaches where you don't\n",
        "191": "extort the dote store explicit\n",
        "192": "references and we've actually already\n",
        "194": "seen one of those when we did the\n",
        "196": "destroyed sets data structure so in this\n",
        "199": "case we'll call this approach to an\n",
        "200": "approach to will store our keys in an\n",
        "202": "array and we'll also store an array of\n",
        "206": "parent IDs so for example here again we\n",
        "208": "have the exact same tree W has three\n",
        "211": "x y&amp;z so we have a keys array which\n",
        "213": "consists of W the next then Y then C and\n",
        "216": "we have the parents array where the 0th\n",
        "219": "entry of that array is well it says what\n",
        "221": "the parent of 0 is so 0 is paired to 0\n",
        "223": "meaning W is the route and 1 2 and 3\n",
        "225": "also have parent 0 meaning they're all\n",
        "228": "children of W now that's a pretty boring\n",
        "229": "tree so I've got a more complicated one\n",
        "231": "at the bottom in this case I've got a\n",
        "234": "complete tree that looks like ke V beak\n",
        "237": "gpy ADF J and so forth\n",
        "242": "and so my keys array is ke V BGP Y and\n",
        "245": "my parents array is well in this case we\n",
        "247": "say ok well as threes parent threes\n",
        "250": "parent is 1 and one's parent is 0 12\n",
        "253": "parent is 5 5 s parent is tutus parent\n",
        "256": "is Sara so 12 parent is 5 5 s parent is\n",
        "258": "2 two's parent is 0 and so this is one\n",
        "261": "way to represent this tree now this is\n",
        "263": "not the only way I mean we could\n",
        "264": "scramble these in some order and change\n",
        "268": "all the parents to match but if we store\n",
        "271": "keys in the order shown and the tree is\n",
        "273": "complete it turns out that we'll always\n",
        "275": "have this property that the parents are\n",
        "277": "rail is extremely boring it will always\n",
        "282": "go 0 0 1 1 two 2 three 3 four 4 five 5\n",
        "287": "six so in approach 3 which will be our\n",
        "288": "strangest approach and maybe if you're\n",
        "290": "on following pause the video make sure\n",
        "291": "this really makes sense because that's\n",
        "293": "about to take a strange leak okay this\n",
        "295": "is just like what we did with disjoint\n",
        "297": "sets and so approach 3 is to recognize\n",
        "299": "that if we're storing a complete tree\n",
        "302": "and we store the keys in the order just\n",
        "304": "reading it top to bottom which is also\n",
        "307": "known as the level order by the way in\n",
        "308": "that case we can actually discard the\n",
        "310": "parents array completely and in this\n",
        "313": "case the keys to Ray is exactly as\n",
        "315": "before and this will only work for\n",
        "317": "complete trees right because the whole\n",
        "319": "the whole idea here is we assume that\n",
        "322": "the tree is complete then the parents\n",
        "324": "array is actually redundant and so we\n",
        "326": "could ignore it okay so tree 3 is a\n",
        "328": "nicer approach where our tree is\n",
        "331": "represented as an array okay so it seems\n",
        "332": "a little crazy right that you can take a\n",
        "334": "structure which is not at all\n",
        "336": "one-dimensional right a tree is - it's a\n",
        "340": "you have this whole hierarchical\n",
        "342": "structure but instead we reduced into\n",
        "345": "this flat line right it's just it's kind\n",
        "347": "of amazing I think it's very clever\n",
        "349": "so to make sure that that'll make sense\n",
        "351": "I have a little puzzle for you here I\n",
        "354": "want you to write the parent K method\n",
        "357": "for this code now what is this guy this\n",
        "358": "could actually shows what swim would\n",
        "360": "look like in the implementation of a\n",
        "364": "heap so if I want to swim in my tree the\n",
        "366": "cave item so let's say I want to swim\n",
        "369": "this p here in location 5 then I'll say\n",
        "372": "ok well if the key element of the keys\n",
        "374": "array in the parent position so the\n",
        "378": "parent of K parent of 5 is 2 then what\n",
        "380": "we'll do is we'll say this number is if\n",
        "383": "V is greater than keys 5 then we would\n",
        "386": "swap 2 and 5 and then we would call swim\n",
        "389": "on this parent so your job now is to try\n",
        "391": "and write this parent method that's\n",
        "393": "gonna be really short it's gonna take as\n",
        "395": "input an integer and it's going to\n",
        "397": "return an integer corresponding to the\n",
        "399": "parent so for 5 it should return 2 for\n",
        "401": "13 it should return six and so forth so\n",
        "403": "give you guys a short time to think\n",
        "406": "about that and I will spoil it in the\n",
        "414": "next little bit okay so what I came up\n",
        "418": "with and what's the answer is if we\n",
        "421": "subtract one and divide by two this is\n",
        "423": "the easiest way to do it now you could\n",
        "424": "do it with some kind of if statements\n",
        "426": "but this takes advantage of the way that\n",
        "430": "Java rounds down integer division so for\n",
        "433": "example if I do 5 minus 1 that's 4\n",
        "436": "divided by 2 I get 2 and if I have 6\n",
        "440": "minus 1 I get 5 and 5 divided by 2 is\n",
        "443": "2.5 and that gets rounded down to 2\n",
        "446": "likewise anywhere else the key insight\n",
        "448": "is to realize that for every node there\n",
        "451": "is exactly two children so for 4 it's\n",
        "452": "nine and ten for two it's five and six\n",
        "455": "for six it's 13 and 14 and so parent\n",
        "458": "should always work properly so we check\n",
        "463": "for 1 so 1 minus 1 is 0 divided by 2 and\n",
        "465": "that gives me 0 there's actually one\n",
        "467": "tiny bug here which said if we take\n",
        "468": "actually let's check and see if it's a\n",
        "471": "bug if we take 0 we subtract 1 we get\n",
        "476": "minus 1/2 that's minus 0.5 I actually\n",
        "478": "don't know if it works for 0 but I'll\n",
        "479": "leave it as an exercise to the reader\n",
        "480": "just kind of a funny thing I thought\n",
        "483": "about ok because ideally the parent of 0\n",
        "487": "should also be 0 and so mmm my knowledge\n",
        "489": "of Java is lacking to know we can look\n",
        "493": "it up later I won't do it now so two\n",
        "496": "representations right we have 1a 1b and\n",
        "499": "1c those are all pretty standard 2 was a\n",
        "501": "little stranger but we saw with disjoint\n",
        "503": "sets and 3 takes advantage that of the\n",
        "505": "fact that our tree is actually complete\n",
        "507": "and this is typically what's done in\n",
        "510": "keep implementations because it's going\n",
        "512": "to be very fast we don't have to follow\n",
        "515": "any links and to the code actually ends\n",
        "516": "up being quite simple a little strange\n"
    },
    "Title=[DataStructures5, Video 6] PQ Implementation Considerations_Id=nT5xA29-o2w": {
        "0": " \n",
        "2": "now as it happens the implementation\n",
        "3": "used in our book is actually none of\n",
        "6": "these we use a very similar approach to\n",
        "10": "three called hot 3b here now when we\n",
        "12": "leave one empty spot at the front okay\n",
        "16": "so the idea behind this is it just makes\n",
        "17": "the computation of the parents and the\n",
        "20": "children a little nicer and use a little\n",
        "22": "extra space so rather than the parent\n",
        "24": "function looking like this K minus 1\n",
        "25": "divided by 2 in this approach if you\n",
        "27": "leave an empty space not parent is just\n",
        "29": "K over 2 that's literally why we do it\n",
        "32": "yeah seem a little silly so the authors\n",
        "34": "of the textbook chose to do but yeah you\n",
        "35": "know let's make the math nicer I'm not\n",
        "38": "gonna complain so in this case our route\n",
        "40": "is now in position 1 the children are in\n",
        "42": "2 and 3 and so forth so if we think\n",
        "44": "about parent 6 divide away - and it's 3\n",
        "46": "7 divided by 2\n",
        "48": "well have 3.5 rounded ooh down that's 3\n",
        "50": "also ok good seems to work and left and\n",
        "52": "right child will be similar and so in\n",
        "53": "next week's lap you'll actually\n",
        "55": "implement one of these and you should\n",
        "56": "use this approach in order to understand\n",
        "59": "the textbook approach man just kind of a\n",
        "60": "nice trick ok it's kind of like a\n",
        "62": "sentinel node but in this case it makes\n",
        "63": "them actually it is just like a central\n",
        "66": "node it makes the code nicer it cost you\n",
        "69": "just a little bit of space ok our\n",
        "74": "message okay so let's now summarize what\n",
        "78": "we know what we have here is all of the\n",
        "79": "different implementations that we knew\n",
        "81": "about before we could have imagined\n",
        "83": "here's any one heap so if we compare it\n",
        "84": "to the others we could see that has\n",
        "87": "great performance but unlike the bushy\n",
        "89": "binary search tree items that have the\n",
        "91": "same priority are hard to handle no\n",
        "92": "priority\n",
        "94": "what ok well this brings us to an\n",
        "95": "important question why is this thing\n",
        "97": "called a priority queue well we could\n",
        "98": "think of its position in the tree as its\n",
        "101": "priority the thing that's at the root is\n",
        "103": "the highest priority item it's the thing\n",
        "104": "that is going to come out of the\n",
        "106": "priority queue as soon as possible so if\n",
        "107": "we think about this sock it's got a\n",
        "109": "bunch of stuff in it well nothing right\n",
        "110": "now but I might throw a bunch of stuff\n",
        "112": "in it there's something with the highest\n",
        "113": "priority it's gonna come out of there as\n",
        "115": "soon as possible so it's like a queue\n",
        "117": "where some people are more important\n",
        "119": "than others so this is not a very\n",
        "123": "egalitarian data structure so if you\n",
        "126": "have multiple items of the same priority\n",
        "127": "let's say you're monitoring the text\n",
        "129": "messages you're citizenry and two people\n",
        "131": "write to two people right equally\n",
        "133": "seditious posts things\n",
        "134": "we don't approve of that our bushy\n",
        "136": "binary search tree approach will get\n",
        "138": "confused however a heap very naturally\n",
        "141": "handles items with the same priority for\n",
        "145": "example an array of all aims now the now\n",
        "147": "I'll note actually that these approaches\n",
        "149": "here these runtimes are actually I'll\n",
        "153": "log in at least cheese add this log in\n",
        "155": "here is amortized because sometimes\n",
        "158": "we'll have resizes so if we added a\n",
        "160": "there'll be the occasional heap\n",
        "162": "operation where we need to resize our\n",
        "164": "backing array and that's no big deal\n",
        "167": "the binary search tree as it happens can\n",
        "168": "have a constant get smallest you can\n",
        "170": "modify this if you keep a pointer to the\n",
        "171": "smallest so you can modify it if you'd\n",
        "173": "like but you'd only get much out of it\n",
        "177": "I'll mention also that array based heaps\n",
        "179": "they take a lot less memory only about a\n",
        "181": "third of the memory as if we tried to\n",
        "183": "represent our heap with approach 1a but\n",
        "184": "you could do any of these like any of\n",
        "186": "these approaches here will work but this\n",
        "187": "is the one that we've chosen to use\n",
        "190": "because it uses less memory it's faster\n",
        "192": "and ultimately has this really simple\n",
        "196": "code okay and just as a follow on these\n",
        "197": "heaps here of course they handle\n",
        "199": "priorities naturally as I said out loud\n",
        "200": "but I guess I'll highlight this bullet\n",
        "202": "point same deal this is just saying the\n",
        "203": "heat needs to have all bit it can have\n",
        "206": "all eights and that's fine so just a\n",
        "208": "couple last implementation questions\n",
        "209": "before we move on\n",
        "210": "how does a priority queue know how to\n",
        "212": "determine which item is actually\n",
        "215": "literature like in Java so we look at\n",
        "217": "the code here what can we eat what would\n",
        "218": "we need to change here let's imagine\n",
        "220": "that we wanted to have some default\n",
        "222": "comparison what we could do is actually\n",
        "223": "go in here and say we don't just take\n",
        "226": "any item but we'll only take items which\n",
        "228": "extend comparable item basically set\n",
        "230": "here at type bound and so that right\n",
        "232": "there will now make it so the bin we\n",
        "234": "could only use our priority queue with\n",
        "235": "comparable items and there'll be a\n",
        "238": "default behavior as we did earlier and\n",
        "240": "you could do that or not but as we did\n",
        "242": "earlier we also showed how we could have\n",
        "243": "different orderings and we could do that\n",
        "246": "by having a constructor in our priority\n",
        "248": "queue implementations so for example\n",
        "251": "heap min V Q where the constructor\n",
        "254": "actually takes a comparator of items in\n",
        "256": "that case it will use the comparator to\n",
        "258": "decide whether to add get smallest or\n",
        "261": "move smallest so that's it for with the\n",
        "262": "core of the priority queue from there\n",
        "264": "you'll implement it on your homework and\n",
        "265": "I think this is a really nice data\n",
        "266": "structure\n",
        "268": "with a really slick implementation I\n",
        "270": "love heaps they're really cool but\n",
        "271": "they're just not quite as versatile as\n",
        "273": "binary search trees and so and nor our\n",
        "276": "binary sorry nor our priority queues as\n",
        "277": "versatile as maps and so they don't\n",
        "279": "quite get that level of Fame but they're\n",
        "281": "still very cool and can be very useful\n"
    },
    "Title=[DataStructures5, Video 7] Data Structures Summary_Id=i-OuY5o_G8g": {
        "0": " \n",
        "2": "to end this lecture we're actually going\n",
        "4": "to summarize all of the data structures\n",
        "6": "we've implemented up to this point so\n",
        "8": "all of them basically do the same thing\n",
        "10": "which is solve something I call the\n",
        "13": "search problem basically given a stream\n",
        "15": "of data I want to get the information I\n",
        "18": "want from that stream so for example a\n",
        "21": "website user posts something to a\n",
        "24": "personal page and we want to serve that\n",
        "26": "content whatever it may be only to their\n",
        "29": "friends this is a very old social\n",
        "30": "network from back in the day and you\n",
        "32": "want to make sure that only the people\n",
        "33": "you want to be able to see things can\n",
        "35": "say that see the things you want them\n",
        "37": "sleep another one given logs for\n",
        "39": "thousands of weather stations out there\n",
        "41": "display a nice weather map for the\n",
        "42": "specified date and time right I want to\n",
        "44": "show this nice heat map showing the\n",
        "47": "current temperature at some place so all\n",
        "48": "these things are the search problem and\n",
        "50": "the data structures we've been building\n",
        "51": "so far have been to solve the search\n",
        "53": "problem for various domains of interest\n",
        "57": "so for example we had the list the map\n",
        "59": "the set the priority queue and the\n",
        "62": "disjoint sets operation and all of these\n",
        "63": "in some sense can be interpreted as part\n",
        "65": "of the search problem so in this case\n",
        "67": "the list operation are say the list data\n",
        "70": "structure abstract data type it has the\n",
        "72": "add and insert storage operations these\n",
        "73": "are the key things the way you put stuff\n",
        "76": "in maps you put a key value pair sets\n",
        "78": "you add priority queues you add in\n",
        "81": "destroyed sets you connect things up how\n",
        "82": "do you retrieve information back from\n",
        "84": "them with lists you get something from\n",
        "87": "an index for maps you get a key what\n",
        "88": "sets you ask if it's contained\n",
        "90": "if priority queue asks for the smallest\n",
        "92": "thing and with disjoint sets you say are\n",
        "95": "two things connected and the information\n",
        "97": "you use to actually retrieve things and\n",
        "98": "is different in each so we have the\n",
        "101": "index the identity of a key the order of\n",
        "103": "the key is what we do with priority\n",
        "105": "queues with disjoint sets or doing two\n",
        "108": "int values so all of these different\n",
        "110": "data structures all these different\n",
        "114": "abstract data types they solve some\n",
        "116": "problem if you need to do this right I\n",
        "118": "need to get back items by their key\n",
        "121": "identity the map is your tool of\n",
        "124": "interest so let's think about how we can\n",
        "125": "actually implement each of these we've\n",
        "127": "seen a bunch of these I have my answers\n",
        "128": "here but I'm going to make up a new\n",
        "130": "slide here so what are all the ways that\n",
        "131": "we were able to implement\n",
        "134": "and maps I'll start listing some so one\n",
        "136": "Bay is to do a binary search tree\n",
        "139": "hotspot VST and a binary search tree\n",
        "142": "will work but I'm gonna say that as\n",
        "143": "performance is not particularly good\n",
        "146": "right I'm gonna do it market and red if\n",
        "148": "we have a balanced binary search tree\n",
        "151": "maybe we have a do two three tree okay\n",
        "152": "so I'm just doing this totally off the\n",
        "154": "dome it probably won't match the slide\n",
        "157": "below two three trees by contrast they\n",
        "158": "actually have great performance I'll\n",
        "161": "mark it in green we could also do LLR\n",
        "169": "B's we could do let's say hash tables\n",
        "173": "and yeah those are all some different\n",
        "176": "ways we could do it so these all here\n",
        "177": "I'll lump together right because they're\n",
        "178": "all part of the same family the same\n",
        "181": "core idea so I'll do this little rounded\n",
        "184": "square here we go send it to the back\n",
        "187": "make it light that's a little dark let's\n",
        "189": "maybe make it a little nicer so each of\n",
        "194": "these that's too light I don't know\n",
        "200": "maybe we're gonna poor we were okay and\n",
        "201": "so in this case each of these could be\n",
        "204": "used to represent a set now turns out\n",
        "205": "actually I would draw a little line here\n",
        "208": "to represent this fact that a set and a\n",
        "211": "map are deeply intertwined data\n",
        "213": "structures in fact both of them use key\n",
        "215": "identity and the only real meaningful\n",
        "217": "difference between the two is that a map\n",
        "219": "instead of giving you a true false value\n",
        "220": "it gives you something else right so if\n",
        "222": "you give it horse maybe it gives you a\n",
        "224": "picture of a horse whereas a set would\n",
        "227": "just say yes horses included okay so\n",
        "228": "I'll add all these lines to say these\n",
        "229": "are different ways of doing things\n",
        "234": "okay so sets Maps these are different\n",
        "235": "ways of doing it they're more than this\n",
        "237": "right I mean there's skip lists and\n",
        "239": "splay trees and AVL trees and all kinds\n",
        "240": "of other things you could try and\n",
        "242": "imagine and hash tables by the way there\n",
        "243": "are different ways of doing it in fact\n",
        "245": "exile all numerate them separately so we\n",
        "249": "have separate chaining hash table and\n",
        "250": "then there's also the one we didn't\n",
        "252": "mention in lecture except an extra\n",
        "253": "slides that which would be linear\n",
        "256": "probing oh my gosh I can't believe I did\n",
        "258": "I used to always get tripped up on this\n",
        "260": "word by the way I don't know that's a\n",
        "262": "little Barisan but whatever you don't\n",
        "264": "always have to spell correctly not in\n",
        "265": "the modern Europe\n",
        "268": "Peter's with lower red lines it took me\n",
        "270": "forever by the way to get this one right\n",
        "273": "my god I always did that for ages like I\n",
        "275": "eventually purge myself of writing\n",
        "278": "definitely I don't know this anyway all\n",
        "281": "right how about stacks right so the\n",
        "283": "stack is an abstract data structure or\n",
        "284": "stack is an abstract data structure or\n",
        "286": "abstract data type that we've used in\n",
        "287": "the past and there's a bunch of\n",
        "288": "different ways we could implement that\n",
        "293": "we could do for example a linked list we\n",
        "296": "could do I don't have you here and I'm\n",
        "298": "not gonna go looking for you again this\n",
        "300": "time to ask you what you might do well\n",
        "303": "we have linked lists and we have let's\n",
        "306": "say ArrayList I will call it resizing\n",
        "308": "array these are two different ideas here\n",
        "312": "okay and in some ways these are like a\n",
        "314": "linked list and these are like a\n",
        "315": "resizing array\n",
        "318": "okay so there's some parallels here I'll\n",
        "321": "draw a little box here okay fix the\n",
        "325": "color yeah send it to the back all right\n",
        "329": "so I have a linked list resizing array\n",
        "331": "these were a part of stack I don't think\n",
        "332": "they really they don't deserve a box\n",
        "335": "around them right so you might try to do\n",
        "336": "the same exercise for the rest without\n",
        "340": "me telling you okay well a list turns\n",
        "345": "out to be pretty similar to a stack this\n",
        "349": "okay today we just did the priority\n",
        "353": "queue so the priority queue we think\n",
        "354": "what are the different ways of doing\n",
        "356": "this okay well in this lecture we talked\n",
        "359": "about how we could do in order to write\n",
        "363": "and we said that wasn't very good we\n",
        "368": "talked about using a BST which I mean\n",
        "371": "it's kind of good it's arguable actually\n",
        "376": "the same balanced I'll do LLR V it's\n",
        "378": "left-leaning red-black tree so this kind\n",
        "380": "of works and it has good performance I'm\n",
        "381": "gonna call it yellow\n",
        "383": "during this one so tricky because it\n",
        "385": "takes some modification but it actually\n",
        "387": "ultimately has good performance a hash\n",
        "391": "table of some kind not very good we'll\n",
        "393": "just be slow and what we did in this\n",
        "395": "lecture is he introduced another\n",
        "396": "implementation of this abstract data\n",
        "397": "type\n",
        "401": "which was the heat so I won't do all the\n",
        "403": "disjoint set ones because probably\n",
        "406": "you're getting a little fatigued from\n",
        "408": "watching me draw diagrams so I'll just\n",
        "409": "switch to the one I did last time well\n",
        "413": "compare and see how I did okay so in\n",
        "416": "this case I used blue and red okay and\n",
        "418": "this is basically a while so you note\n",
        "420": "down here this is from a previous\n",
        "423": "semesters lectures where this is what\n",
        "424": "the students came up with I asked in\n",
        "426": "class we threw them all in there and\n",
        "430": "this is the creation I had there okay so\n",
        "433": "a pretty similar idea although in that\n",
        "435": "case I called this blue and study yellow\n",
        "436": "and so the different taxonomy so you\n",
        "438": "might have but I just wanted to draw\n",
        "439": "this picture right I mean the exact\n",
        "440": "picture I don't need to memorize this\n",
        "442": "picture I don't want you to copy it down\n",
        "443": "and your cheat sheet well I guess you\n",
        "445": "can but it really should be something\n",
        "447": "you construct right so there's different\n",
        "449": "ways you might texana mize these these\n",
        "450": "are two different taxonomy x' this is\n",
        "452": "from students in the past this is the\n",
        "454": "one I just did and I think it's\n",
        "456": "important and interesting to keep this\n",
        "461": "thing in line okay so that brings us\n",
        "463": "then to an interesting notion I want to\n",
        "465": "bring up which is the distinction but\n",
        "467": "stream in abstract data type and an\n",
        "470": "implementation so sometimes abstraction\n",
        "473": "actually happens in layers so a priority\n",
        "475": "queue as you noticed I said one of the\n",
        "477": "ways we could do this is a heap right\n",
        "480": "but what is a heap well heap is a heap\n",
        "481": "order tree and what's a tree was\n",
        "482": "actually five different ways of doing\n",
        "485": "that we had approach 1a 1b 1c 2 3\n",
        "486": "actually you know I left off an\n",
        "487": "important one which is the one actually\n",
        "489": "we did in lecture so we'll put that in\n",
        "493": "so this approach 3b and so all those\n",
        "497": "will work this one has a same concise\n",
        "499": "line good so all those are work and they\n",
        "501": "have the different trade-offs but they\n",
        "503": "should all be pretty fast how about an\n",
        "504": "external chaining or separate chaining\n",
        "507": "hash table well it's an array of buckets\n",
        "509": "but what's the bucket well it could be\n",
        "510": "an ArrayList it could be a resizing\n",
        "511": "array it could be a linked list it could\n",
        "512": "actually be a binary search tree\n",
        "514": "you could build a hash table where each\n",
        "516": "bucket as a binary search tree though\n",
        "518": "all of these are also fast because one\n",
        "519": "of the rules with buckets is we always\n",
        "520": "of the rules with buckets is we always\n",
        "522": "resize so everything is a constant size\n",
        "523": "that is each of these should all be\n",
        "525": "below some some Khan\n",
        "528": "right so it doesn't matter how whether\n",
        "530": "it's a list or a tree it's still gonna\n",
        "531": "be a constant size that they'll all be\n",
        "533": "fast okay so that's actually a really\n",
        "535": "important point and in theory you could\n",
        "536": "build something like this say for\n",
        "539": "project two you could imagine you're\n",
        "541": "building a database you could have a\n",
        "542": "database which is a table which has\n",
        "544": "addenda and it could just be this\n",
        "546": "gigantic hierarchy of ideas and this is\n",
        "549": "I think an important notion and again\n",
        "551": "one of the main goals of computer\n",
        "552": "science right trying to learn it is\n",
        "554": "learning how to manage complexity and I\n",
        "556": "think this is these diagrams give you a\n",
        "558": "sense of how we can taxonomy and our\n",
        "560": "tools for managing complexity and what's\n",
        "562": "important to note that often the things\n",
        "565": "happen in layers now there are also some\n",
        "568": "specialized searching data structures so\n",
        "570": "occasionally we won't just have a list\n",
        "572": "full so I've say a stack or a queue or a\n",
        "574": "double-ended queue and each of these are\n",
        "576": "basically you know a stack is just a\n",
        "578": "list where you can only take things off\n",
        "580": "the top and a queue is something where\n",
        "581": "you enter at the top and you enter at\n",
        "583": "the bottom or whatever else and a\n",
        "584": "double-ended queue you could do either\n",
        "586": "in but you can't do the middle and so\n",
        "587": "those are all specialized versions of\n",
        "590": "lists and it's just nice to note that\n",
        "592": "sometimes that's the case same deal will\n",
        "593": "set some Maps\n",
        "595": "you could have sorted sets or sort of\n",
        "597": "maps in Java there are actually\n",
        "599": "interfaces or maybe they're abstract\n",
        "600": "classes I don't actually remember called\n",
        "603": "sorted set and sorted map and I'll\n",
        "604": "mention that with priority queue you\n",
        "606": "could have a minimum oriented and a\n",
        "608": "maximum oriented priority queue but\n",
        "609": "typically we don't actually consider\n",
        "611": "those distinctions since we can always\n",
        "613": "just provide the opposite comparator so\n",
        "616": "if we want to find the most harmonious\n",
        "618": "thing someone wrote we could just give a\n",
        "620": "comparator which does the opposite of\n",
        "626": "the unharmonious comparator okay so this\n",
        "628": "summarizes this isn't the very last data\n",
        "630": "structure we're gonna do but I do want\n",
        "632": "to at this point now that we've covered\n",
        "634": "all of the really core data structures\n",
        "637": "it's good to reflect here and say that a\n",
        "639": "data structure this course simply put is\n",
        "641": "just a particular way of organizing data\n",
        "644": "and in so far what we've done is we've\n",
        "645": "considered a lot of the most fundamental\n",
        "646": "abstract data types\n",
        "649": "right we've talked about maps and sess\n",
        "652": "and priority queues we've talked about\n",
        "655": "well I guess this joint sets which is\n",
        "657": "not quite as fundamental and stacks\n",
        "658": "which are really just a kind of list but\n",
        "659": "these for rate\n",
        "662": "year especially these three set map and\n",
        "665": "list those are the the head honchos are\n",
        "667": "the the most important of our abstract\n",
        "669": "data types out there and we've also seen\n",
        "671": "the common implementations right we've\n",
        "673": "seen all of these and we've seen their\n",
        "675": "trade offs we've drawn these diagrams\n",
        "676": "we've decided these are red this is\n",
        "679": "yellow this is green and a lot of what\n",
        "681": "you'll see moving forwards as someone\n",
        "683": "trying to manage complexity and write\n",
        "685": "programs that are fast is knowing first\n",
        "686": "of all what the abstract data types are\n",
        "687": "of all what the abstract data types are\n",
        "689": "that will make your life easy and second\n",
        "690": "of all which implementations are\n",
        "691": "actually going to make your\n",
        "693": "implementation faster now in practice\n",
        "696": "often any of the good implementations is\n",
        "698": "good enough though occasionally maybe\n",
        "700": "you'll find you want a tree map versus a\n",
        "702": "hash map but to be quite honest that\n",
        "704": "doesn't happen super often that's not\n",
        "705": "usually a big piece of your choice but\n",
        "707": "often when you go to data structures or\n",
        "709": "you're really trying to push performance\n",
        "711": "okay when you go to data structures I\n",
        "713": "meant to say when you go to interviews\n",
        "715": "or whenever you're really trying to\n",
        "717": "squeeze the last mile of performance out\n",
        "718": "that's where the implementation\n",
        "720": "differences come up and so we'll do two\n",
        "722": "more data structures in this class\n",
        "724": "there'll be the quadtree and then\n",
        "726": "there'll be the graph and that will be\n",
        "729": "all we got for this class now if you\n",
        "730": "wouldn't even go to Wikipedia by the way\n",
        "732": "and you could see that we've done a lot\n",
        "733": "of these things so we haven't done all\n",
        "735": "of the abstract data types I mean you'll\n",
        "737": "notice that there's something here known\n",
        "741": "as a multi map there also seems to be a\n",
        "743": "that's pretty much the only one that's\n",
        "744": "lists we haven't done right so we got\n",
        "747": "multi map and multi set but we've done\n",
        "751": "all the rest an associative array mm I'm\n",
        "752": "not sure how that's different than a map\n",
        "753": "but I guess we'll look on Wikipedia in a\n",
        "756": "bit but these are our abstract data\n",
        "758": "types these are different ways of\n",
        "761": "structuring arrays or array based data\n",
        "763": "structures we have our trees and so\n",
        "764": "forth and so we've covered a lot of\n",
        "766": "what's in this diagram and we'll do a\n",
        "768": "little bit more in the future okay\n",
        "770": "that's it for this lecture and I'll see\n"
    },
    "Title=[Graphs1, Video 2] more intro to graphs_Id=1-y_nzbhdZ0": {
        "0": " \n",
        "2": "graphs are a fascinating data structure\n",
        "4": "because not only are they practically\n",
        "6": "incredibly useful but they also unlock a\n",
        "8": "really large number of very difficult\n",
        "11": "and interesting math problems then\n",
        "12": "what's interesting about these problems\n",
        "14": "is that not only are they difficult but\n",
        "16": "they're easy to state so there's so many\n",
        "17": "neat problems you can talk about with\n",
        "20": "graphs where you can you can explain it\n",
        "21": "to somebody maybe in a minute as young\n",
        "24": "as like eight and the solution is\n",
        "25": "actually something maybe they can\n",
        "27": "understand but coming up with the answer\n",
        "29": "is often very tricky so some examples of\n",
        "31": "those problems well given a graph is\n",
        "34": "there a path between vertices SMT that's\n",
        "37": "a pretty simple one how about what is\n",
        "39": "the shortest path between vertices s and\n",
        "42": "T what about a cycle how do we tell if a\n",
        "44": "graph contains cycles but just give you\n",
        "45": "the graph object and we'll talk about\n",
        "47": "representation soon how would you know\n",
        "49": "is there a cycle or not now how about an\n",
        "51": "Euler tour this is a cycle that uses\n",
        "55": "every edge exactly one time how about a\n",
        "57": "Hamilton tour which is similar which is\n",
        "61": "not related to the hit musical haha okay\n",
        "62": "I couldn't resist that Jo it's just bad\n",
        "64": "leave it you could pretend I didn't say\n",
        "67": "it yeah so Hamilton tours is there a\n",
        "69": "cycle that uses every vertex exactly\n",
        "71": "once it's these two questions actually\n",
        "73": "they seem very similar but one of them\n",
        "75": "is insanely hard in the sense that\n",
        "77": "writing an algorithm that's efficient is\n",
        "78": "near impossible the other one turns out\n",
        "81": "to be fairly easy connectivity is the\n",
        "83": "graph fully connected that is is there a\n",
        "85": "path from any vertex to any other vertex\n",
        "89": "and for you I mean being a primate you\n",
        "90": "look at a graph and you kind of see you\n",
        "92": "could tell whether or not but for a\n",
        "93": "computer of course it's not so obvious\n",
        "95": "because there isn't that immediate you\n",
        "98": "know visual cortex thing going on so\n",
        "99": "with the connectivity this actually ends\n",
        "100": "up being a you know slightly more\n",
        "103": "challenging no not a very hard one by\n",
        "105": "connectivity is there some vertex that\n",
        "106": "if you destroy it\n",
        "109": "the graph is no longer connected so for\n",
        "111": "example can I find a subway station that\n",
        "113": "if I eliminate it there's two distinct\n",
        "115": "subways some central hub for example\n",
        "118": "another planarity this one's actually a\n",
        "120": "very interesting one mathematically so\n",
        "123": "it's can you take the graph and draw it\n",
        "125": "on a piece of paper such that no edges\n",
        "127": "are crossing so there are some graphs\n",
        "129": "such that if you lay out the vertices\n",
        "130": "just right there's no edges that cross\n",
        "132": "physically but there's some graphs that\n",
        "133": "actually physically come out\n",
        "136": "those are non planar graphs and this is\n",
        "138": "actually a pretty interesting problem\n",
        "141": "isomorphism this is perhaps the most\n",
        "143": "fascinating mathematically which is\n",
        "145": "given to graph so they actually the same\n",
        "146": "graph like maybe you just took the\n",
        "148": "vertices and move them around and this\n",
        "150": "has been a long-standing dispute in\n",
        "152": "mathematics whether or not an algorithm\n",
        "155": "for this has a certain runtime the\n",
        "157": "optimal algorithm and I'm not gonna talk\n",
        "159": "about it much on this level and so\n",
        "160": "what's interesting about graphs again is\n",
        "162": "that these problems are often easy to\n",
        "164": "state but they can be super hard and in\n",
        "166": "fact it's not obvious whether or not\n",
        "167": "they're easy they're hard they're\n",
        "170": "actually computationally intractable so\n",
        "172": "just look at a glance these different\n",
        "174": "problems they're all part of a different\n",
        "176": "complexity classes the word some are\n",
        "178": "easy some are hard some are intractable\n",
        "180": "and and sometimes it's hard to tell\n",
        "182": "that's a nice neat feature of graphs\n",
        "183": "right if you're somebody's a little\n",
        "185": "mathematically inclined there's so much\n",
        "187": "richness here and if you get involved\n",
        "189": "for example in CS theory one of the many\n",
        "191": "things that this class likes to give\n",
        "193": "hints of what CS is like the graphs are\n",
        "196": "one of the richest areas for theory so\n",
        "198": "some examples of graphs okay we saw\n",
        "201": "before the Paris metro and so with our\n",
        "202": "eyes we can already see a number of\n",
        "204": "traits the graphs\n",
        "205": "undirected and that's easy you can tell\n",
        "207": "instantly there's no algorithm for that\n",
        "209": "now you can tell it's connected and in\n",
        "210": "now you can tell it's connected and in\n",
        "211": "that case you would actually need to do\n",
        "213": "some more sophisticated work to see if\n",
        "214": "they're all connected\n",
        "216": "so as an algorithmic problem this is\n",
        "219": "non-trivial but pretty easy it is cyclic\n",
        "222": "right so if we look there are cycles\n",
        "226": "here it's not a tree we can go like for\n",
        "229": "example we can go here right that's a\n",
        "232": "cycle and it is vertex labeled in this\n",
        "234": "sense each vertex has a color so we can\n",
        "236": "think of that as a label and so telling\n",
        "237": "think of that as a label and so telling\n",
        "238": "this connected or cyclic is actually a\n",
        "240": "computational problem the both of those\n",
        "241": "are actually pretty easy\n",
        "244": "how about Bart so the Bay Area Rapid\n",
        "247": "Transit System in the San Francisco Bay\n",
        "252": "Area question for you is it a tree in\n",
        "256": "other words are there cycles okay\n",
        "257": "well well notice there is actually one\n",
        "260": "little cycle here though it's kind of\n",
        "262": "tricky because these edges don't exist\n",
        "264": "at the same time of day so I guess I\n",
        "265": "would call it a cycle but maybe you\n",
        "267": "don't because you know these two edges\n",
        "269": "they never they never exist at the same\n",
        "272": "time at least under these rules another\n",
        "274": "example is this is a very old photo here\n",
        "276": "now for our site figure from December\n",
        "279": "2010 but in this case someone created a\n",
        "281": "neat little graph to show connections\n",
        "284": "between cities so in other words if I\n",
        "285": "between cities so in other words if I\n",
        "287": "see an edge from presumably this is\n",
        "291": "Honolulu to Seattle and so forth that is\n",
        "293": "the weight of the edge that is the\n",
        "295": "intensity of each edge is the number of\n",
        "298": "friends between cities and the in this\n",
        "301": "figure then a bright edge indicates a\n",
        "303": "larger number of friends between those\n",
        "304": "places it's also kind of interesting\n",
        "306": "because you can see that there some\n",
        "308": "places in the world that have lots of\n",
        "310": "people that at least as of 2010 did not\n",
        "313": "have many people on Facebook so it's\n",
        "315": "kind of cute you can see this as a neat\n",
        "319": "visualization another cool example is\n",
        "322": "this graph of scientific journals so in\n",
        "324": "this case each journal right so whenever\n",
        "327": "researchers published work they spread\n",
        "329": "it to the world by writing it up in a\n",
        "330": "document sending it out for review by\n",
        "332": "other experts in the field the other\n",
        "334": "experts decide ok that seems aboveboard\n",
        "336": "and then it goes into a journal which\n",
        "338": "sometimes they're open access sometimes\n",
        "340": "you have to pay to access them and so\n",
        "342": "this is an analysis of all the\n",
        "344": "scientific journals they could get their\n",
        "346": "hands on and so this node here\n",
        "349": "represents a single journal in this\n",
        "350": "particular case this is a journal about\n",
        "352": "the topic social and personality\n",
        "356": "psychology that is an interesting title\n",
        "357": "psychology that is an interesting title\n",
        "359": "ok we have biochemistry we have\n",
        "361": "toxicology and so forth and so each of\n",
        "364": "these has a vertex label now what these\n",
        "367": "edge represent is if you are reading one\n",
        "370": "journal and you decide to click through\n",
        "371": "to another linked article because often\n",
        "372": "to another linked article because often\n",
        "373": "you want to cite other scientific work\n",
        "375": "if you do that click it was logged in\n",
        "378": "this case and so in this case what the\n",
        "380": "graph tells us is if there were a large\n",
        "382": "number of clicks between this journal in\n",
        "384": "this journal right this may be about so\n",
        "386": "this is an organic chemistry journal and\n",
        "387": "this is International Studies\n",
        "388": "this is International Studies\n",
        "390": "interesting that there's a link here so\n",
        "391": "maybe this was about you know\n",
        "393": "manufacturing processes and how they\n",
        "398": "were spread from let's say China to\n",
        "400": "Korea who knows what and then maybe this\n",
        "402": "I mean maybe there was a link to some\n",
        "404": "articles about International Studies so\n",
        "405": "there were enough people clicking on\n",
        "408": "articles in this journal articles for\n",
        "410": "example about that topic I mentioned and\n",
        "411": "so then once that gets above some\n",
        "413": "threshold they decide to draw this link\n",
        "416": "and so we can see here I'm nice taxonomy\n",
        "418": "of all of science anyway and we can see\n",
        "419": "this cool arc that we have down here the\n",
        "422": "life sciences nicely in green but they\n",
        "424": "kind of arc into well sometimes biology\n",
        "427": "journals will talk about or say plant\n",
        "429": "agriculture might relate to biotech\n",
        "431": "which then goes to toxicology which\n",
        "434": "relates to biochemistry which then some\n",
        "435": "of those journals are related to\n",
        "436": "analytical chemistry to organic\n",
        "438": "chemistry to physical chemistry to\n",
        "440": "statistical physics up into material\n",
        "443": "science so this is nice you can see the\n",
        "445": "whole physics to biology sweep here we\n",
        "447": "see a bunch of humanities so we see\n",
        "450": "archeology Human Geography clustered\n",
        "451": "together I think there's a lot of really\n",
        "454": "neat richness with this figure and so\n",
        "457": "this again what could it be useful for\n",
        "458": "well it's nice because it gives you a\n",
        "460": "picture of the structure of human\n",
        "461": "endeavor\n",
        "463": "so again graphs are very versatile data\n",
        "465": "structure and you could imagine that\n",
        "467": "those other questions that we discussed\n",
        "469": "before about cycles and so forth they\n",
        "471": "could be interesting maybe maybe not\n",
        "473": "here we could see that pretty much the\n",
        "475": "world of journals is connected though to\n",
        "476": "be honest that's a little bit of an\n",
        "478": "artifact of the fact that these\n",
        "479": "thresholds were chosen probably\n",
        "481": "precisely so that it was just barely\n",
        "483": "connected that is suppose they decide\n",
        "485": "the number of clicks that's needed for a\n",
        "487": "connection is only one then I bet you\n",
        "489": "every single one of these notes will be\n",
        "492": "directly connected to every other last\n",
        "494": "example I here is something called\n",
        "496": "wordnet that's actually a really cool\n",
        "499": "idea we mentioned it briefly earlier in\n",
        "501": "a lecture about hypo names and hyper\n",
        "504": "names with inheritance but if we look\n",
        "507": "here each edge represents that one word\n",
        "509": "is a type of another thing so for\n",
        "511": "example variation is a type of change\n",
        "513": "changes the type of action actions are a\n",
        "515": "type of human activity which is\n",
        "518": "ultimately an event okay jumping or\n",
        "520": "leaping that notion of jumping is a type\n",
        "522": "of increase and increases a type of\n",
        "524": "modification and so forth so this is a\n",
        "527": "cool database that lets you explore all\n",
        "530": "of the different concepts in English and\n",
        "531": "I'll mention just briefly that some\n",
        "533": "words belong to multiple Kahn\n",
        "535": "ceps so for example we have here jump\n",
        "537": "and leap here we have jump so this looks\n",
        "540": "like jump and parachuting so this\n",
        "542": "concept is a type of descent and this\n",
        "544": "type of jumping is a type of increase\n",
        "546": "and if you want you can browse this now\n",
        "548": "this lecture is not about word net so\n",
        "549": "that stuff's not super important there's\n",
        "551": "that was kind of cool but this graph\n",
        "552": "right here you can think of each\n",
        "554": "directed edge as representing in is a\n",
        "558": "type of relationship and again trying to\n"
    },
    "Title=[Graphs1, Video 4] more intro to graphs_Id=9SwWgtntg24": {
        "0": " \n",
        "2": "to summarize each of the representations\n",
        "3": "that we've talked about for graphs\n",
        "5": "adjacency matrix list of edges and\n",
        "8": "adjacency lists I produced here this\n",
        "10": "handy table so let's consider that we\n",
        "12": "write an add edge method it turns out\n",
        "14": "that this will be theta 1 for all of\n",
        "16": "these different representations the\n",
        "19": "adjacency method that will be theta V\n",
        "22": "for the adjacency matrix theta e for a\n",
        "24": "list of edges in constant time for the\n",
        "25": "adjacency list and these two we just\n",
        "27": "talked about this is one you'd have to\n",
        "28": "think about a little more on your own so\n",
        "30": "this is not obvious but it's if you\n",
        "33": "think about it the natural answer these\n",
        "35": "are core pieces of the graph API but we\n",
        "36": "are core pieces of the graph API but we\n",
        "37": "can also consider other operations we\n",
        "39": "might add so we might write another\n",
        "41": "class that tries to for example print\n",
        "43": "out the graph like this code so print\n",
        "45": "graph we just showed will be theta V\n",
        "47": "squared for an adjacency matrix it'd be\n",
        "49": "V plus C for an adjacency list as I'm\n",
        "51": "saw in the previous slide and it would\n",
        "53": "just be theta e for the list of edges\n",
        "56": "representation likewise we could write\n",
        "57": "something that says does the graph\n",
        "59": "possess an edge between s and T so in\n",
        "60": "possess an edge between s and T so in\n",
        "61": "this case with an adjacency matrix it'd\n",
        "64": "be theta 1 we could just go and index\n",
        "65": "directly into the matrix\n",
        "67": "assuming that we had access to its\n",
        "69": "instance variables list of edges we\n",
        "70": "would actually have to iterate through\n",
        "72": "all the edges to see if it exists and\n",
        "74": "with the jason c list if we want to know\n",
        "76": "if there exists an edge between say 0\n",
        "77": "and 2 we have to iterate through this\n",
        "79": "list and if we store it as a list as\n",
        "81": "opposed to say a binary search tree or\n",
        "83": "something then in the worst case it\n",
        "85": "would be theta degree of V in other\n",
        "87": "words the length of the list in terms of\n",
        "89": "the amount of space used the amount of\n",
        "91": "space for an adjacency matrix is V\n",
        "93": "squared e for list of edges and\n",
        "96": "adjacency lists will be e + V which is\n",
        "97": "the same thing by the way as V Plus E\n",
        "99": "and I may as well just I'm showing it to\n",
        "100": "you for both because you'll see both\n",
        "101": "you for both because you'll see both\n",
        "103": "used okay now again one of the big\n",
        "105": "takeaways here is that this runtime the\n",
        "107": "state of the + e is a very common idea\n",
        "109": "and something I want you to get\n",
        "110": "comfortable with the study guide\n",
        "112": "questions for this lecture are a great\n",
        "113": "way to do that because we'll see this\n",
        "116": "time and time again so in practice if we\n",
        "117": "look at all this we can get it kind of a\n",
        "118": "sense of the trade-offs that are\n",
        "122": "involved and we can see that or all them\n",
        "124": "say that in practice adjacency lists are\n",
        "126": "the most common and one of the reasons\n",
        "127": "is that at least for our graph\n",
        "129": "implementation because these are the\n",
        "131": "core operations in the graph so many of\n",
        "133": "our operations will rely on\n",
        "136": "this adjacency method here and so that\n",
        "137": "since its theta one that's part of the\n",
        "139": "reason why this is super common it's\n",
        "140": "also nice because it doesn't use a ton\n",
        "143": "of space and in a sense basically most\n",
        "145": "graphs are sparse that is there's not\n",
        "148": "many edges in each bucket it's not gonna\n",
        "149": "be like for each edge there are in over\n",
        "150": "be like for each edge there are in over\n",
        "152": "ten edges generally it'll be some small\n",
        "154": "number maybe a constant and so we can\n",
        "155": "kind of draw inspiration from hash\n",
        "157": "tables right hash tables have this\n",
        "159": "interesting property that every single\n",
        "161": "list is short so we can think of every\n",
        "163": "operation as constant time and so too\n",
        "165": "with graphs because graphs tend to be\n",
        "168": "sparse those bins those buckets those\n",
        "170": "lists of edges will generally be pretty\n",
        "171": "short and so this ends up being a much\n",
        "173": "more efficient representation then\n",
        "175": "either of these two approaches for\n",
        "177": "sparse graphs although arguably list of\n",
        "179": "edges can be faster for some certain\n",
        "181": "subproblems and so if we want to look at\n",
        "183": "what does the graph actually look like\n",
        "185": "were we to sit down and implement it\n",
        "187": "it'll look a little like this so a graph\n",
        "189": "has an integer V it is fixed it has a\n",
        "192": "number of vertices that never changes we\n",
        "195": "have a list of we have an array of lists\n",
        "198": "of integers so for each of these lists\n",
        "200": "our sight for each vertex we have a list\n",
        "203": "that is all of the adjacent vertices and\n",
        "206": "when we create a graph this vertex\n",
        "208": "number V is set it's fixed in stone\n",
        "212": "forever now here we create our adjacency\n",
        "215": "lists and then we just go through and\n",
        "216": "set them all equal to an empty list\n",
        "218": "that's what this code does\n",
        "220": "now again you might decide that for your\n",
        "222": "purposes this V should not be constant\n",
        "224": "but for simplicity for the sake of a\n",
        "226": "pure beautiful lecture we're gonna make\n",
        "229": "that strange step adding edges pretty\n",
        "231": "simple and this is for an undirected\n",
        "233": "graph so what we'll do is we'll simply\n",
        "235": "say okay if we're adding an edge between\n",
        "237": "0 and 3 let's say we'll make sure that 3\n",
        "239": "gets added as zeros Jason c-list and\n",
        "242": "that 0 gets added to 3s adjacency lists\n",
        "243": "and we're good to go\n",
        "245": "and then this adjacency method here I\n",
        "248": "will simply return edge V and then as a\n",
        "249": "result once we have that code we can\n",
        "251": "then write code like this and then we'll\n",
        "252": "print out our graph beautifully\n",
        "254": "convincing us that we've actually built\n",
        "256": "a graph so that's it as far as implement\n",
        "258": "or the basic implementation goes so from\n",
        "260": "here let's start considering some of\n",
        "261": "these more challenging problems we might\n",
        "263": "want to do rather than just listing off\n"
    },
    "Title=[Graphs1, Video 5] more intro to graphs_Id=Z8JWGDk583U": {
        "0": " \n",
        "2": "the very first of our tricky graph\n",
        "4": "problems I want to address is that of\n",
        "6": "connectedness so it's a pretty\n",
        "7": "straightforward problem given a graph\n",
        "10": "does there exist a path from say vertex\n",
        "12": "zero to vertex seven so I'm going to\n",
        "13": "give you an algorithm that I'd like you\n",
        "16": "to critique which is the following so if\n",
        "18": "i want to check if say 0 and 7 are\n",
        "20": "connected we say 12 the seven equals\n",
        "23": "zero in this case look right seven is\n",
        "24": "not the same thing as zero so we could\n",
        "26": "do this check all of F of children for\n",
        "29": "connectivity to T and if any of those\n",
        "31": "children is connected will return true\n",
        "33": "so in this case there's only one thing\n",
        "35": "to check which is one because like if\n",
        "38": "connected 1 comma 7 will return true and\n",
        "40": "in that case if that does not happen\n",
        "43": "we'll return false because well none of\n",
        "44": "my children was connected to teeth\n",
        "46": "therefore I'm not connected so what I'd\n",
        "48": "like you to do now I think we'll this\n",
        "50": "algorithm work turns out it won't so the\n",
        "52": "goal for you is to think why won't it\n",
        "59": " \n",
        "65": "okay so the issue is that if we do this\n",
        "66": "right if we think about what this code\n",
        "69": "is going to do it what connected 17 it's\n",
        "71": "going to say is one connected to seven\n",
        "73": "no so then it'll check all of its\n",
        "75": "children and I'll check is zero\n",
        "76": "connected to Center it is too connected\n",
        "78": "to seven and so forth so that can\n",
        "80": "actually generate in this case an\n",
        "82": "infinite number of calls we can get into\n",
        "85": "an infinite loop in the worst case and\n",
        "87": "in the best case maybe it works maybe it\n",
        "88": "doesn't you have to think more carefully\n",
        "90": "but it's going to be incredibly\n",
        "91": "inefficient because we keep revisiting\n",
        "94": "vertices over and over and over we want\n",
        "96": "to avoid that problem so what we're\n",
        "98": "going to do is change things up just a\n",
        "103": "little and say mark s then the magical\n",
        "105": "step will be rather than checking all of\n",
        "107": "SS children or all of SS unmarked\n",
        "108": "SS children or all of SS unmarked\n",
        "110": "neighbors outside all of s's neighbors\n",
        "111": "we're going to check only the unmarked\n",
        "116": "ones now I realized by the way while I\n",
        "118": "was mid video but I'm under a little\n",
        "120": "time constraint now I won't quite get\n",
        "122": "there that we didn't introduce the time\n",
        "124": "term child at any point but i hope the\n",
        "126": "intention was clear which is a neighbor\n",
        "131": "so list now and run through what this\n",
        "133": "algorithm feels like if we mark\n",
        "136": "vertices as we search so what we're\n",
        "138": "going to do is we'll start by well\n",
        "140": "marking 0 and we'll say is your equal to\n",
        "144": "70 ok now we'll check the children or\n",
        "146": "the neighbors I guess we'll say well say\n",
        "148": "is one mark no ok so in that case we'll\n",
        "151": "call connected 17 well when you call\n",
        "152": "connected 17 the first thing you do is\n",
        "155": "you mark one so i'm using this whited\n",
        "157": "out square syndicate that were marked\n",
        "158": "and i'm using this asterisk indicates\n",
        "162": "the value of s so then we say is f equal\n",
        "165": "to sentence notes is 0 marked yes so in\n",
        "166": "this case we avoid the problem we had\n",
        "169": "before a revisiting 0 again and then how\n",
        "172": "about is marked too ok well it is not\n",
        "174": "marked so then we'll check connected to\n",
        "177": "seven so we go here ok so now we mark\n",
        "179": "two is two equal to seven note is one\n",
        "182": "marked yes dance five mark no so then\n",
        "184": "we'll check connected 57 ok we end up\n",
        "188": "here ok at this point we mark five we\n",
        "190": "say is five equal 0 7 no it's two marks\n",
        "193": "yes is for marked know so we'll check\n",
        "196": "connectedness for four and seven ok now\n",
        "198": "you and I being animals that have a\n",
        "200": "visual cortex and the ability to reason\n",
        "202": "about space we could tell this is a\n",
        "204": "losing proposition but the computer has\n",
        "206": "no idea so we'll check connected for\n",
        "209": "seven we end up here mark for for glow\n",
        "211": "700k three marked no okay well which n\n",
        "214": "check connected 37 in this case ah well\n",
        "216": "there's no more children so finally\n",
        "218": "we'll return false because we know that\n",
        "219": "three is definitely not connected to\n",
        "221": "seven because there's nowhere else to go\n",
        "223": "so since this is false we go back to\n",
        "224": "form there's no more children so we\n",
        "227": "return false we get back up to five well\n",
        "229": "in this case for wasn't connected but we\n",
        "230": "still need to check six and eight\n",
        "232": "potentially so we're going to keep\n",
        "233": "checking our children's because there's\n",
        "234": "checking our children's because there's\n",
        "236": "still some other hope so then we say is\n",
        "238": "six mark okay well in that case we'll\n",
        "241": "check connected 67 if six equal 0 70 ok\n",
        "242": "it's five marks yes and we're not going\n",
        "245": "to use that is seven marks no ok well\n",
        "247": "then we'll check connected list of seven\n",
        "249": "and seven yes seven equal the seventh so\n",
        "251": "we'll return true and then because this\n",
        "253": "was true will return true and then\n",
        "254": "because this was true five has gotten a\n",
        "256": "true so it will return true two or turn\n",
        "258": "true one will return true we get back to\n",
        "260": "the beginning and find the answer is\n",
        "263": "true we did it we found that 0 and seven\n",
        "265": "is connected and that right there is one\n",
        "267": "way to do connected now there are many\n",
        "269": "others and you might have had some issue\n",
        "271": "of the fact that we kind of went down\n",
        "272": "this blind alley but it turns out that\n",
        "274": "this is a rather popular and powerful\n",
        "276": "algorithm and it's known as depth-first\n",
        "279": "search by the way so this idea of\n",
        "281": "exploring and if we think about the\n",
        "282": "process that we went through this idea\n",
        "284": "of exploring the entire sub graph for\n",
        "286": "each child is known as depth-first\n",
        "289": "traversal so this graph makes a little\n",
        "291": "easier to see why this is true but if we\n",
        "293": "do it that's first reversal like we just\n",
        "296": "did on this graph whenever we call\n",
        "298": "connected on one we're going to explore\n",
        "301": "all one's children before we do any of\n",
        "303": "the other children 3487 right so we're\n",
        "305": "going to go all the way down this branch\n",
        "307": "before we try to do the others we\n",
        "309": "actually did that damn right before we\n",
        "311": "were willing to do so when we got 25\n",
        "314": "right before we get to six we're going\n",
        "315": "to explore this entire sub graph over\n",
        "317": "here and that's the essence of\n",
        "320": "depth-first traversal now depth-first\n",
        "322": "traversal I'm not one to usually do web\n",
        "324": "comic key things in the middle lecture\n",
        "325": "its kind of hacky but i think this is a\n",
        "328": "nice so depth-first traversal is\n",
        "329": "something that you could apply to real\n",
        "331": "life and this comic here gives an idea\n",
        "333": "of why depth-first traversal might not\n",
        "335": "be the best idea and it's true in real\n",
        "338": "wraps too and so this i think is a nice\n",
        "339": "illustration so imagine you're preparing\n",
        "341": "for a day ok so what do you need to\n",
        "342": "think about committing medical\n",
        "344": "emergencies dancing the foods too\n",
        "346": "expensive ok well let's first start with\n",
        "348": "what kind of emergencies well there\n",
        "350": "could be a snake bite lightning strike\n",
        "353": "you could fall from your chair can't\n",
        "355": "quite read that a challenge to the\n",
        "357": "reader ok well what snakes are dangerous\n",
        "359": "well say there's corn snakes garter\n",
        "360": "snakes copperheads and so forth and\n",
        "362": "eventually find yourself needing about\n",
        "364": "snake Venom's and you need a spreadsheet\n",
        "368": "ok so that is depth for search or well\n",
        "370": "guess this was the punchline ok look I\n",
        "372": "don't know there's a punch line I forgot\n",
        "375": "so you know hey you're not dressed yet\n",
        "376": "well you know you let them know your\n",
        "379": "date that the deadliest snake isn't deep\n",
        "381": "listening and so in this case depth\n",
        "382": "first search may not be the most\n",
        "384": "appropriate thing for preparing for\n",
        "386": "dates and that may be true for real\n",
        "389": "computational problems as well so how\n",
        "391": "would we implement that first search\n",
        "393": "well I'll mention that even though\n",
        "394": "depth-first search can run you into\n",
        "397": "trouble as we see here it is still a\n",
        "398": "common pattern and design\n",
        "401": "real graph down for them and essentially\n",
        "404": "the way we're going to do this is as\n",
        "407": "kind of intriguing right usually in the\n",
        "408": "past whenever you've been given a data\n",
        "410": "structure the way you've approached it\n",
        "412": "is okay well I'm going to add a new\n",
        "414": "method to my data structure so I have a\n",
        "417": "map on a math class and so I want to add\n",
        "419": "a put method I'll add it directly to the\n",
        "421": "math class with graphs are actually\n",
        "422": "going to do something a little different\n",
        "424": "it's pretty uncommon in the real world\n",
        "426": "which is rather than change or grass\n",
        "428": "class itself will create a separate\n",
        "431": "class so what we'll do is we'll in a\n",
        "433": "sense d couple the algorithm from the\n",
        "436": "type of self so what we usually do is\n",
        "438": "create a graph object will pass that\n",
        "439": "graph to some kind of graph processing\n",
        "440": "graph to some kind of graph processing\n",
        "442": "method or constructor and then we'll\n",
        "444": "query the client class for information\n",
        "446": "so in other words we take our graph and\n",
        "449": "we pass it to this path java file that\n",
        "453": "looks something like this the past class\n",
        "455": "it has a constructor where you give it a\n",
        "459": "graph in an integer it then later you\n",
        "461": "can ask is there a path to that vertex\n",
        "464": "and it will also give you that path and\n",
        "465": "we'll explore this idea a little bit\n",
        "467": "more in the next video but that's our\n",
        "468": "goal we're going to try and build a\n",
        "471": "depth first search implementation to get\n",
        "472": "an understanding really deeply of how\n",
        "475": "this works and even though we can run\n",
        "476": "into a little trouble with depth first\n",
        "477": "search it's still going to be a very\n",
        "481": "common tool and look let's explore I\n"
    },
    "Title=[Graphs1, Video 6] more intro to graphs_Id=G16-sErM2ko": {
        "0": " \n",
        "2": "before we implement this pass class\n",
        "4": "let's think carefully about how we use\n",
        "6": "it to make sure we know we're trying to\n",
        "10": "get so for example let's suppose you\n",
        "12": "want to know is the vertex 3 and the\n",
        "14": "vertex through time since the vertex\n",
        "16": "zero and the vertex 3 are those vertices\n",
        "18": "connected and if they're connected\n",
        "20": "what's the pass between them so the way\n",
        "22": "we'd actually use this thing the goal\n",
        "24": "we're trying to achieve as we say hey I\n",
        "27": "want to create a past object I'm going\n",
        "29": "to give it this entire graph which we\n",
        "30": "already saw two videos ago how you\n",
        "32": "construct one of those and we'll say\n",
        "34": "let's start from vertex zero this is my\n",
        "37": "start vertex we think it we can then ask\n",
        "39": "our Oracle here hey is there a past two\n",
        "41": "three did you see one when you look at\n",
        "42": "the graph you inspected the graph you\n",
        "44": "held it in your hands you sniffed it you\n",
        "47": "felt it yeah Oracle know there is a path\n",
        "50": "well hey Oracle what is the path to\n",
        "51": "three okay well in that case we get back\n",
        "53": "and this case an iterable of integers\n",
        "56": "which is going to be 0 1 4 3 which is a\n",
        "58": "valid path now we don't know right in\n",
        "60": "general it would be valid if we return 0\n",
        "64": "1 2 5 4 3 as well so both of those might\n",
        "65": "be fine and so it just kind of just\n",
        "69": "depends on how the algorithm good okay\n",
        "71": "how do we actually do this well the way\n",
        "73": "this Oracle is going to work is it's\n",
        "75": "going to behave just like the example we\n",
        "77": "did earlier so we're going to do the\n",
        "79": "following we're going to go through when\n",
        "81": "paths gets created the Oracle have\n",
        "86": "handed the graph and your graph okay so\n",
        "88": "it's my job to process it I'm playing\n",
        "91": "the part of the Oracle so what I'm going\n",
        "93": "to do I'm going to mark each vertex and\n",
        "95": "then I'm going to recursively visit all\n",
        "97": "unmarked vertices adjacent and there in\n",
        "99": "that way I'll gain total and true\n",
        "102": "understanding of the entire graph so\n",
        "105": "example data structures here I'm going\n",
        "107": "to have an array of bullion's called\n",
        "109": "marked and I'm going to have an array of\n",
        "112": "integers called edge two and both of\n",
        "115": "these these arrays are going to be of\n",
        "117": "length of V and the interpretation is\n",
        "120": "that it marked say mark 3 is true then\n",
        "123": "we've marked it and if edge 2 of 4 is\n",
        "125": "equal to 1 that means we got to the\n",
        "129": "vertex 4 via the vertex aw ok so let's\n",
        "131": "see how we would do this in action\n",
        "136": " \n",
        "140": "so this is what depth first path looks\n",
        "143": "like this is the constructor running so\n",
        "145": "a hands the Oracle this graph and she\n",
        "147": "starts thinking okay what what's the\n",
        "149": "deal with this crap okay so i have two\n",
        "152": "arrays as i mentioned marked an edge to\n",
        "154": "this is all false an edge to it's\n",
        "156": "technically all zeros at first but i'm\n",
        "158": "showing it as a dash to indicate it is\n",
        "161": "not yet been set okay so we'll start by\n",
        "164": "calling depth-first search of 0 DFS 0\n",
        "167": "let's say okay so in that case what we\n",
        "171": "do is we mark a 0 then we say isn't one\n",
        "174": "marked no okay and also by the way then\n",
        "176": "what we need to do is sense one is not\n",
        "177": "marked is we're going to save the way to\n",
        "180": "get to one is to come through 0 i'm at 0\n",
        "182": "I see one no one's been there so I'll\n",
        "183": "make a note that the way to get to one\n",
        "185": "isn't start from zero and then I'm going\n",
        "189": "to continue my search at one okay so now\n",
        "191": "we get to and I guess I have a little\n",
        "193": "running tally here sharing the order in\n",
        "196": "which we called the FS so next up we\n",
        "201": "call DFS on one and then case we mark\n",
        "203": "one we've set it to true and then we\n",
        "204": "look at all the eight neighbors and we\n",
        "205": "look at all the eight neighbors and we\n",
        "209": "say okay well is to marked okay well no\n",
        "211": "so then what we're going to do is we\n",
        "212": "know that nobody's ever explored to this\n",
        "214": "is brand-new territory never considered\n",
        "217": "by me the Explorer so I'll say the way\n",
        "218": "to get to two is to go through one and\n",
        "221": "then we'll call DFS on tube now you\n",
        "223": "might say what about four well this is a\n",
        "224": "depth-first search so we're considering\n",
        "227": "all the items under in this direction\n",
        "230": "before we go this way okay so we called\n",
        "233": "DFS it too and that in turn will called\n",
        "236": "the fs of five so at this point when we\n",
        "238": "get to two we called the fso to the\n",
        "240": "first thing we do is Mark to right let\n",
        "242": "me go there we've marked two and then\n",
        "244": "for every unmarked adjacent edge or try\n",
        "246": "every unmarked adjacent vertex we say\n",
        "248": "okay the way to get there is through me\n",
        "252": "so in this case is five and then we'll\n",
        "255": "go there so we get 25 and in this case\n",
        "260": "this is our that's not important the\n",
        "261": "phones are you can't tell\n",
        "263": "so this one we get 25 when we say okay\n",
        "265": "well mark five and then we'll say is two\n",
        "267": "marked yes it's already marked so we're\n",
        "268": "not going to touch that right we don't\n",
        "271": "want to change to the edge too and then\n",
        "273": "when we get to four will say okay well\n",
        "275": "so we look at all of our neighbors when\n",
        "276": "we say for each unmarked adjacent vertex\n",
        "278": "that's four six and eight we're going to\n",
        "281": "set the edge of that vertex we're going\n",
        "283": "to say the way to get 24 is through five\n",
        "286": "and we're going to do continue doing all\n",
        "289": "this again I'm trying to like conveys\n",
        "290": "the fact that yes even though\n",
        "291": "technically later we're going to try and\n",
        "294": "set six and eight even though we're\n",
        "295": "going to later set six and eight we're\n",
        "298": "going to go to for first okay so next up\n",
        "301": "after four we're going to call a DSS of\n",
        "303": "three that's going to be our next one so\n",
        "306": "the same deal we set a 32 true and in\n",
        "309": "this case we don't set any of the edge 2\n",
        "311": "is equal to 3 so if you've been watching\n",
        "313": "this maybe pause and think about that\n",
        "315": "question why did none of these get set\n",
        "317": "to three if you understand that question\n",
        "320": "you're following okay at that point we\n",
        "322": "return from dfss 3 i'm just noting it\n",
        "323": "here this is the first one that actually\n",
        "325": "gets done this is the first thing that\n",
        "328": "we've explored fully okay now we're back\n",
        "330": "from for with explored fully we get back\n",
        "333": "down to five and at that point we have\n",
        "335": "an unmarked child or a neighbor now we\n",
        "338": "have on mark child six so we'll set edge\n",
        "342": "to of 625 so notice I just change that\n",
        "344": "so we arrive at this position oh and by\n",
        "346": "the way this versus demo is fully\n",
        "348": "available online so if you're tired of\n",
        "349": "available online so if you're tired of\n",
        "350": "me talking and you'd rather not have my\n",
        "352": "narrative maybe explore on your own it's\n",
        "356": "linked on this book if you're six and we\n",
        "358": "go to seven all right at that point\n",
        "360": "we're done with seven we return return\n",
        "363": "return okay how about eight well in this\n",
        "364": "return okay how about eight well in this\n",
        "366": "case we still have one more unmarked\n",
        "368": "neighbor which is eight so we go to\n",
        "371": "eight market and we set the edge to 25\n",
        "373": "when we do a bunch of return so finally\n",
        "376": "we finished this entire graph process or\n",
        "379": "graph processing process and so what our\n",
        "380": "Oracle effectively has done at this\n",
        "383": "point has explored the entire graph it's\n",
        "385": "noted that every single vertex is\n",
        "387": "reachable from zero so it is marked\n",
        "389": "array let's say I've had vertex nine\n",
        "390": "over here that wasn't reachable its\n",
        "394": "marked value would still be false but it\n",
        "395": "case all the vertices were reachable to\n",
        "398": "their truth so this right here means\n",
        "400": "that our Oracle we can ask a question is\n",
        "402": "for reachable yes does it have passed to\n",
        "404": "indeed of course it does look the vertex\n",
        "406": "is marked have an edge to we can use\n",
        "408": "that to reconstruct a path so for\n",
        "410": "example I ask the Oracle how do I get to\n",
        "412": "four well in that case we say okay to\n",
        "414": "get to for you use five okay how do you\n",
        "416": "get 25 used to how do you get to to use\n",
        "419": "one how to get the 10 and in that way\n",
        "422": "our has tap to algorithm or so I our has\n",
        "424": "passed two methods like clip we're done\n",
        "426": "our path to method will be relatively\n",
        "430": "easy to implement okay so this is what\n",
        "433": "the code might look like then this\n",
        "436": "Oracle depth-first path has two arrays\n",
        "439": "as i mentioned marked indicates whether\n",
        "441": "or not is connected edge to tells you\n",
        "444": "how to get somewhere the depth-first\n",
        "446": "past constructor i'm not showing the\n",
        "448": "initialization of these data structures\n",
        "450": "but what it does is it calls a method\n",
        "452": "that's private called DFS which stands\n",
        "454": "for depth for search and the depth-first\n",
        "456": "search method may is exactly as we just\n",
        "458": "did in the demo so what this recursive\n",
        "460": "routine does DFS is it doesn't work and\n",
        "462": "stores the results in what I call an\n",
        "466": "easy to query manner easy to query in\n",
        "467": "the sense that given this mark de Reya\n",
        "470": "can instantly give the have passed two\n",
        "472": "methods how would we write it question\n",
        "476": "to ponder okay so once that's half past\n",
        "479": "25 what do you do we simply return the\n",
        "482": "fifth element of mark how about path to\n",
        "484": "or like give me a path to it in that\n",
        "486": "case we'd have to do a little more work\n",
        "489": "and so again here's that little demo I\n",
        "491": "just shows it's on the slide so look\n",
        "496": "here it is and so this approach this\n",
        "499": "idea of searching a graph is very common\n",
        "501": "and really cool right like handing the\n",
        "502": "graph the Oracle having it sniff\n",
        "505": "everything I think it's a nice story on\n",
        "507": "so the properties of this approach will\n",
        "509": "guaranteed to reach every reachable note\n",
        "511": "that will always happen the run time\n",
        "514": "will actually be v + e the Big O time\n",
        "516": "and I'll give me analysis next time but\n",
        "518": "the basic idea is that every edge is\n",
        "521": "going to be used at most one and the\n",
        "522": "total number of vertices of they are\n",
        "525": "going to consider is going to be and\n",
        "526": "there's a number of vertices you have to\n",
        "527": "consider is going\n",
        "528": "be equal to the number of edges and\n",
        "530": "you'll see what that means but basically\n",
        "532": "it's just saying the number of times you\n",
        "533": "need to consider a vertex will be no\n",
        "535": "more than a number of edges incident on\n",
        "538": "it now the runtime may actually be\n",
        "539": "faster for some problems the reason I\n",
        "540": "faster for some problems the reason I\n",
        "542": "say Big O of e plus e so for example\n",
        "544": "let's say that instead of assembling the\n",
        "546": "answer for the entire graph we build a\n",
        "548": "special purpose Oracle that only cares\n",
        "551": "about connectedness from some source to\n",
        "554": "some targets so instead of incest it be\n",
        "556": "impressed common entity in that case you\n",
        "558": "could actually terminate the search\n",
        "559": "early because you only care about that\n",
        "562": "information in that case maybe a runtime\n",
        "564": "could be at vast continent so for\n",
        "567": "example if you ask is s0 connected to T\n",
        "569": "equal to zero then that would be very\n",
        "572": "fast okay so that's it for this lecture\n",
        "574": "we're going to call it a day I really\n",
        "575": "encourage you to sit down with this demo\n",
        "577": "and make sure it makes a lot of sense\n",
        "578": "and then make sure to check out the\n",
        "581": "extra study guide problems linked on the\n",
        "582": "website I think that will help you\n",
        "584": "solidify your understanding of this\n",
        "587": "lecture ok so that's it for today and\n"
    },
    "Title=[Inheritance1, Video 10] Is a vs Has a, Interface vs Implementation Inheritances_Id=9KuVnIje2Ys": {
        "0": " \n",
        "2": "to wrap up this lecture let's compare\n",
        "4": "and contrast the types of inheritance\n",
        "6": "we've seen in this lecture so the first\n",
        "9": "is interface inheritance love it it's\n",
        "12": "wonderful like it's just a great idea it\n",
        "14": "tells you what to you can expect from\n",
        "17": "your subclasses so the superclass or the\n",
        "19": "interface says all lists must do these\n",
        "21": "things and allows you to generalize your\n",
        "24": "code and just a powerful simple way so\n",
        "25": "if we look at where'd you tell us for\n",
        "28": "example this longest method it works on\n",
        "29": "any list and not just any list but a\n",
        "30": "any list and not just any list but a\n",
        "31": "list that will ever be written so if in\n",
        "33": "a thousand years someone digs up my code\n",
        "35": "like my skeleton laying somewhere\n",
        "37": "holding a USB Drive and they find this\n",
        "40": "thing like yes this is good and they're\n",
        "41": "like well we don't have a list\n",
        "43": "implementation except this weird one cue\n",
        "45": "list well as long as it obeys the list\n",
        "47": "61b interface I don't know how it would\n",
        "50": "it'll still work that's nice there's\n",
        "52": "also this other kind of implementation\n",
        "55": "inheritance which tells you how how the\n",
        "57": "subclasses should behave can in this\n",
        "59": "case the boss is telling it's its\n",
        "61": "subordinates exactly how to do their job\n",
        "63": "so this is nice\n",
        "66": "because the boss can provide a general\n",
        "68": "working print method for example that\n",
        "70": "anybody else can use so if you make a\n",
        "72": "new list called queue list and you're\n",
        "73": "not quite sure how to print you at least\n",
        "75": "have that laying around it may not be\n",
        "77": "the most efficient way but it's there so\n",
        "78": "it gives you an extra level of control\n",
        "80": "you can decide to overwrite it not\n",
        "83": "overwrite it so that can be nice now in\n",
        "85": "both cases I want to point out a common\n",
        "88": "pitfall that you may fall prey to\n",
        "90": "anytime you use inheritance either kind\n",
        "92": "you should be specifying an is a\n",
        "94": "relationship and not a has a\n",
        "95": "relationship okay\n",
        "97": "what do I mean by that well an example\n",
        "100": "of good an is a relationship is this a\n",
        "103": "dog is an animal right I mean every dog\n",
        "106": "is an animal and likewise every S list\n",
        "108": "is a list 61b right that's great we\n",
        "112": "specify those things by contrast if you\n",
        "114": "read it as has a that's no good you\n",
        "115": "don't want to use inheritance in that\n",
        "117": "case so for example if I make a class\n",
        "119": "called cat in an implements claw it is\n",
        "121": "true that cats have claws but a cat is\n",
        "123": "not a claw now you might say that seems\n",
        "125": "weird like why would I ever even tried\n",
        "127": "to do that but here I think is a better\n",
        "128": "example or you can maybe see why you\n",
        "129": "might get tempted and\n",
        "132": "going to the dark side so if I say set\n",
        "134": "implements s list basically what I'm\n",
        "136": "trying to do is implement a set using an\n",
        "138": "S list so what's a set a set is a\n",
        "140": "collection of objects that can have no\n",
        "142": "duplicates so for example if I call AB\n",
        "145": "first potato AB first potato AB first\n",
        "147": "potato there would be only one potato in\n",
        "149": "the set so you can imagine trying to\n",
        "152": "override the s list methods to capture\n",
        "154": "that behavior whatever it may be and so\n",
        "155": "in effect\n",
        "157": "we'd be contorting an S list into a set\n",
        "159": "but it won't work the way you want it's\n",
        "161": "gonna end up being much more complicated\n",
        "166": "okay so that temptation to use an\n",
        "168": "interface or implementation inheritance\n",
        "171": "to capture has a relationships please\n",
        "174": "avoid it ok so that aside I actually\n",
        "176": "want to talk just for a moment more\n",
        "178": "about some of the reasons I'm a little\n",
        "179": "skeptical of implementation inheritance\n",
        "182": "why it can cause you trouble so one\n",
        "185": "issue that sometimes applies is it can\n",
        "187": "make it hard to keep track of where\n",
        "188": "something was actually implemented so\n",
        "190": "imagine you have a deep stack of like\n",
        "193": "six or seven implementations so you know\n",
        "195": "I animal and then I have like carnivore\n",
        "198": "and then mammal and dog or whatever it\n",
        "200": "can be hard to potentially keep track of\n",
        "202": "where things got overridden where they\n",
        "204": "got defined and so forth so a good IDE\n",
        "206": "makes that pretty much okay but it can\n",
        "209": "mean some extra complexity too well\n",
        "211": "sometimes you can get strange conflicts\n",
        "213": "so imagine you have like service and\n",
        "215": "certain like service or helper will say\n",
        "219": "say have a helper interface and an\n",
        "221": "animal interface and then you want to\n",
        "224": "make like a service dog class that that\n",
        "225": "implements something from or implements\n",
        "227": "both of those super classes those\n",
        "230": "interfaces in that case if there's a\n",
        "231": "conflict between these maybe they both\n",
        "233": "have the same default method there's\n",
        "234": "some complicated rules about resolving\n",
        "237": "those not such a super big deal in Java\n",
        "240": "usually but it's one thing that's a\n",
        "241": "little ugly about implementation\n",
        "244": "inheritance in general another one and\n",
        "245": "this is where it started to get worse is\n",
        "248": "it encourages overly complex code\n",
        "250": "because we do you have a hammer right\n",
        "252": "everything looks like a nail so whatever\n",
        "253": "you know about inheritance especially\n",
        "255": "when you're new to it you're gonna want\n",
        "257": "to go nuts with it possibly and when the\n",
        "259": "biggest mistake people make is this has\n",
        "261": "a vs. is a problem I actually had a\n",
        "262": "similar thing at my first\n",
        "264": "internship a long time ago where I just\n",
        "267": "learned about yak I think it was a lexer\n",
        "269": "one of those compiler writing tools\n",
        "271": "you've never used them probably but I\n",
        "274": "had a task and I managed funked oh wait\n",
        "276": "he was I forget it was like for\n",
        "278": "generating random parameters for some\n",
        "280": "program and it's so funny like I think\n",
        "282": "back at this piece of code and how I\n",
        "284": "managed to use the tool I had just\n",
        "286": "learned about an overly Byzantine way to\n",
        "289": "solve a problem inheritance especially\n",
        "290": "implementation inheritance and only\n",
        "292": "implementation and Tarrington side say\n",
        "296": "leads to this just gross behavior but\n",
        "299": "perhaps worst of all is this fact the\n",
        "301": "fact that it breaks encapsulation so I'm\n",
        "303": "not gonna tell you exactly what that is\n",
        "305": "we'll cover it in a couple lectures so\n",
        "307": "just for now understand there's some\n",
        "309": "philosophical exceptions I have to\n",
        "311": "implementation inheritance now I'm not\n",
        "313": "saying it's bad I mean it's a wonderful\n",
        "314": "tool there are cases where it saves you\n",
        "316": "tremendous amounts of time and it can be\n",
        "319": "very lovely but unlike interface\n",
        "320": "inheritance which for me is a clear win\n",
        "322": "implementation and inheritance could be\n",
        "324": "a little bit shaky alright that's it for\n",
        "326": "this lecture so I'll see you in the next\n"
    },
    "Title=[Inheritance1, Video 1] The Desire for Generality_Id=IaEq_fogI08": {
        "0": " \n",
        "2": "today we're gonna talk about a totally\n",
        "4": "new topic known as inheritance to set\n",
        "6": "the stage let's consider the s List\n",
        "7": "class and the A List class that we built\n",
        "10": "over the last so many lectures so we see\n",
        "12": "that they have actually the exact same\n",
        "14": "operations they both let us add things\n",
        "16": "get things remove things get back to\n",
        "18": "size and if you did the discussion\n",
        "20": "worksheet available on the website or if\n",
        "23": "you're in the class at Berkeley then you\n",
        "25": "can then we added this insert method\n",
        "27": "they can insert to an arbitrary position\n",
        "30": "okay so given these classes we now want\n",
        "31": "to try and actually use them to do stuff\n",
        "33": "so what's something we might want to do\n",
        "35": "well let's just make a little tiny\n",
        "38": "pretend problem which is that we want to\n",
        "41": "build a library to help other people\n",
        "43": "process lists of words so maybe we want\n",
        "45": "to write a method that takes a list of\n",
        "47": "words and it finds the longest word and\n",
        "49": "returns it okay\n",
        "50": "now this code right here does not\n",
        "52": "actually matter what it says don't worry\n",
        "54": "about reading the implementation here\n",
        "57": "just trust me that it works so when we\n",
        "59": "look at this code and we try and run it\n",
        "61": "this is an example a test drive of this\n",
        "65": "library so if I create an S list and I\n",
        "67": "put in the words elk are watching and\n",
        "69": "then I asked for the longest word and I\n",
        "71": "click run or a deer tilts then I get\n",
        "72": "click run or a deer tilts then I get\n",
        "73": "back watching because it is the longest\n",
        "75": "word in the list now there's a little\n",
        "77": "bit of an issue here which is it may be\n",
        "79": "someone out there who had a list of\n",
        "81": "words they didn't read it into an S list\n",
        "83": "maybe they did an A List instead so\n",
        "85": "let's simulate that process so if we do\n",
        "87": "this and we look at what happens after\n",
        "89": "we change from s list to a list we of\n",
        "91": "course get an error the error is that\n",
        "93": "well we can't give a lists to this\n",
        "96": "method so a pretty short little problem\n",
        "98": "I don't want you to consider what do we\n",
        "100": "need to do so that a list work what can\n",
        "104": "we change about this code okay so in\n",
        "106": "this case there's not a lot that we need\n",
        "108": "to change in particular we can just\n",
        "110": "change s L to a so in other words I do\n",
        "113": "that and now things will work just fine\n",
        "117": "okay so same idea everything works fine\n",
        "120": "in this case now of course it would be\n",
        "121": "annoying if somebody trying to use our\n",
        "123": "library had to constantly edit a list s\n",
        "125": "list so another solution would be to\n",
        "127": "actually just make another copy of the\n",
        "129": "method make this one a list based this\n",
        "131": "one s list based and in this case even\n",
        "133": "though these two methods have the same\n",
        "135": "name it's okay this code will compile\n",
        "137": "just fine and work because that's\n",
        "140": "something you can do in Java so this\n",
        "143": "idea of having multiple methods with the\n",
        "145": "same name but different parameters or\n",
        "147": "different signatures that's fine\n",
        "150": "Java will automatically it at the time\n",
        "151": "you compile figure out which methods\n",
        "153": "gonna get called and it will know which\n",
        "155": "ones gonna run and so this is just known\n",
        "158": "as overloading now this is not great\n",
        "161": "although it works this is a very crude\n",
        "163": "solution so while overloading does\n",
        "166": "technically work and it lets us run our\n",
        "168": "code in either case I think it's\n",
        "170": "terrible and so I want you to ponder\n",
        "171": "that like why is it bad maybe come up\n",
        "173": "with a short list and I'll spoil it with\n",
        "176": "my list so some things I don't like\n",
        "179": "about it are that one our source code\n",
        "181": "files of course are unnecessarily long\n",
        "182": "you look at them and you have all this\n",
        "184": "extra stuff that might not necessarily\n",
        "186": "be a big deal but it makes it messy\n",
        "189": "another is it's just aesthetically\n",
        "191": "terrible to repeat yourself right I mean\n",
        "195": "not only is the code long but it's so\n",
        "197": "similar nobody wants to you know it just\n",
        "199": "doesn't feel right another one is it's\n",
        "201": "more code to maintain now this is an\n",
        "203": "interesting point right code doesn't\n",
        "205": "really need maintenance in the same way\n",
        "206": "that a card needs maintenance it's not\n",
        "208": "like oh this codes gonna get you know\n",
        "210": "rusty and we gotta go fix it you know\n",
        "212": "you have to come back in and fix like it\n",
        "214": "changed desist for some reason that's\n",
        "215": "not a problem we have with computers\n",
        "218": "thankfully but if anything ever does\n",
        "219": "change if we realize oh this isn't\n",
        "221": "efficient and someone makes a change to\n",
        "222": "one of these then you also need to make\n",
        "224": "a change to the other or any other\n",
        "225": "number of little changes so any change\n",
        "228": "you make the one must be made the other\n",
        "231": "and this matters not only just for\n",
        "233": "efficiency reasons but any bug fix so a\n",
        "236": "common mistake in large projects is\n",
        "238": "somebody's written a method that has\n",
        "240": "some kind of bug in it and it's another\n",
        "243": "very similar method and they only track\n",
        "244": "down and kill the bug in one of the\n",
        "246": "methods and the other one continues to\n",
        "247": "live on that's a very dangerous thing\n",
        "249": "that can happen when you have repetitive\n",
        "252": "code like this the other one the final\n",
        "254": "thing I want to mention is that suppose\n",
        "255": "we decide I don't like just a list it s\n",
        "258": "less but maybe I also like D lists in\n",
        "259": "that case we'll actually have to come\n",
        "261": "along some later date and write another\n",
        "263": "D list function so this lecture is gonna\n",
        "265": "be about how we can gracefully deal with\n",
        "266": "this issue and take\n",
        "268": "advantage of what we get as a result\n"
    },
    "Title=[Inheritance1, Video 3] The Interface and Implements Keywords_Id=hoYMyvWjCTg": {
        "0": " \n",
        "2": "it turns out that Java has the ability\n",
        "4": "to capture these relationships in a\n",
        "7": "formal way between classes so just like\n",
        "9": "you and I know that an S list in a list\n",
        "11": "are some kind of list there is a way to\n",
        "13": "actually say that in Java so how do we\n",
        "14": "actually say that in Java so how do we\n",
        "16": "do that well it's a two-step process the\n",
        "18": "first part is to define a reference type\n",
        "21": "for our hypernym so in this case sorry\n",
        "23": "to remind you what reference type is\n",
        "24": "remember in Java there are eight\n",
        "27": "primitive types in short long float and\n",
        "29": "reference type is everything else and so\n",
        "31": "we know we can define new types like\n",
        "33": "planet in body a list so it's no\n",
        "35": "different now we're gonna define one\n",
        "37": "called list 61b but we're gonna see\n",
        "39": "that's a little different than usual now\n",
        "41": "the second part once we've actually set\n",
        "42": "this thing up is we're gonna specify\n",
        "44": "that both s lists and a lists are\n",
        "46": "actually hyponym sub lists 61b\n",
        "48": "so let's start by talking about how we\n",
        "51": "set up a hypernym so what we're gonna do\n",
        "53": "is use a new keyword we have not used\n",
        "55": "before called interface that's gonna be\n",
        "57": "instead of class so in other words\n",
        "60": "oops that's a video of myself okay so\n",
        "61": "this is a list 61b\n",
        "63": "and so whereas before we are always\n",
        "65": "saying public class lists 61b now we're\n",
        "68": "just gonna say interface instead why\n",
        "70": "interface well it's gonna have some\n",
        "72": "slight twists from what you should do\n",
        "73": "with the class and we'll see those in a\n",
        "76": "moment the big idea is it an interface\n",
        "79": "as a specification of what a list can do\n",
        "82": "and not how to do it so what can a lists\n",
        "85": "do well for example I know it should be\n",
        "88": "able to do I can go look at a list and I\n",
        "91": "can see at first I don't know maybe I'll\n",
        "93": "go to the top I know every list should\n",
        "95": "be able to do at last okay so I can do\n",
        "100": "public void add last item X okay and now\n",
        "101": "rather than actually writing out the\n",
        "102": "code for this thing I'm actually just\n",
        "105": "gonna put a semicolon and that now is\n",
        "109": "okay if I actually there's one little\n",
        "110": "issue here though you'll notice this\n",
        "111": "cannot resolve symbol items because I\n",
        "115": "forgot to do this just at my typewriter\n",
        "117": "okay so at this point I basically said\n",
        "119": "that list 61 B's should be able to add\n",
        "121": "and so it couldn't go through this a\n",
        "123": "list class and manually look up all of\n",
        "125": "these and copy them over but I'm\n",
        "126": "actually gonna do something else I'm\n",
        "128": "gonna copy everything over to maybe make\n",
        "131": "a better point so when I copy everything\n",
        "132": "over\n",
        "134": "notice something which is that these\n",
        "135": "notice something which is that these\n",
        "137": "things here are private variables they\n",
        "140": "say how you should store information not\n",
        "141": "every list should have an array right so\n",
        "143": "that's not part of being a list some\n",
        "145": "lists don't have a raise at all I don't\n",
        "147": "want a constructor I mean that's not an\n",
        "148": "obvious fact but I don't\n",
        "150": "how about resizing is that something I\n",
        "153": "want to keep no some lists don't resize\n",
        "155": "like D list s less there's no notion of\n",
        "156": "resizing so I'll just delete that\n",
        "158": "entirely and in fact the fact that this\n",
        "159": "is private you'll even notice if I\n",
        "161": "highlight this private not allowed here\n",
        "163": "it would make any sense to have private\n",
        "166": "right private inherently is a secret\n",
        "168": "implementation implementation detail so\n",
        "170": "it doesn't make sense to make it part of\n",
        "172": "the list interface no one's ever gonna\n",
        "175": "use it how about a blast okay well we\n",
        "176": "already have that that sounds pretty\n",
        "177": "already have that that sounds pretty\n",
        "179": "good should list get last okay now I'm\n",
        "182": "feeling pretty good yeah okay get me\n",
        "184": "sighs that seems like a normal list\n",
        "186": "thing to do you know notice that it's\n",
        "188": "the public things I'm keeping here's\n",
        "193": "remove last here's insert that seems\n",
        "200": "good and first and so if I look at all\n",
        "202": "this will notice something interesting I\n",
        "206": "have now specified what a list 61b is\n",
        "209": "and not how it's done and so if we think\n",
        "211": "about the universe I've crafted this is\n",
        "214": "all the things a list 61b can do so you\n",
        "215": "can think about this almost like a\n",
        "218": "specification of what someone who is say\n",
        "221": "a police officer should be able to do\n",
        "222": "okay so all the things that police\n",
        "225": "officer should be able to do let's say\n",
        "229": "take fingerprints or make phone calls\n",
        "231": "drive a car whatever all the things that\n",
        "233": "a police officer should be able to do\n",
        "238": "that's the list and if anybody says I am\n",
        "240": "you can assume yes they know how to\n",
        "243": "drive a car how about the next thing\n",
        "246": "well the next step is we are going to\n",
        "248": "specify that something actually is a\n",
        "249": "list 61b\n",
        "251": "so in this case we'll use the new\n",
        "253": "implements keyword in this case to to\n",
        "255": "specify that relationship so just like\n",
        "256": "before we had interface is the new thing\n",
        "258": "now we'll have implements and it'll look\n",
        "259": "a little something like this\n",
        "262": "so let's go into our a list class and\n",
        "265": "let's say implements\n",
        "272": "list 61b now I actually messed up\n",
        "273": "interested unless\n",
        "275": "61p item I was thinking my phone buzzed\n",
        "277": "and kind of made me think about\n",
        "280": "so we implement list 61 B and item and\n",
        "283": "that's it okay now we're gonna s list do\n",
        "288": "the same thing implements list 61 be I\n",
        "291": "am and so at that point once I've done\n",
        "293": "that this is the universe we live in\n",
        "296": "okay so what also this should match the\n",
        "299": "earlier one work so what Josh you should\n",
        "303": "be asking me well so what is now this\n",
        "306": "okay so remember our longest class we\n",
        "308": "don't like the idea having multiple\n",
        "311": "longest methods some for s lists some\n",
        "313": "for a list and so now we've defined this\n",
        "315": "interface we can actually do lists 61b\n",
        "319": "okay that should work fine and so if we\n",
        "323": "run this code here see we get back\n",
        "326": "watching and even if we change a list in\n",
        "331": "the test drive here do run again watch\n",
        "333": "it so it's kind of like before if we had\n",
        "334": "the directions that explained how to\n",
        "336": "wash a dog we've now built a machine\n",
        "338": "that can clean any kind of a dog not\n",
        "340": "just Malamutes not just poodles but any\n"
    },
    "Title=[Inheritance1, Video 4] Overloading_Id=QRiSD8er92c": {
        "0": " \n",
        "2": "what we've done so far our work just\n",
        "3": "fine we're going to go a little further\n",
        "5": "so to be the best programs we can be\n",
        "7": "we're not only going to specify that a\n",
        "10": "list is a list 61b we're also going to\n",
        "11": "mark every single method that came from\n",
        "14": "less 61 p with a special override\n",
        "17": "annotation so what I mean by that what\n",
        "18": "we look at all these methods some of\n",
        "20": "them came from list 61 be like add\n",
        "22": "laughs I'm going to put your override\n",
        "24": "with an apt symbol that's going to go\n",
        "25": "through for every one of these and just\n",
        "27": "write override okay now this doesn't\n",
        "28": "actually change what happens when my\n",
        "31": "code runs it doesn't make it faster but\n",
        "33": "it will have one tiny effects that we'll\n",
        "35": "see in a moment so it's going to do it\n",
        "38": "real quick and that's that so now we\n",
        "40": "marked all the methods with override and\n",
        "42": "while that's not strictly speaking\n",
        "44": "necessary we're going to require you to\n",
        "49": "do this in 61 be so if a subclass let me\n",
        "50": "just tell you what override means like\n",
        "53": "at first if a subclass has the same\n",
        "55": "night the same signature as a method in\n",
        "57": "the superclass we're going to say the\n",
        "59": "subclass method overrides the method so\n",
        "60": "in other words on the Left we have over\n",
        "63": "writing here's the animal interface and\n",
        "66": "as a make noise methods and what do pigs\n",
        "68": "do well one of the things they can do is\n",
        "70": "make noise so this override field other\n",
        "72": "for me above method so then the exact\n",
        "74": "same signature thus it is overriding\n",
        "77": "what the override tag does is it acts as\n",
        "79": "a reminder that we're overriding so it's\n",
        "81": "a signal to programmers this is an\n",
        "84": "override and even if you don't do over\n",
        "85": "I'd you're still overriding it so this\n",
        "88": "doesn't mean please override the method\n",
        "89": "and you can think of it it's just I like\n",
        "91": "by the way this is overriding so the\n",
        "93": "subtle distinction this is in contrast\n",
        "95": "by the way to the notion of overloading\n",
        "98": "so overloading before was where we have\n",
        "100": "two methods with the same name but a\n",
        "102": "different signature so a dog might have\n",
        "103": "a different way that it barks at dogs\n",
        "105": "vs. the way that it barks at cats so\n",
        "107": "it's a tiny difference but an important\n",
        "109": "one so it's overloading we don't have a\n",
        "111": "special overload tag but with overriding\n",
        "113": "we do and the reason is that in this\n",
        "114": "case they're going to be in two\n",
        "116": "different file so it's nice to make a\n",
        "117": "note here that this is actually\n",
        "118": "overriding so and a better interface\n",
        "119": "overriding so and a better interface\n",
        "121": "site a better implementation of this\n",
        "124": "shouldn't be a class we've got to fix it\n",
        "127": "you can't let this aggression stand okay\n",
        "130": "you know why not fix the slide while\n",
        "132": "recording you know let's not\n",
        "136": "ok so again override it is not strictly\n",
        "138": "speaking necessary it is largely a\n",
        "140": "reminder to a programmer that the method\n",
        "142": "ultimately came from someone else now\n",
        "144": "actually another reason a practical\n",
        "145": "reason which is protects against tight\n",
        "148": "boats by the way so if I'm overriding a\n",
        "150": "method and I accidentally do something\n",
        "152": "like let's say add first or whatever\n",
        "155": "then my program will compile and I'll\n",
        "156": "get an error saying you claim to be\n",
        "158": "overriding you said this came from the\n",
        "159": "boss but it doesn't actually override\n",
        "162": "something from a superclass so that's a\n",
        "163": "nice thing to give the compiler and\n"
    },
    "Title=[Inheritance1, Video 5] Interface Inheritance_Id=Z2EAsOKSj2M": {
        "0": " \n",
        "2": "this brings us to an incredibly\n",
        "3": "important term that I hope you'll\n",
        "5": "remember from this class that is\n",
        "8": "interphase inheritance so we'll come to\n",
        "9": "understand it over the rest of this\n",
        "12": "lecture but basically for now anytime\n",
        "14": "you use the implements key word we're\n",
        "15": "doing what's called interface\n",
        "17": "inheritance so what I mean by that is\n",
        "20": "all subclasses are said to inherit this\n",
        "22": "interface from their superclass right so\n",
        "23": "if any just any hyponym\n",
        "26": "it inherits the interface so in other\n",
        "28": "words whenever you go through when you\n",
        "31": "say X implements list 61b\n",
        "33": "in the same way that I have a license\n",
        "34": "that says I'm a doctor\n",
        "35": "that's a lot you're gonna expect from me\n",
        "39": "okay same deal so the interface consists\n",
        "40": "of all the methods signatures all the\n",
        "42": "things you expect the doctor to be able\n",
        "44": "to do prescribe drugs like help you when\n",
        "46": "you're sick those kind of things and\n",
        "48": "actually it turns out that these these\n",
        "50": "relationships can be multi-generational\n",
        "53": "that is we can have say government\n",
        "55": "official at the very top government\n",
        "57": "officials should serve the people lower\n",
        "60": "down we may have mayor so a mayor is a\n",
        "62": "governmental official so it does all the\n",
        "63": "things that governmental officials share\n",
        "66": "serving people but the mayor also has to\n",
        "68": "do things like balance city budget or\n",
        "69": "whatever that may mean and then you may\n",
        "71": "have specific mayor's like LaGuardia or\n",
        "76": "whatever okay so in the diagrams that\n",
        "77": "I'm gonna have in the future I'm gonna\n",
        "80": "specify that any interface is gonna be\n",
        "82": "in white and any class is in green so\n",
        "83": "you can think if you want to use people\n",
        "86": "as an example these are job titles or\n",
        "87": "categories of people and these are gonna\n",
        "90": "be specific people so interface\n",
        "92": "inheritance is going to be just an\n",
        "94": "incredibly useful tool for generalizing\n",
        "96": "code I think it's a really really lovely\n",
        "98": "idea and programming languages and we've\n",
        "99": "already seen an action in fact if we\n",
        "102": "look at our word utils class it can\n",
        "104": "handle any kind of list and that's real\n",
        "108": "nice so given that fact let's talk a\n",
        "110": "little bit about implementation\n",
        "111": "inheritance and how it interacts with\n",
        "114": "the golden rule of equals so there's a\n",
        "116": "little bit of a paradox that a student\n",
        "118": "some number of semesters ago as a little\n",
        "119": "bit next about I decided to roll it into\n",
        "121": "lecture maybe it's not the most exciting\n",
        "122": "thing but I'm gonna bring it up anyway\n",
        "126": "so the first fact is whenever you say x\n",
        "128": "equals y or whenever you pass a\n",
        "130": "parameter to a function you're just\n",
        "132": "copying the bits remember that to\n",
        "134": "remember we had this\n",
        "136": "type checking in Java which is that a\n",
        "138": "memory box can only hold 64-bit\n",
        "140": "addresses for the appropriate type so in\n",
        "142": "other words we can't say string x equals\n",
        "143": "new dog that's not allowed\n",
        "145": "however we look at this code it actually\n",
        "147": "seems like we're doing that we're saying\n",
        "149": "new a list and we're storing it in an a\n",
        "151": "list boxes a list memory box and we're\n",
        "153": "passing it into this box we're copying\n",
        "155": "the bits so in other words how did these\n",
        "157": "bits which are stored in an S list box\n",
        "159": "are in a list box how did those end up\n",
        "162": "in a list 61b box well let's actually\n",
        "164": "just for the sake of the argument let's\n",
        "167": "run this in the debugger and see exactly\n",
        "168": "what I mean in case you didn't quite\n",
        "170": "follow that so we look in the visualizer\n",
        "173": "when we get to this point in our code we\n",
        "175": "see the elk are watching yadda yadda\n",
        "178": "yadda and we step into this thing so\n",
        "180": "here's some list it is a 64-bit memory\n",
        "183": "box that holds the address of a list and\n",
        "186": "then whenever we go we step in we get\n",
        "188": "here we see a new variable is created\n",
        "190": "called list and it's a different type\n",
        "193": "list 61b yet these bits get copied here\n",
        "196": "but they're not quite the same time so\n",
        "198": "how is this resolved well the answer is\n",
        "200": "simple in Java Java really thinks of an\n",
        "203": "S list or an A List as a list right same\n",
        "205": "deal here with this example an A List it\n",
        "208": "is a list 61p so it makes perfect sense\n",
        "211": "that a list 61 B variable can hold the\n",
        "213": "address here in other words you know you\n",
        "216": "may be a Western doctor an Eastern\n",
        "218": "doctor whoever whatever tradition you\n",
        "220": "make em come from but if there's a\n",
        "223": "commonality about what things we expect\n",
        "225": "from those doctors then it's safe to be\n",
        "227": "able to ask them to say help us ok the\n",
        "229": "results we get back may be different but\n",
        "231": "we can safely ask it and they won't get\n",
        "233": "confused maybe that's the way to think\n",
        "235": "the jargony way of putting it is that if\n",
        "239": "X is a superclass of Y then memory boxes\n",
        "241": "for the class X may contain Y in other\n",
        "242": "words the list\n",
        "245": "61 be a list 61 be variable can hold a\n",
        "247": "reference to an S list in a list or\n",
        "249": "indeed any list that could ever be so\n",
        "251": "let's see if that actually made sense to\n",
        "253": "you ok this will be the rest of our kind\n",
        "257": "of tedious inheritance philosophy\n",
        "259": "lecture but consider this question and\n",
        "262": "maybe pause it here will this code\n",
        "263": "compile what do you think it'll do and\n",
        "265": "if so what will happen when it runs and\n",
        "267": "this is a bit of a test of your\n",
        "268": "deep understanding of the golden rule of\n",
        "271": "equals so think about this pause the\n",
        "280": "video and then I'll spoil it okay I was\n",
        "282": "assuming you're pausing so that's giving\n",
        "285": "you time to pause all right um let's try\n",
        "289": "running it so in this file I have the\n",
        "293": "code commented out let's here exit this\n",
        "298": "debugging session instead let's run this\n",
        "305": "run is it dinner okay debugger all right\n",
        "308": "so when I run this code we get up to\n",
        "309": "this point we'll do the dip will\n",
        "311": "actually show the visualizer and we'll\n",
        "313": "step over this so we see that this first\n",
        "315": "line it compiled fine first of all we\n",
        "317": "know that because we're no red squiggly\n",
        "319": "so the answer is not a and then how\n",
        "322": "well creates a new s list and then it\n",
        "324": "stores that address and some list that's\n",
        "327": "totally fine and then what happens\n",
        "329": "whenever we try and add first well it\n",
        "331": "turns out that this some list pointer\n",
        "333": "will actually be able to execute ad\n",
        "335": "first so when I click this thing right\n",
        "337": "here it'll work just fine okay\n",
        "341": "so the answer is in fact B great so\n",
        "342": "that's a little bit more about the\n",
        "343": "golden rule equals just making sure\n",
        "345": "these are things you might not think\n",
        "347": "about really deeply and critically when\n",
        "348": "you're learning how to program but I\n",
        "350": "figured I'd bring them up since hey you\n"
    },
    "Title=[Inheritance1, Video 6] Default Methods and For Loops_Id=q1avPkrxStc": {
        "0": " \n",
        "2": "there's another totally different but\n",
        "3": "complementary way to use inheritance\n",
        "6": "known as implementation inheritance and\n",
        "7": "we're going to see that in the context\n",
        "9": "of something known as a default method\n",
        "12": "so for better or worse java also allows\n",
        "14": "what's called implementation inheritance\n",
        "16": "and contrast to what we see books all\n",
        "18": "before whenever we use implementation\n",
        "20": "inheritance we're going to inherit not\n",
        "23": "just what the list should do but also\n",
        "25": "how so instead of just getting a list of\n",
        "27": "all the things that a list should be\n",
        "29": "able to do we're going to say how to do\n",
        "31": "it the way to do this is we're going to\n",
        "33": "use the default keyword to specify a\n",
        "36": "method that all subclasses will be able\n",
        "40": "to use subscri the top so let's do in\n",
        "42": "this case the keyword we need is default\n",
        "44": "to new one outside height default and\n",
        "46": "then i'm going to say public void print\n",
        "48": "and then here rather than putting a\n",
        "50": "semicolon we are going to provide this\n",
        "53": "to any list that implements with 61 be\n",
        "56": "the Prince to lift works for any kind of\n",
        "60": "list now obviously this method can't try\n",
        "61": "and access instance variables because\n",
        "63": "there are no instance variables here\n",
        "64": "instead we're going to use these methods\n",
        "66": "to do it so you might consider how you\n",
        "68": "would do that but i'm just going to\n",
        "70": "spoil it pretty quickly up to you so i'm\n",
        "72": "going to start by saying int I equals 0\n",
        "74": "and then as long as I is less than sighs\n",
        "77": "I'm just going to print out the ice item\n",
        "79": "which I can get by doing get I all out\n",
        "81": "of space to make it look nice and i'll\n",
        "84": "say i equals I Plusle okay so simple\n",
        "86": "enough how do we actually use this\n",
        "88": "method well we can just go back to it's\n",
        "90": "a demo and here we have okay well this\n",
        "92": "is some list equals new atlas and\n",
        "97": "because s list implements list 61b that\n",
        "98": "print method will appear in the list\n",
        "101": "there it is print okay because that's\n",
        "102": "part of what being a list is all about\n",
        "106": "against you implemented it for free so\n",
        "108": "in this case if I run my code I'll get\n",
        "111": "back elk if I actually want to see it do\n",
        "114": "something interesting we can do add last\n",
        "121": " \n",
        "124": "existential crises I don't know knows\n",
        "126": "what else do these days I'm guessing I'm\n",
        "128": "kind of known a look okay so if we run\n",
        "130": "this code hopefully it should print them\n",
        "134": "out in order as a demo and there we go\n",
        "136": "so I printed out just fine good job with\n",
        "139": "61 be so that's a default map now\n",
        "141": "actually i'm going to show you a\n",
        "142": "slightly different way to write loops\n",
        "144": "now it's kind of divorce from the rest\n",
        "146": "of the lecture but it's something that i\n",
        "147": "ran out of time to do in a previous\n",
        "150": "lecture so let's do it now so i'm going\n",
        "152": "to make an observation that's often when\n",
        "154": "you write a loop there's this certain\n",
        "157": "pattern you have a line that initializes\n",
        "159": "a variable you have a check that\n",
        "161": "determines that the loop should run and\n",
        "163": "then finally you have some kind of\n",
        "164": "iteration or increment something that\n",
        "169": "increases whatever my counters so there\n",
        "171": "exists another constructs in Java which\n",
        "173": "looks something like this it goes for\n",
        "177": "initialization before in it check it\n",
        "179": "erase okay so what does it mean to\n",
        "180": "initialize i'm going to say for rent i\n",
        "183": "equals 0 what's my check I is less than\n",
        "185": "sighs and what's the thing I do at the\n",
        "188": "end of the loop i equals I plus 1 so\n",
        "191": "this right here is the same thing as\n",
        "194": "this code right here but it's all on one\n",
        "196": "line now often I try and tell people not\n",
        "198": "to be clever when their programming but\n",
        "200": "this is something so common in languages\n",
        "202": "that even though it's a little bit weird\n",
        "204": "syntax everybody will know it if you\n",
        "205": "don't know it yet you're going to see it\n",
        "207": "a lot so may as well learn it right now\n",
        "209": "so at that point I just move this inside\n",
        "212": "of the loop and when I run it it'll work\n",
        "215": "just fine so try that out maybe you'd\n",
        "217": "use the visualizer to see exactly what's\n",
        "219": "going on later but we can run it just to\n",
        "220": "make sure we didn't break anything right\n",
        "224": "now okay good so while loops not as goes\n",
        "226": "for loops for the most part these are\n",
        "228": "considered more you know people use the\n",
        "230": "term pythonic loops that feel like\n",
        "232": "Python this is more Jove onyx I guess\n",
        "234": "I've never heard that term but I made it\n",
        "239": "up now so what have we achieved well our\n",
        "242": "interface has not only a list of what a\n",
        "244": "list can do but also how you can print a\n",
        "248": "list I have one question for you then is\n",
        "251": "this method efficient so we have four\n",
        "253": "possible answers 1 it is inefficient for\n",
        "255": "both a lists and s less\n",
        "257": "to its sufficient for a list only\n",
        "259": "necklace only or finally the last of the\n",
        "261": "pole so think about that for a moment\n",
        "263": "and I'm letting you and being a little\n",
        "267": " \n",
        "271": "okay so how do we think about this well\n",
        "273": "I guess one way we can appeal to this or\n",
        "275": "figure out this question is look at a\n",
        "278": "list and see how it works so get it is\n",
        "280": "going to be fast and a list because it\n",
        "282": "immediately gets all the items whereas\n",
        "283": "we look at s list what do we have to do\n",
        "285": "again let's see how did it work and use\n",
        "288": "them at scanning react get okay actually\n",
        "289": "yeah there's a lot of work we've got to\n",
        "292": "iterate through some big ol a list not\n",
        "295": "so great okay so in this case it is\n",
        "296": "efficient for a lift but inefficient for\n",
        "298": "s list and that's because get has to\n",
        "300": "work its way all the way through the\n",
        "302": "lips the next video we'll talk about how\n",
        "304": "we can deal with this but that's\n",
        "306": "basically what we get out of this\n",
        "308": "implementation inheritance idea is the\n",
        "309": "ability to not have to write a print\n",
        "311": "method if we don't want to there's no\n",
        "313": "print method and s list yet we can print\n"
    },
    "Title=[Inheritance1, Video 7] Overriding Default Methods_Id=9M9exmhsjmc": {
        "0": " \n",
        "2": "the existence of this print method in\n",
        "4": "lists 61 B means we don't have to write\n",
        "7": "something for s list but we can see here\n",
        "9": "that it's rather inefficient so what can\n",
        "10": "we do about it one thing is we can just\n",
        "13": "override what the boss says so of course\n",
        "15": "since we're a subclass we've talked\n",
        "17": "about how overwriting is possible and it\n",
        "18": "turns out in this case we can actually\n",
        "21": "write a print method in s list even\n",
        "22": "though it's already been implemented in\n",
        "25": "list 61 B and in this case we're really\n",
        "27": "in this case really overriding what the\n",
        "28": "boss set we're ignoring how the boss\n",
        "30": "does things we're gonna do things our\n",
        "32": "way because we trust ourselves so I'm\n",
        "34": "gonna say override here and then I say\n",
        "38": "public void print and now I'm gonna\n",
        "40": "think how do I print in a more efficient\n",
        "41": "way than going through and getting over\n",
        "43": "and over well actually what would make\n",
        "45": "more sense is stepping through the list\n",
        "47": "item by item and just printing as we go\n",
        "49": "and so we could do something like this\n",
        "53": "or say for node P equals Sentinel P not\n",
        "57": "equal to null P equals P dot next okay\n",
        "59": "the idea is I'm gonna go until the\n",
        "63": "pointer hits null and I'm gonna every\n",
        "65": "time I finish the loop I'm gonna step\n",
        "67": "forward one stack then I'll put system\n",
        "70": "dot out dot print well print out PE item\n",
        "72": "and we'll add a space that was a tiny\n",
        "74": "little bug here which is we don't\n",
        "75": "actually want to print out the sentinel\n",
        "77": "item we want to start at Sentinel dot\n",
        "80": "next but this code here should work and\n",
        "82": "so if I go to is a demo which I shall\n",
        "83": "prove to you that it's working by saying\n",
        "90": "I see the boss doesn't know what he's\n",
        "92": "doing so we'll do that first just to let\n",
        "93": "us know that this is actually running\n",
        "95": "and then when I go to is a demo and I\n",
        "97": "run this again\n",
        "99": "the boss doesn't know he's doing elk\n",
        "101": "dwell on existential crises okay so in\n",
        "103": "this case we're actually using this\n",
        "104": "print method and we know it's more\n",
        "105": "efficient because it's going to use each\n",
        "107": "node exactly once instead of iterating\n",
        "110": "over and over now one issue with this\n",
        "112": "that I want to bring up with override is\n",
        "114": "it's quite handy to have so let's\n",
        "117": "imagine that we had not put override and\n",
        "118": "instead of print we'd actually mentally\n",
        "121": "type to print this code will still\n",
        "122": "compile right it's okay to have a print\n",
        "125": "method nobody's gonna say no but now\n",
        "127": "when we call is a demo and we run the\n",
        "130": "code we'd actually use list 61 B's so\n",
        "132": "the error here is that we didn't\n",
        "135": "/ i if we had the override tag we would\n",
        "137": "have gotten a hint that said uh-oh this\n",
        "139": "isn't actually a override and we'd\n",
        "140": "realize oh I see\n",
        "142": "we misspelled friend so that's a nice\n",
        "145": "thing so this is our new better print\n",
        "147": "method you can always override it if you\n",
        "150": "want things to work about so here's a\n",
        "151": "question that I'd like you to ponder\n",
        "155": "just briefly recall that if X is a\n",
        "157": "superclass of Y then an X variable can\n",
        "159": "hold a reference to a Y so in other\n",
        "161": "words in English as an example if you\n",
        "164": "have a list 61b variable it can hold the\n",
        "166": "address of an S list so in the example\n",
        "168": "we've been running here we set s list\n",
        "170": "equals new s list now the question is\n",
        "172": "what happens if we change this to list\n",
        "173": "61b\n",
        "176": "is this gonna work so we'll compile we\n",
        "177": "already know that from before but the\n",
        "179": "question is which one of those print\n",
        "182": "methods do you think it's gonna call so\n",
        "186": "think about what you think okay so it\n",
        "187": "turns out that it will actually use the\n",
        "188": "turns out that it will actually use the\n",
        "189": "one you want which is print in fact\n",
        "191": "let's try it out we run it and we get\n",
        "193": "the boss doesn't know what he's doing\n",
        "195": "elk dwell on existential crises that's\n",
        "197": "great and this is the sensible choice\n",
        "199": "and the question is how does it work\n",
        "201": "so this is it being a bit of an involved\n",
        "203": "talking topic so I'll move to the next\n",
        "205": "video but it's something that turns out\n",
        "207": "to be simpler than you might think so\n",
        "208": "often people find it confusing when\n",
        "210": "they're first letting Java knowing\n",
        "211": "exactly how to know when one's being\n",
        "213": "called for the other but we'll tease it\n"
    },
    "Title=[Inheritance1, Video 8] Dynamic Method Selection_Id=eNtItRCIkBg": {
        "0": " \n",
        "2": "understanding exactly how this works is\n",
        "4": "really important and unfortunately it's\n",
        "6": "one of those things that it's easy to\n",
        "10": "learn an overly complex Byzantine set of\n",
        "11": "rules for how things work but there's\n",
        "12": "rules for how things work but there's\n",
        "13": "actually a simple way to think about it\n",
        "16": "so the way to think about this is this\n",
        "19": "false every variable in Java when you\n",
        "23": "declare one has a compile time type or I\n",
        "25": "sometimes call it a static type and that\n",
        "27": "thing never ever changes so for example\n",
        "31": "when I say living thing lt1 I get a box\n",
        "33": "and this is a memory box at 64 bits and\n",
        "36": "it can only ever point at a living thing\n",
        "39": "now every variable also has a dynamic\n",
        "41": "type sometimes called a runtime type and\n",
        "43": "this is the type specified at\n",
        "45": "instantiation that is when you say new\n",
        "47": "and it's equal to the type of the object\n",
        "49": "being pointed at that's what we mean by\n",
        "51": "runtime type so at this point I haven't\n",
        "53": "instantiated anything so the note the\n",
        "56": "dynamic type will just note as null\n",
        "58": "along comes this next line of code we\n",
        "60": "make a new Fox and we say el t1 equals\n",
        "63": "that so new fox gets created we copy its\n",
        "65": "address and lt1 here's that creature and\n",
        "66": "address and lt1 here's that creature and\n",
        "68": "now we have a dynamic type its Fox it's\n",
        "70": "the type of the object being pointed at\n",
        "74": "and so we'll continue so next comes\n",
        "77": "animal a1 equals LT 1 in this case we\n",
        "79": "get a new box that holds animal\n",
        "81": "references it's static type is animal\n",
        "83": "and it never changes in fact look at\n",
        "84": "that it's like inscribed right on the\n",
        "87": "box can't get rid of that and it's\n",
        "90": "dynamic type is Fox and we can also have\n",
        "92": "variables of static type Fox that's fine\n",
        "94": "so I make a variable a static type Fox\n",
        "96": "it also points a fox in this case the\n",
        "99": "static and the dynamic type are both Fox\n",
        "102": "lastly we decide LT 1 is now going to\n",
        "103": "point at a new object which is a squid\n",
        "105": "so the static type of course does not\n",
        "107": "change because it never does but the\n",
        "110": "dynamic type is now squid ok great\n",
        "113": "so what well this is the rule thing if\n",
        "115": "you know the dynamic type of something\n",
        "117": "then you know what happens with an over\n",
        "119": "in method so suppose we call a method of\n",
        "123": "an object using a variable which has\n",
        "126": "compile time type X and runtime type Y\n",
        "128": "so for example compile time type list\n",
        "131": "and run time type s list as shown here\n",
        "133": "then if it is the case\n",
        "136": "that the dynamic type overrides the\n",
        "138": "method then the dynamic types method\n",
        "139": "will be used instead\n",
        "141": "and that's something known as dynamic\n",
        "143": "method selection this term is a little\n",
        "145": "bit obscure and it's not totally\n",
        "147": "standard but I don't really have a great\n",
        "149": "term so we use it in our course so in\n",
        "151": "this case whenever we call something\n",
        "154": "even though we're using the variable s1\n",
        "156": "which is this variable right here\n",
        "158": "because of the fact that the S list\n",
        "160": "class overrides it we use the dynamic\n",
        "162": "types method instead that's what you\n"
    },
    "Title=[Inheritance1, Video 9] Overloaded Methods_Id=WHYaqzTFh8A": {
        "0": " \n",
        "2": "now let's do something a little sneaky\n",
        "5": "suppose I have a class called puzzle and\n",
        "8": "has two overloaded methods one is peak\n",
        "10": "which peaks at list 61 B's and it prints\n",
        "13": "out the last item in a list 61 be I also\n",
        "15": "have a method called peak which takes s\n",
        "19": "lists and prints up the first item so my\n",
        "23": "puzzle for you is as follows suppose I\n",
        "26": "have a variable of static type s list s\n",
        "28": "P and I set it equal to a new s list\n",
        "31": "okay so it's dynamic type is also s list\n",
        "33": "then I create a variable of static type\n",
        "37": "list 61 B and then give it dynamic type\n",
        "39": "s list and they're pointing at the same\n",
        "44": "object and we fill in elk are cool so if\n",
        "47": "I call the method peak SP and I call the\n",
        "49": "method Peak LP the question for you is\n",
        "51": "which of these methods get called in\n",
        "53": "other words what gets printed so think\n",
        "55": "about that for maybe thirty Seconds to a\n",
        "60": "minute or however long you want I mean\n",
        "63": "that's not live lecture where I make\n",
        "69": "people take a certain amount okay so we\n",
        "71": "just did all this work and we said okay\n",
        "72": "well you know if there's like\n",
        "75": "overwriting data data we just use the S\n",
        "77": "list class so obviously it's obviously\n",
        "79": "just gonna be let's see the s list so\n",
        "82": "it's gonna print out L twice okay nope\n",
        "86": "wrong so why well Josh you should be\n",
        "87": "complaining I thought you just told me\n",
        "89": "that there's a simple set of rules and\n",
        "91": "you'll set me straight and I won't get\n",
        "93": "confused well I tricked you a little bit\n",
        "95": "this is overloading and what we did\n",
        "97": "before was overriding and I want to draw\n",
        "99": "this distinction in the tricky way\n",
        "100": "because I think this is where students\n",
        "102": "get confused okay so what happened here\n",
        "105": "well when it comes to overloading we\n",
        "107": "don't do dynamic method selection\n",
        "110": "instead when the compiler compiles the\n",
        "112": "code it says okay here's a peek method\n",
        "115": "alright there's one here that matches\n",
        "117": "the signature it just says I know I have\n",
        "119": "an S list a variable aesthetic type s\n",
        "122": "list so I'm gonna call s list when I get\n",
        "124": "to this point the compiler also says\n",
        "126": "well when I get to this point in the\n",
        "128": "code I'm gonna compare the signatures\n",
        "129": "I'm gonna say I have\n",
        "130": "a method for lists and a static type\n",
        "132": "variable list so I'm going to do that\n",
        "133": "when I get there\n",
        "135": "so other words the compiler before it\n",
        "136": "starts running decide this is what it\n",
        "139": "wants it wants to call the s list\n",
        "143": "oriented method up top and the list 61b\n",
        "144": "at the bottom and by the time the code\n",
        "146": "actually runs we get elk and cool right\n",
        "149": "so let's draw the distinction between\n",
        "152": "overriding and overloading dynamic\n",
        "153": "method selection only happens for\n",
        "156": "overridden methods and that happens\n",
        "158": "whenever an instance method of the\n",
        "160": "subtype overrides some method and the\n",
        "162": "super type so for example with s list we\n",
        "164": "had print and that overrode a method in\n",
        "168": "the list 61 Bay B interface so print is\n",
        "169": "a great example make noise for animals\n",
        "171": "maybe so that's overwriting\n",
        "173": "so if I ask a variable like I have a\n",
        "175": "pointer to a variable and I asked that\n",
        "177": "class itself hey would you like to do\n",
        "179": "something it will say great I got it I'm\n",
        "181": "gonna use the most specialized method I\n",
        "184": "have available this does not occur for\n",
        "186": "overloaded methods so this is for\n",
        "188": "example in a class has two methods or\n",
        "189": "three methods or whatever one for the\n",
        "192": "super type and one for the subtype okay\n",
        "195": "so here I have s lists list 61 be set\n",
        "197": "and so forth and so in this case even\n",
        "200": "though this is a subtype of this super\n",
        "203": "type if I call peak with overloading we\n",
        "205": "use exactly what we say we want okay\n",
        "207": "let's just have Java was design I think\n",
        "209": "it's actually a pretty sensible reason\n",
        "210": "but we won't pick it apart in this\n",
        "212": "lecture now there's obviously\n",
        "215": "interactions between these on the\n",
        "217": "discussion worksheet number four this\n",
        "219": "will be available there's also some\n",
        "220": "guerilla section work you can do to\n",
        "222": "understand this better but those are the\n",
        "224": "basic rules dynamic method selection\n",
        "226": "happens for overriding not overloading\n",
        "228": "and that's pretty much as deep as it\n"
    },
    "Title=[Inheritance2, Video 1] Basic Use of Extends_Id=990kImS-_nA": {
        "0": " \n",
        "4": "oh hi it's me I just can't do that\n",
        "7": "convincingly anyway so today we're gonna\n",
        "8": "be talking more about implementation\n",
        "9": "be talking more about implementation\n",
        "10": "inheritance and in particular we're\n",
        "12": "gonna start with the keyword extends\n",
        "14": "we're gonna see ourselves growing and\n",
        "15": "power as far as what we can do with\n",
        "17": "inheritance and before we start I do\n",
        "18": "want to note that usually I like to\n",
        "21": "snazz up for these videos but this video\n",
        "23": "I just couldn't resist how radiant as a\n",
        "25": "red looks on camera so good job camera I\n",
        "28": "hope you enjoy it as much as I do anyway\n",
        "31": "so we saw last time\n",
        "33": "then when a class is the hyponym of an\n",
        "35": "interface we used implements so for\n",
        "38": "example an S list is a list 61b\n",
        "41": "and this is an interface in that case we\n",
        "43": "use the implements keyword and for the\n",
        "45": "most part what implements means is we're\n",
        "47": "declaring that we are indeed lists and\n",
        "49": "we will implement all the methods that\n",
        "52": "list 61\u00c2\u00b0 require right I claimed to be a\n",
        "53": "list I better be able to give someone\n",
        "55": "add operation to remove operations and\n",
        "57": "so forth and maybe along the way I'll\n",
        "59": "pick up a couple default methods from\n",
        "62": "the interface so in the list 61b case we\n",
        "64": "had a print method but mostly it's about\n",
        "68": "interface inheritance in this little\n",
        "70": "section here we're gonna see how the\n",
        "73": "extends keyword is a powerful tool for\n",
        "75": "doing a really aggressive implementation\n",
        "77": "inheritance so in particular suppose I\n",
        "80": "have a class like rotating s list and I\n",
        "81": "want it to be an S list in the sense\n",
        "85": "that it does s less stuff but I don't\n",
        "87": "want it to be exactly the same thing in\n",
        "90": "this case what it like is a new method\n",
        "92": "rotate right that takes an existing\n",
        "94": "route list and it rotates as it rotates\n",
        "98": "every item around so if I have 5 9 15 15\n",
        "100": "will move over 9 over 5 will move over\n",
        "102": "and 22 will wrap back to the front gym\n",
        "105": "so it will be an S list but the extends\n",
        "107": "keyword will allow us to add additional\n",
        "109": "methods and keep all the originals so\n",
        "113": "let's try it out here we have a rotating\n",
        "114": "s last class and we see it does not\n",
        "116": "compile in particular if we highlight\n",
        "118": "one of these it says I don't have it add\n",
        "120": "last method now here the answer is\n",
        "121": "simple the reason why that's happening\n",
        "124": "is that while you and I both know that a\n",
        "125": "rotating s list is supposed to be an S\n",
        "127": "list we haven't told Java that's where\n",
        "129": "this new keyword extends come in\n",
        "132": "so I do extends s list item and now I\n",
        "134": "have rotating s list\n",
        "136": "mostly compiling what's missing is the\n",
        "138": "rotate right method which I'll now right\n",
        "140": "and it's just public void rotate right\n",
        "143": "and a little comment here rotates list\n",
        "147": "to the right almost got it\n",
        "152": "can you spell check in this right\n",
        "156": "rotates not perfect okay so now we got\n",
        "158": "to rotate right and we figure how do we\n",
        "160": "actually rotate a list okay well that\n",
        "162": "means deleting the last item basically\n",
        "165": "I'm just thinking of the front that's\n",
        "167": "one way to do it the easiest way so I\n",
        "169": "could just say item x equals remove last\n",
        "173": "and the way that this s list class knows\n",
        "174": "how to do it by rotating s list knows\n",
        "177": "how to do it it extends s list so when I\n",
        "179": "call this remove last method it\n",
        "181": "basically goes and calls the one inside\n",
        "184": "of this file which is right here\n",
        "187": "so back to s rotating s list we then say\n",
        "191": "add first X and at this point now we now\n",
        "193": "have rotating s list so if we run this\n",
        "195": "actually we see it compiles first of all\n",
        "197": "and now if we run it hopefully we get\n",
        "198": "the answer we want which should be 13 10\n",
        "201": "11 12 and indeed it is so that's the\n",
        "206": "most basic kind of extends now because\n",
        "208": "of the extents keyword what we get is\n",
        "210": "that this new rotating s list class\n",
        "212": "inherits all the members of s list\n",
        "214": "what's a member well that's all the\n",
        "216": "instance and static variables whatever\n",
        "219": "it may have all the methods and any\n",
        "221": "nested class however there's sort of a\n",
        "223": "funny thing which is if I use if I\n",
        "226": "declare one of these s list properties\n",
        "228": "here private then rotating s list won't\n",
        "230": "be able to use it but we'll see that\n",
        "232": "after the midterm constructors by\n",
        "234": "contrast are not inherited and we'll\n",
        "236": "play around with what that means later\n"
    },
    "Title=[Inheritance2, Video 2] Extends with Overriding_Id=RJ_OpzLeHeQ": {
        "0": " \n",
        "1": "let's try writing a more interesting\n",
        "4": "subclass of the S list this one's gonna\n",
        "6": "be called vengeful s list now normally\n",
        "8": "when you call remove last on an s list\n",
        "10": "best list it's kind of stoic it doesn't\n",
        "12": "care about its items it throws them away\n",
        "14": "never thinks about them again but the\n",
        "17": "vengeful s list never forgets so imagine\n",
        "20": "you add the numbers 1 5 10 and 13 then\n",
        "22": "remove last twice so that will delete 13\n",
        "25": "and 10 later you can go to the vengeful\n",
        "27": "s list and ask well who got deleted\n",
        "29": "print please print for me your lost\n",
        "31": "items and it should print 10 and 13 so\n",
        "33": "let's try implementing that now this is\n",
        "35": "not a practically useful thing just kind\n",
        "36": "of fun\n",
        "38": "so our vengeful s list I've already set\n",
        "40": "it up so that it extends s list this is\n",
        "42": "adding some items this is deleting them\n",
        "44": "and then asking for print so what we're\n",
        "46": "missing of course is our print lost\n",
        "48": "items function so let's write one now\n",
        "53": "so print lost items is here and in this\n",
        "55": "case we are not going to put override\n",
        "56": "case we are not going to put override\n",
        "58": "right like a try but it yells at us and\n",
        "60": "it says though that's not an SL s thing\n",
        "64": "this is new okay so what would printing\n",
        "65": "lost items do well somehow we have to\n",
        "69": "know about the lost items and so\n",
        "71": "thinking about it you can kind of ponder\n",
        "73": "this is a fun exercise by the way if you\n",
        "74": "want to try it out on your own\n",
        "76": "there's always code in the github\n",
        "78": "repository the lecture code repository\n",
        "81": "but what I imagine might work is let's\n",
        "83": "just keep a list of deleted items I\n",
        "85": "don't know where it's gonna come from\n",
        "87": "and then in print lost items will just\n",
        "89": "say deleted items not print this is a\n",
        "91": "list we can use to store things we could\n",
        "94": "print them out this way okay I guess\n",
        "96": "we'll add a comment here prints deleted\n",
        "98": "items you know kind of obvious but as\n",
        "102": "well okay so now what do we do well we\n",
        "103": "want to somehow keep track of the\n",
        "104": "want to somehow keep track of the\n",
        "105": "deleted items and we know that happens\n",
        "109": "we remove last so how could we change\n",
        "110": "this well I mean it doesn't make sense\n",
        "114": "to do like if you know or you don't want\n",
        "116": "to try and do something like vs1\n",
        "118": "deleted items dot add or whatever\n",
        "119": "because we want this to happen\n",
        "121": "automatically we want the vengeful s\n",
        "123": "list to remember it without changing the\n",
        "127": "main method so what we can do is change\n",
        "129": "how remove last works so in this case\n",
        "131": "you can override\n",
        "134": "remove last public void remove last\n",
        "138": "actually should be item and in this case\n",
        "141": "we will do the normal removal stuff but\n",
        "143": "we'll make sure to do delete items dot\n",
        "146": "add last at some point in this so let's\n",
        "150": "go look at the s list class and we see\n",
        "152": "here remove last so we can't just maybe\n",
        "155": "copy and paste everything here put it in\n",
        "159": "oops we'll just see what happens we'll\n",
        "161": "do just paste it first and we see\n",
        "163": "there's a bit of an issue Sentinel has\n",
        "167": "private access size has private access\n",
        "169": "get last note private access the issue\n",
        "172": "here it seems is that s lists they've\n",
        "175": "declared their sentinel and size methods\n",
        "178": "our site members to be private and\n",
        "181": "private in java means so private and\n",
        "183": "then not even your subclasses can access\n",
        "186": "it so even though eventual s list is an\n",
        "188": "s list and it does have a size field it\n",
        "191": "cannot access it from a vengeful s list\n",
        "193": "method so that's actually not going to\n",
        "195": "work at all instead we're gonna use\n",
        "197": "something that we haven't seen yet which\n",
        "199": "is the super keyword in this case we can\n",
        "201": "do super dot remove last and that means\n",
        "203": "called the super classes remove last\n",
        "206": "method and in this case what is eventual\n",
        "208": "s list it is an S list so that will go\n",
        "210": "up to the s list class and call the\n",
        "212": "appropriate method so we'll get that\n",
        "215": "last item we'll add it to this list and\n",
        "218": "then we'll return it okay now at this\n",
        "219": "point maybe my code will work let's try\n",
        "224": "running it okay so in this case we get\n",
        "227": "exception and thread and so we click\n",
        "228": "here and we see that the issue is on\n",
        "231": "this line it seems that deleted items is\n",
        "233": "null and we could use the debugger I\n",
        "235": "won't for time reasons but you can\n",
        "237": "imagine here that deleted items it was\n",
        "240": "never initialized so it is null and so\n",
        "242": "one way to fix this is to create a\n",
        "246": "constructor and the constructor will\n",
        "248": "just simply create an S list of items so\n",
        "251": "deleted items equals new s list item and\n",
        "254": "now I think things should work that's\n",
        "255": "dry\n",
        "257": "okay indeed now we get the printed\n",
        "259": "output that we expect 13 and 10 were\n",
        "262": "those that were lost now it's actually\n",
        "264": "possible I should mention here since I\n",
        "265": "don't think I have elsewhere in the\n",
        "267": "class so far that you can actually not\n",
        "271": "have a constructor here and instead set\n",
        "273": "it up at the time that the variable is\n",
        "275": "declared and that has the same exact\n",
        "278": "effect as having the constructor that\n",
        "280": "does the same thing this is probably a\n",
        "282": "little bit more common but I'm going to\n",
        "285": "leave it as a constructor for now just\n",
        "287": "for the sake of the point I'm going to\n",
        "289": "make in the next little segment so to\n",
        "291": "summarize what we did here we have a\n",
        "294": "class vengeful s list that is an S list\n",
        "297": "has a deleted items a list there\n",
        "299": "remember lots deleted items when you\n",
        "301": "create one you set aside an actual list\n",
        "303": "to store those deleted items and the\n",
        "305": "special part is we override the remove\n",
        "307": "last method where we will call the super\n",
        "309": "classes method using this new super\n",
        "312": "keyword and then of course we'll add the\n",
        "313": "item and return that's it that's our\n"
    },
    "Title=[Inheritance2, Video 5] Encapsulation_Id=GioVGLuW69o": {
        "0": " \n",
        "2": "let's get a little philosophical and\n",
        "3": "talk about a topic I really love known\n",
        "8": "as encapsulation so I'm gonna bring up\n",
        "10": "this topic in the context of our enemy\n",
        "13": "complexity anytime we try and build\n",
        "15": "programs that's the thing that we have\n",
        "17": "to contend with it's not the language\n",
        "19": "itself right it's not the semicolons and\n",
        "21": "the whatever else and it's not even\n",
        "24": "necessarily the bugs that we face or\n",
        "26": "whatever the main enemy ultimately is\n",
        "28": "complexity that's the source of our\n",
        "30": "anxiety and that's the thing that makes\n",
        "32": "a good programmer different from a bad\n",
        "34": "programmer is the ability to handle\n",
        "36": "complexity so you guys saw it whenever\n",
        "38": "in these lecture videos I built the\n",
        "41": "basic array and linked list based class\n",
        "43": "whenever you sat down and built a\n",
        "45": "somewhat larger thing the array and\n",
        "47": "linked list based Dex you had to contend\n",
        "49": "with more complexity and keeping that\n",
        "50": "complexity under control was the\n",
        "52": "principle challenge of that assignment\n",
        "54": "and I'd say that the difference between\n",
        "56": "someone who spent four hours and 20\n",
        "60": "hours on that project is most mostly how\n",
        "62": "they handled that complexity how they\n",
        "64": "managed all the pieces how much of the\n",
        "65": "program they tried to keep in their\n",
        "68": "brain at one time okay so there's a\n",
        "69": "bunch of different tools for managing\n",
        "71": "the complexity of something we're trying\n",
        "73": "to fill one of them is hierarchical\n",
        "74": "abstraction so what have you built\n",
        "76": "something truly huge it's very important\n",
        "78": "that you have layers of abstraction so\n",
        "80": "that somebody for example who wants to\n",
        "81": "use a list doesn't need to know about\n",
        "83": "the fact that there's an array under the\n",
        "84": "hood okay so that's something that's\n",
        "86": "very familiar and that's something you\n",
        "88": "didn't spend too much time fretting with\n",
        "93": "on project 1a however moving forwards\n",
        "95": "we're gonna go two scales much bigger\n",
        "97": "than project 1a and 1b on project 2 and\n",
        "98": "than project 1a and 1b on project 2 and\n",
        "99": "that's where these ideas are gonna be\n",
        "102": "super important so hierarchical it's a\n",
        "105": "hard word hierarchical abstraction is\n",
        "107": "one way and another is this lovely set\n",
        "109": "of ideas that a computer scientist named\n",
        "111": "David Parnas put together which\n",
        "114": "basically is built around the notion of\n",
        "117": "design for change okay so what David\n",
        "119": "means by that is you should assume that\n",
        "123": "you have some massive system that each\n",
        "125": "of the individual pieces can be swapped\n",
        "127": "out however changes can be made all the\n",
        "130": "time and your design should be such that\n",
        "132": "those changes don't break the\n",
        "133": "system okay so everything should be\n",
        "136": "built into nice modular pieces that\n",
        "138": "interact in nice ways so some\n",
        "140": "recommendations is to organize programs\n",
        "142": "around objects that's the entire object\n",
        "144": "oriented paradigm that we've been seeing\n",
        "146": "over and over in Java so that is for\n",
        "148": "example in Java all of the things that\n",
        "150": "have to do with the list are in one file\n",
        "152": "the ArrayList deck for example file and\n",
        "155": "all the information about how one of\n",
        "156": "those works is there all of the\n",
        "157": "functions are there all the instance\n",
        "159": "variables are there and that one place\n",
        "162": "another thing is this notion of letting\n",
        "165": "objects decide how to do things so for\n",
        "168": "example with interface or with\n",
        "170": "implementation inheritance and interface\n",
        "171": "inheritance for that matter\n",
        "174": "whenever you override a method whenever\n",
        "176": "I call the add last method dynamic\n",
        "178": "method selection calls the right the\n",
        "180": "right function and things work\n",
        "182": "that's another instance or that's an\n",
        "184": "example of how the Java language\n",
        "186": "incorporates these ideas now another\n",
        "188": "that's really important is this notion\n",
        "190": "of hiding information that others don't\n",
        "192": "need and this is so fundamental and so\n",
        "194": "important to managing a big system and\n",
        "196": "it's something that some of you guys are\n",
        "197": "starting to see a little bit of\n",
        "199": "challenges with with project 1b as I'll\n",
        "201": "explain in a short while now this whole\n",
        "203": "notion of managing complexity the reason\n",
        "205": "I'm going on this little rant here is\n",
        "207": "that I want to remind you that this is\n",
        "209": "ultimately the thing that's going to\n",
        "211": "make you successful or not successful as\n",
        "213": "a programmer is this notion of managing\n",
        "216": "complexity so this term there's term\n",
        "219": "encapsulation I'm borrowing these\n",
        "220": "definitions from Jonathan Xu check who\n",
        "223": "also teaches this class sometimes and so\n",
        "225": "he defines a module as a set of methods\n",
        "227": "that work together as a whole to perform\n",
        "229": "some tasks so maybe you have a class and\n",
        "231": "these maybe five or six methods they do\n",
        "233": "something right they'd capture the\n",
        "235": "notion of a list or whatever and we'll\n",
        "237": "say that a module is said to be\n",
        "239": "encapsulated if the implementation is\n",
        "242": "completely hidden that is the only way\n",
        "243": "that you can interact with this object\n",
        "246": "is through a documented interface so the\n",
        "247": "little picture I have here on the left\n",
        "249": "is of a cell even though the internals\n",
        "250": "is of a cell even though the internals\n",
        "251": "of a cell are incredibly complex you\n",
        "253": "know you have chromosomes and ribosomes\n",
        "256": "and tRNAs and whatever else this object\n",
        "258": "from an outside perspective it's\n",
        "260": "encapsulated you don't really need to\n",
        "261": "know how all that works to know\n",
        "263": "things like bacteria can make you sick\n",
        "265": "or whatever else they can do for you\n",
        "267": "make your produce knocked out you know\n",
        "269": "bacterial stuff\n",
        "272": "likewise in a raid deck you don't need\n",
        "274": "to know how the internals work you have\n",
        "276": "a documented in interface add last\n",
        "278": "remove last size and so forth and that's\n",
        "280": "the way you interact with it so I'm\n",
        "282": "project 1b let's see how encapsulation\n",
        "287": "really can be an important notion by\n",
        "288": "considering some questions that students\n",
        "289": "have okay\n",
        "292": "so project 1b you have to build an auto\n",
        "294": "grader for project 1a which was the\n",
        "296": "construction of this class and another\n",
        "298": "and I'm assuming if you're watching this\n",
        "299": "video you've already finished project\n",
        "301": "when I have not maybe this example will\n",
        "304": "be lost on you but in project 1b you\n",
        "306": "have to know I have to write tests that\n",
        "308": "prove that a specific implementation of\n",
        "310": "array deck is broken so some questions\n",
        "313": "students asked how do we check the\n",
        "314": "length of student in the raid a I'm\n",
        "316": "trying to find a bug in the resize\n",
        "317": "method I know it must have one but I\n",
        "318": "method I know it must have one but I\n",
        "319": "don't see how to check the length in\n",
        "321": "fact if I tried to do student arrayed\n",
        "323": "act it's not working so I don't know how\n",
        "325": "to check whether or not it expands or\n",
        "327": "another I wanted to test whether\n",
        "329": "resizing is working properly but when I\n",
        "331": "try to call array the items not linked\n",
        "333": "the compiler yells at me and it says\n",
        "334": "this is a private variable is there some\n",
        "336": "way around this or do we just not test\n",
        "339": "that or another can we assume these\n",
        "341": "things about student array deck can we\n",
        "343": "assume that uses next front equals four\n",
        "345": "next last equals five and starting size\n",
        "348": "array a so in all of these cases the\n",
        "350": "student trying to write an auto grader\n",
        "352": "is trying to think below the level of\n",
        "354": "abstraction that I think is most\n",
        "356": "appropriate it's just like imagine\n",
        "358": "imagine going to the doctor and you're\n",
        "361": "trying to figure out for example why\n",
        "363": "someone is sick okay or are they sick\n",
        "364": "let's say are they sick even simpler\n",
        "366": "question so you can ask them questions\n",
        "368": "and say you know how you feeling you can\n",
        "370": "check the reflexes and you could also\n",
        "372": "take a slice of their finger and put it\n",
        "373": "under a scanning electron microscope and\n",
        "375": "look at it at the atomic level but the\n",
        "377": "point is that's not really important\n",
        "378": "maybe you would learn something maybe\n",
        "381": "you wouldn't but the basic functioning\n",
        "383": "of a human is based on some higher level\n",
        "385": "principles and trying to go down to that\n",
        "387": "low level is just not the right way to\n",
        "389": "diagnose the sickness of a person any\n",
        "391": "more than this I think is a good way to\n",
        "393": "diagnose the sickness of a class now\n",
        "394": "sometimes it makes sense to\n",
        "396": "tests at this very low level of\n",
        "398": "abstraction but I think imagine our\n",
        "401": "purpose or sorry our goal as autograder\n",
        "403": "writers as instructors we have no idea\n",
        "405": "how you wrote your array deck I mean you\n",
        "406": "could have done any number of really\n",
        "408": "strange things and we would we wouldn't\n",
        "409": "know maybe you have two arrays five\n",
        "412": "array so who knows and we have to just\n",
        "413": "make sure that things obey the interface\n",
        "416": "that is the module you built we're gonna\n",
        "418": "treat it as a nicely encapsulated thing\n",
        "419": "and they're gonna make sure that it\n",
        "420": "behaves the way we expect\n",
        "423": "so in effect as the user of an array\n",
        "425": "deck you cannot observe the internals in\n",
        "427": "the array deck ideally and one thing I\n",
        "429": "love about Java is that the private\n",
        "430": "keyword makes it actually impossible\n",
        "432": "well unless you use a special library\n",
        "435": "called reflections to look inside of the\n",
        "437": "object and even when you write tests you\n",
        "440": "don't usually want to look inside so\n",
        "441": "this right here this picture I want to\n",
        "443": "bring this back okay\n",
        "445": "so always in any Java program in any\n",
        "446": "so always in any Java program in any\n",
        "447": "program you ever write there's gonna be\n",
        "449": "this high level of abstraction and a low\n",
        "451": "level of abstraction and often will\n",
        "453": "actually be many layers of these things\n",
        "456": "over and over that make it so you only\n",
        "458": "have to think about one universe at a\n",
        "460": "time so this example I had before was of\n",
        "462": "the cave dwellers as far as they're\n",
        "464": "concerned the list contains five three\n",
        "467": "one seven and twenty two now of course\n",
        "469": "the monks here who are manipulating the\n",
        "471": "shadows using these devices and this\n",
        "472": "fire they know that the secret is\n",
        "474": "there's actually an array of length 100\n",
        "476": "there's a size variable all this stuff\n",
        "479": "but the user has no idea and when you\n",
        "481": "write tests you should be thinking like\n",
        "483": "a user you should be thinking what can I\n",
        "485": "do to interact with these shadows to see\n",
        "487": "if they have a self-consistent logic so\n",
        "488": "for example I don't know I make like a\n",
        "491": "horse noise or whatever maybe I expect\n",
        "493": "this horse to react and the bass did not\n",
        "496": "it's these monks job to do there to make\n",
        "498": "sure that things are manipulated\n",
        "500": "properly but I'm not supposed to ask\n",
        "502": "someone here I'm not supposed to climb\n",
        "503": "over the wall and start asking the monks\n",
        "505": "questions because I don't even know this\n",
        "508": "world exists the private keyword makes\n",
        "510": "this wall absolute and I think that's a\n",
        "514": "lovely thing about Java ok so when it\n",
        "518": "comes to encapsulation one thing I want\n",
        "520": "to mention here is that in Java that\n",
        "521": "it's just a great language for making\n",
        "522": "it's just a great language for making\n",
        "524": "encapsulation have more teeth right you\n",
        "525": "can use encapsulation in a language like\n",
        "527": "Python but there\n",
        "529": "the thing it's more convention that it\n",
        "531": "is enforced by a compiler so it's a\n",
        "533": "little more serious in Java so by making\n",
        "535": "instance variables private and methods\n",
        "537": "like resize private you're in better\n",
        "539": "shape now as we'll see in the next video\n",
        "541": "one thing I think is very interesting is\n",
        "543": "the interplay between implementation\n",
        "545": "inheritance and encapsulation and in\n",
        "547": "fact it's fundamentally broken in a way\n"
    },
    "Title=[Inheritance2, Video 6] How Inheritance Breaks Encapsulation_Id=EfxYiAN6YME": {
        "0": " \n",
        "2": "let's see now how implementation\n",
        "5": "inheritance breaks encapsulation suppose\n",
        "7": "we have a dog class that has these two\n",
        "10": "methods here so there's a bark method\n",
        "12": "that does system that out that frontline\n",
        "14": "bark and bark many which uses a for loop\n",
        "17": "to call bark many times okay now to a\n",
        "19": "user on the outside I could say bark\n",
        "20": "many five times and I should get bark\n",
        "21": "many five times and I should get bark\n",
        "23": "bark bark bark bark and I don't really\n",
        "24": "care how its implement it I mean this is\n",
        "26": "one possible implementation but I have a\n",
        "29": "certain behavior in mind now it's\n",
        "30": "possible that later let's say the oracle\n",
        "32": "company is maintaining the dog class\n",
        "34": "maybe they decide someone comes into\n",
        "36": "work and says let's switch these right\n",
        "38": "so what I'm gonna do is make the bark\n",
        "40": "mini method called print' line bark and\n",
        "42": "the bark method is gonna call Barkham\n",
        "44": "anyone this will work exactly the same\n",
        "46": "and this change from an outsider's\n",
        "48": "perspective there is no difference right\n",
        "50": "i can call both of them i'll never see a\n",
        "53": "difference so here's where inheritance\n",
        "56": "causes trouble even though i may not\n",
        "58": "even have the source code to dog even\n",
        "60": "though it's built into java i can write\n",
        "63": "my own dog class so maybe i write one\n",
        "65": "called verbose dog and what is proposed\n",
        "67": "dog well it's a method that starts off\n",
        "69": "the bark many method by saying as a dog\n",
        "71": "i say and then calls the bark method\n",
        "74": "multiple times so let's imagine here's\n",
        "76": "my hierarchy i have a dog class and as a\n",
        "78": "bark and a bark mini class verbose dog\n",
        "80": "only overrides bark many so it inherits\n",
        "81": "only overrides bark many so it inherits\n",
        "84": "bark from above so the question is if i\n",
        "87": "vb Barkman III where VD is a verbose dog\n",
        "89": "variable the question the question for\n",
        "91": "you is what does this do\n",
        "92": "so ponder that for a moment what will\n",
        "96": "actually output okay so we have to turn\n",
        "99": "to dynamic method selection and in this\n",
        "102": "case if we do vb bark mini the dynamic\n",
        "105": "type of the bark of the vb variable is\n",
        "108": "verbose dog so we'll call this method\n",
        "111": "that will in turn call bark and this dot\n",
        "114": "bark we see does not exist so we'll turn\n",
        "117": "to our superclass and we'll call bark so\n",
        "119": "we'll get as a dog i say bark bark bark\n",
        "124": "now finally the rub someone at oracle\n",
        "126": "decides I'm gonna switch these two\n",
        "128": "methods I don't I like the idea of bark\n",
        "130": "being here instead the actual sound so\n",
        "133": "they changed this around now we already\n",
        "135": "no way that an outsider could ever ever\n",
        "138": "ever know but here perhaps maybe\n",
        "141": "something interesting happens I mean\n",
        "143": "something does so it's your job to\n",
        "145": "figure out what exactly so if now I do\n",
        "148": "VD bark mini three I want you to\n",
        "151": "consider this this class and think about\n",
        "152": "what happens and think really hard\n",
        "156": "because I'm gonna spoil it shortly okay\n",
        "160": "so in this case we call BD bark come in\n",
        "164": "III it's dynamic type is verbose talk so\n",
        "166": "this method executes we get here and we\n",
        "168": "say this dot bark okay\n",
        "172": "what's the dynamic type of this well it\n",
        "175": "is for post dog so we'll try and call\n",
        "177": "the bark method of verbose dog it\n",
        "179": "doesn't exist so we go to the superclass\n",
        "182": "this bark method executes and it goes\n",
        "185": "this bark a mini one what is the dynamic\n",
        "188": "type of this well the object in question\n",
        "191": "is actually its runtime type is verbose\n",
        "193": "dog so we call the bark mini method with\n",
        "195": "one as an argument\n",
        "196": "this in turn calls the bark method which\n",
        "198": "calls the bark mini method which calls\n",
        "199": "the bark method which calls the bark\n",
        "201": "mini method and we get caught in an\n",
        "203": "infinite loop so what just happened\n",
        "206": "there is that by allowing inheritance\n",
        "207": "and particular implementation\n",
        "209": "inheritance we now have a way that peek\n",
        "211": "inside of what was otherwise a\n",
        "213": "beautifully encapsulated class there was\n",
        "215": "no way to get in here but we just showed\n",
        "217": "we could and in fact it had dire\n",
        "219": "consequences we didn't change anything\n",
        "221": "about our code someone else changed\n",
        "222": "something they thought was safe and\n",
        "223": "Kapow\n",
        "227": "now this doesn't happen in a practical\n",
        "229": "way super often but it does and I think\n",
        "231": "that philosophically it's something that\n",
        "233": "makes me nervous about implementation\n",
        "235": "inheritance it breaks encapsulation and\n",
        "238": "just a really distasteful way and you\n",
        "239": "know there are benefits to\n",
        "241": "implementation inheritance but there are\n",
        "243": "trade-offs because we run afoul of this\n"
    },
    "Title=[Inheritance2, Video 7] Type Checking and Casting_Id=cMAchIFcRN0": {
        "0": " \n",
        "2": "let's do a quick review of what we know\n",
        "3": "about type checking in the context of\n",
        "5": "inheritance hierarchies and we'll also\n",
        "7": "talk about a new handy tool known as\n",
        "10": "casting so what I'd like you to do to\n",
        "13": "set the stage here is consider this code\n",
        "15": "and think about for each line of code\n",
        "17": "does that line of code cause a\n",
        "20": "compilation error and - does it cause\n",
        "22": "what method actually gets executed so if\n",
        "23": "we think about how dynamic method\n",
        "25": "selection works which one actually gets\n",
        "28": "run which method in the hierarchy so\n",
        "29": "I've already done the first two lines\n",
        "31": "for you I have that the vengeful s list\n",
        "34": "so I DSL is a vengeful s list variable\n",
        "36": "at a static type vengeful s list and\n",
        "38": "that points at a vengeful s list object\n",
        "42": "s L by contrast is an S list static type\n",
        "44": "- variable and it still points at\n",
        "45": "eventual s list because hey that's what\n",
        "47": "it does so think about these remaining\n",
        "49": "lines of code and I will let you pause\n",
        "54": "the video and ponder that so let's\n",
        "56": "consider first these two lines of code\n",
        "59": "I'm gonna put them in isolation in this\n",
        "62": "case do these work yes s lists have\n",
        "64": "certainly an add last and a remove last\n",
        "66": "method and which one gets called well\n",
        "69": "first when we consider the add last call\n",
        "73": "we consider the dynamic type what's the\n",
        "75": "dynamic type of SL well its vengeful s\n",
        "77": "list so we'll try and call the add last\n",
        "79": "method of vengeful s list however\n",
        "81": "vengeful s list did not actually\n",
        "84": "implement that it didn't override it so\n",
        "85": "it'll just go one step higher in the\n",
        "87": "hierarchy and it will use the S list\n",
        "90": "class at last method dynamic method\n",
        "91": "selection then comes around to remove\n",
        "92": "selection then comes around to remove\n",
        "94": "last and says hey you know what I'm\n",
        "95": "always gonna decide if the method is\n",
        "98": "overridden I'm gonna pick based on the\n",
        "100": "runtime type of the variable and in this\n",
        "103": "case the vengeful s list class does have\n",
        "105": "a remove last method we wrote it in one\n",
        "107": "of the first videos of the sequence and\n",
        "109": "so it runs the eventual s list okay so\n",
        "111": "other words we already knew little\n",
        "112": "review that's how dynamic method\n",
        "115": "selection behaves now how about this\n",
        "117": "next line of code SL dot print lost\n",
        "119": "items now here you might think well I\n",
        "122": "mean it is a vengeful S list and it has\n",
        "124": "a print lost items so maybe dynamic\n",
        "125": "method selection should be doing\n",
        "127": "something but there's an issue and\n",
        "128": "that's it the compiler is very\n",
        "130": "conservative with type checking so it\n",
        "132": "actually checks and it says you know s\n",
        "133": "lists don't actually\n",
        "136": "prynt lost items variable and the rule\n",
        "138": "of thumb the very simple rule is that\n",
        "140": "the compiler decides whether or not\n",
        "142": "something is valid based only on the\n",
        "144": "compile time type with a variable\n",
        "145": "remember that's also called the static\n",
        "147": "type so in this case because the S list\n",
        "150": "the SL variable has static type s list\n",
        "152": "we cannot call print lost items even\n",
        "153": "we cannot call print lost items even\n",
        "155": "though this underlying object here it\n",
        "156": "has dynamic type ventral s lists and\n",
        "158": "does have a print lost items method it\n",
        "161": "cannot run and actually the same thing\n",
        "164": "happens on this next line whenever I try\n",
        "166": "and assign that the address of this\n",
        "169": "vengeful s list to a new variable not\n",
        "171": "pictured here because it crashes but if\n",
        "174": "I actually created this variable bsl-2 I\n",
        "176": "could not actually copy the contents\n",
        "180": "from this memory box s list to another\n",
        "182": "vengeful s list box because the compiler\n",
        "185": "will say cannot take an S list and copy\n",
        "186": "its addressed eventual s list even\n",
        "188": "though you and I both know that the\n",
        "191": "runtime type is ventral s list so why is\n",
        "193": "that like what's the idea here well\n",
        "195": "basically the compiler is only going to\n",
        "197": "allow method calls and assignments based\n",
        "200": "on compile time types and it's just very\n",
        "202": "nervous it doesn't know what's gonna\n",
        "205": "happen at runtime and if it did actually\n",
        "208": "try and you know use all the intuition\n",
        "210": "we use to say this should be fine it\n",
        "212": "would have to basically mentally execute\n",
        "214": "the code in advance and that would mean\n",
        "215": "the compiler would have to be\n",
        "217": "considerably more sophisticated and in\n",
        "218": "fact it could run into trouble where a\n",
        "220": "bug in the code might mean the code\n",
        "222": "never compiles okay so kind of a subtle\n",
        "225": "issue but think about it this way just\n",
        "227": "the compiler is super super super\n",
        "229": "conservative and it will only allow\n",
        "231": "things based strictly on the compile\n",
        "235": "time types that you tell it ok now this\n",
        "237": "last little bit here whenever we said we\n",
        "238": "could not do this assignment we can\n",
        "240": "actually generalize that event and say\n",
        "242": "that expressions have compiled time\n",
        "244": "types and one of the jobs of the\n",
        "246": "compiler is to make sure that all the\n",
        "248": "expressions compile time types line up\n",
        "249": "and so we're not gonna go through the\n",
        "251": "whole type system in Java because it's\n",
        "254": "too complicated but essentially I'll\n",
        "257": "give a couple examples first if we have\n",
        "259": "an instantiation using the new keyword\n",
        "261": "this has some specified compile time\n",
        "263": "type so if I say new vengeful s list you\n",
        "266": "can think of this whole expression as\n",
        "267": "having a compile-time type and it's\n",
        "270": "tight this vengeful s list and so when\n",
        "272": "java is trying to decide is this\n",
        "276": "assignment allowed it says here if this\n",
        "279": "is a vengeful s list and this is an s\n",
        "281": "list that says is the vengeful s list\n",
        "283": "and s list and it has this diagram it\n",
        "284": "can look and say yes indeed eventual s\n",
        "287": "list is a subclass of s list so I'm\n",
        "289": "going to allow this assignment so it\n",
        "290": "checks the right-hand side which I will\n",
        "293": "have on the slides is just RH s it\n",
        "294": "checks the right-hand side and make sure\n",
        "296": "that this type is compatible with the\n",
        "298": "left hand side of the expression now by\n",
        "301": "contrast if we create an S list right\n",
        "305": "this has static type s list and this has\n",
        "308": "static type vengeful s list and it says\n",
        "310": "is an S list eventual s list\n",
        "312": "well sometimes but not always and so the\n",
        "315": "compiler plays it very safe and it says\n",
        "318": "this is not allowed and will crash now\n",
        "320": "we can have other types of expressions\n",
        "322": "so when you add numbers that's an\n",
        "323": "expression when you do new that's an\n",
        "325": "expression and maybe one of the most\n",
        "329": "interesting things is a method call so\n",
        "334": "this anytime we call an X say max dog\n",
        "336": "and it's the expression here are\n",
        "339": "actually I'll say here maybe this\n",
        "341": "example is a good place to start I have\n",
        "344": "two poodles Frank and Frank jr. and I\n",
        "346": "say dog larger dog equals max dog Frank\n",
        "349": "Frank jr. so the question is what is the\n",
        "351": "compile time type aka the static type of\n",
        "354": "the max dog call well it's whatever you\n",
        "357": "declared it to be so I said it's public\n",
        "358": "dog\n",
        "361": "therefore the compile time type of any\n",
        "364": "expression that uses max dog or say any\n",
        "368": "call to max dog will be dog okay and so\n",
        "369": "in this case we say dog larger dog\n",
        "371": "equals max dog Frank and Frank jr. it\n",
        "374": "says okay this is a dog is a dog a dog\n",
        "377": "yes okay so that lines fine but then\n",
        "379": "when it gets to this bottom line when it\n",
        "381": "does max dog Frank and Frank jr. even\n",
        "383": "though the runtime type of these two\n",
        "386": "objects is poodle we cannot assign the\n",
        "389": "result to a poodle variable why well\n",
        "391": "because the compiler says the static\n",
        "394": "type of the max dog call is dog right\n",
        "396": "the compile time type is whatever you\n",
        "399": "specified and therefore it\n",
        "401": "assign that to a poodle variable because\n",
        "403": "as it says is a dog a poodle well\n",
        "405": "sometimes but not always so I won't\n",
        "409": "okay now there is some time so sometimes\n",
        "411": "you actually want this to work and\n",
        "412": "casting is something we're gonna do\n",
        "414": "rarely and in fact we already did in the\n",
        "417": "array Dec class and project 1a but this\n",
        "420": "general tool of casting works like so so\n",
        "422": "I have an expression whatever it may be\n",
        "424": "it could be a method call it could be an\n",
        "426": "instantiation it could be an arithmetic\n",
        "428": "operation it could be some giant you\n",
        "431": "know blob of stuff there's a special\n",
        "434": "syntax where you can say to the compiler\n",
        "437": "please consider this expression to have\n",
        "439": "this certain compile time type so to do\n",
        "442": "that this expression as compile time\n",
        "445": "type dog why because it's public dog max\n",
        "447": "dog and we can say please treat this\n",
        "450": "like a poodle okay to do that we put in\n",
        "452": "parentheses the name of the class that\n",
        "454": "we want it to treat it like and in that\n",
        "456": "case the compiler will now in terms of\n",
        "457": "its type checking the first thing that\n",
        "458": "compiler does is it make sure\n",
        "461": "everything's good for that purpose it\n",
        "464": "will use this as the type so for example\n",
        "466": "this code right here that didn't work so\n",
        "468": "well if we just add poodle in\n",
        "470": "parentheses here the compiler will say\n",
        "472": "okay the programmer is specified that\n",
        "474": "the output of the max dog here is no\n",
        "476": "longer static type dog it is in fact\n",
        "479": "type poodle is the poodle of pootle yes\n",
        "480": "therefore we're good\n",
        "484": "now that approach while useful can\n",
        "485": "sometimes run you into trouble because\n",
        "487": "basically what you're doing is tricking\n",
        "489": "the compiler you're telling the compiler\n",
        "491": "please don't do your job don't don't be\n",
        "494": "you know such a wimp trust me so it's a\n",
        "496": "powerful but dangerous tool you should\n",
        "499": "use it sparingly and it basically tells\n",
        "502": "java treat this the way i want you to\n",
        "504": "treat it so let's suppose this is where\n",
        "507": "you cannot no trouble we have a poodle\n",
        "509": "variable and a Malamute variable now\n",
        "511": "both of these are dogs so we can pass\n",
        "514": "them to the max dog method and this will\n",
        "517": "turn a type objective type dog and we\n",
        "520": "can cast it to poodle well the compiler\n",
        "522": "ordinarily if we didn't have poodle here\n",
        "525": "would say no no no no this is a dog and\n",
        "526": "I don't know what kind of dog this\n",
        "527": "expressions gonna get back but we can\n",
        "529": "say no trust me it's gonna be a pool\n",
        "531": "everything's gonna be cool but in this\n",
        "532": "case\n",
        "534": "actually the result is Frank senior and\n",
        "536": "so when we try and cast that Malamute\n",
        "538": "that comes back as a poodle then at\n",
        "541": "runtime we run into trouble so in\n",
        "542": "particular if you run it it will say\n",
        "545": "class cast exception and the code\n",
        "547": "crashes at runtime so we said earlier\n",
        "549": "actually in the very first lecture that\n",
        "550": "one of the great things about Java is it\n",
        "551": "does this type checking\n",
        "553": "meaning that nobody on the other end\n",
        "555": "should run into type errors however if\n",
        "557": "you decide to use casting that is no\n",
        "558": "longer true so in that sense it is\n",
        "561": "dangerous but sometimes you'll find it\n"
    },
    "Title=[Inheritance2, Video 8] Higher Order Functions in Java_Id=OcfTN1PZ7oA": {
        "0": " \n",
        "2": "one particularly powerful and beautiful\n",
        "4": "idea and computer science is that of the\n",
        "6": "higher order function a function that\n",
        "9": "takes other functions as data so I'll\n",
        "11": "give a little example here in Python and\n",
        "13": "even if you've never seen something\n",
        "14": "quite like this or even never seen\n",
        "15": "Python I think what's happening here\n",
        "18": "should be clear so in Python we can\n",
        "20": "define a function 10 X their returns 10\n",
        "24": "times X that's it so I'm do 10 X of 5 no\n",
        "27": "will return 50 now I can actually define\n",
        "29": "a function say do twice that takes two\n",
        "31": "arguments one that you expect to be a\n",
        "33": "function in the other you expect to be\n",
        "35": "some kind of argument to that type of\n",
        "38": "function and so in that case we could do\n",
        "40": "something like return the function\n",
        "42": "applied to the result of the function\n",
        "45": "applied to X and so I can for example\n",
        "47": "say Python please print for me the\n",
        "50": "result of doing twice the 10x function 2\n",
        "51": "so that'll do\n",
        "54": "10 X of 10 X of 2 which is 10 times 10\n",
        "57": "times 2 which is 200 ok so what we're\n",
        "59": "gonna try and do is this same program\n",
        "62": "but in Java and we'll see it's a little\n",
        "64": "more challenging a little bit kludgy ER\n",
        "66": "than it is in python but this idea turns\n",
        "69": "out actually it's very important so in\n",
        "73": "older school Java Java 7 and earlier you\n",
        "76": "had to do it in a somewhat indirect way\n",
        "77": "that we'll be exploring through the rest\n",
        "79": "of this video and the fundamental issue\n",
        "83": "was that memory boxes or a K variables\n",
        "85": "they cannot contain pointers to\n",
        "87": "functions in the old versions of Java so\n",
        "89": "we can't write a function that has a\n",
        "91": "function type here remember that a job\n",
        "92": "we have to do type checking and there\n",
        "94": "just was no type for functions you\n",
        "96": "couldn't do it and so instead the\n",
        "98": "workaround was to take advantage of\n",
        "100": "implementation or sign interface\n",
        "103": "inheritance where we would define some\n",
        "104": "inheritance where we would define some\n",
        "107": "abstract function e thing that doesn't\n",
        "108": "have a specific function in mind and\n",
        "111": "then we would implement that class and\n",
        "114": "we would override some otherwise\n",
        "116": "undefined method ok we'll see what that\n",
        "119": "means in a moment now of course in\n",
        "121": "modern Java you can actually do this but\n",
        "123": "for so long Java programs are written\n",
        "125": "this way that it's the default way of\n",
        "126": "thinking in a lot of cases like\n",
        "129": "comparators and any other number of\n",
        "130": "things that we'll be talking about in\n",
        "131": "the coming weeks\n",
        "133": "so we're gonna stick with this approach\n",
        "134": "and if you want to try out the new Java\n",
        "137": "8 or the newer Java 8 stuff I'll have a\n",
        "139": "separate supplementary video at some\n",
        "141": "point you can check out but this is the\n",
        "142": "way we really need to learn things now\n",
        "145": "ok so let's just try it out and it'll be\n",
        "148": "a little strange until we're done but\n",
        "149": "we're gonna start by making our int\n",
        "154": "unary function class or interface and so\n",
        "156": "the int unary function class this\n",
        "158": "basically we're gonna say first\n",
        "161": "represents a function that takes in an\n",
        "164": "integer and returns an integer any\n",
        "166": "function right they could be 10 X it\n",
        "168": "could be squaring whatever now we're not\n",
        "170": "gonna actually specify what function in\n",
        "172": "particular we're just gonna say public\n",
        "174": "and supply and X and call it a day\n",
        "177": "there's no default now actually I want\n",
        "178": "to note here this public key word is\n",
        "180": "underlined and IntelliJ is yelling at us\n",
        "182": "that public is redundant so in keeping\n",
        "184": "with common convention I'm now going to\n",
        "186": "omit that from our code okay doesn't do\n",
        "189": "anything having it or not so now we're\n",
        "190": "going to actually implement a specific\n",
        "193": "into nary function in particular let's\n",
        "196": "write a function that returns 10 times\n",
        "199": "its argument so this 10 X class\n",
        "202": "implements int unary function it has a\n",
        "205": "public int apply method that's what it\n",
        "206": "needs in order to compile actually need\n",
        "210": "that int X and in this case it returns\n",
        "214": "10 times its argument and returns 10\n",
        "217": "times the argument so that's easy return\n",
        "221": "10 times X and we have now in 10 X okay\n",
        "223": "great so what we built is this on the\n",
        "225": "right which is the equivalent of def 10\n",
        "227": "X then we could see it's a lot kludgy\n",
        "228": "err in fact here we have it spread\n",
        "231": "across two files that one and this one\n",
        "233": "and that's the equivalent of def 10 X\n",
        "237": "okay so again job is pretty verbose so\n",
        "239": "now we're gonna say new class and we're\n",
        "240": "gonna do a little demo we'll call that\n",
        "245": "hop demo for higher-order function and\n",
        "248": "this demonstrates higher-order functions\n",
        "252": "and Java\n",
        "254": "so this is going to be these other two\n",
        "257": "calls so we'll start by writing the do\n",
        "259": "twice method so I'll do it as some\n",
        "263": "follows public static int do twice why\n",
        "265": "static because I don't want to have to\n",
        "268": "actually instantiate HOF demo and what\n",
        "270": "we're going to do is we're gonna take an\n",
        "274": "int unary function f I'll do ya\n",
        "277": "Epstein's line and then we'll do end X\n",
        "280": "and in this case we're gonna return F\n",
        "283": "it's not f of f of X like it was in\n",
        "286": "Python is going to be F dot apply of F\n",
        "290": "dot a plot of X so basically we've used\n",
        "293": "inheritance as a funny workaround to get\n",
        "295": "the same practical effect that we got in\n",
        "297": "Java or saw in Python\n",
        "300": "more directly next I'm going to show you\n",
        "302": "how it can be used and we'll see it's a\n",
        "305": "little funny so I'm gonna start by\n",
        "307": "saying well I guess I'll set aside an\n",
        "310": "integer too\n",
        "313": "and then I want to print out do twice 10\n",
        "318": "X X let's say well let's just do to\n",
        "320": "directly why not so we we try and do\n",
        "323": "this we get a an issue which says\n",
        "325": "expression expected here so 10 X\n",
        "328": "actually is the name of a class and it's\n",
        "331": "expecting an object so in fact what we\n",
        "334": "need to do is instantiate our 10x object\n",
        "337": "so we can do something like this\n",
        "341": "we'll say int unary function 10x equals\n",
        "345": "new 10x that's better to be lower case\n",
        "350": "so 10x equals new 10x and now we pass an\n",
        "353": "instantiated copy of the 10x class now\n",
        "355": "it's a little weird but that's typically\n",
        "357": "how things are done so if we run this\n",
        "358": "now we should get back\n",
        "362": "uh-oh wrong one the vengeful s list it\n",
        "364": "remembers it's still very upset about it\n",
        "366": "it's not remembers being deleted but\n",
        "369": "here we see 200 okay so that's Hoff's in\n",
        "371": "Java so on the Left I have all the code\n",
        "374": "we just wrote and I guess the the main\n",
        "377": "thing to keep in mind here is that while\n",
        "379": "you can't directly do it in Java\n",
        "380": "inheritance provides us with a way to\n",
        "383": "actually accomplish the same thing and\n",
        "384": "we're going to be using this a lot\n",
        "386": "in the coming week actually a couple\n",
        "389": "weeks so the very last thing we're gonna\n",
        "391": "call it a day here I've put together\n",
        "393": "here in inheritance cheat sheet you can\n",
        "396": "use to remember how all this works I'm\n",
        "398": "not going to read it off right now but\n",
        "399": "be aware that this is here for your\n",
        "401": "reference so that's it for this set of\n",
        "404": "videos and I will see you next time when\n",
        "405": "we'll go a little deeper and to\n"
    },
    "Title=[Inheritance3, Video 0] Dynamic Method Selection Puzzle optional_Id=cUL1LWVv984": {
        "0": " \n",
        "2": "as a warm-up to today's lecture let's do\n",
        "4": "a little dynamic method selection puzzle\n",
        "6": "just to remind ourselves of how all of\n",
        "9": "this works so let's suppose we have two\n",
        "11": "classes we have here dog which implants\n",
        "14": "bark and we have show dog which extends\n",
        "16": "dog and override the bark method so here\n",
        "18": "basically we see that every show dog is\n",
        "20": "a dog and every dog is an object and\n",
        "22": "remember that every single type out\n",
        "24": "there is a subtype of object if it\n",
        "27": "doesn't extend something else okay so\n",
        "30": "what you're supposed to do now is for\n",
        "31": "each of these assignments in this code\n",
        "34": "decide if it causes a compile time error\n",
        "36": "and then assuming that we get rid of\n",
        "39": "those errors consider for each call to\n",
        "41": "bark figure out is it dog whose bark is\n",
        "43": "called show dog whose bark is called for\n",
        "46": "three a syntax error happens because of\n",
        "48": "runtime type checking and reminder the\n",
        "50": "rules actually are pretty simple right\n",
        "51": "so if you started getting nervous about\n",
        "53": "this and you're like gosh it feels like\n",
        "54": "there's so many rules you have to\n",
        "56": "convince your rule set and this is more\n",
        "58": "or less the whole rule set so we say\n",
        "61": "that the compiler allows a memory box to\n",
        "63": "hold any subtype so in other words if\n",
        "65": "it's a list it can hold a list s lists\n",
        "68": "or lists or whatever else as long as\n",
        "70": "it's a subtype the compiler allows calls\n",
        "73": "when it thinks is this line of code\n",
        "75": "valid the compiler it does it based on\n",
        "79": "the static type and then finally the non\n",
        "81": "the in the case that one of the\n",
        "82": "non-static methods in your class is\n",
        "84": "overridden then it's going to be\n",
        "85": "selected at runtime based on the dynamic\n",
        "87": "type that is the type of the actual\n",
        "89": "object so remember that every time you\n",
        "92": "have a variable it is really just a\n",
        "93": "pointer to something else out there in\n",
        "95": "space and the dynamic type is whatever\n",
        "97": "type this actual thing is the thing that\n",
        "98": "got created using nuke\n",
        "102": "now everything else that you might want\n",
        "105": "to do is based on static type and then\n",
        "107": "includes overloaded methods though I'll\n",
        "109": "note here there are no overloaded\n",
        "111": "methods in this problem on the left and\n",
        "112": "if you want a little more practice with\n",
        "114": "those you can see the discussion\n",
        "117": "worksheets or last previous lecture we\n",
        "119": "had one little overloading trick so\n",
        "121": "think about this problem here I'll be\n",
        "127": " \n",
        "129": "okay let's go through each line of code\n",
        "132": "here so first we start with this top\n",
        "134": "line we say new show dog more two more\n",
        "137": "Corgi some parameters and this produces\n",
        "139": "a show dog and so the question is can we\n",
        "141": "put a show dog in an object memory box\n",
        "143": "so here's the box it can point at\n",
        "145": "anything that's an object so we ask\n",
        "147": "ourselves the question is a show dog an\n",
        "151": "object yes a show dog is an object so\n",
        "154": "this is allowed we now try to take our\n",
        "156": "object memory pointer cast it as a show\n",
        "158": "dog and store that in the show dog box\n",
        "162": "so in this case we say okay I'm the\n",
        "164": "compiler what's the static type of o2\n",
        "166": "it's object\n",
        "168": "what's the static type of show dog and\n",
        "171": "parentheses in front of o2 that's show\n",
        "174": "dog and then the static type obviously\n",
        "175": "if this whole thing is simply going to\n",
        "178": "be show dog so in that case can we put a\n",
        "180": "show dog and a show dog box well of\n",
        "183": "so this one this line runs just fine\n",
        "187": "next we do SDX bark now in this case we\n",
        "188": "know that the actual thing that got made\n",
        "193": "here's Mortimer whenever we do SDX bark\n",
        "195": "we say first the compiler says do show\n",
        "197": "dogs have a bark method yes they do\n",
        "200": "okay so I will call the bark method and\n",
        "202": "in this case since the show dog actually\n",
        "204": "does override the bark method and the\n",
        "206": "show dog method gets run so it works\n",
        "211": "fine show dog dog bark okay next up now\n",
        "213": "let's try and cast our object as a dog\n",
        "217": "so the static type of o2 is object the\n",
        "219": "static type of dog in parentheses o2 is\n",
        "222": "dog so the compiler says is a dog a dog\n",
        "225": "yes so it allows this now we do DX dot\n",
        "228": "bark to decide whether or not this is\n",
        "231": "allowed the compiler says yes it is\n",
        "233": "because of dog has a bark okay good and\n",
        "237": "then when we call the bark method well\n",
        "240": "we go to the actual object and we say in\n",
        "242": "the hierarchy like if we go to that what\n",
        "244": "is the dynamic type of Mortimer here\n",
        "247": "it's show dog and so if show dog\n",
        "248": "overrides bark with the duck which it\n",
        "252": "does then we call bark okay barking\n",
        "255": "happens in a show dog way now we get\n",
        "258": "here so in this case first we'll play\n",
        "259": "compiler\n",
        "261": "we do Oh - what's the static type of Oh\n",
        "262": "to still object\n",
        "264": "what's the static type of dog and\n",
        "267": "parenthesis OH - that is dog so the\n",
        "270": "compiler says can dogs bark yes so we\n",
        "272": "allow it and then in this case again we\n",
        "274": "use the dynamic type and show dog barks\n",
        "275": "okay\n",
        "276": "now one little thing I want to say about\n",
        "278": "casting that's occasionally confusing\n",
        "280": "putting something in print a type in\n",
        "283": "parenthesis this casting operation does\n",
        "285": "not have any lasting effect it is only\n",
        "287": "you can think of it as a way to say\n",
        "290": "compiler for this expression only think\n",
        "291": "of this as a dog\n",
        "292": "it doesn't somehow change the static\n",
        "296": "type of ot o - sometimes occasionally a\n",
        "298": "lab assistant or a TA or even I will\n",
        "300": "sloppily say something like it changes\n",
        "302": "the static type but actually it doesn't\n",
        "303": "change anything\n",
        "305": "it just says temporarily treat this like\n",
        "307": "a dog for the purposes of type checking\n",
        "311": "that's it yeah all right next up we take\n",
        "316": "O - great static type is object then the\n",
        "317": "static type of this right hand side is\n",
        "318": "static type of this right hand side is\n",
        "320": "dog and to decide whether or not this is\n",
        "322": "allowed we say is it dog and object this\n",
        "323": "is actually a lot like our first line\n",
        "324": "is actually a lot like our first line\n",
        "326": "well indeed a dog is an object so it's\n",
        "327": "allowed to be placed in the object box\n",
        "330": "and that works next we say oh three bark\n",
        "332": "now you're the compiler and you have to\n",
        "334": "think can objects bark you only use the\n",
        "337": "static type to decide what is allowed\n",
        "339": "and so in this case that line of code it\n",
        "341": "will fail and that's a good Pilar error\n",
        "343": "so to summarize there's only one\n",
        "346": "compiler error as this last line and in\n",
        "348": "every single case where it barks\n",
        "350": "successfully it's always the show dog\n",
        "353": "bark okay for here so that's it for this\n",
        "355": "little puzzle and again there are many\n",
        "357": "more of these out there\n",
        "360": "so to summarize before we get going with\n",
        "362": "today's lecture I do want to mention one\n",
        "364": "thing for those of you taking the class\n",
        "366": "at Berkeley who are gonna take exams you\n",
        "369": "may find questions on all 61b exams\n",
        "370": "worksheets or whatever else they\n",
        "372": "consider what if a subclass has\n",
        "374": "variables that have the same name as a\n",
        "376": "superclass so for example maybe the dog\n",
        "378": "class as a size and the show dog class\n",
        "381": "also has the size okay another type of\n",
        "383": "question what if a subclass has a static\n",
        "385": "method with the same signature as a\n",
        "388": "superclass method so maybe we have max\n",
        "390": "dog and both dog and in show dog that's\n",
        "391": "another type of question\n",
        "394": "my aunt asked and I guess I'll mention\n",
        "397": "briefly for static methods this does not\n",
        "399": "count as overriding overwriting only\n",
        "402": "applies to non static methods okay\n",
        "403": "here's a couple of both of these are\n",
        "406": "kind of problems you might see now the\n",
        "409": "good news is these two practices are\n",
        "411": "called hiding and I will not teach them\n",
        "413": "in this class and the reason it's good\n",
        "414": "news is it's confusing\n",
        "416": "okay I just I decided not to teach this\n",
        "417": "ever again and 61b\n",
        "420": "and I find it tedious so first off it's\n",
        "421": "bad style you should never write code\n",
        "423": "that does this there's no reason to do\n",
        "424": "it if you have done this you have made\n",
        "427": "your code bad in my opinion like as far\n",
        "428": "as I know there's literally no reason to\n",
        "430": "do this and I think it should be a\n",
        "434": "syntax error personally so it's awful no\n",
        "437": "reason to do it in I find that while the\n",
        "439": "rules are simple we only have to add a\n",
        "441": "couple maybe I think we have to add just\n",
        "442": "one more bullet point to the list of\n",
        "445": "rules I've just found that it's more\n",
        "447": "trouble than it's worth people find it\n",
        "450": "very confusing and last year I decided\n",
        "452": "nope it's gone from 61b\n",
        "453": "but if you do want to learn it if you\n",
        "455": "want to know how this works there is a\n",
        "457": "tutorial where they talk about the rules\n",
        "459": "for resolving hiding but again in my\n",
        "461": "opinion this should have been a syntax\n",
        "463": "error so if in any old problems you see\n",
        "465": "that a subclass has variables so the\n",
        "467": "same name as a superclass you ignore\n",
        "469": "that problem right I mean it's just not\n",
        "470": "part of our curriculum\n",
        "471": "part of our curriculum\n",
        "473": "it's basically why should I teach you\n",
        "475": "how to resolve something that's a bad\n",
        "476": "idea\n",
        "478": "let's say this was a class on horse\n",
        "480": "training you know I don't talk about ok\n",
        "482": "the day where if you do manage to punch\n",
        "484": "your horse to death like here's how to\n",
        "485": "bury right that's just it's not part of\n",
        "486": "bury right that's just it's not part of\n",
        "487": "a good horsemanship class like that's\n",
        "490": "just I don't know not not something I\n",
        "491": "think we should be learning about ok\n",
        "493": "that's it in terms of this extra bonus\n",
        "496": "video let's get going with the real\n"
    },
    "Title=[Inheritance3, Video 2] The Max Function_Id=nYPPbbkKF1w": {
        "0": " \n",
        "2": "for much of today we'll be concerned\n",
        "3": "with trying to write a function we're\n",
        "6": "gonna call max so what does Max do it\n",
        "8": "takes any array of any type whatsoever\n",
        "11": "and it returns the maximum item so they\n",
        "13": "give it this array 5 3 1 7 the max\n",
        "15": "function will return 7 they give it\n",
        "18": "three dogs steer Elise and Benjamin it\n",
        "20": "will find the dog with the largest size\n",
        "22": "let's say and it will turn in this case\n",
        "24": "Benjamin so I've actually already\n",
        "27": "written a function that does this and\n",
        "28": "your question now is going to be figure\n",
        "32": "out mm what is wrong if anything with it\n",
        "33": "now turns out at least one thing's gonna\n",
        "35": "be wrong so I'll walk through this code\n",
        "36": "really quickly before letting me think\n",
        "38": "about it so this is a main method that\n",
        "39": "about it so this is a main method that\n",
        "40": "basically does what's on the previous\n",
        "42": "slide creates an array of dogs with the\n",
        "46": "data set shown previously calls da cause\n",
        "49": "max dogs and then casts it as the result\n",
        "51": "as a dog and then finally that dog barks\n",
        "53": "then the actual function looks something\n",
        "56": "like this it is a function that returns\n",
        "59": "something of type object it takes an\n",
        "62": "array of objects and the goal here is to\n",
        "63": "take advantage of the fact that every\n",
        "66": "class in Java ultimately extends the\n",
        "69": "object class so we work our way through\n",
        "71": "the code we've set up a maximum index\n",
        "73": "that indicates our best-known largest\n",
        "76": "thing yeah you know what I mean\n",
        "79": "and then for each possible item it says\n",
        "82": "is that item bigger than the best-known\n",
        "84": "if so then make a note of where it is\n",
        "86": "and then finally return the largest item\n",
        "90": "so your question now is to think about\n",
        "91": "this think about what compilation errors\n",
        "94": "might pop up and I've highlighted three\n",
        "99": "areas you might want to consider okay\n",
        "101": "assuming you've paused and thought about\n",
        "105": "it this code right here we'll start\n",
        "107": "function the first question is in when\n",
        "108": "function the first question is in when\n",
        "110": "we return an object can we cast it as a\n",
        "112": "dog and in this case the answer is yes\n",
        "116": "this is actually the best most typical\n",
        "118": "case for casting where you and I both\n",
        "120": "know that a particular thing is actually\n",
        "123": "a dog but the static type is object so\n",
        "124": "we cast it back to dog that's a very\n",
        "127": "normal thing to do with casting how\n",
        "130": "about this whenever we look at this box\n",
        "131": "what's this box supposed to highlight\n",
        "132": "well\n",
        "133": "we're passing in a\n",
        "135": "of dogs but it expects an array of\n",
        "137": "objects so does that work well I haven't\n",
        "141": "actually said but yes indeed because a\n",
        "143": "dog is an object an array of dogs is\n",
        "146": "also an array of objects so Java will\n",
        "148": "consider that totally fine finally we\n",
        "151": "get to this line right here if items I\n",
        "153": "is greater than items Max Dex and this\n",
        "154": "basically assumes that somehow the\n",
        "156": "greater operator works with arbitrary\n",
        "159": "object types but in fact it does not so\n",
        "160": "that's going to be the issue we have to\n",
        "162": "face so what do we do about it\n",
        "166": "well one possibility is we could write a\n",
        "169": "max method in the dog class and in\n",
        "170": "effect we're giving up on our dream of\n",
        "173": "having a one true maximum function right\n",
        "176": "here so what would that look like maybe\n",
        "177": "I'm just going to show it because that's\n",
        "179": "this isn't a great approach but one\n",
        "182": "approaches we would in the dog class\n",
        "184": "itself have a max dog method that takes\n",
        "186": "an array of dogs and returns the largest\n",
        "188": "so if you wanted to use this function it\n",
        "190": "might look something like this dog dogs\n",
        "192": "equals new dog D 1 D 2 T 3 so make the\n",
        "195": "array and then finally we do dog max dog\n",
        "198": "the array of dogs and here we also avoid\n",
        "199": "the need for the cast which is kind of\n",
        "203": "nice now the obvious big problem with\n",
        "204": "this is that we've given up with the\n",
        "206": "dream of our one true max function but\n",
        "208": "there's a more deep there's a deeper\n",
        "211": "more fundamental reason so what is it\n",
        "215": "well the issue is that let's suppose we\n",
        "216": "have a cat class now or a horse class or\n",
        "217": "have a cat class now or a horse class or\n",
        "218": "an octopus or whatever else and all of\n",
        "220": "those classes we also need a max horse\n",
        "223": "or max octopus function if we want to do\n",
        "225": "the minimum or the median or something\n",
        "227": "like that again we have this repetition\n",
        "230": "of work over and over and so what we in\n",
        "232": "effect have if we give up on our dream\n",
        "236": "is a bunch of redundant code so now the\n",
        "238": "question is knowing that objects cannot\n",
        "240": "be compared with greater than because\n",
        "242": "how could they how would Java know if it\n",
        "245": "should use the string or the size how\n",
        "249": "could we modify this code here so that\n",
        "252": "it actually does work and let's I'll\n",
        "253": "give you a clue we're talking a lot\n",
        "255": "about inheritance here and think about\n",
        "256": "that a little so if we wanted to take\n",
        "258": "this code Maximizer that Java and make\n",
        "260": "it work what could we do I'll spoil it\n"
    },
    "Title=[Inheritance3, Video 3] OurComparable Example_Id=QRPVJ7Wxxtk": {
        "0": " \n",
        "3": "in some languages like C++ or Python you\n",
        "5": "can redefine that how an operator works\n",
        "8": "in the context of specific classes so\n",
        "9": "for example you could say that when it\n",
        "11": "comes to dogs greater than compares the\n",
        "14": "size of the dogs now in Java we don't\n",
        "16": "have that capability so instead we're\n",
        "18": "gonna turn to interface inheritance to\n",
        "20": "help us out so what we can do is create\n",
        "23": "an interface that guarantees that our\n",
        "25": "class has a comparison method and\n",
        "27": "they'll have the dog class implement\n",
        "28": "this interface now of course this\n",
        "31": "requires that the we change something\n",
        "33": "about the dog class and we'll talk about\n",
        "35": "how this isn't a big practical problem\n",
        "37": "in the real world later but basically in\n",
        "40": "this way we're specifying to the world\n",
        "42": "indeed anything that is what we'll call\n",
        "44": "an are comparable can be compared to\n",
        "48": "other items okay so in this case we'll\n",
        "49": "create an interface called our\n",
        "51": "comparable and more specifically it will\n",
        "53": "have a compare to method that takes any\n",
        "55": "object and it returns something that\n",
        "57": "tells us whether or not this item is\n",
        "59": "bigger or smaller than the object passed\n",
        "61": "and then we'll have dog implement this\n",
        "64": "interface and then ultimately what our\n",
        "66": "max function will now do is instead of\n",
        "68": "taking an array of objects and returning\n",
        "69": "an object it'll take an array of our\n",
        "71": "comparables and it will return and are\n",
        "73": "comparable okay so it's actually just\n",
        "74": "jump in and try and write this thing\n",
        "77": "this is the code that we had in our\n",
        "79": "lecture slides and we can see here that\n",
        "81": "this is not compiling it is unhappy so\n",
        "83": "let's make a new interface just as I\n",
        "86": "so interface will call this thing are\n",
        "92": "comparable and in this interface we're\n",
        "93": "gonna set the specification up well\n",
        "94": "actually first let's look through the in\n",
        "95": "actually first let's look through the in\n",
        "98": "function public int compare to object oh\n",
        "101": "okay we could have made it a boolean but\n",
        "104": "I'm gonna make it an ant to reflect what\n",
        "106": "is common practice with real Java code\n",
        "108": "and so what this function is going to do\n",
        "112": "is return minus 1 if this is less than\n",
        "118": "Oh return 0 if this equals oh and\n",
        "122": "finally will return 1 if this is greater\n",
        "124": "than oh okay where oh is the other\n",
        "127": "object and actually we don't really need\n",
        "129": "the description of this class this is\n",
        "130": "good enough for our purposes\n",
        "133": "lecture so that we created this power\n",
        "135": "comparable interface we can go to the\n",
        "137": "dog class and we could say implements\n",
        "142": "are comparable and so naturally in order\n",
        "143": "to implement are comparable we need to\n",
        "148": "have this method so let's do that so we\n",
        "152": "want to compare to other objects okay so\n",
        "160": "this returns -1 if this dog is less than\n",
        "166": "the dog pointed at by oh okay and so\n",
        "169": "forth you know the rest zero if they're\n",
        "172": "equal greater than one if it's bigger so\n",
        "174": "when we write this function we need to\n",
        "177": "somehow compare the size of us to the\n",
        "179": "other dog and so we might try and do\n",
        "182": "something like if this dot size is less\n",
        "188": "than ODOT size return -1 else if this\n",
        "191": "dot size equal equals o dot size return\n",
        "194": "zero and then we can do finally return\n",
        "198": "plus 1 or just 1 however of course there\n",
        "200": "is no size symbol in the object class\n",
        "203": "right so there's no size in an object so\n",
        "205": "we need to first cast that's what we'll\n",
        "208": "do is we'll say dog utter dog equals dog\n",
        "211": "oh so we're comparing ourselves to\n",
        "214": "another dog I took this from I was in I\n",
        "216": "was on Big Island in Hawaii awhile back\n",
        "217": "was on Big Island in Hawaii awhile back\n",
        "220": "and there was a guy who rinsed kayaks\n",
        "225": "near a cane Kealakekua and he is named a\n",
        "228": "who and Kai and so I forget if the guy I\n",
        "229": "think the guys named Kai and the dog's\n",
        "232": "name a who and he had another dog\n",
        "233": "running around I said what's that dog's\n",
        "235": "name and he just goes daughter dog\n",
        "238": "so anyway an honor of the other dog we\n",
        "242": "have cast the dog as follows so in the\n",
        "246": "case we'll say uh de dog and other dog\n",
        "248": "and then gives us a compare to method\n",
        "249": "okay\n",
        "252": "now finally we can go to maximizer and\n",
        "253": "we can say instead of an array of\n",
        "257": "objects will have are comparable instead\n",
        "259": "of a returning an object or a turn and\n",
        "262": "are comparable oops\n",
        "266": "okay and instead of doing greater than\n",
        "268": "we'll do that same thing we did in an\n",
        "270": "earlier lecture when we were comparing\n",
        "272": "strings and say let's set aside the\n",
        "274": "result of the comparison so in this case\n",
        "279": "items i dot compare two items max x and\n",
        "281": "then we'll make a decision based on call\n",
        "283": "so if comp is greater than zero that\n",
        "285": "means this item is bigger than the\n",
        "288": "currently largest Max Dex will get say\n",
        "291": "equal to I so now let's try running this\n",
        "297": "see what happens we get our dummy CIO's\n",
        "300": "says Clark so we've grabbed the largest\n",
        "301": "an ideal world route I'd some kind of\n",
        "304": "tests but it's a lecture and I want to\n",
        "306": "change one little thing before we move\n",
        "307": "on which is to note that this code is a\n",
        "310": "little long and there's a common trick\n",
        "313": "that will help explain to you why this\n",
        "315": "strange interface exists so instead of\n",
        "318": "saying if this dot size less another dog\n",
        "320": "size or turn minus one and so forth we\n",
        "322": "can just do return this dot sized - uh\n",
        "327": "de dog dot size and we're gonna modify\n",
        "328": "our our comparable interface a little\n",
        "331": "bit to say returns negative number if\n",
        "333": "this is less than zero turn zero if\n",
        "335": "they're equal and returns a positive\n",
        "338": "number if this is greater than hope so\n",
        "341": "in effect what we can do from now on is\n",
        "343": "just return in this case the difference\n",
        "345": "between the sizes so say my size is two\n",
        "348": "and utter dogs is five then I'll return\n",
        "350": "minus three meaning I'm smaller so this\n",
        "353": "is a really common trick in comparisons\n",
        "356": "and so we'll say here returns negative\n",
        "360": "number okay just worth seeing let's\n",
        "361": "double check make sure everything worked\n",
        "365": "once more okay it's still working\n",
        "366": "good\n",
        "369": "so let's reflect a little we created an\n",
        "371": "interface called our comparable we made\n",
        "373": "it so that dog actually implements our\n",
        "375": "comparable and then we changed our\n",
        "377": "maximize or our max function to take\n",
        "380": "advantage so this interface here our\n",
        "382": "specification right we always when we\n",
        "383": "think about what the actual interface\n",
        "386": "was the thing that we're inheriting was\n",
        "388": "that it returns a negative number if\n",
        "390": "this was less an object a positive\n",
        "391": "number if this is greater than the other\n",
        "394": "object and zero if they're equal and one\n",
        "395": "tiny little thing you might have noticed\n",
        "398": "I don't know maybe you didn't is that in\n",
        "400": "our comparable interface we have here\n",
        "402": "object could this have been our\n",
        "404": "comparable sure won't change anything\n",
        "406": "about how the code functions would work\n",
        "408": "just as well so there's no meaningful\n",
        "411": "difference between those two so\n",
        "412": "ultimately what our code ended up\n",
        "415": "looking like was this and the only last\n",
        "417": "thing to mention of course is that if we\n",
        "418": "tried to actually compare a dog to a cat\n",
        "419": "tried to actually compare a dog to a cat\n",
        "422": "or a horse it would fail because well if\n",
        "424": "you try and cast it as a dog then that's\n",
        "426": "not gonna work so well okay so this\n",
        "429": "approach well it does work suffers from\n",
        "431": "the danger that a programmer could\n",
        "433": "accidentally try and compute and be\n",
        "436": "different or the try and compare the\n",
        "438": "size of two different things that\n",
        "440": "weren't the same class and that could\n",
        "442": "cause some trouble here okay but we'll\n",
        "444": "see how to fix that in a little bit okay\n",
        "446": "so what are the benefits of this\n",
        "448": "approach well it means now we've finally\n",
        "450": "achieved our dream right if we look at\n",
        "451": "our code this maximizer function will\n",
        "453": "work on anything that isn't our\n",
        "456": "comparable which is lovely so we don't\n",
        "458": "need some kind of special max function\n",
        "459": "and dog all we need is that dogs are\n",
        "463": "comparable and so now our code we could\n",
        "465": "in principle get have a function that\n",
        "467": "gets any kind of items from a file this\n",
        "469": "could be a file of horses cats dogs fish\n",
        "472": "potatoes s lists a list to knows as long\n",
        "474": "as those things implement it are\n",
        "476": "comparable and the get items function\n",
        "477": "knows how to somehow read them from the\n",
        "479": "file then this maximize their classes\n",
        "481": "max function will be able to give the\n",
        "484": "largest which is quite nice so what\n",
        "485": "we'll do next is make sure all that\n",
        "487": "syntax works but I'll move on to the\n",
        "488": "next video to make sure you have a\n",
        "490": "chance to pause and digest we'll come\n"
    },
    "Title=[Inheritance3, Video 4] Compilation Quiz_Id=dbdbcbhe3Jk": {
        "0": " \n",
        "2": "perhaps more than any of these other\n",
        "4": "purple question videos I really want you\n",
        "6": "to do this one because it draws out a\n",
        "7": "certain misconception that's\n",
        "9": "surprisingly common and will confuse you\n",
        "12": "okay so in this question you are given\n",
        "14": "the dog launcher class it creates an\n",
        "17": "array of dogs it then passes that Arab\n",
        "19": "dogs to the Maximizer max function okay\n",
        "21": "so much like the main method we saw\n",
        "24": "before here we have the dog class\n",
        "27": "exactly like we saw before I'm gonna\n",
        "29": "cross this out in a moment not yet and\n",
        "31": "here we have the Maximizer class and in\n",
        "33": "this Maximizer class we have only one\n",
        "35": "method public static are comfortable max\n",
        "37": "there's no main method in the Maximizer\n",
        "40": "class so now the question is if we\n",
        "42": "delete the compareto method completely\n",
        "43": "completely out of the dog class and\n",
        "46": "leave everything else untouched which of\n",
        "48": "these four files fails to compile is a\n",
        "51": "dog launcher dog Maximizer or the actual\n",
        "54": "interface itself are comfortable so\n",
        "56": "think about that because I think this is\n",
        "58": "just a very and it's been out for long\n",
        "59": "it takes you to come up with an answer\n",
        "61": "you're happy with and if you like you\n",
        "63": "can use IntelliJ by grabbing the lecture\n",
        "67": "code repo to experiment on your own okay\n",
        "72": "so let's jump on in we go here and we go\n",
        "74": "to our dog class and we say we are going\n",
        "77": "to delete the compareto method and as\n",
        "79": "soon as we do that we see that dog\n",
        "81": "itself no longer compiles and the reason\n",
        "84": "is that dog claims to be in are\n",
        "86": "comparable so what does the compiler do\n",
        "88": "it checks are comparable and it says do\n",
        "90": "you have a compare to method well in\n",
        "92": "fact you don't so you're lying you're\n",
        "94": "lying about being in are comparable and\n",
        "96": "I'm not gonna let your compiled okay so\n",
        "100": "in this case it's dog it's the other one\n",
        "102": "second question let's suppose we now\n",
        "104": "delete implements are comparable and\n",
        "107": "only this what's going to happen which\n",
        "109": "of these files perhaps multiple failed\n",
        "113": "to compile so I'm letting you pause\n",
        "116": " \n",
        "119": "okay so I'm gonna go into implements are\n",
        "122": "comparable and I'm gonna delete this and\n",
        "123": "we see the dog seems to compile just\n",
        "126": "fine and in fact makes some sense right\n",
        "129": "I mean you don't have to be and are\n",
        "130": "comparable to implement the compareto\n",
        "132": "method just like you don't have to be\n",
        "134": "the actual Santa Claus to wear a Santa\n",
        "135": "hat I mean the real Santa he should\n",
        "138": "probably wear a Santa hat but it doesn't\n",
        "139": "matter if you're not really in our\n",
        "141": "comfortable in our car people you can\n",
        "144": "still have a compare to method alright\n",
        "146": "so now that let's say actually keep it\n",
        "149": "con oops what am i doing okay so let's\n",
        "151": "get rid of our comparable again I don't\n",
        "152": "know why I put it back let's look at\n",
        "156": "let's say Maximizer Maximizer seems fine\n",
        "159": "how about our comfortable seems fine as\n",
        "162": "well dog launcher mmm there's a problem\n",
        "165": "our comparable cannot be applied to doc\n",
        "167": "okay what's that all about well I'm\n",
        "170": "trying to provide an array of dogs to\n",
        "172": "this Maximizer max function however\n",
        "175": "Maximizer dot max expects an array of\n",
        "178": "our comparables well the compiler has to\n",
        "180": "think is an array of dogs an array of\n",
        "183": "our comparables what looks at the dog\n",
        "184": "class it season though our comparable\n",
        "187": "tag and so that means no no a dog is not\n",
        "189": "an are comparable so an array of dogs is\n",
        "192": "not allowed to go in this box okay\n",
        "194": "so in this case the answer is dog\n",
        "200": "launcher is the problem so what Josh\n",
        "202": "okay maybe you got that question right\n",
        "203": "but actually quite a lot of people get\n",
        "205": "it wrong and it was interesting the\n",
        "208": "first time I asked this question I was\n",
        "209": "surprised how many people thought the\n",
        "211": "answer was Maximizer and the reason is\n",
        "214": "students figure oh well you're trying to\n",
        "215": "compare things that are not actually our\n",
        "217": "comparables however remember the\n",
        "220": "compiler happens before any code is even\n",
        "222": "run right it's a verification that\n",
        "225": "everything checks out and in fact if you\n",
        "227": "look at the Maximizer class I mean it\n",
        "229": "may be that nobody's ever even\n",
        "231": "implemented our comfortable maybe this\n",
        "233": "code was written 2,000 years ago and the\n",
        "234": "only thing they had was are comfortable\n",
        "236": "and Maximizer but they hadn't yet\n",
        "239": "implemented it as dog or cat or horse or\n",
        "240": "a list or anything there were no our\n",
        "242": "comparables no actual specific\n",
        "244": "instantiations of this just the\n",
        "246": "interface this code operates at a higher\n",
        "248": "level of abstraction than all of that it\n",
        "250": "doesn't deal with the earth\n",
        "252": "we world of dogs and so forth and so it\n",
        "254": "shouldn't matter what anybody does in\n",
        "255": "terms of messing up the implementation\n",
        "258": "the original code here should work and\n",
        "260": "this is an incredibly important point\n",
        "262": "that I really want you to make sure you\n",
        "264": "absolutely get now if you didn't\n",
        "266": "understand my video explanation of the\n",
        "268": "specific compilation airs maybe try it\n",
        "270": "out on your own and IntelliJ again the\n",
        "272": "lecture code repo has this so you can\n",
        "274": "play around in your own or you can see\n",
        "275": "these text-based descriptions of the\n",
        "277": "answers but really make sure you get\n"
    },
    "Title=[Inheritance3, Video 5] Comparables_Id=iQoN9bt8GJc": {
        "0": " \n",
        "2": "well the are comparable approach we just\n",
        "4": "used will certainly work it's not great\n",
        "6": "so what we're gonna do is make things\n",
        "8": "better using a built-in interface known\n",
        "9": "as comfortable so let's start by\n",
        "11": "thinking about what's not great about\n",
        "13": "what we just did the first problem is\n",
        "15": "the strange casting we have to do so if\n",
        "17": "we look at the compareto method of the\n",
        "19": "dog class we had to take the object that\n",
        "21": "was given to us and cast it to dog\n",
        "23": "before we can get the size and that just\n",
        "25": "makes the code a little ugly ideally we\n",
        "27": "don't want castes in our code similarly\n",
        "30": "in Maximizer when we call the dot max\n",
        "32": "method we see that it returns an are\n",
        "34": "comparable and thus if we want to\n",
        "36": "actually store it in a dog variable we\n",
        "38": "have to cast okay and make sure you can\n",
        "41": "think about why that is so in this case\n",
        "43": "we don't really like this and it'd be\n",
        "44": "better if we didn't have those features\n",
        "47": "now the other and actually bigger deal\n",
        "48": "is that we just made it up\n",
        "50": "so our comparable is not a real thing\n",
        "53": "and as a result there are no classes out\n",
        "55": "there that already implement are capable\n",
        "57": "so if we tried to use our Maximizer max\n",
        "59": "method with strings for example they\n",
        "61": "don't implement our comparable so it\n",
        "64": "will be useless for those similarly\n",
        "66": "there are no classes out there that\n",
        "68": "already do all the things that we want\n",
        "70": "to do like finding the max finding them\n",
        "73": "in finding the median that work with our\n",
        "75": "comparables and thus for everything we\n",
        "76": "might want to do that involves\n",
        "78": "comparison we have to write our own max\n",
        "80": "method on our own men method on our own\n",
        "83": "whatever else so fundamentally the issue\n",
        "85": "is we made it up it's not a real thing\n",
        "87": "and unless you intend to rewrite the\n",
        "89": "entirety of the java standard library\n",
        "91": "now with our comparable not gonna be a\n",
        "92": "very fun time\n",
        "94": "so our fix actually is going to be\n",
        "96": "pretty simple and that is we're gonna\n",
        "97": "take advantage of an interface built\n",
        "99": "into java called comparable so instead\n",
        "101": "of our comparable the one you and i\n",
        "103": "built we're instead going to use the one\n",
        "105": "built into java and it has one\n",
        "106": "difference from ours which is that it\n",
        "109": "takes a generic type and so in this case\n",
        "111": "this will help us avoid one of our casts\n",
        "113": "by instead of having to cast this object\n",
        "115": "to the specific type this will ensure\n",
        "117": "that everything works beautifully let's\n",
        "119": "just jump in a triangle so if we go to\n",
        "121": "our dog class which implements our\n",
        "124": "comparable now i'm gonna change this I'm\n",
        "126": "gonna say implements comparable in this\n",
        "129": "case dog now where did this come from\n",
        "132": "that's just built into Java Java yells\n",
        "133": "at us and\n",
        "135": "says hey there's an issue here you\n",
        "136": "didn't give the right compareto method\n",
        "138": "and all it's saying is this should be\n",
        "140": "dog right so if we look at the signature\n",
        "143": "this type here needs to match what's up\n",
        "145": "here so we say compared to dog and I'll\n",
        "147": "just name it uh dog and we can delete\n",
        "149": "this line entirely so we've just saved\n",
        "152": "ourselves a cast that's nice\n",
        "154": "and that's the dog class right tiny\n",
        "156": "change now we do have to make a couple\n",
        "158": "more changes for example it'll actually\n",
        "160": "just one more I think we go to Maximizer\n",
        "162": "will see that the Maximizer class\n",
        "164": "expects comparables or say our\n",
        "166": "comparables but we'd ultimately like to\n",
        "169": "be using with comparables instead of our\n",
        "171": "comparables so I'm just gonna change\n",
        "174": "this by deleting our no that should work\n",
        "176": "beautifully and then finally dog\n",
        "178": "launcher will work properly and so in\n",
        "180": "this case after we do dog D equals dog\n",
        "183": "you know Maximizer max dogs we can now\n",
        "187": "say D bark and hopefully the largest dog\n",
        "191": "should work it out boom Benjamin says\n",
        "195": "bark good now we still have a cast here\n",
        "197": "and if we delete it it doesn't work and\n",
        "199": "we look and if we look at the message we\n",
        "201": "see found comparable but require a dog\n",
        "204": "so that's something we still need to fix\n",
        "205": "there's another change we need to make\n",
        "208": "to our Maximizer class I'm not gonna\n",
        "210": "detail it in this specific lecture but\n",
        "211": "we'll talk about it in about three\n",
        "214": "videos but it's just not something I\n",
        "215": "want to get into right now cuz it's a\n",
        "217": "bit of a diversion okay so this\n",
        "220": "alternate approach basically what we do\n",
        "222": "is instead of using our personally made\n",
        "224": "of interface known as our comparable we\n",
        "227": "use the real one comparable dog and as a\n",
        "229": "result we can now plug into the entire\n",
        "231": "ecosystem so instead of having to build\n",
        "234": "our own parallel set of libraries we can\n",
        "235": "use all the ones that already exist and\n",
        "238": "use comparable so in effect what we get\n",
        "241": "out of comfortable is we can use for\n",
        "243": "example there's tons of classes out\n",
        "244": "there that implement comparable for\n",
        "247": "example strings so in principle we can\n",
        "249": "actually use an array of strings with\n",
        "251": "this max method and it will work nicely\n",
        "254": "even better though there are lots of\n",
        "255": "libraries out there that already used\n",
        "257": "the comparable interface so for example\n",
        "259": "max is already written for us as you\n",
        "261": "might imagine so there's a library\n",
        "262": "called collection and you could say\n",
        "265": "collection dot max given an array of\n",
        "266": "dogs and it will find\n",
        "268": "largest dog so long as that dogs\n",
        "270": "implement comparable okay so this\n",
        "273": "approach here is much nicer as you can\n",
        "274": "see compared to this approach because it\n",
        "276": "plays well with the existing libraries\n",
        "278": "and you'll note it also avoids that ugly\n",
        "282": "cast so that's basically the scoop with\n",
        "283": "comparables and in the next video we'll\n",
        "285": "talk about a very closely related idea\n"
    },
    "Title=[Inheritance4, Video 1] ADTs_Id=XZnZkASrArc": {
        "0": " \n",
        "2": "so will be so today we're going to start\n",
        "4": "talking about the real world alright\n",
        "6": "we're going to move away from the cradle\n",
        "8": "from the classes that we created\n",
        "10": "ourselves and start using the real thing\n",
        "13": "and to that end we are going to start\n",
        "16": "talking about the Java libraries so many\n",
        "18": "of you have anybody who's taken java in\n",
        "19": "high school is already seen most of this\n",
        "21": "but now we're going to start learning\n",
        "23": "about it for everybody who has not done\n",
        "26": "that during lecture so far the story\n",
        "28": "half of the class has been about\n",
        "30": "building data structures and we've\n",
        "33": "basically given some exemplification zuv\n",
        "34": "ideas that are going to be important to\n",
        "35": "us throughout the rest of the semester\n",
        "37": "from the next ten weeks\n",
        "40": "so in particular we in class built a\n",
        "43": "list 61b and for interface and we also\n",
        "45": "developed an A List and an S list class\n",
        "49": "which were ok but they didn't do\n",
        "50": "everything efficiently so for example\n",
        "52": "what did s list not do super efficiently\n",
        "57": "at last right and so we give you a\n",
        "58": "chance to go and build something even\n",
        "60": "better you had a double-ended queue\n",
        "62": "which had a few more operations than a\n",
        "63": "list 61b\n",
        "64": "and in your case you were able to\n",
        "66": "efficiently support add in rows last\n",
        "68": "using the array deck and linked list\n",
        "70": "deck interfaces I mean sorry\n",
        "72": "implementations and so in both cases\n",
        "74": "what we ended up doing is we had an\n",
        "77": "abstract data type like an idea right\n",
        "79": "the thing that the people in the cave\n",
        "81": "believes and then we had the secret\n",
        "83": "actions of the monk so I did a version\n",
        "87": "you did a version now of course there's\n",
        "90": "this stuff here and then there's a real\n",
        "92": "world which we'll see in a moment but\n",
        "93": "before we get to that I'll say that in\n",
        "95": "addition to this this has been the main\n",
        "97": "story of the class so far with a little\n",
        "100": "bit of a sidetrack which is another nice\n",
        "103": "use of implementation inheritance which\n",
        "106": "was for comparison so we saw it with\n",
        "109": "interfaces ok this is actually kind of a\n",
        "110": "bug you know what I realized this is\n",
        "112": "from last year which is the interface\n",
        "114": "inheritance anyway\n",
        "117": "curse is spring 2016 Josh anyway so two\n",
        "119": "more uses for interfaces that we saw in\n",
        "122": "addition to capturing this nice story is\n",
        "125": "it gives us a contract that where we can\n",
        "127": "say if you are an our comparable object\n",
        "130": "you definitely have a compare method so\n",
        "131": "in this case we're using interface\n",
        "133": "inheritance to say what you're capable\n",
        "135": "these are and so you could say that a\n",
        "136": "dog for example has the capabilities of\n",
        "139": "comparison and also gave us a way to get\n",
        "141": "around the fact that in Java we can't\n",
        "144": "pass functions along inside of point we\n",
        "146": "can't hand off functions as arguments to\n",
        "149": "functions so as a result we are able to\n",
        "151": "use implementations or interface\n",
        "153": "inheritance that basically create\n",
        "154": "objects like say character comparator\n",
        "156": "that's something you did in project 1 C\n",
        "158": "so that we actually even you built a\n",
        "161": "class that can basically act kind of\n",
        "164": "like a function generation function in a\n",
        "166": "bit and way in the sense that you could\n",
        "169": "pick arbitrary m okay so in other words\n",
        "172": "we've used interfaces in two ways first\n",
        "174": "we've captured this really nice idea of\n",
        "176": "walling off the abstract universe of the\n",
        "178": "people who live our sites\n",
        "179": "yeah the abstract universe the people\n",
        "181": "that live in the cave and in the true\n",
        "184": "universe of the monks wiggling around\n",
        "185": "their things in front of the flames and\n",
        "187": "we also use it as a way to express the\n",
        "190": "capabilities of objects so those are two\n",
        "191": "ways you could think about what we've\n",
        "196": "done so far so this idea of drawing a\n",
        "198": "line between the people on the cave and\n",
        "200": "the monks we are now going to start\n",
        "201": "seeing what it is that the real world\n",
        "203": "does so instead of the double-ended\n",
        "205": "queue that we implement it or that we\n",
        "206": "made up just for the purpose of this\n",
        "208": "class and these that you've invented\n",
        "210": "we're going to move on to what Java will\n",
        "214": "do okay now this notion of the this\n",
        "216": "distinction between an abstract data\n",
        "218": "type and an actual implementation is\n",
        "219": "something that we're going to harp on\n",
        "222": "over and over again and so what I'm\n",
        "223": "going to do is start introducing other\n",
        "225": "abstract data types so we've seen the\n",
        "227": "double-ended queue in class and the wrap\n",
        "229": "so the next half of lecture so we're\n",
        "230": "going to see others that you've seen\n",
        "233": "before okay so it gives a new one that\n",
        "234": "you may or may not have heard of before\n",
        "236": "known as the stack so what is a deck\n",
        "238": "well it's an abstract data type that has\n",
        "240": "two operations push and pop and in this\n",
        "243": "case is just integers so for example\n",
        "244": "this stack currently has the number four\n",
        "247": "and if I start pushing things they're\n",
        "248": "going to go on top of the stack it's a\n",
        "250": "stack of things so if I push the number\n",
        "252": "six it appears if I now push the number\n",
        "255": "two it appears and now the only other\n",
        "257": "thing I can do with a stack is pop okay\n",
        "258": "what does it mean to pop something off\n",
        "260": "of the stack when the states two will go\n",
        "263": "away so it's a lot like a double into -\n",
        "265": "except it's single-ended\n",
        "267": "so we can only put stuff and take them\n",
        "270": "off of the top so that's what's the\n",
        "272": "stack abstract data type is now there's\n",
        "274": "like basically an infinite number of\n",
        "276": "ways you could implement this thing but\n",
        "277": "I want you to just consider what you\n",
        "278": "know already if we were to try and\n",
        "279": "know already if we were to try and\n",
        "280": "implement this new abstract data type so\n",
        "282": "you may have never seen that has only\n",
        "284": "these two operations which of these two\n",
        "286": "do you think would be faster so give it\n",
        "288": "a shot think about this on Shaoqi comm\n",
        "312": " \n",
        "337": " \n",
        "340": "can we get a vote of 4 to 1\n",
        "343": "within the favor of linked lists someone\n",
        "345": "who thinks array is a better answer\n",
        "347": "who's willing to say why yes less\n",
        "348": "popular answer I'll warn you in advance\n",
        "350": "so why do you think the REA might be\n",
        "360": "better yeah well why is it better yeah\n",
        "365": "yeah I think we had a pop a ton top from\n",
        "368": "the end so what do you mean how would\n",
        "369": "you actually how would you pop for\n",
        "370": "example with an array based\n",
        "376": "implementation so you do size minus 1 if\n",
        "377": "you did it with a linked list what would\n",
        "380": "you have to do you might have to iterate\n",
        "383": "through the entire list okay why do you\n",
        "384": "not need to iterate through the entire\n",
        "388": "list of pop linked list buddy yeah oh\n",
        "389": "you were you're a proponent of linked\n",
        "395": "you guys are debating now so why don't\n",
        "397": "you have to iterate through the whole\n",
        "399": "linked list to get to it though also in\n",
        "401": "your proposing that the pointer will\n",
        "403": "always be at the top so if you have a\n",
        "404": "top pointer then you don't have to\n",
        "408": "iterate through okay so what I would\n",
        "411": "argue is if you do the linked list where\n",
        "413": "you keep the pointer to four then indeed\n",
        "415": "it will be slow but if you keep it on -\n",
        "417": "it'll X should be okay you could argue\n",
        "420": "that maybe possibly it's a little more\n",
        "422": "work each time you're moved from a\n",
        "423": "linked list I know does it really will\n",
        "425": "be so the argument that maybe why would\n",
        "428": "an array be slower would be my next\n",
        "429": "question\n",
        "432": "you have to resize some time now is it a\n",
        "434": "meaningful difference it turns out for a\n",
        "436": "stack it doesn't actually matter which\n",
        "438": "one you do it'll pretty much be equally\n",
        "439": "good so long as you make sure that\n",
        "441": "you're tracking with the linked list the\n",
        "443": "last or the top okay as long as you keep\n",
        "445": "a top pointer they're going to be about\n",
        "448": "the same but a linked list will have a\n",
        "450": "slight advantage because it will never\n",
        "452": "have to do the resizing operation okay\n",
        "454": "how about another one\n",
        "455": "how about another one\n",
        "458": "no one here's another abstract data type\n",
        "459": "so you've probably never heard of\n",
        "460": "because I made it up it's called a\n",
        "463": "grab-bag so in this case it supports for\n",
        "466": "operation it has insert which inserts X\n",
        "468": "into the grab bag and the bag is just a\n",
        "470": "bag right this bag it doesn't have any\n",
        "471": "particular order\n",
        "474": "it is like toss the thing in it when I\n",
        "477": "do remove let's put some things in it\n",
        "480": "this thing I take out some stuff and\n",
        "482": "then I have this thing which is already\n",
        "484": "in there and then I got something back\n",
        "486": "that's removed you get a random thing\n",
        "488": "and sample means to basically look in\n",
        "490": "the bag and be like microphone okay but\n",
        "491": "not take it out and sighs tell me\n",
        "493": "there's some number of things in the bag\n",
        "495": "okay so that's an abstract data type you\n",
        "497": "can use that without even knowing what a\n",
        "498": "linked list or an array is but let's\n",
        "500": "suppose you tried to implement it which\n",
        "501": "one do you think would be a better\n",
        "503": "implementation overall just use your\n",
        "507": "intuition I mean my phone it's in the\n",
        "544": " \n",
        "547": "okay the room is not quite but is nearly\n",
        "550": "unanimous so this time I'll just say\n",
        "552": "array people why do you think it'll be\n",
        "561": "faster so for sample with an array you\n",
        "563": "can just pick a random number between\n",
        "565": "zero and the number of items or however\n",
        "566": "it's stored and you can go straight\n",
        "568": "there and get the item you want with the\n",
        "569": "linked list presumably it'd be a little\n",
        "571": "more complicated because to do sampling\n",
        "573": "you need to scan through the list and\n",
        "575": "even if you kept like a random pointer\n",
        "576": "you still need to keep generating random\n",
        "577": "you still need to keep generating random\n",
        "578": "pointers which involves necessarily\n",
        "582": "scanning over the list so there you go\n",
        "585": "so arrays in this case will probably be\n",
        "586": "well as fact will be a much better\n",
        "588": "solution you could maybe do something\n",
        "590": "sneaky with a linked list we also keep\n",
        "592": "an array of all the items but then\n"
    },
    "Title=[Inheritance4, Video 3] Map Demo_Id=0JChT2oaC5M": {
        "0": " \n",
        "2": "good and by the way today I'm kind of\n",
        "4": "like I wanted to make today not super\n",
        "5": "dense because you have a midterm next\n",
        "7": "week so I hope it's not too slow you\n",
        "10": "can't 2x me right now unfortunately okay\n",
        "17": " \n",
        "22": "mm-hmm I do something like this set of L\n",
        "24": "or something and it makes a list version\n",
        "28": "so that would mean is there a set let's\n",
        "30": "see is there a constructor for set that\n",
        "32": "takes a collection so let's try that I\n",
        "34": "mean it might work this is me being very\n",
        "37": "verbose so it's an excellent question so\n",
        "38": "let's try and guess what the syntax\n",
        "39": "might be maybe we'll just bypass this\n",
        "41": "all together and we'll try and do it\n",
        "42": "over here\n",
        "47": "set string W equals new hash that string\n",
        "49": "and then where do you so I don't really\n",
        "52": "need this string sorry so old have it\n",
        "54": "only been a couple years since that was\n",
        "57": "possible so if that string words that\n",
        "59": "okay so where do you think we should try\n",
        "61": "and do this here right so let's just try\n",
        "65": "it so it's do W and then that's a great\n",
        "67": "question\n",
        "70": "we'll do words that side so it seems to\n",
        "72": "compile fine and I bet you it'll work\n",
        "75": "let's check it out 964 so indeed that\n",
        "78": "works as well now if we look here you\n",
        "81": "can actually see if we do new hashtag I\n",
        "85": "won't do it okay list okay it won't show\n",
        "87": "me the signature but basically the stat\n",
        "89": "it does indeed have something similar so\n",
        "94": " \n",
        "97": "so even better than this loop alright\n",
        "99": "next up let's build ourselves a map so\n",
        "100": "in this case what we're going to do is\n",
        "105": "we want to find the number of times that\n",
        "109": "the worth lottery V and Babylon appear\n",
        "111": "and so what we're going to do is create\n",
        "112": "a list of all the words we care about\n",
        "114": "Jesus I need to stop doing this and\n",
        "116": "lottery V in Babylon and we're going to\n",
        "118": "have it print out how many times those\n",
        "120": "three words appear this again is a\n",
        "121": "common pattern that you should have seen\n",
        "122": "some point whenever you're doing a\n",
        "125": "Python and if you are in a 7 hopefully\n",
        "126": "you're just feeling at least somewhat\n",
        "128": "now we'll notice is the signature this\n",
        "129": "method is just a monster like look I\n",
        "131": "think it's it on the screen this is very\n",
        "133": "normal for Java\n",
        "134": "and there's nothing I mean it gives\n",
        "136": "worse than that for sure but it's\n",
        "139": "something we'll live so to do this what\n",
        "141": "we're going to do is build a map that\n",
        "143": "tells us given a string how many times\n",
        "144": "it occurs\n",
        "146": "so we'll say map string integer and\n",
        "148": "we'll call this thing like counts equals\n",
        "151": "new let's say and on a hashmap because\n",
        "152": "those would look slightly more popular\n",
        "154": "than the other one and so we say new\n",
        "156": "hashmap string integer now we'll go\n",
        "159": "through each of the strings and the H\n",
        "163": "word for string W and our list of words\n",
        "165": "actually now I'm gonna do it in target\n",
        "167": "I'm calling them targets they're for\n",
        "169": "each string and targets there are other\n",
        "170": "ways of doing this but this is the\n",
        "173": "easiest way to write it clearly so I'm\n",
        "174": "going to say I'm going to put in my\n",
        "176": "dictionary a map from that string to\n",
        "181": "what we're counting so all my targets\n",
        "184": "how many do we know of so far in our\n",
        "185": "words none\n",
        "189": "so this basically says make a note that\n",
        "192": "we have seen none of the words okay and\n",
        "194": "then what I can do is say for string F\n",
        "198": "in words and now I'm going to get each\n",
        "201": "of them from the fake count get F okay\n",
        "206": "so that's my old count okay and then I'm\n",
        "208": "going to do and you could do it again\n",
        "209": "the stuff on one line but I'm just\n",
        "211": "writing it braver Bhosle so I'm gonna\n",
        "217": "say counts dot put what someone said old\n",
        "218": "count plus one but that's not quite\n",
        "222": "enough you really need to specify what\n",
        "224": "we're associating with it so we need to\n",
        "227": "say F comma old count plus one so what\n",
        "229": "that does is it says the current word\n",
        "230": "we're looking at say the word is potato\n",
        "231": "okay\n",
        "233": "so we'll say for string F in words we're\n",
        "235": "going to get the count and then we're\n",
        "236": "going to increment the count\n",
        "239": "however this code has one minor issue\n",
        "240": "which is that it's actually checking to\n",
        "242": "see let's say gets the word that's\n",
        "247": "potato it's potato Z Babylon or Lottery\n",
        "250": "No so this code is going to behave in\n",
        "251": "some weird way fact let's see what\n",
        "253": "happens so I'm going to return count\n",
        "260": " \n",
        "263": "get it takes a takes a thing on the left\n",
        "269": "hand side a strength how does it work\n",
        "272": "how is an implement a great question so\n",
        "274": "abstract data type we'd literally don't\n",
        "279": "care right so get before get took an\n",
        "281": "index but since this is a map right\n",
        "283": "instead it's a map it's using a\n",
        "285": "different semantics and so for now we're\n",
        "286": "just going to trust up some how it works\n",
        "287": "and we'll talk about how it works in\n",
        "291": "about four weeks okay that's the glory\n",
        "293": "of abstract data type so we try and run\n",
        "295": "this we ran into some kind of issue see\n",
        "298": "what is it no point in exception so we\n",
        "300": "got a null pointer exception because it\n",
        "301": "tried to get the word like say horse\n",
        "304": "but horse wasn't there so instead if we\n",
        "307": "really wanted to be verbose we would do\n",
        "309": "something like this if count dot\n",
        "312": "contains key s then do all this stuff\n",
        "314": "so basically we're only going to\n",
        "316": "actually augment it if the word actually\n",
        "318": "exists okay so this is somewhat more\n",
        "319": "exists okay so this is somewhat more\n",
        "320": "verbose than real Java code but real\n",
        "322": "Java code is going to be about that long\n",
        "324": "so when you run it you finally get that\n",
        "327": "D occurs 172 times babylon 6 and lottery\n",
        "329": "12 okay so any questions about this\n",
        "333": "before we proceed yeah there's a more\n",
        "335": "concise way but I don't want to do arena\n",
        "339": "yeah hey what the more concise ways\n",
        "340": "wouldn't be that much shorter though I\n",
        "341": "warn you\n",
        "348": "yeah dude why did one for loop to set up\n",
        "350": "all the counts and then another to go\n",
        "355": "through the words yeah yes so you could\n",
        "356": "actually do you don't have to do this\n",
        "358": "preset right you could do something\n",
        "362": "similar to that earlier right so to\n",
        "364": "compare what we did here all right so\n",
        "366": "that was just the old dosis the finding\n",
        "367": "unique words we don't really need to go\n",
        "369": "over that but hey just pointing out\n",
        "371": "we're using this new loop but this is\n",
        "374": "the version I just wrote more or less\n",
        "377": "and I want to compare it to the Python\n",
        "378": "equivalent okay so there's some\n",
        "380": "interesting difference here differences\n",
        "383": "so this is the Java version the python\n",
        "385": "version of course does not have declared\n",
        "387": "types it also has something very\n",
        "388": "interesting here even if you've never\n",
        "390": "seen Python in fact maybe\n",
        "391": "interesting to view if you've never done\n",
        "393": "Python what do we notice about this line\n",
        "395": "where it counts equals no dictionary\n",
        "398": "what's that like this is just somehow\n",
        "399": "we're creating a dictionary and Python\n",
        "402": "which is some symbol whereas in Java we\n",
        "404": "have to say like this whole thing hey\n",
        "405": "this is the abstract data type I want\n",
        "407": "hey this is a specific implementation I\n",
        "408": "want here's just give me a dictionary\n",
        "412": "okay then we go through this dictionary\n",
        "414": "and I say for every item and the target\n",
        "416": "I'm going to set them to zero and again\n",
        "418": "you could do this shorter in Python as\n",
        "420": "well of course and then I basically say\n",
        "422": "for ass in words if it's actually in the\n",
        "423": "word counts increment its value by one\n",
        "426": "so we notice that the way to index into\n",
        "428": "a dictionary is a lot like an array\n",
        "429": "whereas in Java we have to actually call\n",
        "433": "these methods get and put right get put\n"
    },
    "Title=[Inheritance4, Video 4] Java vs. Python_Id=rWZInNwe3_U": {
        "0": " \n",
        "2": "okay so the Python version is clearly\n",
        "3": "more concise so I want to do a little\n",
        "4": "compare and contrast between Java on\n",
        "7": "Python here yes so in every language\n",
        "8": "there are always going to be some\n",
        "10": "features that are first-class citizens\n",
        "12": "things that are considered integral to\n",
        "13": "the language things that are supposed to\n",
        "15": "really shape the way you think about how\n",
        "17": "to solve problems in that language and\n",
        "20": "when it comes to data structures the\n",
        "22": "language features that are first\n",
        "23": "classify the data structures that are\n",
        "25": "first class there's often a special\n",
        "27": "syntax for creating using those types of\n",
        "29": "objects so it actually gets even a\n",
        "31": "little more messy and you will see this\n",
        "33": "definitely on your project which is\n",
        "35": "where suppose in Python you want to make\n",
        "38": "a dictionary that tells you how many\n",
        "40": "legs different creatures have so in\n",
        "41": "Python you can do that in a line and say\n",
        "43": "num legs equals well horses have four\n",
        "45": "legs dog stuff for humans f2 fish of\n",
        "47": "zero but in Java if you wanted to create\n",
        "49": "this collection you would need to do\n",
        "51": "something like this right you can write\n",
        "52": "a helper method that might shorten\n",
        "54": "things but the default way is you would\n",
        "57": "need to create a map and then you need\n",
        "59": "to put each thing one at a time yes so\n",
        "61": "you is just a feature of Java you don't\n",
        "63": "have dictionaries or associative arrays\n",
        "64": "or what we want to call them as tip your\n",
        "67": "fingers and there wasn't actually some\n",
        "69": "debate about introducing something like\n",
        "70": "this into Java so that was ultimately\n",
        "73": "canceled two years three two and a half\n",
        "75": "maybe it'll return someday but they\n",
        "77": "found it was too messy because in Java\n",
        "79": "the thing was it's not just collections\n",
        "82": "insects it's not just list sets and maps\n",
        "84": "there's other things that people use and\n",
        "85": "so they wanted to forget is there some\n",
        "88": "general syntax that makes sense for any\n",
        "89": "collection anybody might ever write\n",
        "92": "whereas in Python this symbol is used\n",
        "96": "for dictionaries for maps right so in\n",
        "98": "Java they wanted to make it extensible\n",
        "99": "and they didn't find the right set of\n",
        "102": "things to make it work so programming\n",
        "103": "languages are made by people maybe as\n",
        "105": "the lesson there and sometimes is really\n",
        "108": "hard challenges okay so one thing that's\n",
        "110": "interesting about Java is that it\n",
        "111": "actually gives you the control to\n",
        "113": "separate implementation from data to\n",
        "116": "abstract data types so the power user\n",
        "118": "can decide I want a hash map or a tree\n",
        "120": "map in both cases is the same abstract\n",
        "122": "data type the dictionary but over here\n",
        "124": "it's hash table base and here it is\n",
        "127": "balanced binary search tree base and and\n",
        "129": "so in effect what that does is the user\n",
        "131": "who really really needs to tune their\n",
        "133": "performance can make choices\n",
        "135": "whereas in Python you get a dictionary\n",
        "136": "and that's the dictionary you get unless\n",
        "138": "you go implement something from scratch\n",
        "141": "also for example if you've iterated ok\n",
        "143": "that is you just go through each of the\n",
        "145": "keys in this tree map you'll get them in\n",
        "147": "alphabetical order but in hashmap you\n",
        "149": "don't get them in alphabetical order in\n",
        "150": "fact you have no guaranteed order so\n",
        "153": "hashmaps probably faster but in most\n",
        "154": "cases but a tree map is going to give\n",
        "156": "you back keys in alphabetical order so\n",
        "157": "that's a little bit you get a little\n",
        "160": "finer grained control alright\n",
        "162": "so my job on 61b by the way it seems\n",
        "164": "like it's more verbose ok so some things\n",
        "167": "is that so I would argue then even\n",
        "168": "though Java programs are certainly more\n",
        "170": "verbose no question they think they\n",
        "172": "can't actually faster the right program\n",
        "173": "one of the reasons is you get static\n",
        "176": "pipes which is nice because you get type\n",
        "177": "checking but also one of the things that\n",
        "179": "I absolutely love about Java is that\n",
        "180": "when you look at a program and you have\n",
        "182": "a method like collect word count as long\n",
        "184": "as it's not too complicated what's nice\n",
        "186": "is when I see this I know someone's\n",
        "188": "giving me two lists and I'm giving back\n",
        "190": "a map that is not the case in Python\n",
        "192": "unless you use the optional type\n",
        "194": "specifying stuff which I've never really\n",
        "197": "used so I love the fact that static\n",
        "199": "types of Java exist another is that it\n",
        "201": "tends there's a bias in the language it\n",
        "203": "has special features that force\n",
        "206": "interface inheritance so interfaces I\n",
        "207": "think are nicer so you get cleaner\n",
        "210": "inheritance another issue of things like\n",
        "211": "the private keyword which make\n",
        "213": "abstraction barrier solid and they keep\n",
        "215": "giant projects from collapsing under\n",
        "216": "their own weight because if you can't\n",
        "218": "edit the thing if you can't access\n",
        "220": "variables that I decide or private then\n",
        "221": "that keeps you from screwing something\n",
        "224": "up it also makes code more efficient for\n",
        "226": "example you can decide between hash map\n",
        "228": "or tree maps you can't you have single\n",
        "230": "value two rays which make them a little\n",
        "232": "faster than say Python and there's\n",
        "234": "actually another interesting topic which\n",
        "236": "is that basic data structures in Java\n",
        "238": "they more closely resemble what's inside\n",
        "240": "the actual computer so if we did\n",
        "242": "something like a ray deck and Python for\n",
        "243": "example it would be a little awkward\n",
        "244": "example it would be a little awkward\n",
        "246": "because there's no need there's no need\n",
        "248": "for array resizing the thing that feels\n",
        "250": "most like an array and python is a list\n",
        "253": "and let's actually already basically\n",
        "256": "they know they they run however they\n",
        "257": "want right if they extend automatically\n",
        "259": "actually what's interesting is this the\n",
        "262": "list in Python is actually an ArrayList\n",
        "264": "like we did in our class but you\n",
        "265": "wouldn't really know that the way to\n",
        "269": "good semantic work cool ok so any\n",
        "270": "thoughts about that for a cruise on a\n",
        "274": " \n",
        "278": "Java first-class citizens classes yeah\n",
        "281": "so but actually let's see what what is\n",
        "283": "really really easy to do in Java types\n",
        "286": "I'd say I mean you know types is the big\n",
        "287": "one because you can hack type checking\n"
    },
    "Title=[Inheritance4, Video 5] Abstract Classes_Id=ygwF3UsMejM": {
        "0": " \n",
        "1": "King into paesan in various ways but\n",
        "3": "yeah that's it types is a big one that's\n",
        "5": "the interesting question what else's\n",
        "9": "okay now this is a distinctly unsexy\n",
        "10": "topic so something I should mention\n",
        "11": "which is interface as an abstract class\n",
        "14": "so the last several lectures we've seen\n",
        "15": "out implements and extends can allow us\n",
        "17": "to do interface inheritance and\n",
        "18": "implementation inheritance and as a\n",
        "20": "reminder interface inheritance is what\n",
        "22": "you can do and implementation\n",
        "25": "inheritance is how you do it now it\n",
        "27": "turns out that in the modern era\n",
        "29": "interfaces which originally were for\n",
        "31": "interface inheritance only and the\n",
        "33": "modern era they can have both abstract\n",
        "35": "methods that is just things that are\n",
        "37": "semicolons off in default methods which\n",
        "39": "actually do something right they have a\n",
        "42": "how now I don't think I actually said\n",
        "43": "this on a slide I've definitely said it\n",
        "45": "out loud but in an interface every\n",
        "48": "method has to be public so anytime I put\n",
        "49": "public here it was redundant and we saw\n",
        "51": "with intelligent yells at us and said we\n",
        "53": "don't have to and another thing is that\n",
        "56": "unless you use the keyword default then\n",
        "58": "the method is so-called abstract so it\n",
        "60": "has a semicolon it's abstract meaning it\n",
        "62": "doesn't actually do anything it's just a\n",
        "64": "thing you must be able to do okay\n",
        "67": "so there's actually one last thing I\n",
        "68": "want to say about interfaces we're\n",
        "70": "talking about their cousins which is\n",
        "72": "that you can also actually put variables\n",
        "74": "inside of an interface and in that case\n",
        "76": "they'll be public static final so that\n",
        "77": "they'll be public static final so that\n",
        "78": "means it's public and it's static you\n",
        "80": "know what those mean and final just\n",
        "81": "means you can never change the value so\n",
        "83": "you can use it for constants like say\n",
        "85": "gravity and it turns out by the way that\n",
        "87": "classes can implement multiple\n",
        "89": "interfaces so I can implement universe\n",
        "90": "and illusion and make an illusory\n",
        "92": "universe website as to do all the things\n",
        "94": "that universes and illusions can do\n",
        "98": "maybe get some default method so as we\n",
        "99": "know interfaces you can't instantiate\n",
        "102": "them they can either give you abstract\n",
        "104": "methods or concrete methods these are\n",
        "106": "default methods you can get public\n",
        "108": "static final variables and we can only\n",
        "110": "have public methods and they have to end\n",
        "113": "yeah now there's actually a closely\n",
        "115": "related idea known as an abstract class\n",
        "117": "we won't really use them much in this\n",
        "119": "course however you may occasionally see\n",
        "121": "them in the Java library so I want to\n",
        "123": "let you know what they are so abstract\n",
        "125": "classes are kind of\n",
        "127": "in the middle between interface and\n",
        "130": "class so they cannot be instantiated you\n",
        "131": "can't say new list\n",
        "133": "likewise in Java they have an example in\n",
        "135": "their tutorial called a graphic object\n",
        "138": "you can't make a new graphic object now\n",
        "140": "abstract classes while they can't be\n",
        "143": "instantiated they do they can't do some\n",
        "145": "things that interfaces cannot do so just\n",
        "147": "like interfaces they can provide either\n",
        "149": "abstract or concrete methods so they can\n",
        "151": "give you semicolon doc methods or actual\n",
        "153": "methods but the semantics are a little\n",
        "155": "different so it's just like kind of\n",
        "156": "keyword glow thing with the language got\n",
        "157": "a little more complicated than it should\n",
        "161": "but in abstract classes by default any\n",
        "163": "method you specify as concrete and\n",
        "164": "anything that you want to say is\n",
        "166": "abstract you have to use the abstract\n",
        "167": "keywords sorry that's just the way it is\n",
        "170": "and so these it's just the opposite of\n",
        "173": "the default choice in an abstract\n",
        "176": "classes concrete you can also provide\n",
        "177": "any kind of variables in any kind of\n",
        "179": "method so I can have for example public\n",
        "182": "int X Y and that means every graphic\n",
        "184": "object is going to get an X and a Y that\n",
        "186": "is public yes and same thing with\n",
        "187": "methods you can provide any kind you\n",
        "190": "want you can have even private methods\n",
        "194": "to get inherited okay and just like we\n",
        "196": "saw before anytime you have an abstract\n",
        "199": "method if you have a concrete class if\n",
        "200": "it doesn't actually override any\n",
        "202": "something that's abstract it yells at\n",
        "204": "you so for example if graphic object\n",
        "207": "provides a draw and a resize method then\n",
        "209": "the circle class absolutely must\n",
        "211": "implement draw and resize it doesn't\n",
        "213": "need to implement move - why does it\n",
        "216": "need to implement that because it's\n",
        "217": "already an implementation good it'll\n",
        "220": "inherit that okay somebody is this I\n",
        "221": "don't know how visible it is oh it is\n",
        "223": "it's even more visible there than on the\n",
        "225": "screen so this lighter blue will\n",
        "227": "indicate an abstract class and a\n",
        "230": "concrete class you can actually level\n",
        "232": "this you can actually have a hierarchy\n",
        "234": "with an interface up top an abstract\n",
        "236": "class and a concrete class\n",
        "237": "and so I've just thrown this at you here\n",
        "239": "because probably hearing me talk about\n",
        "240": "this might be a little boring so what\n",
        "241": "this might be a little boring so what\n",
        "242": "you think about it in process what I've\n",
        "245": "said recently so in this case I have a\n",
        "246": "paper shredder interface a deluxe model\n",
        "248": "abstract class and a specific concrete\n",
        "250": "class not shown and the question is by\n",
        "252": "the time we climbed down the inheritance\n",
        "253": "hierarchy\n",
        "256": "how many methods are left for DCX 9000\n",
        "335": " \n",
        "337": "alright I'll take back over the room\n",
        "341": "there's some dissent okay let's talk\n",
        "342": "about this interface\n",
        "344": "how many abstract methods does it\n",
        "346": "provide to how do you know they're\n",
        "349": "abstract it doesn't say I'm drank that's\n",
        "350": "what happens with interfaces if you\n",
        "352": "don't say ok good so now we get to\n",
        "355": "deluxe model okay of these methods how\n",
        "360": "many abstract methods does it define one\n",
        "363": "this one connects to Wi-Fi okay so at\n",
        "364": "this point you would say there's three\n",
        "366": "abstract methods however how many\n",
        "369": "methods does this actually implement\n",
        "372": "concretely one Oh actually to count and\n",
        "375": "shred all shred all it was inherited\n",
        "378": "from this one so basically this provided\n",
        "379": "two abstract methods this implemented\n",
        "382": "one but it added one again so the\n",
        "383": "ultimate answer is two there's two more\n",
        "385": "that need to be done those are connect\n",
        "394": "to Wi-Fi and shred okay yeah here why\n",
        "396": "don't have to say public abstract shred\n",
        "397": "you don't have to explicitly say it\n",
        "399": "because it's inherited from the center\n",
        "404": "face if you in this class do not have to\n",
        "406": "implement it an abstract class does not\n",
        "410": "have to implement interface methods you\n",
        "412": "don't even have to list it and there's a\n",
        "414": "chance I'm wrong but I'm pretty sure I'm\n",
        "416": "right okay now we could try it but I'm\n",
        "423": "afraid to open it yes public so in this\n",
        "425": "class I do public abstract void shred\n",
        "430": "all shred is a good question so if I\n",
        "433": "actually do public abstract void shred\n",
        "437": "like I just repeat this again that's a\n",
        "439": "great question I would have no semantic\n",
        "441": "impact and I'm not sure what it'll do\n",
        "444": "I would I would open it in intelligent\n",
        "445": "but I don't have the files ready I don't\n",
        "446": "want to type all this stuff so I'll\n",
        "448": "table the question but it's interesting\n",
        "449": "thing to ponder what happens if you\n",
        "451": "actually put this again an abstract\n",
        "453": "class ultimately though there's two\n",
        "454": "things that are left for you to do you\n",
        "456": "need to write connect to Wi-Fi and you\n",
        "458": "need to write shred shred all is already\n",
        "461": "done so to summarize this that's as much\n",
        "463": "as I'm really going to say about them\n",
        "464": "all give a little more but for\n",
        "466": "interfaces the main goal is for\n",
        "467": "interface\n",
        "468": "hairatan and you could do a little bit\n",
        "470": "of implementation inheritance and\n",
        "472": "classes can implement multiple interface\n",
        "475": "with abstract classes basically they can\n",
        "477": "do anything an interface can do but they\n",
        "478": "have a little more capability like they\n",
        "481": "can provide non-public methods for\n",
        "484": "example subclasses of course also can\n",
        "486": "only extend one abstract class because\n",
        "487": "there's a rule in Java so you can only\n",
        "489": "extend one class and in my opinion\n",
        "491": "whatever you're not really sure you\n",
        "493": "should use an interface abstract classes\n",
        "495": "come up sometimes but I basically I feel\n",
        "497": "like the more complicated the thing it\n",
        "499": "is that you use in a language the more\n",
        "500": "likely you're going to cause yourself\n",
        "502": "trouble so you should restrict choices\n",
        "505": "from yourself when you can and Oracle\n",
        "506": "has a whole tutorial and when to use\n",
        "507": "each this is not a software engineering\n",
        "509": "class we won't really see it in a lot of\n",
        "511": "detail but I do want to show you a\n",
        "513": "little bit of what the why Java uses on\n",
        "516": "scratch classes so this is how lists and\n",
        "518": "Java work that's not totally but this is\n",
        "520": "mostly how it goes so there's a list\n",
        "522": "interface and there's an abstract list\n",
        "525": "abstract class good name and then there\n",
        "527": "are two specific implementations that\n",
        "530": "extend this class what does abstract\n",
        "532": "list do well it provides for example an\n",
        "534": "add methods that adds something to the\n",
        "536": "end of the list how does it do that it\n",
        "540": "uses the add method and add something to\n",
        "542": "the end of the list so it uses its own\n",
        "544": "size method and it uses the add method\n",
        "546": "that's going to be implemented by DS so\n",
        "548": "a ray list and linked list they're less\n",
        "550": "Caesar this is a method that's still\n",
        "551": "abstract by the time we get to the\n",
        "554": "bottom there each of these classes has\n",
        "555": "to be able to implement something for\n",
        "558": "adding to any position in the list but\n",
        "559": "if you don't want to implement the add\n",
        "561": "to the end of the list method that's\n",
        "564": "what ADD does okay now one question you\n",
        "565": "might ask yourself is why isn't this\n",
        "567": "just a default method and list and I\n",
        "569": "think the reason is that the interfaces\n",
        "571": "didn't have default methods until two\n",
        "573": "years ago so that's probably why okay an\n",
        "575": "abstract list was public and we can't\n",
        "576": "just throw it away\n",
        "577": "so that's an example of something\n",
        "579": "abstract lists we're good for now it's\n",
        "580": "actually even a little more messy this\n",
        "582": "is more of what the real list hierarchy\n",
        "584": "looks like in reality linked lists\n",
        "586": "extends abstract sequential lists and\n",
        "587": "that actually extends that exact list\n",
        "589": "which extends abstract collection which\n",
        "591": "in turn influenced and collection okay\n",
        "593": "and if you want you can browse the\n",
        "595": "source code we won't really care about\n",
        "596": "this but actually I lied this is the\n",
        "597": "this but actually I lied this is the\n",
        "599": "real true hierarchy\n",
        "601": "links list that is fun to try and lay\n",
        "604": "out yesterday by the way it's just real\n",
        "605": "weird like abstract collection that\n",
        "607": "implements list but list also extends\n",
        "609": "collection and abstract collection\n",
        "611": "extends collection and you know if\n",
        "612": "you're excited about these things you\n",
        "614": "can read about them later okay but I\n",
        "616": "just wanted to let you know basically\n",
        "618": "abstract classes work because you're\n",
        "619": "likely to see them when you look at\n",
        "621": "documentation but you probably won't\n",
        "622": "need to write me abstract classes\n"
    },
    "Title=[Inheritance4, Video 6] Packages_Id=xQuYmp9dE2U": {
        "0": " \n",
        "3": "last is yourself okay all right\n",
        "5": "lightning round on packages but it won't\n",
        "8": "be hard okay so packages is the last\n",
        "9": "little cent tax thing I want to talk\n",
        "11": "about since it'll be on homework one\n",
        "14": "after the midterm and in this case I\n",
        "16": "will turn again to Python I think Python\n",
        "18": "has a great set of rules for good\n",
        "19": "behavior\n",
        "21": "one of these it's called the sin of\n",
        "23": "Python it's things that are nice like\n",
        "25": "readability counts and so forth\n",
        "26": "but there's two that will be really\n",
        "29": "important here one is explicit is better\n",
        "30": "than implicit that's part of the reason\n",
        "32": "why in lecture I tend to write you know\n",
        "34": "I created those little silly variables\n",
        "36": "that are just named and another is\n",
        "38": "namespaces r1 honking great idea let's\n",
        "41": "do more of those so packages address\n",
        "43": "both of these two issues let's figure\n",
        "46": "out what a namespace is okay well the\n",
        "48": "goal with packages is we really want to\n",
        "50": "give a canonical name to everything and\n",
        "52": "in fact this notion this idea of a\n",
        "54": "canonical representation is a wonderful\n",
        "56": "mathematical idea that should be burned\n",
        "58": "into your brains and it's basically just\n",
        "60": "a unique representation for a thing so\n",
        "62": "non canonical is a license-plate number\n",
        "65": "you can reuse a license plate right like\n",
        "68": "if I sell a car and someone else buys\n",
        "70": "the sorry if I don't use my license\n",
        "72": "plate anymore someone else can get the\n",
        "74": "same number and likewise if I buy a car\n",
        "76": "I'll probably get a new license plate\n",
        "78": "however cars have been numbers so this\n",
        "80": "right here refers to a very specific\n",
        "82": "motorcycle I think it was mine that was\n",
        "83": "stolen possibly I don't remember anymore\n",
        "85": "and so that's a canonical one that sits\n",
        "88": "with that motorcycle from okay so in\n",
        "90": "Java we can try to give canonicity by\n",
        "91": "giving every class what we'll call a\n",
        "92": "giving every class what we'll call a\n",
        "94": "package name okay this is gonna be some\n",
        "96": "gobbledygook for terms but a package is\n",
        "99": "a so called namespace that organizes\n",
        "102": "classes and interfaces and in homework 1\n",
        "104": "you'll make we'll make our own but let\n",
        "105": "me give you a little example ok\n",
        "108": "so packages basically address the fact\n",
        "109": "that classes might share names you might\n",
        "111": "have multiple dog classes maybe five\n",
        "113": "different people have written a dog\n",
        "115": "class and so what I can do is say that\n",
        "118": "not is it it's not just dog it's going\n",
        "121": "to be a class called ugh Josh eh animal\n",
        "122": "dog okay\n",
        "124": "now that would be a really unwieldy name\n",
        "126": "so I don't make class names super long\n",
        "128": "to make sure nobody else has them so\n",
        "129": "what we'll do is we'll at the top of our\n",
        "133": "files put package ugh Josh eh animal\n",
        "134": "actually who here had package put into\n",
        "136": "your files by IntelliJ at some point\n",
        "139": "anybody to the autograder break maybe\n",
        "141": "probably so that's why it was they\n",
        "143": "changed the whole namespace situation\n",
        "146": "okay so as we'll see after the midterm\n",
        "147": "we will want to do this we'll start\n",
        "149": "putting packages all of our files\n",
        "151": "because that means now that if you do\n",
        "153": "like package so I picked the name Oh\n",
        "155": "Josh H and the reason is that usually\n",
        "157": "our package names will start with the\n",
        "159": "website address so if my web dress and\n",
        "162": "my website was Josh hqg I would put\n",
        "164": "anything that I write in the ugh Josh H\n",
        "167": "dot whatever package okay and so what's\n",
        "169": "nice about this is that when I want to\n",
        "171": "actually make a dog I can be very\n",
        "173": "specific about which dog I want I don't\n",
        "174": "want just the built in dog I don't want\n",
        "177": "Frank dog I want oh gosh H animal dog\n",
        "180": "now as we saw and like the hyperspeed\n",
        "182": "round of the j-unit lecture typing out\n",
        "184": "in that entire name could be annoying so\n",
        "189": "how do we fix that in java import so\n",
        "191": "when i do import it basically says the\n",
        "193": "java from now on anytime you see dog\n",
        "195": "don't what you what you're thinking\n",
        "200": "about is uh josh h animal dog it's also\n",
        "202": "possible to do wild card imports which\n",
        "204": "basically says i don't want to just get\n",
        "206": "the dog class I want literally\n",
        "208": "everything in a certain package so in\n",
        "210": "that case I would do something like this\n",
        "214": "import Josh H - animal dot star so\n",
        "216": "there's a star syntax that I feel like\n",
        "218": "there's a word missing here and that\n",
        "219": "will make sure that I get everything in\n",
        "222": "that package so that can be bad anybody\n",
        "227": "want to wager a guess as to why it\n",
        "229": "contaminates your namespace you get all\n",
        "230": "this stuff you don't know exactly what\n",
        "232": "you've got your being implicit rather\n",
        "234": "than an explicit and if you import from\n",
        "236": "multiple packages you can have conflicts\n",
        "238": "maybe there's three packages you're\n",
        "239": "getting everything from and to happen to\n",
        "241": "have dog then you'll have a conflict now\n",
        "243": "what's different about this from Python\n",
        "249": "what do in ports do in Python they let\n",
        "253": "you use stuff what like from other files\n",
        "255": "that it's not necessary in Java okay so\n",
        "256": "I just want to make it clear that\n",
        "259": "imports in Java or not please go look\n",
        "260": "somewhere else on my computer for\n",
        "262": "libraries you guys already know that you\n",
        "263": "have to do this whole IntelliJ thing\n",
        "266": "instead it says from now on language\n",
        "267": "please treat dogs semantically as the\n",
        "268": "please treat dogs semantically as the\n",
        "269": "one from this package okay so I just\n",
        "270": "wanted to say a little bit about\n",
        "272": "packages so it's in our brains we'll\n",
        "274": "come back to that after the midterm call\n",
        "275": "it a day\n"
    },
    "Title=[Intro, Video 1] Welcome to CS61B_Id=zO2rxwmq5HA": {
        "0": " \n",
        "2": "welcome to data structures if you're\n",
        "3": "watching this you're probably somebody\n",
        "4": "enrolled with the actual physical class\n",
        "7": "at Berkeley CS 61 B but if you're just\n",
        "8": "some random person from the internet\n",
        "10": "you're welcome to all the material will\n",
        "11": "be here available on the web for you to\n",
        "13": "learn everything's free\n",
        "16": "so hop in so what is this class well\n",
        "19": "this is a second semester class as most\n",
        "20": "of you it Berkeley No\n",
        "23": "and it is to me one of the most\n",
        "25": "important classes I'm a little biased\n",
        "27": "because this is my baby in the class I\n",
        "28": "spent the most time developing and\n",
        "30": "thinking about but this is the class\n",
        "32": "where you go from being a basic\n",
        "34": "programmer knowing how to kind of build\n",
        "36": "stuff and really working your way\n",
        "37": "towards independence it's kind of like\n",
        "39": "bootcamp this is the class where when\n",
        "40": "you leave it I want you to be able to\n",
        "43": "walk in to say Google or Airbnb do an\n",
        "45": "internship blow people's minds do well\n",
        "47": "this is the class or and you're done I\n",
        "48": "want you to think okay there's some\n",
        "50": "thing I want to achieve maybe I want to\n",
        "53": "learn to build an Android app to I don't\n",
        "56": "know to connect children and countries\n",
        "58": "so they can compare Pokemon or whatever\n",
        "60": "whatever it may be that you want to\n",
        "61": "build this is the class where I want you\n",
        "64": "to get the independence and the skills\n",
        "65": "necessary to go out there and do\n",
        "66": "necessary to go out there and do\n",
        "67": "anything else that you want to do the\n",
        "70": "great unlocking of all things out there\n",
        "72": "ok so how are we gonna do that what is\n",
        "74": "what is the the framework that this\n",
        "76": "well this class is fundamentally about\n",
        "79": "efficiency ok and it'll connect us to\n",
        "81": "this notion of independence as we'll see\n",
        "84": "in a moment so first the first way in\n",
        "86": "which we might consider efficiency is in\n",
        "88": "our programs themselves how long does it\n",
        "90": "take the computer to run the program how\n",
        "93": "much memory does the program use and to\n",
        "95": "understand that we're gonna study a\n",
        "96": "certain set of algorithms that are\n",
        "97": "really good ways of solving certain\n",
        "99": "problems and data structures ways of\n",
        "101": "keeping our information organized so it\n",
        "103": "could be rapidly retrieved and modified\n",
        "105": "and so forth so that'll be an important\n",
        "107": "goal but arguably more important is\n",
        "109": "learning to be yourself a more efficient\n",
        "111": "programmer to spend less time to build\n",
        "114": "the same complexity of program and so to\n",
        "117": "do that we're going to along the way\n",
        "118": "we're gonna learn to design build test\n",
        "121": "and debug large programs over a thousand\n",
        "124": "lines or so and what that's going to do\n",
        "126": "is give you an opportunity to approach a\n",
        "128": "specific problem and really beat your\n",
        "130": "head against the wall a little and think\n",
        "132": "about all the different trade-offs that\n",
        "133": "might go into\n",
        "135": "you might design a program so previous\n",
        "137": "classes you've probably mostly been\n",
        "139": "given a set of functions you fill in\n",
        "141": "that will not be the case for much of\n",
        "144": "along the way we'll also learn to use\n",
        "145": "the set of programming tools we're gonna\n",
        "147": "use a bunch of real world tools\n",
        "149": "principally get IntelliJ and JUnit and\n",
        "152": "we're gonna learn Java as we go now Java\n",
        "154": "is not the goal of the class or this is\n",
        "156": "not a Java programming class we just\n",
        "157": "needed that language which is popular\n",
        "161": "and is used for large-scale programs and\n",
        "163": "it is both of those things but it could\n",
        "165": "have been other languages and we're not\n",
        "167": "really gonna focus on Java so much so\n",
        "168": "we'll have to at the beginning just to\n",
        "170": "get up to speed so this class assumes\n",
        "172": "you already have a fairly solid\n",
        "174": "programming foundation that you know\n",
        "176": "what object-oriented programming is and\n",
        "178": "you've done a class definition that you\n",
        "179": "know recursion that you've dealt with\n",
        "181": "lists and trees and we're gonna build\n",
        "185": "from there so why is it that if we're\n",
        "186": "going to try and learn to be independent\n",
        "188": "programmers why specifically are we\n",
        "189": "focusing on data structures and\n",
        "191": "algorithms why isn't this a an android\n",
        "194": "app development class or a robotics\n",
        "196": "class well for me data structures and\n",
        "199": "algorithms are particularly interesting\n",
        "201": "and very general class of problems that\n",
        "204": "have all kinds of neat stuff to them so\n",
        "206": "one of them of course is that our daily\n",
        "209": "life is only possible because of really\n",
        "210": "advanced algorithms and data structures\n",
        "213": "so of course if we open up let's see\n",
        "217": "I'll do another Google tab here we know\n",
        "220": "autocomplete and we know that it seems\n",
        "221": "to work well but it's it happens so\n",
        "222": "seamlessly we don't even think about it\n",
        "224": "so it might do something like how does\n",
        "227": "auto-complete work okay and you'll\n",
        "230": "notice that as I'm typing like what are\n",
        "234": "snails good for whatever is even trying\n",
        "237": "to do that is a good question let's see\n",
        "242": "what are they trying to do well you can\n",
        "245": "read later I bet there's some good stuff\n",
        "247": "in there anyway we can see that s for\n",
        "251": "typing that the Google search box here\n",
        "254": "it responds instantly like how is auto\n",
        "255": "yeah\n",
        "257": "or whatever it may be just happen\n",
        "258": "instantly as soon as I press a button\n",
        "262": "boom and that is enabled only because\n",
        "263": "they're using the right data structures\n",
        "265": "and algorithms and in fact it's very\n",
        "266": "tail into this course we'll talk about\n",
        "267": "this\n",
        "269": "cific data structures used to support\n",
        "271": "this another big thing is that\n",
        "273": "algorithms and data structures are\n",
        "276": "really driving what's changing in our\n",
        "277": "lives right now so here is a Google\n",
        "278": "lives right now so here is a Google\n",
        "280": "self-driving car prototype so Google\n",
        "282": "uber other companies are really pushing\n",
        "284": "hard on and Tesla of course are really\n",
        "286": "pushing hard on building cars that drive\n",
        "287": "themselves and that's gonna have just\n",
        "289": "insane implications like millions of\n",
        "291": "jobs in the United States are gonna\n",
        "293": "disappear in the near term it's\n",
        "294": "something like a million or so people a\n",
        "296": "year are killed in car accidents around\n",
        "298": "the world and so we're gonna see just\n",
        "300": "tremendous upheaval as these become\n",
        "302": "state-of-the-art and it's the algorithms\n",
        "303": "state-of-the-art and it's the algorithms\n",
        "304": "and the data structures used to store\n",
        "306": "the information that has this car is\n",
        "308": "learning they allow this to come to\n",
        "310": "happen to be able to make these big\n",
        "313": "changes in our lives another of course\n",
        "316": "as well data structures it turns out\n",
        "319": "having a good handle on them is perhaps\n",
        "321": "the most important thing for being a\n",
        "324": "good programmer so the creator of Linux\n",
        "326": "leaners Torvalds says the difference\n",
        "328": "between a bad program and a good one is\n",
        "330": "whether the programmer considers code or\n",
        "332": "data structures more important bad\n",
        "334": "programmers worry about the code you\n",
        "335": "know what does it look like what kind of\n",
        "338": "you know do you use tabs or spaces or\n",
        "339": "something like that good programmers\n",
        "341": "worry about data structures and their\n",
        "342": "relationships and you'll see this when\n",
        "344": "we get the project - if you make the\n",
        "346": "right choices about the data structures\n",
        "347": "you need to implement this database\n",
        "349": "system then you'll have a much easier\n",
        "352": "time but if you make bad calls about the\n",
        "354": "class hierarchy or about how you're\n",
        "356": "storing information your life will be\n",
        "357": "much more difficult and we'll see that\n",
        "360": "again in great detail in a few weeks\n",
        "363": "another reason that this is a fun topic\n",
        "365": "is just for intellectual stimulation\n",
        "367": "there's a lot of neat little math\n",
        "368": "problems I don't you ever tried to draw\n",
        "370": "this house so the goal is put down your\n",
        "373": "pencil in a corner and then try and draw\n",
        "374": "the house of that picking up your pencil\n",
        "375": "so maybe I go they're there they're\n",
        "377": "there they're there\n",
        "379": "oh I missed a line I mean you couldn't\n",
        "380": "tell cuz you couldn't see me drawing but\n",
        "383": "try it out so turns out it is possible\n",
        "384": "to draw this house without picking up\n",
        "386": "your pencil however it is not possible\n",
        "388": "to cross these seven bridges in this\n",
        "391": "town without having to basically hop you\n",
        "392": "can't do the equivalent of drawing to\n",
        "395": "the house over here and so there it\n",
        "396": "turns out you might ask yourself why is\n",
        "397": "that just from a mathematical\n",
        "399": "perspective I'm just curious why can you\n",
        "400": "draw this house why\n",
        "401": "can you not draw this is there some\n",
        "403": "simple rule it turns out there is and\n",
        "404": "we'll talk a little bit about graph\n",
        "408": "theory later in this class and so in if\n",
        "410": "that's an aspect of computer science you\n",
        "411": "find interesting\n",
        "413": "that is theory this is a class you'll\n",
        "415": "get a little taste of theory as well\n",
        "417": "another big reason we're curious about\n",
        "420": "algorithm data structures is that if we\n",
        "422": "can develop so it's important in the\n",
        "424": "modern scientific world to be able to\n",
        "426": "program it's important to be able to\n",
        "429": "know what algorithms are out there or\n",
        "430": "what appropriate data structures you\n",
        "432": "need to write simulations because that's\n",
        "434": "just that's the direction science is\n",
        "435": "come on it's a one interesting example\n",
        "438": "here on the left this is a video of\n",
        "440": "starlings flying around their type of\n",
        "442": "bird and this is a simulation on the\n",
        "444": "right showing they're able to\n",
        "446": "recapitulate the essential behavior of\n",
        "448": "this flock and so you can do fun things\n",
        "449": "where you start sending out say there's\n",
        "452": "a hawk chasing them around here I guess\n",
        "454": "you can't quite see the hawk but because\n",
        "457": "of the fact that we write a simple model\n",
        "458": "that's able to demonstrate the same\n",
        "460": "behavior it implies that we knows\n",
        "463": "something important potentially about\n",
        "465": "how these birds have behaved this is\n",
        "469": "also used in other areas like say\n",
        "472": "protein folding and galaxy formation all\n",
        "474": "across the board simulation is really\n",
        "477": "important not just in terms of\n",
        "479": "understanding and proving to yourself do\n",
        "481": "you know how the universe works but you\n",
        "483": "can imagine also maybe this algorithm\n",
        "485": "the bird is using could actually be\n",
        "486": "useful for some real-world application\n",
        "488": "say I don't know swarming flying drones\n",
        "492": "or something another nice thing about\n",
        "493": "algorithms and data structures is that\n",
        "495": "with the really good knowledge of them\n",
        "498": "even if you're or say in for this only\n",
        "500": "for the aesthetics only for art now\n",
        "501": "there's some neat things you can do so\n",
        "503": "here's some realistic fluid simulations\n",
        "506": "using some clever fluid\n",
        "509": "[Applause]\n",
        "524": " \n",
        "526": "another particularly beautiful thing Oh\n",
        "529": "before I get there so for my students at\n",
        "531": "Berkeley I just want to throw out there\n",
        "533": "that if you like watching fluids flow\n",
        "536": "like those simulations nature's best\n",
        "538": "fluid flow show the ocean you may not\n",
        "540": "realize it living in the Bay Area that\n",
        "542": "waves get really really big so on\n",
        "546": "January 21st there will be some 35 foot\n",
        "547": "wave so maybe go to the beach and check\n",
        "549": "those out go back to computer science\n",
        "551": "another rather beautiful thing here is\n",
        "579": "the computers have told us that humans\n",
        "581": "are completely wrong that is we cannot\n",
        "582": "compete so it's interesting about the\n",
        "584": "way that this go computer played as it\n",
        "586": "played unlike a human it did weird stuff\n",
        "588": "and it still managed to win and so the\n",
        "591": "raining go champion said I would go as\n",
        "593": "far as to say not a single human has\n",
        "595": "touched the edge of the truth of go so\n",
        "597": "leave it to a go player to say something\n",
        "599": "really poignant beautiful you know\n",
        "601": "poetry just from your profession good\n",
        "602": "job\n",
        "605": "no not everybody's impressed there was a\n",
        "607": "guy in the internet comments section who\n",
        "609": "said the rules of go are quite simple\n",
        "611": "and the rule and the resources that you\n",
        "612": "have out there for learning it are\n",
        "615": "gigantic and no one was surprised except\n",
        "618": "for poorly educated losers so I don't\n",
        "619": "know internet comment sections they\n",
        "620": "disagree but I still think it's\n",
        "624": "beautiful even if this guy doesn't and\n",
        "626": "lastly another big reason that we might\n",
        "628": "study algorithms from data structures is\n",
        "629": "well it sure seems like a popular thing\n",
        "631": "for people my age to be doing so at\n",
        "633": "Berkeley most of the students here you\n",
        "635": "know we're largely 18 to 21 not\n",
        "637": "everybody it seems like everybody else\n",
        "638": "you know people look like us we're all\n",
        "640": "doing this thing it must be important\n",
        "644": "this year the 61 B total enrollment for\n",
        "646": "data structures it's gonna be were\n",
        "649": "estimating just shy of 2,000 students we\n",
        "651": "currently have 1,350 enrolled I\n",
        "654": "anticipate what 1250 a week for so this\n",
        "656": "is the entire history of 61 P\n",
        "658": "enrollment and you could see here this\n",
        "660": "is the dot-com boom and then the crash\n",
        "661": "that followed\n",
        "663": "now even the dot-com boom which was a\n",
        "664": "big deal at the time\n",
        "666": "we're completely annihilating the\n",
        "668": "enrollments of those at that time period\n",
        "670": "and in fact if we think of the post boom\n",
        "672": "period the number of students currently\n",
        "675": "enrolled this semester spring 2017 is\n",
        "676": "1,250 which is the equivalent of\n",
        "679": "everybody in the years 2004 through 2007\n",
        "682": "combined so that's pretty amazing so\n",
        "683": "there's something in the water you guys\n",
        "685": "are going nuts for computer science and\n",
        "688": "data structures in particular so hey\n",
        "691": "social proof so that's a story that's\n",
        "692": "why I like algorithms and data\n",
        "693": "structures and I think this class I hope\n",
        "695": "you'll find is just a really good\n",
        "697": "introduction to being independent being\n",
        "699": "able to build all those beautiful things\n",
        "701": "from self-driving cars up to go flying\n",
        "702": "robots\n",
        "704": "there's plenty more you'll need to learn\n",
        "705": "especially if you're doing AI you'll\n",
        "706": "have to learn lots and lots about\n",
        "708": "state-of-the-art algorithms for those\n",
        "711": "specific areas later but this here is\n",
        "715": "the foundation of Independence so I\n",
        "718": "would ask you who you were but you're\n",
        "720": "watching a video so you can maybe talk\n",
        "721": "to the screen to yourself and explain\n",
        "722": "who you are and pretend the name list\n",
        "723": "who you are and pretend the name list\n",
        "729": "I'll pretend like I'm listening okay\n",
        "731": "good good to meet you\n",
        "733": "sorry I couldn't actually meet you and\n",
        "734": "be super cool I really like to be able\n",
        "736": "to divide my consciousness and the like\n",
        "737": "I don't know thousands or hundreds of\n",
        "738": "thousands of copies and talk to\n",
        "741": "everybody sadly can't do it so a little\n",
        "743": "bit about us so this semester the spring\n",
        "746": "17 staff if you are an enrolled student\n",
        "748": "there's me I'm Josh odd by the way I'm a\n",
        "750": "teaching professor here at Berkeley I\n",
        "752": "have an office in the building you can\n",
        "756": "email me and this is my fourth time\n",
        "758": "teaching this class second time doing\n",
        "761": "this version of the class and here all\n",
        "764": "the teaching assistants in addition to\n",
        "765": "all these teaching assistants so I won't\n",
        "767": "name a name because there's so many we\n",
        "769": "also have a bunch of tutors who will be\n",
        "770": "there to help people out who need a\n",
        "771": "little extra help we'll talk more about\n",
        "774": "that later in the semester and then we\n",
        "776": "have a bunch of lab assistants aka\n",
        "779": "academic interns which number around 140\n",
        "783": "who are volunteers so thank you none of\n",
        "785": "them are here so can't me\n",
        "787": "because I'm just at my house but that's\n",
        "788": "that\n",
        "790": "now I mentioned by the way in case\n",
        "792": "you're curious you can look at I did\n",
        "794": "since there's so many of them I was\n",
        "796": "curious what is the letter distribution\n",
        "798": "of the names here versus English I don't\n",
        "800": "talk about it here in this video but hey\n",
        "805": "kind of fun alright for me it was so\n",
        "807": "that said we're gonna talk soon about\n",
        "808": "that said we're gonna talk soon about\n",
        "813": "the way that you learn and what in the\n",
        "814": "course you can use to gain additional\n",
        "816": "knowledge and I like this little example\n",
        "821": "because I as somebody who grew up when I\n",
        "823": "was a kid I hadn't adults always telling\n",
        "825": "me like you're super good at math like\n",
        "828": "or whatever and I didn't really\n",
        "830": "understand that practice makes you get\n",
        "832": "good at things and in fact the thing\n",
        "834": "that taught me that this is embarrassing\n",
        "837": "to admit is dance dance revolution so\n",
        "851": " \n",
        "856": " \n",
        "860": " \n",
        "865": " \n",
        "870": "that was actually really you know what\n",
        "873": "[Music]\n",
        "877": "so right now you may be but ultimately I\n",
        "878": "want to get in here and I think that\n",
        "879": "after you finish all computer science\n",
        "880": "after you finish all computer science\n",
        "882": "program even if you're somebody who did\n",
        "884": "this point it's not it could be really\n",
        "886": "intimidating to be in a room full of\n",
        "888": "people who have been programming you\n",
        "890": "know for a decade you know you're 18 and\n",
        "891": "they've been doing it since they're\n",
        "894": "eight to feel like could I ever possibly\n",
        "897": "compete but really you can now it is of\n",
        "898": "course true of the people with more\n",
        "900": "background and people who have learned\n",
        "902": "to think in a certain way they're gonna\n",
        "904": "learn more quickly than you so but the\n",
        "907": "important point here is that I really\n",
        "909": "think that the ceiling that if you had\n",
        "911": "you know a year to really spend on this\n",
        "912": "class and especially if you're somebody\n",
        "913": "out there on the internet if you're in\n",
        "915": "the middle of nowhere I mean great glad\n",
        "916": "you're here I think you can really get\n",
        "919": "super good at this even if you feel like\n",
        "923": "you're you're somebody who hasn't been a\n",
        "924": "natural at this\n",
        "926": "right being a natural whatever that may\n",
        "928": "mean sure it helps you learn faster but\n",
        "936": "the point is that with practice so how\n",
        "938": "do you learn well you'll learn a little\n",
        "940": "bit watching those videos now especially\n",
        "942": "if you're somebody who's just watching\n",
        "944": "the videos online watching me talk as\n",
        "946": "maybe vaguely entertaining and you'll\n",
        "947": "get an introduction to the new material\n",
        "949": "but this is only a small minority of the\n",
        "951": "manner in which learning occurs same\n",
        "952": "deal with reading like just sitting\n",
        "954": "there and reading the online text you'll\n",
        "956": "get stuff out of it but really where\n",
        "958": "stuff happens is when you yourself are\n",
        "960": "actually programming learning is seeing\n",
        "962": "a problem figuring out a way to approach\n",
        "965": "it hitting a brick wall often and then\n",
        "967": "finding away over that brick wall so in\n",
        "969": "this class doing the labs the homeworks\n",
        "971": "and experimenting alone will give you a\n",
        "974": "chance to learn all the basics a Java\n",
        "975": "syntax learned a little bit about\n",
        "977": "algorithms and data structures and and\n",
        "979": "get a chance to learn the tools for this\n",
        "981": "class if you are a Berkeley student you\n",
        "983": "will also have discussion section where\n",
        "984": "you'll get a chance to practice with the\n",
        "986": "concepts and argue about approaches to\n",
        "988": "problems and then one of these big\n",
        "990": "projects which are going to be similar\n",
        "992": "to the labs and homeworks they're gonna\n",
        "993": "be programming oriented but we're gonna\n",
        "994": "have a design component and we're\n",
        "996": "typically going to have these big\n",
        "998": "systems building challenges these will\n",
        "1000": "also involve writing of tests whereas\n",
        "1001": "for labs and homeworks will typically\n",
        "1003": "give you all of those this is where\n",
        "1006": "you're gonna learn lots of stuff\n",
        "1008": "so we'll talk about course logistics in\n",
        "1009": "this next little segment but I just want\n",
        "1014": "to say this class it is really truly\n",
        "1017": "about making you into hopefully a great\n",
        "1020": "programmer and that I believe that even\n",
        "1024": "if you're somebody who is maybe say I\n",
        "1025": "don't know even a C student in your\n",
        "1027": "previous programming course if you maybe\n",
        "1029": "not this semester maybe you don't have\n",
        "1031": "enough time to catch up but really if\n",
        "1034": "you are sentient and you enjoy this and\n",
        "1040": "you are even able to get the you were\n",
        "1041": "even able to digest the basics of\n",
        "1043": "programming you can actually get really\n",
        "1044": "good at this but it may take a lot of\n",
        "1048": "practice okay so that said we'll move on\n",
        "1052": "to course logistics next and see in that\n"
    },
    "Title=[Intro, Video 2] Course Policies and Logistics (SPRING 2017 - OUTDATED)_Id=5cslNPJJTJ4": {
        "0": " \n",
        "2": "let's talk course logistics this isn't a\n",
        "4": "fun topic but for those of you who are\n",
        "6": "taking this class for credit this stuff\n",
        "7": "probably important to you everybody else\n",
        "9": "moving in skipper I'll note that this\n",
        "11": "slide is green so if you're someone\n",
        "12": "who's watching the webcasts because you\n",
        "15": "prefer to see the live version of this\n",
        "17": "these will always be green so you can\n",
        "18": "easily find it if you're skimming\n",
        "21": "through a 50 minute video so force\n",
        "23": "logistics first of all we have a bunch\n",
        "24": "of different places to give information\n",
        "26": "so we have this course website here\n",
        "29": "which is data structures very clever\n",
        "32": "we actually in deepen the tradition we\n",
        "34": "would have done say a 61b org but\n",
        "36": "somebody sneaked it and I guess it's\n",
        "38": "available for sale but I will never\n",
        "41": "reward domain snipers so that's gonna be\n",
        "43": "the main place where everything is and I\n",
        "45": "encourage you to go there to find\n",
        "47": "everything we will also have lectures\n",
        "49": "which I'm doing here there's also\n",
        "52": "webcasts for the live lecture each\n",
        "54": "semester so that you can see what really\n",
        "56": "happened in the room we have a Piazza\n",
        "58": "discussion forum we have office hours\n",
        "61": "that are in 109 Morgan and then we also\n",
        "64": "of course have our various places where\n",
        "66": "we get together we have lab and\n",
        "68": "discussion and in addition to these\n",
        "70": "scheduled times for lab and discussion\n",
        "71": "we also have guerilla sections which\n",
        "72": "we also have guerilla sections which\n",
        "73": "will be special discussion sections\n",
        "76": "we'll talk about later which are mastery\n",
        "77": "learning based or your working groups\n",
        "79": "until everybody gets the problem we'll\n",
        "81": "have group tutoring sections for those\n",
        "82": "of you who want a little extra help five\n",
        "85": "on one or even one on one and then\n",
        "87": "there's also this little textbook which\n",
        "89": "I don't have a name for it yet so it's\n",
        "91": "just called hug 61 B for now and that is\n",
        "93": "linked just on the main page\n",
        "95": "these readings here are part of that\n",
        "97": "little text and the goal with that was\n",
        "99": "just to build a free online resource\n",
        "102": "that was really tailored to 61 B if you\n",
        "103": "don't really like it there's alternate\n",
        "105": "readings on the spring 16 version of the\n",
        "107": "course that you can check out instead so\n",
        "108": "it's all the official places or you can\n",
        "110": "get information for this course and then\n",
        "111": "of course are a bunch of unofficial\n",
        "113": "channels I welcome you as you're working\n",
        "114": "through the class to go googling for\n",
        "116": "things but of course please do not\n",
        "117": "Google solutions that the homeworks\n",
        "120": "because you will not learn things by\n",
        "123": "looking at them it won't work out so if\n",
        "125": "you are somebody enrolled in the class\n",
        "127": "and you're on the waitlist if you do\n",
        "129": "project zero I'll do whatever I can to\n",
        "130": "get you in by week four I don't have a\n",
        "131": "lot of power to get people into the\n",
        "133": "class but I can at least tell people to\n",
        "136": "I don't try and do something this week\n",
        "137": "or at least in the beginning of the\n",
        "138": "or at least in the beginning of the\n",
        "139": "class we're gonna have the morning\n",
        "141": "sections are gonna be really popular and\n",
        "144": "the evening ones less so so if you don't\n",
        "147": "have a particular discussion or lab you\n",
        "150": "go to any section or lab but if you are\n",
        "152": "already enrolled in a section I ask that\n",
        "153": "you try and go to the one that you're\n",
        "155": "officially registered for that way we\n",
        "156": "don't get super overcrowded that's\n",
        "159": "especially important in the lab so maybe\n",
        "161": "hover outside the room for the first you\n",
        "163": "know two minutes before sight for the\n",
        "164": "first two minutes before the class\n",
        "165": "starts and they have this room go on in\n",
        "167": "and then after a tenant settles you\n",
        "170": "could do whatever you want but for now\n",
        "173": "wall thinks are crowded make sure to be\n",
        "175": "courteous to your fellow student if you\n",
        "177": "do get to a section and it's super full\n",
        "179": "a priority will go to those who are\n",
        "181": "officially registered if you have any\n",
        "182": "administrative issues we ask that you\n",
        "184": "post it to the discussion forums or if\n",
        "186": "you'd like you can send an email to CS\n",
        "188": "61 be at Berkeley what I ask is you\n",
        "190": "don't email me directly with logistical\n",
        "192": "issues because I won't be as helpful of\n",
        "193": "somebody else because I'm probably just\n",
        "195": "gonna send you to someone else anyway\n",
        "197": "and the other thing is that with over a\n",
        "198": "thousand students if you actually do the\n",
        "200": "math if I were to say hey everybody come\n",
        "201": "meet me for just one minute\n",
        "203": "that would take twenty two hours to\n",
        "205": "complete that process so logistical\n",
        "207": "emails you know even if they're taking\n",
        "209": "only a small amount of time it adds up\n",
        "212": "now as far as the course goes perhaps\n",
        "214": "more interesting to you this course is\n",
        "218": "broken into three parts this is the new\n",
        "219": "vision for 61b that I tried out last\n",
        "221": "spring so the first part is an\n",
        "222": "spring so the first part is an\n",
        "223": "introduction to javo that's oriented\n",
        "225": "around data structures what we're gonna\n",
        "227": "do is learn Java in the context of\n",
        "229": "building lists so I've used lists in\n",
        "232": "some language like Python before in this\n",
        "234": "class we're gonna kick off learning Java\n",
        "236": "by thinking about different ways to\n",
        "237": "build lists and then it'll give us the\n",
        "240": "syntax we need to move forward so what\n",
        "241": "we're gonna have during this time we\n",
        "243": "have an optional homework 0 that's\n",
        "245": "already out that I encourage you to do\n",
        "247": "if you haven't yeah we will have three\n",
        "249": "labs during this period that are gonna\n",
        "250": "introduce you to all the real world\n",
        "252": "tools we're gonna be using throughout\n",
        "253": "the semester and I'll warn you in\n",
        "255": "advance it's gonna be annoying things\n",
        "256": "are not gonna work at first you're gonna\n",
        "257": "have to beat your head against the wall\n",
        "259": "but I think that's a really important\n",
        "262": "thing for you to learn how to do so I've\n",
        "263": "resisted the urge to try and just write\n",
        "265": "the master installer that just installs\n",
        "267": "everything because they think it is\n",
        "269": "importantly you know how to deal with\n",
        "272": "the messiness of say the command line\n",
        "274": "and installing software and getting\n",
        "275": "things working because you'll be doing\n",
        "277": "it forever that will also have two\n",
        "279": "projects project zero and one and those\n",
        "282": "are going to be our programming homework\n",
        "283": "during that period a couple of little\n",
        "286": "projects phase 2 will be the advanced\n",
        "287": "programming part of the class and this\n",
        "289": "is the part where you're gonna really\n",
        "292": "get a chance to design something you're\n",
        "294": "gonna work in a team of people a pair of\n",
        "297": "people kind of will talk about how it's\n",
        "298": "a little more complicated much later but\n",
        "299": "basically we'll work with a group of\n",
        "301": "people to come up with the design to\n",
        "302": "solve the problem\n",
        "304": "so unlike programming classes you might\n",
        "307": "have had before where it's well yeah\n",
        "308": "fill in this function that does this\n",
        "309": "thing here you're gonna have to design\n",
        "310": "thing here you're gonna have to design\n",
        "311": "the architecture and I think you'll find\n",
        "313": "it really challenging and this is the\n",
        "315": "part of the class where it will really\n",
        "319": "for those of you who are average - not\n",
        "321": "sorry average to below average\n",
        "323": "programmers this part will be really\n",
        "325": "hard I'm just warning you in advance but\n",
        "326": "it's good for you I'm not doing it to\n",
        "328": "like weed you out or scare you away I'm\n",
        "329": "doing it because I want to build you\n",
        "331": "into being really independent\n",
        "333": "programmers to set the bar high enough\n",
        "334": "and make you realize you can do\n",
        "335": "something you didn't know you knew how\n",
        "338": "to do so that big project will be due\n",
        "340": "March 6th and there'll be some labs to\n",
        "341": "help support that project so we'll do a\n",
        "344": "little peer design reviews and we'll\n",
        "346": "talk more about that later mmm ok\n",
        "349": "premier is installing good in the final\n",
        "350": "phase of the classes are standard data\n",
        "352": "structures and algorithms class oh I\n",
        "354": "don't want to do this right now from\n",
        "356": "here we'll get to it later so weeks\n",
        "359": "eight through 14 we're gonna learn about\n",
        "361": "how what a hash table is what binary\n",
        "363": "search trees are all this classic stuff\n",
        "365": "that goes in a data structures class and\n",
        "367": "during that time each of the labs is\n",
        "369": "going to be implement some data\n",
        "371": "structure algorithm in each of those\n",
        "373": "labs whenever you go in person the last\n",
        "375": "say 10 to 20 minutes depending on how\n",
        "378": "things work out the TA will lead you\n",
        "379": "through a good implementation of that\n",
        "381": "thing so it'll be a chance to reflect on\n",
        "383": "what you've just done and the lab should\n",
        "385": "be self-contained so it shouldn't feel\n",
        "386": "like an extra homework it's just a\n",
        "387": "chance to really think about a\n",
        "388": "chance to really think about a\n",
        "390": "particular implementation will also have\n",
        "392": "homeworks during that period and each\n",
        "393": "one of those homeworks is going to be to\n",
        "395": "apply a data structure or algorithm so\n",
        "397": "rather than implementing a hash table\n",
        "399": "you'll use them for something and I hope\n",
        "401": "you'll find it interesting and so\n",
        "403": "there'll be two of these two of these\n",
        "404": "homeworks they're gonna be released\n",
        "406": "after classes are over and those do you\n",
        "409": "can think of as extra practice or make\n",
        "411": "ups for homeworks you missed earlier\n",
        "412": "then I'll talk more about the drop\n",
        "414": "policies and grading in a moment and\n",
        "415": "during that time there'll be one\n",
        "417": "medium-sized data structure and\n",
        "418": "algorithms project where you won't have\n",
        "420": "to do all the architecture but you will\n",
        "422": "have to select the data structures and\n",
        "423": "think carefully about how to organize\n",
        "424": "your code and you'll have to implement\n",
        "426": "an algorithm that will allow you to\n",
        "429": "traverse a graph you'll learn what that\n",
        "431": "means later and so if you're curious you\n",
        "433": "can look at the calendar to see how\n",
        "435": "these three phases work and look at the\n",
        "436": "whole schedule but I won't talk about it\n",
        "439": "more right now so as far as what you\n",
        "441": "have to do each week there are labs and\n",
        "444": "these labs are required it's okay to\n",
        "447": "work on the labs ahead of time and while\n",
        "449": "the work in the labs is required for the\n",
        "451": "course being in person is not required\n",
        "453": "so if you want you could do the labs\n",
        "455": "from home and that's fine but especially\n",
        "457": "if you're somebody who is does not feel\n",
        "459": "like a strong programmer I think you'll\n",
        "461": "find them hopefully really helpful\n",
        "462": "especially at the beginning when you're\n",
        "464": "trying to get things set up there will\n",
        "465": "be some special project labs where\n",
        "467": "attendance is required those will be a\n",
        "469": "little later and I'll talk about those\n",
        "471": "in a different lecture but that's be\n",
        "473": "aware you can do things from home labs\n",
        "475": "are always gonna be due Friday at 5:00\n",
        "479": "so that way you know it's done and you\n",
        "482": "can your weekend begin I can begin and\n",
        "483": "then there's also some labs by the way\n",
        "484": "that are freebies there'll be one lab in\n",
        "486": "particular which is just go work on\n",
        "487": "project two and you'll get free points\n",
        "490": "for that one you don't have to show up\n",
        "493": "and then we're gonna have I guess sorry\n",
        "495": "and summarizing for the labs are all\n",
        "497": "that we have 14 of those they're worth\n",
        "498": "four points each and that's gonna come\n",
        "501": "to forty eight points the reason is that\n",
        "503": "it doesn't come to more points than that\n",
        "504": "is because we're gonna drop your lowest\n",
        "505": "two that's intended to cover any life\n",
        "508": "difficulties so because we have so many\n",
        "510": "students these drops are supposed to\n",
        "512": "handle your life emergencies so the\n",
        "515": "thing where you're about to submit your\n",
        "516": "code but then your computer crashed or\n",
        "518": "you know your internet went out or\n",
        "520": "whatever it may be sorry I know it's a\n",
        "521": "bummer you did this work and you're not\n",
        "523": "getting credit for it but we're gonna\n",
        "525": "drop two labs so that those kind of\n",
        "527": "emergencies gets moved out now if you\n",
        "529": "have some kind of really big life crisis\n",
        "530": "that's bigger than two weeks of course\n",
        "531": "we'll work with you and\n",
        "534": "sure things are better but for the run\n",
        "535": "of the mill you know\n",
        "537": "dog-ate-my-homework situations that's\n",
        "538": "what the drops are for they're not\n",
        "540": "intended to be well I didn't want to do\n",
        "543": "some of the work okay discussions those\n",
        "545": "will also be happening once a week and\n",
        "547": "those will be an hour each attendance\n",
        "549": "for these is not required you could earn\n",
        "551": "a gold point for every discussion you go\n",
        "552": "to and I'll explain what those are in a\n",
        "554": "moment so attendance is not taken the\n",
        "556": "first two weeks you can't your gold\n",
        "557": "points then but after that you'll be\n",
        "558": "points then but after that you'll be\n",
        "559": "able to accumulate these gold points and\n",
        "561": "basically what they are is they're extra\n",
        "563": "credit but it's extra credit that the\n",
        "566": "worst you do on the exams the more of\n",
        "568": "the gold points count up to a maximum of\n",
        "570": "double so if you go to ten discussions\n",
        "571": "and you get zero on the exams you will\n",
        "573": "get 20 points added to your final score\n",
        "576": "now it is not an advantageous strategy\n",
        "578": "to intentionally get zeros on the exams\n",
        "580": "that will not work out in your favor as\n",
        "581": "you'll see them the point totals later\n",
        "583": "but it's basically just another little\n",
        "585": "way so that if you're somebody is really\n",
        "588": "struggling you can demonstrate your\n",
        "590": "participation in the course and let us\n",
        "591": "know that you're really trying you're\n",
        "593": "thinking about things and that will give\n",
        "596": "us some measure of the fact that you're\n",
        "597": "doing well in the course even if you\n",
        "599": "maybe have trouble on some exam problem\n",
        "602": "you get stuck up we have homeworks so\n",
        "605": "there's gonna be seven total for credit\n",
        "606": "homeworks in the class homeworks one\n",
        "608": "through seven and there's also this\n",
        "610": "optional homework zero already available\n",
        "613": "homeworks 2 through 7 are all about\n",
        "615": "using data structures and algorithms to\n",
        "617": "solve some problem and homework one is\n",
        "618": "basically to be as we transition into\n",
        "620": "advanced programming it's a little mini\n",
        "622": "project or so many assignment you do\n",
        "624": "before you kick off that big design\n",
        "626": "project I alluded to and so these due\n",
        "627": "dates are gonna vary they're not gonna\n",
        "629": "be doing a particular day make sure to\n",
        "633": "check the calendar and so 7 of these 7\n",
        "635": "homeworks we're gonna drop to and since\n",
        "636": "there were 16 points that comes to 80\n",
        "638": "points total and again these are\n",
        "640": "intended to cover life difficulties so\n",
        "642": "if you have problems the drops are\n",
        "644": "supposed to handle this and as I\n",
        "646": "mentioned earlier homework 6 and 7 are\n",
        "648": "actually gonna be released during the\n",
        "650": "recitation week at the end of the\n",
        "651": "recitation week at the end of the\n",
        "653": "semester so again you can think of it as\n",
        "654": "practice if you want and if you missed\n",
        "656": "an earlier homework you can then do\n",
        "657": "those homeworks to make up for something\n",
        "659": "you missed earlier and then lastly we\n",
        "662": "have our projects and so the projects in\n",
        "665": "61b are fairly famous in terms of\n",
        "667": "really challenging you know there's\n",
        "668": "there's some infamy surrounding past\n",
        "672": "projects like get lit and editor and in\n",
        "673": "this semester I think there will be no\n",
        "675": "exception though I'm hoping this\n",
        "678": "semester that for for programmers who\n",
        "679": "don't have a lot of experience I'm\n",
        "681": "really hoping that not annihilate you\n",
        "684": "and make your life miserable and will of\n",
        "685": "course keep in contact because this\n",
        "687": "class was always a delicate balancing\n",
        "688": "act because I want to make it really\n",
        "690": "hard but I don't want to make it\n",
        "692": "okay so we'll be working together to\n",
        "694": "make sure it works well so projects\n",
        "696": "two of them are team projects so project\n",
        "698": "zero which will be released on the first\n",
        "701": "Friday of class that's gonna be 25\n",
        "702": "points then we'll have a solo project\n",
        "704": "that's 40 points that's gonna be a\n",
        "706": "two-week project then there's gonna be\n",
        "708": "this team project will be a three week\n",
        "709": "design project and then finally come\n",
        "712": "around to the solo and final project\n",
        "713": "which is seventy-five points so these\n",
        "716": "are small medium and large and on the\n",
        "718": "solo projects all of your work needs to\n",
        "721": "be around I'll be elaborating a bit more\n",
        "723": "in a future lecture about what exactly\n",
        "725": "your own work means but if you'd like to\n",
        "726": "read it now you can check out the\n",
        "728": "collaboration policy on the website and\n",
        "730": "it's always okay to talk to other\n",
        "731": "students in the class and help them to\n",
        "733": "bug and even bounce ideas back and forth\n",
        "735": "but your code really needs to be your\n",
        "738": "work and then I'll mention also that\n",
        "739": "these last two projects two and three\n",
        "741": "they have extra credit opportunities if\n",
        "745": "you turn in the the code early enough\n",
        "747": "that you pass the early submission tests\n",
        "749": "so basically it'll be some early tests\n",
        "750": "and if you get those right you'll get\n",
        "752": "some bonus points you'll get some bonus\n",
        "755": "points and then anbu those projects\n",
        "757": "there also be some stretch goals like\n",
        "758": "extra hard things you can do there will\n",
        "761": "earn you some gold points and that's\n",
        "765": "story of projects and we have exams so\n",
        "767": "exams in this class are going to be hard\n",
        "770": "if you've taken 61a you know what that\n",
        "772": "is like and you'll get used to this in\n",
        "774": "the academic environment at Berkeley so\n",
        "776": "the exams are targeted around a median\n",
        "780": "of around 60% and so 60% the point there\n",
        "782": "is not to crush you and say you know\n",
        "783": "nothing right because if you came from\n",
        "785": "high school 60s the worst grade you can\n",
        "787": "imagine depending on where you're from\n",
        "788": "but if you're from the United States\n",
        "790": "sixty would be like I don't know I'm in\n",
        "792": "trouble like someone's gonna like my\n",
        "794": "parents are gonna kick in my door and\n",
        "795": "set fire to my bed\n",
        "796": "I don't know whatever whatever it is the\n",
        "799": "parents tend to do probably not arson in\n",
        "802": "their own homes though but anyway the\n",
        "804": "point of these 60-percent mediums is to\n",
        "805": "let you know what you don't know which\n",
        "807": "is a little different that's to say\n",
        "809": "there's still more to go you haven't\n",
        "811": "mastered everything and there are\n",
        "812": "students that even though the median is\n",
        "814": "around 60 that get up a 90s on these\n",
        "816": "exams and it's a way to make sure that\n",
        "818": "everybody really has a fair grade\n",
        "820": "because if the exams if 90 is what's\n",
        "822": "considered good then someone who does\n",
        "823": "great they have no way to demonstrate\n",
        "824": "that they have no way to get the\n",
        "826": "feedback to know like yes you're really\n",
        "827": "doing super well and that's something\n",
        "830": "that's important to us here to really\n",
        "831": "give you a sense of like what it is that\n",
        "833": "you can strive for now what's\n",
        "837": "interesting is that you know students\n",
        "838": "often as I've mentioned in the previous\n",
        "840": "video had this mental model that some\n",
        "842": "students are destined for greatness and\n",
        "844": "some are not and that is really not what\n",
        "845": "this exam process about it is not about\n",
        "847": "like separating out those who have like\n",
        "850": "the special magical piece in their brain\n",
        "852": "that makes them do well because my\n",
        "854": "suspicion based on education research is\n",
        "857": "that if you had the resources and the\n",
        "858": "time and you approach studying\n",
        "861": "appropriately probably most everybody in\n",
        "863": "this class could get into the 90s on the\n",
        "866": "exams so anyway it won't happen but it\n",
        "869": "could and it's only you know our failure\n",
        "870": "as instructors in some ways we don't get\n",
        "873": "you all there sorry but we do it with\n",
        "874": "Kim\n",
        "878": "so then with these exams we're gonna\n",
        "880": "have two midterms there in the evenings\n",
        "882": "and there'll be one final exam and then\n",
        "884": "they're closed notes close book that you\n",
        "886": "can bring one sheet of handwritten notes\n",
        "888": "per exam so for the first exam you get\n",
        "890": "one sheet second exam you get 2/3 you\n",
        "893": "get three and there is one extra neat\n",
        "896": "thing which is that we actually have a\n",
        "898": "policy especially given the fact that we\n",
        "899": "know that many of you are trying to get\n",
        "901": "into the major and your grades really\n",
        "904": "matter if your midterm grades are worse\n",
        "906": "than you do on your final statistically\n",
        "908": "we can replace your midterm score so we\n",
        "910": "have a specific mechanical process you\n",
        "912": "can read all about on the website but\n",
        "913": "basically if you have a bad early\n",
        "916": "midterm that doesn't do meu the final\n",
        "918": "can actually help you or recover using a\n",
        "921": "process we call shadow the exam dates so\n",
        "924": "this date is confirmed this is\n",
        "926": "Valentine's Day\n",
        "928": "from 7 to 9 p.m. sorry that's the only\n",
        "929": "date I was able to get that fit\n",
        "931": "I tried they almost gave me the day\n",
        "933": "before but then they said we'd have to\n",
        "935": "have 20 exam rooms and actually said\n",
        "938": "that's fine but then I don't know then\n",
        "939": "they decided they didn't want to go that\n",
        "942": "many rooms and so that'll be the exam\n",
        "943": "time\n",
        "945": "and the drop deadline will be February\n",
        "948": "17th for the course so this semester is\n",
        "950": "a very special semester for many of you\n",
        "953": "because it's you know how you doing this\n",
        "955": "class may make the difference between\n",
        "956": "really getting into computer science or\n",
        "959": "not and so as a result we want to make\n",
        "960": "sure you get feedback on this first exam\n",
        "962": "well actually have advising sessions in\n",
        "964": "between the midterm and this drop\n",
        "965": "deadline so you can make a decision\n",
        "967": "about whether or not to drop the class\n",
        "968": "because once that drop deadline passes\n",
        "970": "you're pretty much committed so we want\n",
        "972": "to make sure that if you're somebody\n",
        "974": "that's really passionate about computer\n",
        "976": "science put you've struggled we're gonna\n",
        "978": "make sure that we can let you know you\n",
        "979": "need a little more time to catch up\n",
        "981": "before you really give 61b a shot so\n",
        "983": "that's the point and that's why sorry we\n",
        "985": "have to ruin your Valentine's Day\n",
        "988": "midterm two will be March 22nd probably\n",
        "990": "but I haven't gotten this confirmed and\n",
        "991": "then the final will definitely be May\n",
        "993": "10th at 7 p.m. now if you're somebody\n",
        "996": "that has alternate exam times we will\n",
        "998": "accommodate you don't email me directly\n",
        "1000": "as I mentioned earlier will actually\n",
        "1002": "provide a forum because we know there's\n",
        "1004": "lots of people some people have exam\n",
        "1005": "conflicts with the finals because we\n",
        "1007": "have overlapping lecture times and just\n",
        "1009": "things happen with 1300 people you can't\n",
        "1010": "help but have alternate final or\n",
        "1012": "alternate exam times and so we will have\n",
        "1013": "a forum\n",
        "1015": "don't worry yet we'll send up the\n",
        "1019": "information last time so to summarize\n",
        "1021": "all of this these are all the things you\n",
        "1022": "do in this class you have labs and\n",
        "1024": "homeworks that will help you understand\n",
        "1026": "the basics of the class we have projects\n",
        "1028": "that I'm hoping will build you into\n",
        "1030": "independent programmers and they're\n",
        "1031": "worth a lot more points and then we have\n",
        "1033": "our midterms and finals to assess how\n",
        "1034": "well you understood the theoretical\n",
        "1038": "content of the class and so the reason\n",
        "1039": "by the way these homeworks and labs are\n",
        "1040": "not weighted very much is they're not\n",
        "1043": "intended to be to evaluate your\n",
        "1044": "competence they're there to help you\n",
        "1046": "build your skills projects actually\n",
        "1049": "serve sort of a dual role so that those\n",
        "1051": "of you so you can get credit for the\n",
        "1052": "project or the programming work you're\n",
        "1054": "doing and you can also learn at the same\n",
        "1057": "time so overall there are 768 points you\n",
        "1059": "can earn and there's also extra\n",
        "1061": "points on the website details how\n",
        "1062": "there's 16 total extra credit points\n",
        "1064": "that involves surveys and yadda-yadda\n",
        "1068": "and that's the score you get so at the\n",
        "1069": "end of the class the way we assign\n",
        "1071": "grades is we take your total score and\n",
        "1073": "then we compare it to a bunch of bends\n",
        "1076": "the course website shows every single\n",
        "1077": "pin but I've just given the highlights\n",
        "1080": "here so if you need to see - there's 368\n",
        "1083": "points you need to earn we don't really\n",
        "1085": "typically do anything more complicated\n",
        "1087": "than that you know way I don't you know\n",
        "1089": "occasionally when someone's like barely\n",
        "1091": "barely barely on the border and they've\n",
        "1093": "been just really truly wonderful on\n",
        "1095": "Piazza and I have the data to back it up\n",
        "1097": "and say like that person answered like\n",
        "1099": "200 student other students questions and\n",
        "1100": "you're right on the border then\n",
        "1103": "occasionally we'll bump people but it is\n",
        "1104": "exceedingly rare so you should think of\n",
        "1106": "these as pretty much what your score is\n",
        "1109": "gonna be I don't do the thing that some\n",
        "1110": "classes do where at the end of the\n",
        "1113": "semester I say oh well we don't have\n",
        "1115": "enough a so I'm gonna lower all the bins\n",
        "1117": "and C's and so forth I mean I will if it\n",
        "1119": "goes really badly like we really screw\n",
        "1121": "up writing exams or you guys perform\n",
        "1124": "differently than we expect but in the\n",
        "1126": "last two times I've taught this class I\n",
        "1128": "haven't had to change the bends so for\n",
        "1129": "the most part the bends\n",
        "1130": "I anticipate assuming that we do\n",
        "1131": "I anticipate assuming that we do\n",
        "1133": "everything right that this should be the\n",
        "1135": "way the grades come out I will\n",
        "1137": "definitely not make the grades any worse\n",
        "1139": "so if it turns out that we accidentally\n",
        "1140": "make the exams too easy then people\n",
        "1142": "accidentally get grades that are too\n",
        "1143": "high\n",
        "1145": "but you should consider yourself the\n",
        "1147": "goals you're striving for the ones on\n",
        "1151": "the site and plan accordingly so as far\n",
        "1153": "as the course goes we're gonna start off\n",
        "1155": "real quick we already have the homework\n",
        "1157": "zero that's out and you really should be\n",
        "1158": "working on it if you haven't done it yet\n",
        "1161": "I highly encourage you to do it before\n",
        "1162": "your lab if it's not too late and\n",
        "1164": "especially before you watch the second\n",
        "1166": "lecture because I'm not gonna go through\n",
        "1167": "and explain like this is a while loop\n",
        "1169": "this is an if statement and everything\n",
        "1171": "because you've done that before and this\n",
        "1172": "is your chance to actually see what it\n",
        "1173": "looks like on your own one of the things\n",
        "1175": "I really really want to encourage you to\n",
        "1177": "do in this class is experiment you're\n",
        "1180": "not gonna explode your computer you may\n",
        "1182": "as well try things out and because I\n",
        "1184": "want you to be able to go out there and\n",
        "1186": "do the things you want to do without\n",
        "1188": "to get help from someone okay we're\n",
        "1189": "still gonna give you help because this\n",
        "1192": "is a very hard class but it'll be\n",
        "1193": "important for you to really push\n",
        "1195": "yourself to the limits before you you\n",
        "1198": "come and ask for help not because we\n",
        "1199": "don't want to but because it's good for\n",
        "1202": "you then the other thing going on now is\n",
        "1205": "we have labs this first week so lab one\n",
        "1206": "is how to use the various tools which is\n",
        "1208": "the java compiler and the git version\n",
        "1210": "control software and you are going to\n",
        "1212": "hate get at first okay there's gonna\n",
        "1215": "tell you but you'll get used to it\n",
        "1216": "everybody else has\n",
        "1218": "maybe someday there'll be a slightly\n",
        "1220": "better abstraction we all agree on for\n",
        "1222": "how version control should work but till\n",
        "1224": "then get to the story and then we have\n",
        "1227": "lab 1b so you should do this actually\n",
        "1229": "before lab 1 despite the weird naming if\n",
        "1231": "you want to do work on your computer\n",
        "1233": "which is pretty much everybody so this\n",
        "1234": "lets you setup all the software in a\n",
        "1235": "computer but if you run in dating\n",
        "1238": "hitches we'll be there in lab one\n",
        "1239": "exception to what I was saying earlier\n",
        "1242": "about trying to explore on your own with\n",
        "1244": "lab 1 and lab 1p there's a lot of\n",
        "1246": "pitfalls so definitely ask us questions\n",
        "1248": "early when it comes to computer setup\n",
        "1249": "stuff because unlike programming\n",
        "1251": "languages which you do have experience\n",
        "1252": "with with computer setup there's all\n",
        "1253": "kinds of annoying things that gonna\n",
        "1255": "happen and I don't want you to waste\n",
        "1257": "like three hours of your day trying to\n",
        "1258": "get get install or something\n",
        "1261": "so definitely talk to us about computer\n",
        "1263": "setup issues ASAP project 0 will be\n",
        "1266": "released Friday that is the date of that\n",
        "1268": "second lecture and it will be due a week\n",
        "1270": "later ok so you get 7 days to do this\n",
        "1273": "project and it's gonna be a chance to\n",
        "1275": "use all of the basic features of Java to\n",
        "1277": "build a gravity simulator we can watch\n",
        "1280": "planets orbiting in space and in this\n",
        "1282": "project you're allowed to work in pairs\n",
        "1283": "I'll talk a little bit more on Friday\n",
        "1286": "about how those pairs work but the key\n",
        "1288": "rule here is you cannot work with\n",
        "1289": "somebody who's taken a java class if\n",
        "1291": "you've not so you need to need to both\n",
        "1294": "have taken a java class or both not have\n",
        "1296": "taken a java class and so we'll have a\n",
        "1298": "form other we'll send out so you can\n",
        "1300": "sign up and set up your partnerships so\n",
        "1301": "in the next video which I actually\n",
        "1302": "in the next video which I actually\n",
        "1306": "recorded let's see\n",
        "1309": "six months ago we'll do our first\n",
        "1310": "programming assignment so now let's step\n",
        "1313": "backwards in time and see younger me\n"
    },
    "Title=[Intro, Video 3A] Hello World (2017 version)_Id=Jfq90-4qsco": {
        "0": " \n",
        "2": "we'll get to writing our first Java\n",
        "3": "program in a moment but when you give a\n",
        "6": "couple of meta points first any code I\n",
        "8": "write in these videos is going to be on\n",
        "10": "the site to click these code links it'll\n",
        "12": "bring you to a github repository that\n",
        "14": "will have all the things I write so you\n",
        "15": "can experiment with it\n",
        "16": "so if you want to know oh what happens\n",
        "18": "if I tweak this little bit you can\n",
        "20": "download the code run it and experiment\n",
        "22": "to your heart's content in second meta\n",
        "25": "point if you already know Java you may\n",
        "27": "want to double speed the rest of any of\n",
        "29": "these videos or even skip them because\n",
        "32": "it's just the very basics of java now\n",
        "33": "you know this class is gonna move\n",
        "34": "through Java very fast because we're\n",
        "36": "assuming you already have a substantial\n",
        "37": "amount of programming experience now\n",
        "39": "we're just gonna get you acquainted with\n",
        "42": "most salient features the language and\n",
        "45": "now it is time to write our first\n",
        "48": "program in Java so I'm gonna show on the\n",
        "50": "Left how we can print out the phrase\n",
        "53": "hello world and Python and when I run\n",
        "55": "this code it prints out hello world now\n",
        "56": "you don't understand Python it's not a\n",
        "57": "you don't understand Python it's not a\n",
        "58": "prerequisite for this class but the\n",
        "60": "point here is simply to say that it's\n",
        "62": "pretty simple language right like if I\n",
        "63": "want to print hello world that's all\n",
        "68": "like umm by contrast in Java well let's\n",
        "71": "just try and run the code and Java it is\n",
        "73": "no surprise that in Java trying to copy\n",
        "75": "and paste Python code into the Java\n",
        "78": "environment is not gonna work well and\n",
        "80": "if then I get this error class interface\n",
        "81": "if then I get this error class interface\n",
        "84": "or enum expected so what this compiler\n",
        "85": "is trying to tell us is I'm expecting a\n",
        "88": "class that's an important feature of the\n",
        "90": "Java language that all code must live\n",
        "91": "inside of a class and that it doesn't\n",
        "93": "make sense to have code that's not part\n",
        "95": "of one so to declare a class in Java\n",
        "97": "what I'm gonna do is say public class\n",
        "99": "and in this case I'm gonna give a name\n",
        "101": "to the class HelloWorld and what I've\n",
        "102": "to the class HelloWorld and what I've\n",
        "104": "done now is I've created a class which\n",
        "106": "is the thing that Java requires me to do\n",
        "110": "I try running this and again main method\n",
        "112": "not found in class HelloWorld please\n",
        "115": "define the main method as that so this\n",
        "116": "right here is about the most useful\n",
        "118": "error message ever you know often error\n",
        "120": "messages and compilers are mysterious\n",
        "121": "this one's saying please copy and paste\n",
        "125": "this into your code and so I have now we\n",
        "126": "don't know what this means yet you know\n",
        "128": "as we're learning but it's something\n",
        "129": "that we're gonna have in\n",
        "130": "all of our programs for quite a while\n",
        "134": "and what this does for us is well I'll\n",
        "136": "try running it for you what you see is\n",
        "138": "if I try running this now the compiler\n",
        "140": "is happy this is a valid class it has\n",
        "142": "this thing whatever that is we run it\n",
        "145": "and now finally nothing happens so in\n",
        "146": "other words what I've written on the\n",
        "148": "right this is the Java equivalent of\n",
        "150": "this program and pythons can they do the\n",
        "153": "same thing right so if I want to\n",
        "154": "actually cause it to print something out\n",
        "157": "this is where the codes gonna go how do\n",
        "159": "I do that\n",
        "161": "so what I'm gonna do is copy and paste\n",
        "164": "but a job it's not just Brent its system\n",
        "168": "dot out dot println hello world I want\n",
        "171": "to run this finally I get hello world so\n",
        "173": "that's the most basic program now one\n",
        "177": "famous aspect of Java is that it's a\n",
        "179": "little verbose and so this might seem a\n",
        "180": "little intimidating but it shouldn't be\n",
        "182": "right we're just have to accept that\n",
        "184": "there's certain things that are in Java\n",
        "186": "program so we won't understand quite yet\n",
        "188": "well trying to numerate a little bit so\n",
        "190": "down here I'm writing a comment this is\n",
        "192": "just information I put it between these\n",
        "193": "symbols which means the compiler won't\n",
        "195": "try and run it so I'm gonna make some\n",
        "199": "notes all code and Java must be part of\n",
        "206": "a class we delimited beginning and end\n",
        "210": "of segments of code using that symbol in\n",
        "215": "that symbol that all statements and Java\n",
        "219": "must end in a semicolon ok so what I\n",
        "221": "mean by that is I put a semicolon here\n",
        "223": "you might not have noticed if I delete\n",
        "224": "this and try running it the compiler\n",
        "226": "will yell at me and say semicolon\n",
        "231": "expected and then lastly we had a code\n",
        "237": "inside of our code to run we need public\n",
        "239": "static void main string args something\n",
        "242": "like that yeah whatever that thing is so\n",
        "244": "that's our first program so we're gonna\n",
        "245": "building a little more complicated but\n",
        "246": "building a little more complicated but\n",
        "248": "just wanted to get that off our chest ok\n",
        "249": "just wanted to get that off our chest ok\n"
    },
    "Title=[Intro, Video 3C] Declaring Functions_Id=ToJrue6Kg9A": {
        "0": " \n",
        "2": "as our last program of the day let's\n",
        "5": "talk about defining functions in Java so\n",
        "7": "again I'm going to use Python it's the\n",
        "9": "I'm gonna say over here let's define a\n",
        "12": "function called larger and what it's\n",
        "14": "gonna do is take two variables x and y\n",
        "17": "and if X happens to be bigger than Y\n",
        "21": "we'll return X otherwise we'll return Y\n",
        "24": "that's it and then we might say let's\n",
        "26": "print the larger of negative 5 and 10\n",
        "29": "and hopefully we get yeah okay so what\n",
        "32": "should the Java version of this look\n",
        "40": "like the larger version are said that\n",
        "42": "Java version of it should look like well\n",
        "43": "we'll make a class called larger demo\n",
        "46": "and then if we wanted to find a function\n",
        "48": "we can't put it up here all right if we\n",
        "50": "tried to define a function up here right\n",
        "52": "like define larger or whatever that\n",
        "55": "would not work in Java all code must be\n",
        "57": "part of a class so I'm actually going to\n",
        "59": "do the function definition here now the\n",
        "61": "special phrase I'm going to use instead\n",
        "64": "of Def in Java I'm gonna say public\n",
        "66": "static and then I'm gonna make a\n",
        "70": "function name called larger on X Y then\n",
        "71": "I might say something like if it X is\n",
        "74": "bigger than Y return X otherwise return\n",
        "77": "a Y now if I try compiling this since\n",
        "79": "Java is a statically typed language it\n",
        "81": "yells at man it says you need to tell me\n",
        "83": "what X is what Y is and indeed what\n",
        "85": "larger is supposed to return so we need\n",
        "88": "to say X has type Y has a type let's say\n",
        "90": "they're integers and then larger itself\n",
        "92": "needs a type which we'll put right here\n",
        "96": "right before the name of the function ok\n",
        "99": "so now that I've written this this is a\n",
        "100": "proper program that contains the\n",
        "103": "function larger and then the call to the\n",
        "105": "function will put in the main method so\n",
        "106": "this is what actually gets run when we\n",
        "108": "run the program so if we want to\n",
        "111": "actually get larger to run we need to do\n",
        "113": "something like this so now we run this\n",
        "115": "and we get tap so these will be\n",
        "119": "equivalent programs Python and Java so\n",
        "120": "some notes here\n",
        "123": "to define a function in Java actually\n",
        "126": "we'll do one functions must be part of a\n",
        "131": "class as unlike Python or other\n",
        "133": "languages this is not part of any class\n",
        "135": "it's just a function that exists but\n",
        "138": "here functions must be declared as part\n",
        "139": "of a class in Java\n",
        "142": "okay and as a quick aside a function\n",
        "146": "that is part of a class is called a\n",
        "151": "method LM Java all functions are methods\n",
        "154": "ok this is just some programming\n",
        "155": "language terminology that's pretty\n",
        "158": "common to to define a function in Java\n",
        "163": "we use public static and we will see\n",
        "167": "alternate ways of defining functions\n",
        "169": "later so they're not always public\n",
        "171": "static this isn't quite the same thing\n",
        "173": "as def but for our purposes today\n",
        "176": "it basically is next we have all\n",
        "183": "parameters of a function must have a\n",
        "188": "declared type and the return value of\n",
        "191": "the function must have a declared type\n",
        "196": "okay so here are declared type is int so\n",
        "198": "for example we tried to say like string\n",
        "201": "x equals larger minus 5 10 we would get\n",
        "203": "a compiler error larger is a function\n",
        "208": "intz this is a string variable and maybe\n",
        "210": "I guess I'll mention just as an aside\n",
        "214": "functions and Java return only one value\n",
        "218": "okay so I can't say like int string and\n",
        "219": "then I have like two things come out of\n",
        "221": "large that's not allowed in Java you get\n",
        "225": "one thing so that's basically the idea\n",
        "227": "of how we or the idea behind how we\n",
        "229": "define functions in Java and that's it\n",
        "231": "for programming for today now I don't\n",
        "233": "expect that me having done all these\n",
        "234": "demos that you could just walk right out\n",
        "236": "there and write a bunch of programs you\n",
        "237": "could write functions because like\n",
        "239": "anything it takes practice so there are\n",
        "241": "labs that go with this set of videos\n",
        "243": "there's a book and I encourage you to\n",
        "245": "experiment with those in order to gain a\n",
        "248": "deeper understanding but we're not quite\n",
        "250": "done yet so I want to make some\n",
        "252": "observations about the code\n",
        "254": "you'll notice that throughout the code\n",
        "257": "ma there's not much here but we've named\n",
        "259": "things in a way that makes the code self\n",
        "261": "what is this class do well it's a demo\n",
        "263": "of the larger function what does this\n",
        "265": "function do what's called larger we\n",
        "267": "didn't call it f I mean we've got a call\n",
        "270": "to F that's the work just the same but\n",
        "272": "the code as written here is more\n",
        "274": "descriptive so one of the very important\n",
        "275": "things we're gonna teach you in this\n",
        "277": "class or hope to write because we're not\n",
        "279": "gonna manually examine your code so I\n",
        "281": "guess you could get away with it trick\n",
        "283": "us but what I think you should really\n",
        "285": "strive for even though we're not\n",
        "287": "watching right over your shoulder is the\n",
        "289": "right code that is going to be self\n",
        "291": "documenting that's readable above all\n",
        "292": "else\n",
        "293": "you should write code that if someone\n",
        "295": "looks at it they can understand it there\n",
        "296": "are plenty of other ways that you could\n",
        "299": "write this code oh it this way I think\n",
        "302": "is one of the very clearest okay one\n",
        "304": "other little thing I'll mention is that\n",
        "305": "well right here I've been showing you\n",
        "307": "comments obviously in your code you're\n",
        "308": "not gonna have a big paragraph at the\n",
        "309": "end explaining all the things we\n",
        "312": "observed writing it instead what you\n",
        "314": "want to do is make sure that where you\n",
        "316": "do use comments it's there so that\n",
        "318": "someone else can understand your code so\n",
        "319": "I'd say there's not really much to\n",
        "321": "comment in this program except that\n",
        "324": "there's a general rule of thumb that\n",
        "325": "when you write a function it's nice to\n",
        "327": "put a little comment at the top\n",
        "330": "describing what it does so in Python it\n",
        "332": "might look something like this returns\n",
        "335": "the larger of xny and these triple\n",
        "338": "quotes in Java the common convention is\n",
        "341": "to do slash star of stars an extra star\n",
        "343": "here for our block comet and write the\n",
        "346": "description that returns the larger of x\n",
        "348": "and y okay now in this case it's a\n",
        "351": "little silly but there are tools that\n",
        "353": "exist that will take source code find\n",
        "355": "all of the slash star star comments and\n",
        "359": "generate a nice HTML document and so for\n",
        "361": "that reason you're encouraged to always\n",
        "363": "use Java comments even whenever a\n",
        "364": "function is pretty self-explanatory\n",
        "368": "now the Java doc format sometimes people\n",
        "370": "also add little tags here so you can add\n",
        "371": "you know\n",
        "373": "there's various conventions but you can\n",
        "375": "write things like precondition and\n",
        "377": "explain thing you expect to be true\n",
        "379": "before the function or whatever there's\n",
        "381": "a whole different set of ideas about\n",
        "383": "what kind of tags you can have we're not\n",
        "386": "gonna tip acquire those in this class of\n",
        "389": "a do be aware they exist it is also\n",
        "391": "pretty common to write a Java Docs\n",
        "392": "screen string at the beginning something\n",
        "399": "like demonstrates creation of a larger\n",
        "403": "method or creation of a method in Java\n",
        "405": "something like that right I mean mmm\n",
        "407": "this is kind of weird meta thing since\n",
        "410": "it's actually just for instruction so\n",
        "412": "you might have Java Doc's at the top mmm\n",
        "415": "for this case I don't maybe not but yeah\n",
        "418": "so be aware this is a good practice but\n",
        "422": "the most important thing is not the the\n",
        "424": "minor details of the tags or slash\n",
        "425": "darkstar's it's really you should be\n",
        "427": "striving to make sure your code is\n",
        "429": "readable to other people and sometimes\n",
        "431": "you'll find that those other people are\n",
        "433": "actually you what do I mean by that well\n",
        "435": "you write a program in September of 2014\n",
        "438": "and then May of 2018 rolls around and\n",
        "440": "you need to fix it it is a great favor\n",
        "442": "to yourself in the future to write code\n"
    },
    "Title=[Intro, Video 3D] Overview_Id=h8jh6u1CalM": {
        "0": " \n",
        "2": "now that we've written our first program\n",
        "4": "we can reflect a little bit on what we\n",
        "7": "learned about the Java language so first\n",
        "9": "Java is an object-oriented language that\n",
        "10": "has very strict requirements about how\n",
        "13": "you write programs so first off any dot\n",
        "15": "Java file has to contain a class\n",
        "17": "declaration okay\n",
        "18": "well we'll see later that there are also\n",
        "20": "things like interfaces where that's not\n",
        "22": "a hundred percent true but it's mostly\n",
        "25": "true to say that every Java file has to\n",
        "28": "have a class declaration likewise any\n",
        "30": "piece of code you write say the larger\n",
        "32": "method we wrote has to be part of a\n",
        "34": "class the square root function in Java\n",
        "37": "it's part of a class called math and\n",
        "38": "we'll see later than things like global\n",
        "40": "constants those two are part of the\n",
        "43": "class the other thing we saw is that\n",
        "45": "when you want to run a Java program we\n",
        "47": "have to give a main method this is all\n",
        "48": "the code that's gonna run when we\n",
        "51": "actually execute the program and we\n",
        "52": "declare it using public static void main\n",
        "55": "string brackets args and we'll take\n",
        "56": "apart a little bit in the next lecture\n",
        "58": "and in lab 1 what all this means but for\n",
        "60": "now we're just treating it as a big old\n",
        "63": "blob of mystery syntax now the other\n",
        "65": "thing we observed is that Java is a\n",
        "67": "statically typed language so what that\n",
        "69": "means is that when you declare a\n",
        "71": "variable or a parameter for a function\n",
        "73": "or even the return type for a method you\n",
        "75": "have to say what type it is likewise\n",
        "78": "expressions have a type so if I say\n",
        "81": "string X equals 5 plus 10 that 5 plus 10\n",
        "84": "has type integer and therefore it can't\n",
        "86": "the result cannot be put in string tanks\n",
        "89": "ok and those types are permanent now the\n",
        "91": "most important thing about the static\n",
        "94": "typing system is that whenever you try\n",
        "95": "and run or when you try to compile your\n",
        "97": "programs the compiler checks and make\n",
        "99": "sure that all the types are in agreement\n",
        "102": "and that ensures that you avoid certain\n",
        "105": "types of errors like well if you avoid\n",
        "107": "specifically type errors so that's\n",
        "108": "unlike a language like Python where the\n",
        "110": "type checks are performed during\n",
        "113": "execution okay so let's reflect a little\n",
        "114": "bit on static typing what we might like\n",
        "116": "about it and what we might not and so\n",
        "118": "ordinarily what I would do if we lived\n",
        "121": "in an ideal universe you know I'd ask\n",
        "123": "you questions but since you're not in my\n",
        "126": "house I can't do that or at least I\n",
        "127": "assume you're not in my house\n",
        "131": "I guess we can check but pretty weird if\n",
        "141": "I drag you out here your own self still\n",
        "143": "kind of moving in I see this here travel\n",
        "145": "fox poster I got this many years ago\n",
        "147": "it's signed I really know these guys are\n",
        "151": "exactly but yeah yeah anyway where are\n",
        "155": "I asked that tight so the good parts of\n",
        "157": "static typing well one thing that's good\n",
        "160": "about it is it catches certain types of\n",
        "164": "errors making it easier on the\n",
        "167": "programmer to debug their code another\n",
        "171": "good thing is type errors and never\n",
        "175": "occur well I'll say almost cuz time can\n",
        "177": "we'll see you later why but type errors\n",
        "179": "can almost never occur on the user's\n",
        "183": "computer end users computer so for\n",
        "185": "example if you're writing an Android app\n",
        "187": "really there should be no danger of a\n",
        "189": "type error reaching their phone because\n",
        "191": "ideally you're not doing anything that's\n",
        "193": "gonna cause type errors okay\n",
        "197": "another good thing makes it easier to\n",
        "202": "read and reason about code so if I'm\n",
        "203": "looking at code someone else's written\n",
        "205": "everything's got a type it makes it\n",
        "206": "easier to understand what's going on\n",
        "208": "especially when I get to bigger programs\n",
        "212": "and then finally the code can run more\n",
        "216": "efficiently so for example no need to do\n",
        "220": "expensive run time type checks there's\n",
        "222": "other reasons when we talk then though\n",
        "224": "this isn't a machine structures course\n",
        "226": "we're not gonna talk about memory\n",
        "229": "allocation and any great detail but if\n",
        "232": "you go on to such courses you'll learn\n",
        "234": "about why arrays that have stem\n",
        "236": "statically typed languages can be more\n",
        "238": "efficient but a little beyond the scope\n",
        "241": "of our course now the bad side of static\n",
        "246": "types will code is have to\n",
        "249": "that's explicitly I'm sorry oh just say\n",
        "251": "code is more verbose right I have to\n",
        "252": "actually write out int and string and\n",
        "255": "whatever else everywhere and the code is\n",
        "258": "lesson general so if we look at the\n",
        "262": "larger method this is a larger method\n",
        "264": "that only works for integers if I wanted\n",
        "266": "to compare strings or even\n",
        "267": "floating-point numbers like I have here\n",
        "270": "5.5 I try running this code it yells at\n",
        "272": "me and it says cannot do this conversion\n",
        "274": "I can't take a floating-point or a\n",
        "276": "so-called double and turn it into an\n",
        "278": "integer that's not allowed or is in\n",
        "280": "Python that would be no problem okay\n",
        "283": "there is a way around this in Java\n",
        "287": "called generics and there are a fairly\n",
        "289": "decent solution they're not as good as\n",
        "290": "the equivalent generics and other\n",
        "293": "languages but we'll see that there is a\n",
        "294": "way out that makes things not totally\n",
        "296": "hopeless okay so that's just a\n",
        "298": "high-level summary of some things we've\n",
        "300": "learned about the Java language so I'll\n",
        "302": "just say what's next so there's a\n",
        "304": "homework zero that you can immediately\n",
        "306": "start working on so this will give you a\n",
        "308": "chance if you've never written Java\n",
        "310": "before a chance to explore the basics on\n",
        "313": "your own now this is not a Java class so\n",
        "315": "we're not gonna sit down and carefully\n",
        "317": "go through each piece of syntax we're\n",
        "318": "going to expect you to go look at\n",
        "321": "reference materials to look at example\n",
        "322": "code out there and use your prior\n",
        "324": "background knowledge to get up to speed\n",
        "326": "on the basics of Java just once you\n",
        "328": "learn in a one language we expect you to\n",
        "329": "start being able to learn other\n",
        "333": "languages very quickly next up there is\n",
        "335": "also a lab now if you're someone\n",
        "337": "actually at Berkeley taking the\n",
        "338": "residential version of the course or\n",
        "339": "like the you know the real-life version\n",
        "342": "you can use the lab machines but most\n",
        "344": "people just run the code on their own\n",
        "346": "computers so lab 1b explains how to\n",
        "348": "compile and run code on your own machine\n",
        "351": "but but once you are all set up either\n",
        "354": "using the lab machines or abled or set\n",
        "356": "up to run code on your own machine what\n",
        "358": "lab one does is it tells you how to use\n",
        "360": "our system that lets you download the\n",
        "362": "starter files how to it'll give you some\n",
        "364": "exercises to do and then finally to\n",
        "366": "submit them if you're someone with no\n",
        "368": "prior Java experience it would be a\n",
        "370": "really good idea to do homework zero\n",
        "372": "before the lab just so that you have\n",
        "374": "some sense so\n",
        "375": "what writing Java programs is all about\n",
        "378": "and then finally in the next lecture\n",
        "379": "we'll talk a little bit about what\n",
        "381": "public static yada-yada\n",
        "383": "actually means and go a little deeper\n",
        "385": "into some of the object-oriented\n",
        "386": "features for Java and that'll be\n",
        "389": "basically it for the core of the java\n",
        "391": "language and then from there we'll start\n",
        "393": "getting into some data structures and\n",
        "394": "learning java in the context of\n",
        "396": "something that's important to us in the\n"
    },
    "Title=[Lists1, Video 10] More IntList Exercises_Id=qnmxD_21DNk": {
        "0": " \n",
        "2": "as the last video of the day let's\n",
        "4": "consider adding a method called get that\n",
        "6": "is going to return the item from the\n",
        "8": "list we're gonna say the front item is\n",
        "11": "the 0th item and for simplicity to keep\n",
        "12": "your code simple it's okay to assume\n",
        "14": "that whatever someone asks for actually\n",
        "16": "exists so in other words if they ask for\n",
        "17": "item a million and the list only has\n",
        "19": "five things that's fine just it's okay\n",
        "21": "if your code crashes so as an example\n",
        "23": "let's suppose this is our list right\n",
        "26": "here if we ask for L get 0 we should get\n",
        "28": "back 5 or if you're asked for L dot get\n",
        "31": "1 we should get back down ok so what I'd\n",
        "32": "like you to do is really sit down and\n",
        "34": "think about this and don't just give to\n",
        "37": "the answer the best way I think they\n",
        "39": "work on this is on paper though if you\n",
        "41": "want you can also do it by looking in\n",
        "43": "the lecture code repo and grabbing the\n",
        "45": "file called int list at Java and the\n",
        "47": "lists 1 slash exercises folder and if\n",
        "49": "you really insist you can do it in your\n",
        "51": "head but yeah that's not okay so give it\n",
        "52": "a shot\n",
        "54": "you can use recursion or iteration but\n",
        "56": "spoiler I'm going to use recursion in my\n",
        "58": "solution so pause the video and then\n",
        "63": "I'll tell you what I did ok so let's do\n",
        "64": "it\n",
        "67": "we need a get method something called\n",
        "70": "public can't get and I and it's gonna\n",
        "75": "return the ice item of this list now we\n",
        "78": "even say it's an endless okay so I\n",
        "81": "wouldn't do recursively which means I\n",
        "83": "need a base case what should the base\n",
        "85": "case be now even if you haven't figured\n",
        "86": "it out yet maybe think about that\n",
        "90": "question so it turns out that the most\n",
        "91": "natural base case has nothing to do with\n",
        "94": "the tail or the rest I mean or the first\n",
        "96": "instead it's if someone asked me for my\n",
        "99": "zeroth item I could just return what\n",
        "103": "well I should just return the first item\n",
        "105": "right I just give the data that's what's\n",
        "107": "at the frontal list you asked me for 0 I\n",
        "110": "returned first now someone has a larger\n",
        "114": "I of is a 1 or 2 or 3 then I don't have\n",
        "116": "the value someone else does and it's\n",
        "117": "important to keep in mind that what's my\n",
        "122": "first what's my value 1 is my neighbor\n",
        "126": "or my rests value 0 or what's my 5th\n",
        "129": "value is my neighbor's fourth neighbor's\n",
        "131": "third neighbor second movers first\n",
        "133": "neighbor 0th all the way down the line\n",
        "135": "if that made some sense so in other\n",
        "137": "words I need to ask the rest of the list\n",
        "140": "for something rest dot sighs they're not\n",
        "142": "saying that right I need to ask rest for\n",
        "144": "something why should I ask for well I\n",
        "146": "should ask not for their eyesight up but\n",
        "149": "their eye - one thing now if we try\n",
        "150": "running this we can just test it out\n",
        "153": "real quick let's say we try running it\n",
        "156": "with zero I should get back five indeed\n",
        "157": "I do\n",
        "163": " \n",
        "168": "one I get back 10 and 100 I get some\n",
        "171": "crash so let's say it worked fine so if\n",
        "173": "that didn't make total sense what I\n",
        "175": "encourage you to do is put this through\n",
        "177": "the Java visualizer I'm not going to do\n",
        "178": "it here because it's actually quite\n",
        "180": "similar to size and I think it's\n",
        "182": "probably a good exercise for you to jump\n",
        "185": "in and try it out but if you got it\n",
        "186": "great and if you did iteratively also\n",
        "189": "great so that's it as far as what I'm\n",
        "191": "gonna develop in class so at this point\n",
        "193": "you probably have the feeling that well\n",
        "195": "wall at the beginning we were just kind\n",
        "196": "of lackadaisically thinking about our\n",
        "198": "lives and walruses and whatever else at\n",
        "200": "some point we took off like a rocket and\n",
        "202": "developed this list thing at Lightspeed\n",
        "204": "and maybe just maybe it feels a little\n",
        "206": "shaky so what I'm gonna encourage you to\n",
        "209": "do is maybe try a couple more exercises\n",
        "211": "so if you'd like there's these extra\n",
        "214": "ungraded exercises called extra int list\n",
        "217": "practice I'll even say Java in the lists\n",
        "219": "one slash exercises folder and the\n",
        "222": "lecture code github directory so if we\n",
        "225": "look at if you go into this repository\n",
        "227": "and you open this file you'll see there\n",
        "229": "are two methods waiting to be filled in\n",
        "231": "by you anchor list what it does is it\n",
        "233": "takes a list and it increments all the\n",
        "237": "values by the x value here and as a\n",
        "240": "constraint whenever it's done nothing in\n",
        "241": "the list the originally created should\n",
        "244": "change instead there should be a totally\n",
        "246": "new list returned by this method where\n",
        "249": "it has its own copies of everything down\n",
        "251": "here you'll read another version this\n",
        "254": "this method called tinker list this one\n",
        "256": "you should not use the keyword new and\n",
        "259": "instead should do all the work in place\n",
        "261": "okay so once you jump into this you'll\n",
        "262": "see it's a little challenging to think\n",
        "264": "about what exactly\n",
        "266": "how you're gonna approach this and what\n",
        "268": "these two things mean so give it a shot\n",
        "272": "and feel free to post on Piazza or talk\n",
        "273": "to your friends and work this out it's\n",
        "275": "not for a grade and try and figure out a\n",
        "278": "solution so that's it for today\n",
        "280": "so even though right now it may seem a\n",
        "281": "little intimidating that we're flying\n",
        "283": "through lists we're gonna spend a lot of\n",
        "285": "time on these and get really fluent with\n",
        "287": "them and become super magical list\n",
        "291": "creator people what's the greatest and\n",
        "294": "most rousing clothes but hey we got what\n"
    },
    "Title=[Lists1, Video 1] The Mystery of the Walrus_Id=IRwO_wahcsU": {
        "0": " \n",
        "1": "let's kick today off with a puzzle\n",
        "3": "that's going to be really important to\n",
        "5": "us to understand how to build a list so\n",
        "7": "this right here was a website address up\n",
        "9": "here for answering a question that\n",
        "10": "doesn't apply if you're only watching\n",
        "12": "the videos online that's something for\n",
        "13": "students who are there in the live\n",
        "14": "lecture so don't worry about that\n",
        "17": "so this puzzle is a puzzle that I\n",
        "19": "haven't told you how to answer yet but I\n",
        "20": "want you to try and use your intuition\n",
        "22": "or whatever background new knowledge\n",
        "25": "that you may have to answer so what I\n",
        "27": "have here is walrus a equals new walrus\n",
        "29": "and these are a couple of parameters\n",
        "31": "they're the walruses weight and tusk\n",
        "34": "size but it doesn't much matter here we\n",
        "36": "have walrus B and we say B equals a and\n",
        "39": "then change the weight of B so the\n",
        "41": "question I have for you is knowing that\n",
        "44": "B was set equal to a does this change to\n",
        "47": "be affect a and so we're gonna print\n",
        "49": "these out to get the answer and so if\n",
        "51": "you're not sure that's fine but what I\n",
        "53": "want you to do now is pause the video\n",
        "54": "and think really carefully about what\n",
        "56": "you think think the answer might be\n",
        "58": "maybe try writing it out on paper and\n",
        "60": "then I'll reveal the answer so pause and\n",
        "64": "think so it turns out the answer is yes\n",
        "67": "it does change the walrus changing these\n",
        "69": "weight does affect both walruses both a\n",
        "71": "which is Prentiss for printed first and\n",
        "74": "B even though a weight was originally\n",
        "76": "set to 1,000 why well we'll get there in\n",
        "80": "a moment okay but I have another puzzle\n",
        "81": "for you before we get there how about\n",
        "83": "integers let's say we have an integer X\n",
        "85": "and we set it equal to 5 Corino that\n",
        "86": "and we set it equal to 5 Corino that\n",
        "88": "create another integer Y and then say y\n",
        "91": "equals x and then change X so the\n",
        "92": "question now is will the change to X\n",
        "95": "affect Y and we're gonna print them out\n",
        "97": "to see what happens and again I haven't\n",
        "98": "told you everything you need to know to\n",
        "101": "answer this question so make your best\n",
        "106": "guess and I will let you know okay so it\n",
        "108": "turns out the answer is it does not\n",
        "111": "affect Y and why is that I'm gonna give\n",
        "113": "you a visual picture using the\n",
        "114": "visualizer but we're gonna actually\n",
        "116": "spend some time really picking this\n",
        "118": "apart and building a foundation that's\n",
        "120": "gonna be really crucial to our\n",
        "122": "understanding of data structures moving\n",
        "125": "forwards so let's run this\n",
        "128": "in the visualizing and so after I create\n",
        "132": "this walrus I have a walrus egg and then\n",
        "134": "when I say B equals a what we notice is\n",
        "135": "that visually we have two arrows\n",
        "136": "that visually we have two arrows\n",
        "138": "pointing at the same walrus so in some\n",
        "140": "sense a and B for whatever reason are\n",
        "142": "the same walrus and so if I do B dot\n",
        "144": "wait I mean that's just that single\n",
        "146": "walrus is gonna have its weight changed\n",
        "148": "and so printing it out no big surprise\n",
        "150": "is going to have the same result for\n",
        "154": "both okay how about the integer case\n",
        "157": "well when I say int x equals five I have\n",
        "160": "a number five in this box I see y equals\n",
        "162": "x and so now I have the number five in\n",
        "165": "this box as well and now when I say x\n",
        "166": "equals two well these are two totally\n",
        "168": "different boxes that's not like an arrow\n",
        "170": "pointing at something so it's only gonna\n",
        "172": "change when they do x equals two it's\n",
        "174": "only gonna change this right here\n",
        "177": "and so printing them out I get no change\n",
        "181": "to X sorry no change to Y and response\n",
        "183": "to X's change so what we're gonna do\n",
        "185": "next is really pick that apart but\n",
        "187": "that's the the visual picture you might\n"
    },
    "Title=[Lists1, Video 3] Reference Types_Id=-eUMI5o31wY": {
        "0": " \n",
        "1": "so we've covered the right half of the\n",
        "3": "puzzle primitive types now we're going\n",
        "5": "to do is turn over to the left half of\n",
        "7": "the walrus mystery how the walrus\n",
        "9": "behaves by talking about so-called\n",
        "12": "reference types so we've said there\n",
        "13": "eight primitive types in Java byte short\n",
        "16": "int long etc and any other variable you\n",
        "19": "declare say a planet or a walrus or an\n",
        "20": "int array is going to be a so-called\n",
        "23": "reference type okay that's just the term\n",
        "26": "for all of the types that are not these\n",
        "28": "so let's start digging into our\n",
        "30": "understanding of reference types by\n",
        "33": "discussing object instantiation z' so\n",
        "35": "whatever you say new dog or new wall is\n",
        "37": "a new planet or whatever what job is\n",
        "38": "going to do is it's going to allocate a\n",
        "41": "box of bits for each instance variable\n",
        "42": "of the class here they are listed and\n",
        "44": "fill them with a default value say zero\n",
        "47": "or null and then the constructor will\n",
        "49": "then usually fill every box with some\n",
        "51": "other value now does it have to but in\n",
        "53": "this case it will so let's see an\n",
        "56": "example so when I run this visualizer\n",
        "60": "here I will see that walrus whenever I\n",
        "62": "run the constructor once I once I call\n",
        "64": "new two boxes are created one for the\n",
        "66": "weight and one for the tusk size and\n",
        "68": "they're filled in with a default value\n",
        "71": "of zero now the constructor will come\n",
        "72": "through and reset them to some other\n",
        "74": "value in this case though it doesn't\n",
        "78": "necessarily have to do that so whenever\n",
        "80": "this code runs what ends up happening\n",
        "82": "what the new keyword does for us is it\n",
        "84": "creates two boxes one of size 32 bits\n",
        "88": "one of size 64 bits for a total of 96 so\n",
        "90": "that's what happens when we instantiate\n",
        "93": "an object now it's interesting to\n",
        "94": "actually reflect on what happens at the\n",
        "96": "bit level now this is a little beyond\n",
        "98": "the scope of the class but somehow I\n",
        "99": "find it satisfying to know that this is\n",
        "101": "approximately what's going on under the\n",
        "103": "hood so it's a little bit of a\n",
        "105": "simplification but in this case whenever\n",
        "108": "we call new what Java will do is it will\n",
        "110": "when I say new RS it's gonna dig through\n",
        "112": "memory and it's gonna find 96 bits\n",
        "114": "because that's now that's how many it\n",
        "116": "needs to store the walrus and then it's\n",
        "118": "gonna fill in those with a constructor\n",
        "119": "we'll fill in this top bit with a\n",
        "121": "thousand and this bottom bit here the\n",
        "124": "blue bits of' 8.3 so this happens to be\n",
        "129": "8.3 and on a more physical level that's\n",
        "131": "a rough picture of what's going on now\n",
        "132": "I'm gonna admit this is a\n",
        "135": "the simplification the actual size of a\n",
        "137": "walrus will be a little bit bigger than\n",
        "138": "96 bits because there's various\n",
        "141": "information that's header information or\n",
        "144": "overhead up here but I'm not showing you\n",
        "145": "here because it's just beyond the scope\n",
        "147": "of our class and this is good enough for\n",
        "150": "us okay so in other words what happens\n",
        "152": "is your computer has a few billion bits\n",
        "154": "it looks through those bits and it\n",
        "156": "somehow decides yes this this is the\n",
        "158": "place where my walrus is gonna live here\n",
        "161": "is the weight here is the tusks size and\n",
        "163": "there it goes\n",
        "165": "so what's interesting about the new\n",
        "167": "keyword is that we can think of it not\n",
        "170": "only as going out to the massive field\n",
        "171": "of bits and finding a home for the\n",
        "173": "information the walrus but we can also\n",
        "176": "think of it as reporting where it put\n",
        "178": "the walrus so if I go to the fields and\n",
        "180": "I bury a treasure I mean that's a great\n",
        "182": "the treasures in the field now but if I\n",
        "184": "ever want to see that treasure again or\n",
        "185": "something like let someone know where it\n",
        "186": "is I have to report that information\n",
        "188": "that out there in the corner of the\n",
        "190": "field that's where the treasure is so\n",
        "192": "what will happen is that the new keyword\n",
        "194": "you could think of it as returning the\n",
        "199": "value or the number of bit in memory\n",
        "202": "where it put the walrus so it's very\n",
        "204": "natural it's a sequence of bits that\n",
        "206": "what new can just do is return okay hey\n",
        "207": "you know where I put that wonderful\n",
        "209": "walrus I put it in bit number two\n",
        "211": "billion 384 million seven hundred\n",
        "212": "twenty-three thousand four hundred and\n",
        "215": "twenty-three and that will be the so\n",
        "217": "call or you can think of that as the\n",
        "220": "return value of the new keyword okay so\n",
        "222": "it goes out there buries the treasure\n",
        "224": "and it shouts to the heavens this is\n",
        "226": "where I've put this treasure this\n",
        "230": "wonderful walrus yeah so what well let's\n",
        "232": "talk a little bit about the declaration\n",
        "234": "of a variable that's a reference type so\n",
        "235": "before we've been talking about\n",
        "238": "instantiation how new works now let's\n",
        "240": "talk about declaration so if I have a\n",
        "242": "piece of code that declares that a\n",
        "244": "walrus exists or that a dog exists so\n",
        "246": "that a planet exists what Java will do\n",
        "249": "is it will allocate a box of exactly 64\n",
        "251": "bits no matter what type of object it's\n",
        "253": "a reference type that's just what's\n",
        "255": "gonna happen and then these bits can\n",
        "257": "either be set to null that is all zeros\n",
        "259": "or it could be set to the address of a\n",
        "261": "specific instance of that class as\n",
        "263": "returned by new so let's this very\n",
        "264": "simple example\n",
        "267": "if I say walrus some walrus and then say\n",
        "269": "some walrus equals null well that first\n",
        "271": "line what it does this creates a box of\n",
        "273": "64 bits and this second line equals null\n",
        "276": "sets it all equal to zero as a marker to\n",
        "280": "say well it's nothing right no by\n",
        "283": "contrast if I say walrus some walrus\n",
        "285": "that creates a box of 64 bits and then\n",
        "287": "say equals new walrus and what's going\n",
        "289": "to happen is that after new goes out to\n",
        "290": "the field and it digs to the hole and\n",
        "293": "puts the delicious delicious walrus\n",
        "294": "that's not nice\n",
        "297": "our lovely walrus in the in the field\n",
        "300": "and then shouts here's the location of\n",
        "302": "the walrus this serves as a record of\n",
        "304": "that information so if we got put in\n",
        "308": "location 0 1 0 0 0 1 1 yada yada that is\n",
        "311": "going to be what we store in this box so\n",
        "313": "even though the war is itself is 96 bits\n",
        "316": "the address that we store is 64 bits and\n",
        "321": "it's just in a modern Java Runtime\n",
        "323": "environment 64 bits is the size of the\n",
        "325": "address that's how many bits we use to\n",
        "329": "represent this number right here ok so\n",
        "333": "while this notation does give us a\n",
        "334": "fairly accurate picture of what's going\n",
        "336": "on and again you know I kind of fudge\n",
        "338": "things a little bit and when you go to\n",
        "340": "61 C or even an operating systems class\n",
        "343": "you get a really under more honest\n",
        "344": "understanding well this is good enough\n",
        "346": "for our purpose in 61 B it's not\n",
        "347": "for our purpose in 61 B it's not\n",
        "348": "particularly instructive to look at this\n",
        "350": "giant stream of bits and expect to know\n",
        "352": "anything so what I'm going to do is\n",
        "354": "similar to before we're not going to\n",
        "356": "show explicitly the binary information\n",
        "358": "shown in a memory box we're gonna\n",
        "361": "instead use this simplified box notation\n",
        "364": "and in this case whenever we were\n",
        "367": "talking about reference types this this\n",
        "368": "notation will often be called box and\n",
        "371": "pointer okay so what is it so whenever\n",
        "373": "we have a null a bunch of zeros we're\n",
        "375": "just gonna write null in the Box because\n",
        "377": "having 64 zeros in a row is just a waste\n",
        "380": "of space and if we ever have a non zero\n",
        "382": "address that is sorry and that is if\n",
        "383": "this address is anything other than\n",
        "386": "zeros then we're going to draw an arrow\n",
        "389": "to whichever object the walrus is\n",
        "391": "pointing at so instead of showing this\n",
        "394": "right here this sequence of seemingly\n",
        "396": "random 64 bits will draw an address that\n",
        "397": "shows\n",
        "399": "which walrus were talking about here's a\n",
        "402": "96 bit walrus here's a 64 bit box hold\n",
        "404": "an address and there as a pointer hence\n",
        "408": "the name box and pointer notation you\n",
        "410": "may not realize it but you now know\n",
        "412": "everything you need to solve the mystery\n",
        "415": "of the walrus so I mentioned the golden\n",
        "417": "rule of equals that equals just copies\n",
        "419": "the bits that's all it does now that's\n",
        "421": "true for prototypes but it actually is\n",
        "422": "also true for reference types and in\n",
        "424": "fact for any situation in Java where you\n",
        "426": "say equals so in terms of our visual\n",
        "428": "metaphor what that means is we're gonna\n",
        "430": "copy the arrow by making if we say for\n",
        "432": "example B equals a we're gonna make the\n",
        "434": "arrow in the B box point at the same\n",
        "436": "instance as a so let's see that in terms\n",
        "439": "of box and pointer notation so when I\n",
        "441": "say walrus a what does that do well that\n",
        "444": "creates a box of 64 bits there it is and\n",
        "445": "I've only shown it very small and it\n",
        "447": "could have made a huge box but we know\n",
        "449": "it's 64 bits because look that's all\n",
        "452": "right there now when I say a equals new\n",
        "454": "walrus the new key word goes out the\n",
        "456": "memory finds the bits it needs the 96\n",
        "459": "bits and it shouts the location which a\n",
        "460": "bits and it shouts the location which a\n",
        "461": "will dutifully record\n",
        "463": "so this walrus has 96 bits the new\n",
        "465": "keyword yellows the address we store the\n",
        "467": "address here and rather than writing out\n",
        "470": "that 64 bit address we draw an arrow\n",
        "473": "because that's easier to understand next\n",
        "476": "up we say walrus B this creates a box\n",
        "479": "which is 64 bits so both a and B are 64\n",
        "482": "bits and at this point B is not defined\n",
        "485": "right it's not that it's normal right\n",
        "487": "now it's just nothing it's just some box\n",
        "489": "of 64 bits who knows what's in there and\n",
        "492": "we say B equals say we're gonna copy\n",
        "494": "that string of bits remember there's 64\n",
        "495": "bits here if we have the bit picture\n",
        "497": "it'd just be a string of 64 bits we'll\n",
        "499": "copy them into this box and so at that\n",
        "501": "point when we say P equals a V is\n",
        "504": "pointing at the same object so now if we\n",
        "506": "were to try and do something like B dot\n",
        "508": "wait it's saying follow the arrow go to\n",
        "509": "wait it's saying follow the arrow go to\n",
        "510": "the walrus you will find the information\n",
        "513": "you seek and in that case you might say\n",
        "515": "B dot weight equals something so I hope\n",
        "517": "now it's clear why the mystery of the\n",
        "519": "walrus is resolved the way it does and\n",
        "521": "that's all you need to know to\n"
    },
    "Title=[Lists1, Video 4] Parameter Passing_Id=3hiXeB8rNKA": {
        "0": " \n",
        "2": "now let's go a little further than the\n",
        "3": "mystery of the walrus and talk about\n",
        "5": "what happens when we pass parameters to\n",
        "7": "functions so it turns out that the\n",
        "9": "golden rule of equals also applies to\n",
        "11": "passing of parameters in Java so the\n",
        "13": "golden rule of equals remember is just\n",
        "15": "given variables BN a if we say B equals\n",
        "19": "a we copy all the bits from a into B so\n",
        "20": "the same thing happens when you pass\n",
        "23": "parameters to a function what you're\n",
        "26": "gonna do is whatever bits you want to\n",
        "28": "give to the function are gonna be copied\n",
        "30": "to the new scope so let's see an example\n",
        "32": "so that makes it clear what's going on\n",
        "35": "so here's a function called average it's\n",
        "36": "not very glamorous all it does it take a\n",
        "38": "couple of doubles and return their\n",
        "41": "average but we're gonna use this as an\n",
        "44": "example of this rule so when I run main\n",
        "46": "what it's going to do is first create a\n",
        "49": "double variable that's 64 bits and fill\n",
        "52": "in this box here with 5.5 then Y will be\n",
        "55": "10.5 and then finally we're gonna make a\n",
        "57": "call to the average function so what\n",
        "58": "that means is we're gonna take these\n",
        "61": "bits and hand them over hand copies of\n",
        "62": "them over to the average function and\n",
        "65": "it's going to store them in it it's news\n",
        "67": "in its own scope so it's gonna have\n",
        "70": "local a and B right this is the\n",
        "72": "parameter these variables that are\n",
        "75": "usable only by average it's gonna copy\n",
        "77": "those bits in okay so that's the scoop\n",
        "79": "and it's not that there's some arrows\n",
        "81": "pointing back instead what is happening\n",
        "83": "is the actual bits are copied into these\n",
        "85": "boxes I know this there's no like arrows\n",
        "89": "pointing back this idea of making actual\n",
        "90": "copies of the bits is sometimes called\n",
        "93": "pass by value now we're not really gonna\n",
        "95": "use that term so much in our class but\n",
        "97": "it might be useful to you at some job\n",
        "99": "interview but basically in Java you\n",
        "102": "always pass by value in other words you\n",
        "105": "always copy the bits so let's see a\n",
        "107": "little summary of what we've learned so\n",
        "108": "and then I'm going to give you guys the\n",
        "110": "challenge to make sure this all makes\n",
        "113": "so to summarize everything we've got so\n",
        "115": "there are nine types of variables in\n",
        "117": "Java first there are eight primitive\n",
        "120": "types and then we have a ninth type or\n",
        "123": "just a set of types you guess you can\n",
        "126": "say which is references to objects which\n",
        "128": "could be planets arrays\n",
        "130": "walruses whatever\n",
        "132": "and those references we're going to\n",
        "133": "think of them as arrows but they may\n",
        "137": "also be known so in this box and pointer\n",
        "138": "notation we're going to use for the rest\n",
        "140": "of the class and especially with\n",
        "142": "understanding our data structures each\n",
        "144": "variable here right here is going to be\n",
        "146": "drawn as a box so and it's gonna have a\n",
        "148": "label so here's a box labeled a a box\n",
        "151": "labeled B a box labeled X and so forth\n",
        "152": "so every variable is gonna have a little\n",
        "155": "box and we're gonna show the values for\n",
        "158": "that variable are gonna be shown in that\n",
        "161": "box now rather than show a bunch of\n",
        "163": "binary digits we're gonna write them in\n",
        "164": "human readable format for primitive\n",
        "166": "types that means writing things like 5\n",
        "169": "or 3.5 or a and for reference types\n",
        "171": "instead of writing out a binary address\n",
        "173": "we're gonna represent it by arrows which\n",
        "175": "are going to point at specific instances\n",
        "178": "and the Golden Rule in terms of\n",
        "181": "understanding how the equals operator\n",
        "184": "works in Java and how a function\n",
        "186": "parameters are passed is simple when you\n",
        "188": "say B equals a you're gonna copy the\n",
        "190": "bits whenever you pass parameters you're\n"
    },
    "Title=[Lists1, Video 5] Test Your Understanding of the GRoE_Id=zGdNjPZxIdA": {
        "0": " \n",
        "2": "understanding this slide and\n",
        "4": "particularly these golden rules is going\n",
        "5": "to be critically important to you not\n",
        "7": "just for project one or all the data\n",
        "8": "structures you build in this class or\n",
        "10": "even in the exams but also in your life\n",
        "12": "now this is just the kind of thing that\n",
        "14": "people expect programmers to know second\n",
        "16": "nature so to test your understanding so\n",
        "18": "far maybe you don't have it quite\n",
        "21": "perfect yet I have the following problem\n",
        "22": "for you to consider what I'd like you to\n",
        "24": "do is look at this code and determine\n",
        "26": "which of these four statements is true\n",
        "28": "now ideally what you'll do is your with\n",
        "30": "some other people right now you'll first\n",
        "31": "work alone on the problem come up with\n",
        "33": "an answer then you'll argue with each\n",
        "35": "other and then you watch me give away\n",
        "38": "the answer and debate what that means so\n",
        "40": "let's try that first step and if you\n",
        "41": "don't have anybody else around that's\n",
        "43": "but really try and work on this problem\n",
        "44": "by yourself without looking at the\n",
        "46": "answer so pause the video and I'll wait\n",
        "50": "here patiently okay so now that you've\n",
        "51": "come up with your own personal theory\n",
        "57": "trying to bait with others and pause and\n",
        "59": "now finally what I'm gonna do is I'm\n",
        "63": "going to show you the answer so let's\n",
        "66": "consider the Java visualizer this is\n",
        "70": "just the result of clicking this link so\n",
        "72": "when I run this code first thing that\n",
        "73": "happens a walrus gets built I'll kind of\n",
        "74": "skip that part\n",
        "77": "so after this person walrus is after\n",
        "79": "this walrus is created and this integer\n",
        "83": "variable is set up we call do stuff so\n",
        "85": "do stuff when it is called well when we\n",
        "87": "pass a parameter that means that this\n",
        "89": "function is going to have its own scope\n",
        "91": "it's gonna have a variable called walrus\n",
        "92": "and another called int and we're going\n",
        "93": "and another called int and we're going\n",
        "95": "to copy the bits so if you understand\n",
        "98": "what copying the bits means that means I\n",
        "100": "get a box called W another called X this\n",
        "103": "is 64 bits this is 32 bits these 32 bits\n",
        "105": "corresponding to the number 9 get copied\n",
        "108": "in and these 64 bits corresponding to\n",
        "110": "the address that new shouted out after\n",
        "112": "it finished its job will be copied to EE\n",
        "114": "so in other words we have the same\n",
        "116": "address sitting inside of these two\n",
        "118": "boxes which we represent in our visual\n",
        "120": "metaphor using an arrow so they're\n",
        "122": "pointing at the same walrus so in do\n",
        "125": "stuff we take this walrus and we\n",
        "127": "subtract its weight and that is going to\n",
        "130": "affect the walrus that main\n",
        "131": "the next step we're going to say x\n",
        "133": "equals x minus five and the scoping\n",
        "135": "rules for job are just like any other\n",
        "136": "language that you might have learned in\n",
        "138": "the past say Python so we're going to be\n",
        "140": "referring to the do stuffs version of X\n",
        "143": "now this is a 32-bit representation of\n",
        "145": "the number nine and not the address of\n",
        "147": "the number nine that's a very subtle the\n",
        "149": "incredibly important distinction it's\n",
        "151": "the number not the address of the number\n",
        "153": "and so what that means is if I say x\n",
        "155": "equals X minus five we're actually just\n",
        "157": "changing this number here and there's\n",
        "160": "not it's not causing an effect to\n",
        "162": "backwash its way into the main functions\n",
        "165": "a scope so when the code finishes\n",
        "167": "running then we have a walrus pointing\n",
        "169": "at a well of the walrus variable\n",
        "170": "pointing at a walrus that did lose\n",
        "172": "weight but X is unchanged\n",
        "174": "so hopefully that made sense and if it\n",
        "176": "didn't make sure that you click on this\n",
        "178": "link and make sure that you can follow\n",
        "180": "all the steps and maybe go back and\n"
    },
    "Title=[Lists1, Video 6] Instantiating Arrays_Id=t57Xi1G__Vc": {
        "0": " \n",
        "2": "instantiating a raise is a lot like\n",
        "4": "instantiating any other object so I'll\n",
        "6": "first note that arrays are also objects\n",
        "8": "so what's an object well that's like a\n",
        "10": "planet or a walrus or a dog or whatever\n",
        "13": "else but it also includes arrays and as\n",
        "14": "we've seen objects are usually\n",
        "16": "instantiated using the new keyword so I\n",
        "18": "might say Planet P equals new planet\n",
        "19": "yada yada yada\n",
        "22": "or I could say int array X equals new\n",
        "23": "int and then use this syntax that we saw\n",
        "25": "in homework 0 now in the previous\n",
        "27": "lecture we broke down declaration\n",
        "29": "instantiation and assignment in two\n",
        "31": "separate steps so let's just do that\n",
        "33": "again in the context of arrays to make\n",
        "35": "sure that everything all makes sense so\n",
        "37": "when I say int array a this is a\n",
        "40": "declaration what that does is it creates\n",
        "43": "a box which is 64 bits in size which can\n",
        "45": "store the address of an int array and\n",
        "47": "nothing else even though technically\n",
        "49": "interets and planets and walruses and so\n",
        "51": "forth all of those variables store\n",
        "53": "64-bit addresses the compiler will only\n",
        "56": "let us store an address of an int array\n",
        "58": "in this box now at this point there is\n",
        "59": "no actual objects we've only declared a\n",
        "62": "variable next up there's instantiation\n",
        "67": "so when I say new int Brak braces 0 1 2\n",
        "69": "95 4 that will instantiate a new object\n",
        "72": "that is it will create 5 boxes each of\n",
        "76": "size 32 it'll put 0 1 2 95 and 4 in\n",
        "79": "those boxes respectively and then the\n",
        "81": "new command will return the address of\n",
        "83": "this object now at this point I'll say\n",
        "85": "the object is anonymous in the sense\n",
        "86": "that there's no name for it right we\n",
        "87": "haven't assigned it to a variable\n",
        "91": "the address is shouted by new but it\n",
        "92": "falls on deaf ears and so while this\n",
        "95": "object is created it is immediately gone\n",
        "99": "or just not usable so I should mention\n",
        "101": "very briefly that an array is not\n",
        "105": "actually literally only 5 times 32 bits\n",
        "106": "there's a little bit of additional\n",
        "109": "overhead not shown here but not really a\n",
        "112": "big deal in our class and then often we\n",
        "115": "will do declaration instantiation and\n",
        "117": "assignment all in one step so here it is\n",
        "119": "the declaration part of this line it\n",
        "121": "creates a 64 bit box for storing an\n",
        "124": "address new int creates the center add\n",
        "126": "and then finally the equal sign takes\n",
        "128": "the address shouted by new and this time\n",
        "131": "rather than falling on deaf ears and\n",
        "133": "ever be known it is stored in the a\n",
        "137": "variable so just to finish out this\n",
        "140": "little section I figured I'd mentioned\n",
        "142": "the fact that instantiate adopts that as\n",
        "144": "planets arrays whatever else can be lost\n",
        "147": "so in other words let's say a points at\n",
        "149": "this object right here and it's the only\n",
        "152": "copy it's the only copy of the address\n",
        "155": "this 64 bit box here in that case if we\n",
        "158": "were to say ETA equals new whatever else\n",
        "161": "right so a point set a new object then\n",
        "163": "we no longer have this address stored\n",
        "164": "anywhere and therefore there's no way we\n",
        "166": "can ever get that object back that's not\n",
        "168": "a bad thing I mean there are cases as\n",
        "170": "we'll see pretty soon when we start\n",
        "172": "building lists where we do actually want\n",
        "174": "to lose references to things but just a\n",
        "176": "note we lose an address that object is\n",
        "178": "lost and will be consumed by the garbage\n"
    },
    "Title=[Lists1, Video 7] Introducing IntLists_Id=TzuAiXTZmYo": {
        "0": " \n",
        "2": "now that we understand the intricacies\n",
        "4": "that go into solving the mystery of the\n",
        "6": "walrus we're ready to finally build a\n",
        "8": "list so the difference between a list in\n",
        "9": "list so the difference between a list in\n",
        "10": "an array is that a list is going to be\n",
        "12": "able to grow arbitrarily large unlike a\n",
        "16": "Java array which is of a fixed size so\n",
        "17": "we're gonna build this totally from\n",
        "20": "scratch and for reasons it won't be\n",
        "22": "clear right now our list is going to\n",
        "25": "have two variables the first is going to\n",
        "28": "be an integer call first and the second\n",
        "30": "will be a pointer or an address of\n",
        "33": "another int list and our list ultimately\n",
        "34": "is going to be used for storing only\n",
        "37": "integers for simplicity so let's start\n",
        "42": "off this class so our class is called\n",
        "43": "int list and as promised we're going to\n",
        "46": "have public and first and then public\n",
        "49": "int list rest okay\n",
        "50": "now if you came from 61a you roughly\n",
        "53": "know where this is going otherwise maybe\n",
        "56": "a little mysterious so it turns out that\n",
        "57": "we've actually already implemented a\n",
        "59": "list we're done what how can that be\n",
        "61": "well let's try it out I'm gonna make an\n",
        "67": "INT list called f okay so int list L we\n",
        "69": "can say new int list and then gets the L\n",
        "72": "dot first equals 5 l dot rest equals\n",
        "74": "null and that would be a list that\n",
        "77": "contains the number 5 I could then say\n",
        "81": "actually no what no I think l dot R s is\n",
        "85": "going to be a new int list and then l\n",
        "89": "dot rest dot first is gonna be 10 and so\n",
        "91": "forth now this is a little awkward of\n",
        "94": "course to use but let's keep going so I\n",
        "96": "could say L dot rest dot rest\n",
        "99": "equals new int list l dot rest that rest\n",
        "103": "up first equals 15 and at this point we\n",
        "106": "well can't really see what's going on so\n",
        "107": "I'm gonna take this code and I'm gonna\n",
        "108": "I'm gonna take this code and I'm gonna\n",
        "110": "copy it into our good old Java\n",
        "111": "visualizer so we can understand what's\n",
        "115": "going on so if it visualize the\n",
        "118": "execution of this class after I create\n",
        "121": "this first list scroll for it after\n",
        "122": "these three lines of code are done I\n",
        "126": "have L an int list which has a value\n",
        "128": "called first five and\n",
        "131": "No so if I run these next two lines of\n",
        "133": "code which all scam forward to so these\n",
        "136": "two lines of code are done l dot rest is\n",
        "138": "now a new int list which has first ten\n",
        "142": "and rational okay well at this point if\n",
        "143": "we tried to imagine how would I add a\n",
        "146": "third value to the list we could say L\n",
        "149": "dot rest dot rest and in that case we'd\n",
        "152": "be talking about this box right here all\n",
        "153": "that rest that rest equals new int list\n",
        "156": "so after I say L that rest that rest\n",
        "157": "equals new in list\n",
        "159": "what do you suppose happens okay so I'll\n",
        "161": "just skim for just a little bit we end\n",
        "163": "up getting an int list which has the\n",
        "166": "default values of all zeros and at that\n",
        "169": "point we could say okay know what l dot\n",
        "173": "rest dot rest dot first is 15 in that\n",
        "177": "case we are telling Java we'd like to\n",
        "180": "set this box this memory box here its\n",
        "182": "bits equal to 15 so what we've done now\n",
        "185": "is built a list now of course it's a\n",
        "187": "little awkward to use right I mean like\n",
        "188": "who wants to write code that looks like\n",
        "190": "this so we could make things slightly\n",
        "194": "better by working a little bit backwards\n",
        "196": "so first I'm gonna create a constructor\n",
        "199": "where I'm gonna say public int list int\n",
        "206": "F int list H I'm sorry are well and then\n",
        "209": "I'm gonna say F equals first breast\n",
        "214": "equals R oops wrong way around and then\n",
        "216": "what I'm gonna do is I'm actually going\n",
        "219": "to build my list the other way around\n",
        "221": "okay so let's try that out it lists L\n",
        "224": "equals new int list I'm gonna say 15\n",
        "229": "null and I'm gonna say L equals new int\n",
        "233": "list 10 L and I'm gonna say L equals new\n",
        "237": "int list 5 L so this is also kind of\n",
        "239": "awkward code but it's a little more\n",
        "242": "concise so let's try running this and\n",
        "246": "seeing what happens okay any syntax\n",
        "249": "errors nope good okay so we say int list\n",
        "250": "L equals new int list that's saying I\n",
        "253": "want a new int list that has 15 at the\n",
        "255": "front whereas the first value and\n",
        "257": "nothing is the rest so after running\n",
        "260": "that I end up with this\n",
        "263": "now many say you know what actually you\n",
        "265": "know what I want L to be I want L to be\n",
        "267": "a list which has ten at the front and\n",
        "269": "has my old list of the back some other\n",
        "271": "words this should be ten here and then\n",
        "274": "this list after ten so after running\n",
        "279": "this code sure enough we get this right\n",
        "282": "so L is no longer this original list it\n",
        "284": "is now the new list we just built which\n",
        "286": "has ten at the front pointing at this\n",
        "289": "now when I say l equals new int list\n",
        "290": "five L and if you're not quite following\n",
        "292": "I urge you to pause the video and try\n",
        "294": "and read ahead and guess what I'm about\n",
        "296": "to do so what I'm saying is I want L not\n",
        "298": "to be what it currently is I want to\n",
        "300": "give you the address of a new list which\n",
        "302": "has five at the front and which points\n",
        "305": "at the old list that I've created so in\n",
        "307": "this case we create a new node so here's\n",
        "309": "the new list that we're gonna point L at\n",
        "313": "we put the value five in and then you\n",
        "315": "say you know what I want rest to be\n",
        "318": "equal to R what's our R is just going to\n",
        "319": "be the address that was passed in the\n",
        "322": "constructor which is the old list so at\n",
        "324": "that point rest points it this int list\n",
        "327": "instance here right here the old list\n",
        "329": "and so once everything said and done we\n",
        "333": "end up with lists five ten fifty okay so\n",
        "334": "there was nothing new there that we\n",
        "336": "hadn't seen in the mystery of the walrus\n",
        "338": "though it can be a little bit hard to\n",
        "339": "wrap your brain around and if you didn't\n",
        "341": "quite get it you know watch again and\n"
    },
    "Title=[Lists1, Video 8] IntList size_Id=EEaP1oC1CFU": {
        "0": " \n",
        "2": "so the in list we've built so far can\n",
        "4": "technically do all the list stuff you\n",
        "6": "might want to do that's a little awkward\n",
        "8": "to use as we can see from the syntax now\n",
        "10": "in this case building a list Lots a\n",
        "12": "little awkward isn't so bad we'll find\n",
        "15": "that things like getting the ice element\n",
        "17": "from the list or asking for the size of\n",
        "19": "this list are going to be quite annoying\n",
        "22": "to do so to deal with this what we're\n",
        "24": "going to do is add a size method and an\n",
        "26": "iterative size method that are going to\n",
        "28": "behave kind of like the length method in\n",
        "30": "Python so in Python we might do\n",
        "32": "something like print Ling of L and we\n",
        "33": "expect it to say three there are three\n",
        "36": "items in the list so we're gonna do\n",
        "38": "right now is write a method for int list\n",
        "40": "that takes care of that for us so that\n",
        "43": "we can ask for example what is the size\n",
        "46": "of our list okay so we could technically\n",
        "49": "write a loop here or do whatever to get\n",
        "50": "besides the loop what I want to do\n",
        "52": "instead is write a method to make it\n",
        "54": "easier for the user because it certainly\n",
        "55": "shouldn't be the case that someone\n",
        "56": "should have to loop over a data\n",
        "58": "structure in order to get its size it\n",
        "60": "should be easy for the person using the\n",
        "63": "list so what I'm going to encourage you\n",
        "67": "to do at this point is you should\n",
        "69": "consider writing the size map that are\n",
        "70": "thinking about how it's gonna be written\n",
        "73": "and I'm gonna make a note here which is\n",
        "75": "that this method is going to return the\n",
        "80": "size of the list using recursion so if\n",
        "84": "you are little rusty on this this is\n",
        "86": "great practice you can think what should\n",
        "88": "this method maybe look like so pause the\n",
        "91": "video maybe but I'll go through it now\n",
        "93": "so hopefully you're pretty familiar with\n",
        "95": "recursion you're comfortable with it to\n",
        "97": "some degree and if not you know bummer\n",
        "99": "that your prerequisites aren't great but\n",
        "100": "you know you'll catch up I don't know if\n",
        "101": "this gesture was that I just did that\n",
        "104": "was like a sad face gesture but didn't\n",
        "107": "really commit to it I guess anyway so in\n",
        "108": "a recursive method what we always need\n",
        "113": "is a base case correct us what we're\n",
        "114": "gonna do is think about what the base\n",
        "117": "case might be so what is the type of\n",
        "121": "list where we know the size well it's\n",
        "122": "gonna be one where we can say it the\n",
        "124": "rest is null if the rest is null that\n",
        "126": "means we have a first value and nothing\n",
        "129": "else in which case we should return what\n",
        "132": "one so we have a list it only has one\n",
        "133": "thing\n",
        "134": "then the rest will be known will return\n",
        "138": "one now if that's not the case then what\n",
        "141": "well in that case we know that it's\n",
        "145": "gonna be one plus however big the rest\n",
        "148": "of the list is and we can get that by\n",
        "151": "just asking for this got rest dot sighs\n",
        "154": "so I'm going to ask my rest like you\n",
        "155": "know it's also a necklace what size are\n",
        "158": "you and assuming the list is well-formed\n",
        "159": "will eventually get this base case and\n",
        "162": "we'll get a nice answer now it may be\n",
        "163": "the case that you're not super\n",
        "164": "comfortable with recursion which case\n",
        "165": "I'm going to run this thing through the\n",
        "167": "visualizer and if you're ready feeling\n",
        "169": "pretty comfortable with this this might\n",
        "171": "be a little boring but let's check it\n",
        "174": "out and see how it goes first of all\n",
        "175": "let's just click last and make sure we\n",
        "178": "get the right answer and so indeed we do\n",
        "180": "we get three which means that print it\n",
        "182": "out correctly so let's run through it\n",
        "184": "step by step\n",
        "186": "after the int list SAR all created we\n",
        "188": "finally get to the point where we're\n",
        "190": "gonna ask for the size so we say 2l hey\n",
        "194": "what size are you so L takes over and\n",
        "199": "now L is this and thinks okay is my rest\n",
        "203": "null no okay so what I should do then is\n",
        "206": "I should ask my buddy right here but\n",
        "210": "it's size s and I'll add one to that so\n",
        "212": "I go over here and this is my middle\n",
        "213": "I go over here and this is my middle\n",
        "215": "list and it says okay yeah now I'm\n",
        "219": "active list so as my rest don't know so\n",
        "222": "I'm gonna return one plus my buddy's\n",
        "226": "size finally we get to this last list\n",
        "228": "it's the active list and that list says\n",
        "230": "yes okay you know what rest is null I'm\n",
        "232": "a tiny list I have no successors there's\n",
        "233": "no rest\n",
        "236": "so my size is just one so I'm gonna tell\n",
        "237": "the world I'm gonna shout it onto the\n",
        "240": "rooftops whoever who was asking my\n",
        "243": "return value is 1 ok great your return\n",
        "246": "value is 1 so if my sub list is size 1\n",
        "248": "then my size must be 2\n",
        "252": "and so I returned to finally we get back\n",
        "254": "to this list and it has reported that\n",
        "258": "its rest is size 2 now if my rest is\n",
        "261": "size 2 and I'm only one additional value\n",
        "263": "I'm gonna add 1 to that and I will\n",
        "265": "finally return 3 and that's\n"
    },
    "Title=[Lists1, Video 9] IntList iterativeSize_Id=GL9Bg3Ej_94": {
        "0": " \n",
        "2": "this method works totally fine there's\n",
        "4": "no reason you can't use the size and in\n",
        "5": "fact I think it's pretty much the best\n",
        "6": "fact I think it's pretty much the best\n",
        "9": "however we should for the sake of just\n",
        "11": "seeing the other pattern look at how\n",
        "12": "this would be done iteratively even\n",
        "14": "though I don't personally like it quite\n",
        "16": "as much so to do that I'm gonna create a\n",
        "19": "new method called iterative size and it\n",
        "23": "is going to turn the size of the list\n",
        "28": "using iteration or I'll just say no\n",
        "31": "regression and as before I recommend\n",
        "32": "that you try and guess what I'm about to\n",
        "34": "do and then see how your answer compares\n",
        "38": "to mine so in this case a common pattern\n",
        "41": "is to create a pointer variable okay so\n",
        "43": "I'm gonna call it P and I'm gonna set it\n",
        "45": "equal to this and I'm also gonna set up\n",
        "49": "a total size variable I'm gonna set that\n",
        "51": "equal to zero and then I'm gonna say as\n",
        "54": "long as P is not equal to null I'm gonna\n",
        "55": "do the following I'm gonna say total\n",
        "58": "size plus equals 1 so that's gonna get\n",
        "60": "one larger and then P is gonna be equal\n",
        "63": "to P dot rest and in that way P is gonna\n",
        "66": "step along until finally total size is\n",
        "71": "returned so let's try running this code\n",
        "75": "this won't test it here it worked and\n",
        "81": " \n",
        "84": "okay so as before we step forward until\n",
        "86": "we get to edit of size and when that\n",
        "87": "method kicks off we're gonna say you\n",
        "90": "know what P is gonna be equal to this\n",
        "92": "and then I'm gonna set the total size\n",
        "95": "equal to zero now as long as P is not\n",
        "97": "null I'm gonna step through and I'm\n",
        "99": "gonna say if the total size is larger\n",
        "102": "and P should step forward can we come\n",
        "104": "back around total size plus equals one\n",
        "108": "these steps more okay finally P is\n",
        "110": "pointing at the last item in the list so\n",
        "111": "pointing at the last item in the list so\n",
        "113": "we could say total size plus 1 P equals\n",
        "115": "P dot rest in which case it will get set\n",
        "117": "equal to null and now we're done and\n",
        "120": "record return total size now you could\n",
        "122": "do something where you start the size\n",
        "124": "off at 1 and you instead check P dot\n",
        "126": "rest is not equal to null either\n",
        "128": "approach is fine this is just the one I\n",
        "130": "happen to affect and that will give us\n",
        "131": "an iterative\n"
    },
    "Title=[Lists2, Video 1A] Introducing the SLList_Id=1Rh3AdTxcik": {
        "0": " \n",
        "1": "we'll kick off the day with some\n",
        "4": "Abrahamic religion so he built an int\n",
        "7": "list last time this data structure it\n",
        "9": "does all the stuff the list can do right\n",
        "10": "you can add stuff to it you can take\n",
        "12": "stuff back out it's the sequence of\n",
        "14": "items on the front and a back all that\n",
        "17": "another specific implementation that we\n",
        "19": "used was we had an integer called first\n",
        "21": "and a pointer to the rest list called\n",
        "23": "int list now this data structured well\n",
        "26": "you may not have realized it was what I\n",
        "28": "call a naked recursive data structure\n",
        "29": "call a naked recursive data structure\n",
        "30": "now we'll get a sense for what that\n",
        "32": "means as we move forward but basically\n",
        "34": "the idea is it seemed perfectly fine at\n",
        "36": "the time but now this lecture the fruit\n",
        "38": "of knowledge is going to reveal to you\n",
        "40": "the grim truth that in fact we were\n",
        "42": "naked all along so in this lecture we're\n",
        "44": "gonna seek clothing we're going to make\n",
        "46": "the enlist more like something that's\n",
        "49": "conventional to Java programs now\n",
        "51": "there's nothing wrong with int lists or\n",
        "53": "nudity or whatever it's just you know it\n",
        "55": "depends on your culture but in the java\n",
        "57": "culture having a naked recursive data\n",
        "58": "structure is strange\n",
        "60": "now another language is like the scheme\n",
        "62": "like languages or in functional\n",
        "64": "languages you know you can do naked\n",
        "65": "recursive data structures all day long\n",
        "67": "but in Java it's just a little awkward\n",
        "70": "to get a little bit of a flavor for why\n",
        "72": "they're strange imagine the novice\n",
        "74": "programmer in Java trying to write code\n",
        "76": "the uses int lists for them to be able\n",
        "79": "to effectively write code they have to\n",
        "81": "be able to know how references work in a\n",
        "83": "pretty deep way the recursion is right\n",
        "85": "there right on the sleeve of our naked\n",
        "88": "data structure a sleeve that's kind of a\n",
        "91": "weird mixed metaphor but yeah okay we'll\n",
        "94": "go with it but so an int list if you\n",
        "96": "have to know how pointers work in order\n",
        "98": "to understand what an ant list is the\n",
        "100": "new thing we're gonna build not the case\n",
        "102": "so how are we gonna do that what's this\n",
        "104": "new data structure gonna look like well\n",
        "106": "the first step is we're going to do a\n",
        "109": "rebranding effort okay so nudity you\n",
        "112": "know that's so 7,000 years ago or\n",
        "113": "however many years ago so we're gonna\n",
        "115": "change this instead of having an int\n",
        "117": "list class we're gonna have an int node\n",
        "119": "class and all that cruft all those\n",
        "120": "methods that we had in here we're gonna\n",
        "126": "strip them away to become clothes\n",
        "128": "I don't know what's going on with my my\n",
        "129": "mixed metaphors\n",
        "131": "hey okay so I'm gonna delete all those\n",
        "134": "methods that's the stripping away and\n",
        "138": "then we're gonna rename this to in node\n",
        "146": "yeah and then I'm gonna take these other\n",
        "147": "variables and then we give them new\n",
        "149": "names instead of first I'm gonna call\n",
        "153": "this item and instead of rest cheese I'm\n",
        "156": "gonna use next and then I'll rename\n",
        "162": "these as well you know okay and I'm only\n",
        "164": "doing this painstaking process because I\n",
        "165": "want to make it clear exactly what we're\n",
        "168": "doing okay so that's the new int node\n",
        "170": "class it's like a knit list we just took\n",
        "173": "all the methods away and it compiles\n",
        "177": "good so now we've done this rebranding\n",
        "179": "effort we observed the int node is now a\n",
        "182": "dumb class it has no methods but we're\n",
        "183": "gonna bring back to functionality do not\n",
        "186": "work now of course you might say here\n",
        "187": "this is not any kind of improvement\n",
        "189": "nothing is better about this and you're\n",
        "191": "right but we'll get better right things\n"
    },
    "Title=[Lists2, Video 2] Access Control and Nested Classes_Id=SlCnrzn_bfM": {
        "0": " \n",
        "2": "using an S lists pretty simple you want\n",
        "4": "to add or remove stuff get stuff\n",
        "7": "whatever you should use the methods that\n",
        "9": "are provided by the class however\n",
        "11": "technically the way Java syntax works\n",
        "14": "you can try and do weird stuff so for\n",
        "16": "example I can reach directly inside of\n",
        "18": "the object I could say hey you know what\n",
        "21": "L I'm not gonna use your method let's\n",
        "24": "say I'm gonna say take first next dot\n",
        "26": "next and set it equal to L dot first\n",
        "29": "next and I can basically do bizarre\n",
        "31": "things to my data structures that are\n",
        "33": "not intended or allowed by the methods\n",
        "35": "provided you might consider pausing and\n",
        "36": "guessing what's gonna happen to this\n",
        "40": "picture so what happens is this right\n",
        "42": "here ends up pointing back at itself and\n",
        "45": "we ruin the list this is not something\n",
        "46": "that an int list or an int list like\n",
        "48": "object should do shouldn't have an\n",
        "49": "infinite loop I guess this would be the\n",
        "51": "list that's like the number 10 and then\n",
        "53": "an infinite number of 15s and that's not\n",
        "55": "something we're really intended to\n",
        "59": "support with the methods provided so we\n",
        "61": "could leave a little note somewhere in\n",
        "63": "the file we could in comments do\n",
        "66": "something like it is incredibly\n",
        "68": "important\n",
        "74": "up here note please do not mess with\n",
        "77": "first all right could do something like\n",
        "79": "that and hope that other programs will\n",
        "82": "look at it but other programmers will\n",
        "84": "probably not and so instead Java\n",
        "86": "provides us with a feature where instead\n",
        "88": "of declaring a member of a class public\n",
        "91": "we can instead say private ok so I'll\n",
        "93": "just go in here and I'll say private\n",
        "96": "here and that does what I want to\n",
        "99": "accomplish now the nice thing is not\n",
        "101": "only is this self documenting but it's\n",
        "104": "also enforced by the compiler if I make\n",
        "106": "this private and then in another class I\n",
        "108": "do something like L dot first but next\n",
        "110": "next he goes out at first but next when\n",
        "112": "I try and compile that file I get back\n",
        "115": "that first half private access so what\n",
        "117": "the private keyword does is it prevents\n",
        "119": "code in other classes from using members\n",
        "122": "that is variables methods or\n",
        "125": "constructors it what private does is it\n",
        "126": "says you cannot use those from outside\n",
        "129": "the S list class now if I had a main\n",
        "130": "method down here\n",
        "132": "s list that did funny things like that\n",
        "134": "it would work fine because it's part of\n",
        "136": "the s list class but anybody outside\n",
        "139": "anybody not editing s list Java could\n",
        "141": "not access first now that's not 100%\n",
        "144": "true there is a funny feature in Java\n",
        "146": "known as reflection which allows you to\n",
        "148": "bypass these modifiers but you rarely\n",
        "152": "rarely use it and what this does is says\n",
        "154": "if you're a casual programmer this is\n",
        "156": "something you shouldn't mess with and\n",
        "158": "the compiler will stop you from doing it\n",
        "161": "so why do we do that what's the point of\n",
        "163": "restricting access other than the\n",
        "166": "implicit picture I presented so far well\n",
        "168": "the basic idea if we wanted to summarize\n",
        "170": "really the heart of private is to hide\n",
        "172": "implementation details from the users of\n",
        "173": "implementation details from the users of\n",
        "174": "your class the user doesn't need to know\n",
        "176": "that we have a first variable they\n",
        "177": "shouldn't be messing with it so by\n",
        "179": "making it private it's a detail that we\n",
        "181": "the programmer of s list need but the\n",
        "184": "user does not so that's something that's\n",
        "185": "less for the user to understand they\n",
        "187": "don't have to know anything about what's\n",
        "188": "going on no to the head and they can\n",
        "190": "think of the s list class it's just a\n",
        "191": "magical black box they don't have to\n",
        "192": "know about the naked recursive data\n",
        "196": "structure inside likewise you're welcome\n",
        "198": "to change any private method or private\n",
        "200": "constructor or private variable that you\n",
        "202": "want right it's your own personal\n",
        "204": "implementation so if it's marked private\n",
        "206": "it's not something else someone's gonna\n",
        "210": "rely on so is an analogy in a car well\n",
        "211": "we have some public parts right we have\n",
        "213": "the pedals in the steering wheel we have\n",
        "215": "the idea that there's an accelerator\n",
        "217": "pedal and a brake pedal one should speed\n",
        "218": "me up one should slow me down the\n",
        "220": "steering wheel when I turn it that way I\n",
        "222": "should be turning that direction and\n",
        "224": "then there's a bunch of private details\n",
        "227": "to the car so you may have a fuel line\n",
        "231": "that is able to carry liquid fuel from\n",
        "232": "one part of the car to the other but\n",
        "234": "some cars don't have that right there is\n",
        "235": "no notion of fuel and just have a\n",
        "236": "no notion of fuel and just have a\n",
        "238": "battery an electric motor so those are\n",
        "239": "private details you can manipulate\n",
        "241": "however you want because the user does\n",
        "242": "not think about them they don't think oh\n",
        "245": "I need to worry about fuel injections\n",
        "248": "not on their menu now despite the term\n",
        "251": "access control people use that to refer\n",
        "253": "to the public private and so forth\n",
        "255": "future in Java it has nothing to do with\n",
        "256": "protection against people trying to do\n",
        "259": "bad stuff with your code\n",
        "260": "because if they have access to your\n",
        "262": "source code they could do whatever they\n",
        "265": "want so that's not what has to do it it\n",
        "267": "is instead simply oops and it is instead\n",
        "269": "simply a weight a signal to other\n",
        "271": "programmers you should not use this and\n",
        "273": "it's a soft restriction by the compiler\n",
        "275": "so you can't mess with it now there's\n",
        "277": "actually another side point I should\n",
        "279": "mention here that if you make something\n",
        "282": "public in Java the expectation is that\n",
        "285": "you will never ever remove it and what's\n",
        "286": "the same way that if you sit down on a\n",
        "288": "car that has no steering wheel you're\n",
        "290": "not gonna want to drive it I mean yes it\n",
        "291": "is technically possible there would be\n",
        "293": "some joystick that's just not what\n",
        "297": "people expect so in the case of Java\n",
        "299": "classes whenever you provide a public\n",
        "301": "method you're basically announcing to\n",
        "303": "the world that they will have access to\n",
        "305": "that method forever okay\n",
        "307": "so private of stuff you can mess with\n",
        "308": "that the user never needs to know about\n",
        "310": "public is something that should stay\n",
        "312": "true forever otherwise we break\n",
        "314": "backwards compatibility with other code\n",
        "317": "so that's one thing we could do is make\n",
        "321": "pieces of our class private so another\n",
        "323": "little argumentation we can do is\n",
        "326": "nesting a class so we think about this\n",
        "329": "in note class I accidentally closed the\n",
        "333": "possibly yet here it is so here's int\n",
        "336": "node so it is possible to take this away\n",
        "338": "and say end node really should not be\n",
        "341": "its own class like file it should be\n",
        "343": "that's on Java file that's really a\n",
        "346": "feature of an S list so in Java it's\n",
        "347": "pretty natural that you can just take a\n",
        "349": "class and move it inside of another\n",
        "352": "class declaration and if I could pile\n",
        "354": "this it'll work just fine\n",
        "356": "so you can move classes inside of other\n",
        "358": "classes this will be the boss and this\n",
        "360": "is now subordinate class so in Java the\n",
        "365": "term people use is nested class so this\n",
        "367": "is a nested class definition I made it\n",
        "368": "public but you can't actually also make\n",
        "372": "it private it is typical but not always\n",
        "374": "that what you'll do is put the nested\n",
        "376": "class definitions up top and everything\n",
        "379": "else below but you can do whatever you\n",
        "381": "want so typically I'll take this and\n",
        "383": "move it down here but it just depends on\n",
        "385": "the convention of the environment you're\n",
        "386": "working on so if you work for a company\n",
        "388": "that always puts the nested classes up\n",
        "390": "front do that\n",
        "392": "for a project team where you always put\n",
        "394": "at the end do that inset doesn't matter\n",
        "398": "what order um so why what's good about a\n",
        "400": "nested class will be useful whenever a\n",
        "401": "class here declaring doesn't stand on a\n",
        "403": "note when it on its own whenever it's\n",
        "405": "obvious that an int note is really just\n",
        "407": "something used by an S list and only s\n",
        "409": "missed right it's like its its\n",
        "413": "subordinate to the S list class in some\n",
        "415": "way now occasionally you will actually\n",
        "418": "want an external program to be able to\n",
        "421": "make instances of int nodes or directly\n",
        "422": "make instances of int nodes or directly\n",
        "423": "manipulate them in some way so I could\n",
        "426": "for example this would be very strange\n",
        "427": "behavior but I couldn't do something\n",
        "432": "like public int note get front node in\n",
        "433": "which case I really need the int node\n",
        "437": "class to be public so that someone is\n",
        "439": "actually able to make int nodes or have\n",
        "442": "references to them but if in this but in\n",
        "444": "a class like this where the user never\n",
        "446": "needs to even moba in node we can make\n",
        "449": "this private so in this way what this\n",
        "451": "says is that in nodes can never be made\n",
        "454": "by an external user so if we have s list\n",
        "456": "user you could not make an end node but\n",
        "457": "we're kind of splitting hairs this is\n",
        "459": "probably getting a little boring for a\n",
        "461": "video but the basic rule of thumb is if\n",
        "463": "nobody else ever needs an int node\n",
        "467": "reference make it frightened okay now to\n",
        "469": "go one level deeper and I don't want to\n",
        "472": "get too much into my new show of Java\n",
        "475": "but if it is the case that the nested\n",
        "479": "class so I said make this private if no\n",
        "482": "external class uses it nodes okay so\n",
        "483": "this is yet another thing like that\n",
        "486": "if the int node class never uses any\n",
        "489": "detail of the S list class of the nested\n",
        "491": "class never needs to look out you can\n",
        "493": "add the word static here now that\n",
        "495": "probably seems like this word static\n",
        "499": "pops up on a lot of strange places I'm\n",
        "501": "not gonna go into right now why they\n",
        "502": "decided to use the word static but you\n",
        "504": "could imagine this set this keyword\n",
        "507": "could be never looks outwards okay it's\n",
        "510": "not it's static and what that means is\n",
        "514": "that the endowed class like I could not\n",
        "516": "write a method here that uses first that\n",
        "518": "would not be allowed okay so since this\n",
        "520": "int node class if you look at it right\n",
        "523": "as its own item its own next constructor\n",
        "525": "but never does it try and use any of s\n",
        "527": "lists stuff none of its methods none of\n",
        "528": "its constructors none of its variables\n",
        "531": "so we can make it static now what good\n",
        "534": "is that well it gives you a tiny little\n",
        "537": "bit of memory savings for each node and\n",
        "538": "you can look in the book for a little\n",
        "540": "more details on that but the basic idea\n",
        "542": "is simply that a nested class which is\n",
        "544": "static cannot access any of the outer\n",
        "547": "classes stuff okay now I'm sure that I\n",
        "548": "pushed you to the limit of the amount of\n",
        "550": "syntax you can fit in your brain without\n",
        "552": "any practice so don't fret this too much\n",
        "553": "this is something you'll get a chance to\n",
        "557": "explore a little bit in project one and\n",
        "560": "at the risk of making this lecture even\n",
        "562": "a little more boring and a little more\n",
        "565": "minut I will make the very minor note\n",
        "567": "that whenever you make a nested class\n",
        "570": "private these access modifiers no longer\n",
        "572": "really matter but not an important job\n",
        "575": "of detail so those are a couple more\n",
        "577": "improvements we could basically make to\n",
        "580": "our s list class we can make this class\n",
        "583": "a private static nested class and we can\n"
    },
    "Title=[Lists2, Video 3] addLast and size_Id=Gxq_LSsOPNc": {
        "0": " \n",
        "2": "so far our SLS class has these two\n",
        "5": "methods we made a sequence of these for\n",
        "7": "non-obvious improvements and we want our\n",
        "9": "s list to gain even more power and more\n",
        "11": "capabilities and go off and grow up and\n",
        "13": "do whatever it is that s let's do in\n",
        "15": "adulthood and to get there what we're\n",
        "17": "gonna do is add two additional methods\n",
        "20": "add last and sighs partially because we\n",
        "21": "want to get a little more practice with\n",
        "23": "just building data structures but also\n",
        "25": "because I want some motivation for the\n",
        "27": "other two non obvious improvements we're\n",
        "30": "gonna do so what I'm gonna recommend you\n",
        "33": "do is try writing at last or sighs on\n",
        "36": "your own maybe on paper and then watch\n",
        "39": "me do it here so I'm gonna start with ad\n",
        "42": "last on so I'm gonna call this method\n",
        "49": "it's gonna be public void as last int X\n",
        "51": "and in keeping with normal Java\n",
        "54": "convention I will put it above main and\n",
        "59": "this adds an item to the end of the list\n",
        "62": "so what might this look like well I'm\n",
        "64": "gonna write it iteratively you could\n",
        "65": "also do it recursively I'm gonna do it\n",
        "67": "iteratively and it's gonna look a lot\n",
        "69": "like what we did in the previous lecture\n",
        "72": "so I'm gonna say int list P equals first\n",
        "76": "and then I'm gonna say while P dot next\n",
        "81": "is not equal to null P equals P next and\n",
        "83": "the goal of this little chunk of code\n",
        "86": "the goal of this little chunk of code is\n",
        "89": "to scan P to the end of the list so\n",
        "95": "Mookie until it reaches the end list and\n",
        "97": "once you've done that you can simply\n",
        "102": "chase you can just simply say px equals\n",
        "108": "new int no X no okay so that's add last\n",
        "113": "we can also do a lot at last\n",
        "116": "say 20 and if we run this let's see what\n",
        "128": "happens okay any errors Oh ant nodes a\n",
        "132": "node that's we run this and it runs and\n",
        "134": "the first item is 5 now of course\n",
        "136": "running this code it is not clear that\n",
        "138": "it worked properly and in fact if you\n",
        "140": "look at our list of methods there's no\n",
        "142": "way that we can see what the last item\n",
        "144": "even is so we could add additional\n",
        "146": "methods but instead what I'm gonna do is\n",
        "149": "I am going to use our Java visualizer\n",
        "154": "and see what I get\n",
        "156": "so after this code finishes running we\n",
        "159": "ended up getting a layout that looks\n",
        "161": "something like this\n",
        "163": "the L variable points at our middleman\n",
        "166": "which has a first variable that then\n",
        "167": "points at our naked recursive data\n",
        "170": "structure and I'll make one little note\n",
        "172": "if you try running this code on your own\n",
        "175": "and you end up getting a visualization\n",
        "178": "that looks something like this ok nested\n",
        "181": "structure it's just another visual\n",
        "183": "representation of the same thing if you\n",
        "184": "don't want that to happen make sure that\n",
        "185": "don't want that to happen make sure that\n",
        "186": "you click prefer non nesting and\n",
        "188": "vertical layouts so just a quick note if\n",
        "190": "you want box and pointer diagrams you've\n",
        "194": "got to click that box for our lists so\n",
        "198": "that's get back so what about size what\n",
        "201": "might size look like now this one if you\n",
        "203": "didn't do add last if you just sat there\n",
        "206": "and watched me do it that's okay I won't\n",
        "208": "be too upset but this one I want you to\n",
        "209": "really try I want you to really think\n",
        "212": "about it look at the instance variables\n",
        "214": "here and think what should size look\n",
        "218": "like try writing it up that's my way of\n",
        "221": "trying to stare you into trying it\n",
        "223": "alright\n",
        "225": "so if you try it which hopefully you did\n",
        "227": "you'll find that trying to figure out\n",
        "230": "what the base case is is tricky you also\n",
        "232": "find that the recursive case is just\n",
        "235": "equally strange it's like if I want to\n",
        "239": "do the recursive case like we did in the\n",
        "241": "previous lecture it would seem that you\n",
        "243": "want to do something like return first\n",
        "248": "dot next nose like some kind of\n",
        "249": "recursive case and you get a little\n",
        "250": "recursive case and you get a little\n",
        "254": "stuck so the issue here is that the size\n",
        "257": "method when we're writing it for s list\n",
        "259": "the essent list data structure itself is\n",
        "261": "not recursive it does not have s list\n",
        "264": "pointers so the common strategy that\n",
        "266": "will adopt and then you'll you'll see\n",
        "268": "this time and time again as you write\n",
        "269": "recursive data structures later in this\n",
        "272": "course you will often create a private\n",
        "275": "static helper method in this case also\n",
        "277": "known as size is gonna take a particular\n",
        "280": "node and this I'm gonna give a very\n",
        "283": "clear comment here return the size of\n",
        "290": "the list that starts at int node P so\n",
        "294": "here now this is a naked recursive data\n",
        "296": "structure this speaks the the secret\n",
        "297": "language of the gods\n",
        "300": "this data structure it's just doing the\n",
        "301": "usual stuff we're used to with these\n",
        "303": "data structures let me go back to the\n",
        "306": "picture and compare so when working with\n",
        "309": "s lists our pointers point to the\n",
        "311": "middleman we are now going to have a\n",
        "313": "method that's thinking about data\n",
        "314": "structures in these terms in the naked\n",
        "316": "recursive way we're we're gonna pointers\n",
        "319": "to any place in the list okay so now\n",
        "321": "how's that gonna work well now it's\n",
        "323": "gonna be a lot like lecture 3 I'm gonna\n",
        "325": "do something like this if P dot next\n",
        "328": "equals null then I can just return 1\n",
        "332": "otherwise you want to return 1 plus the\n",
        "337": "size of P next so if the size method is\n",
        "339": "being called on this note for example\n",
        "341": "it'll just return 1 but if it's called\n",
        "343": "on this one will add 1 plus the size of\n",
        "347": "this list over here okay so that's what\n",
        "350": "our private static method looks like now\n",
        "351": "this is a very common pattern when\n",
        "353": "working with recursive data structures\n",
        "355": "that you'll have a public method\n",
        "357": "that speaks the language of mortals and\n",
        "358": "a private matter that speaks the\n",
        "361": "language of the gods so the public\n",
        "362": "language art say that the middleman the\n",
        "366": "public method needs to use this method\n",
        "367": "right here and in this case we'll just I\n",
        "371": "say the size of first that little face I\n",
        "372": "just made was me trying to get you to\n",
        "378": "think all right and so let's see if the\n",
        "381": "size method seems to work here okay\n",
        "383": "indeed it does and if you want to try it\n",
        "386": "out you can take this code that I've\n",
        "388": "just written put it through the\n",
        "389": "visualizer and make sure it makes sense\n",
        "392": "but hopefully the idea is clear so to\n",
        "396": "summarize this notion those I'm sorry\n",
        "398": "to summarize at last iteratively not a\n",
        "399": "lot of surprises you know it's kind of\n",
        "401": "like what we're used to but first sighs\n",
        "403": "doing it recursively we had to adopt a\n",
        "405": "new programming pattern where we created\n",
        "407": "a private static method that spoke the\n"
    },
    "Title=[Lists2, Video 4] Caching_Id=ebUw8fhhpKc": {
        "0": " \n",
        "2": "so our s list class now has these new\n",
        "5": "fancy method size and add last but\n",
        "6": "there's some issues both of them are\n",
        "8": "pretty slow and we're gonna focus on the\n",
        "11": "size method in this particular lecture\n",
        "12": "and discuss how to make it more\n",
        "18": "efficient so how slow is size well to\n",
        "19": "maybe bring this to the form and make\n",
        "21": "you think about it in the following way\n",
        "24": "let's suppose size takes two seconds to\n",
        "26": "process a list of size 1,000 it is size\n",
        "28": "which steps to the list one item at a\n",
        "31": "time until it finally reaches the end is\n",
        "32": "gonna take a thousand seconds\n",
        "34": "now you don't really know exactly how\n",
        "36": "computer works but just using your\n",
        "38": "intuition how long do you think it will\n",
        "39": "take on a list of size and milli\n",
        "44": "it so ponder that for a moment so I say\n",
        "46": "the answer is two thousand seconds and\n",
        "48": "if I have a list that's 1,000 times as\n",
        "50": "large then whatever the computer is\n",
        "51": "doing inside and is to step through the\n",
        "54": "list it's gonna have to do that 1,000\n",
        "56": "times as many times so it should take\n",
        "58": "1000 times as many seconds first total\n",
        "61": "of two thousand so the more interesting\n",
        "63": "question is how do we fix it and so I'm\n",
        "64": "gonna leave this as a puzzle for you\n",
        "66": "that I'd really like you to ponder to\n",
        "67": "figure out a way to make size really\n",
        "71": "fast no matter how big the list is I\n",
        "72": "don't care there's a billion items I\n",
        "74": "want it quick so think about how you\n",
        "76": "might do that and I'll wait here\n",
        "85": "patiently okay so what I propose is that\n",
        "88": "we instead of calculating the size on\n",
        "91": "the fly every time size is called which\n",
        "92": "could take a long time\n",
        "94": "we're gonna set aside some information\n",
        "96": "about the size up front so I'm gonna\n",
        "97": "have private int size and that's gonna\n",
        "98": "have private int size and that's gonna\n",
        "99": "represent the current amount of\n",
        "101": "information in the data structure so\n",
        "104": "what's the size of a s list of one item\n",
        "106": "one what should I do whenever I add an\n",
        "108": "item to the which change about the size\n",
        "112": "size plus equals one what if I get first\n",
        "117": "to the size change nope add last indeed\n",
        "119": "we will add one to the science\n",
        "123": "doesn't matter where so that is all we\n",
        "127": "need for the size to be updated and so\n",
        "129": "now we come to the size method\n",
        "131": "well now rather than calculate I'm gonna\n",
        "133": "delete all this beautiful code we just\n",
        "135": "spent so much effort discussing this\n",
        "137": "business code that speaks the secret\n",
        "139": "language of the Gods is gonna be buried\n",
        "140": "beneath the earth and if then we're\n",
        "142": "gonna return sighs it's pretty typical\n",
        "144": "right like when you write a book of\n",
        "146": "arcane evil from ancient gods or\n",
        "148": "whatever usually once you're done with\n",
        "150": "it you discard it to be discovered later\n",
        "152": "at some day to destroy civilization so\n",
        "153": "we'll just say that's what we're doing\n",
        "156": "but we'll find that in later parts of\n",
        "158": "this class and in the projects you will\n",
        "160": "actually be using that pattern of having\n",
        "162": "the secret language of the gods but here\n",
        "163": "it's actually easier for us to just\n",
        "166": "compute the size upfront and return it\n",
        "169": "whenever we're ready for it so now when\n",
        "171": "we print out the size we still get four\n",
        "173": "but it doesn't matter how big the list\n",
        "178": "is this will be very fast we did it okay\n",
        "180": "so did it brief basically what we just\n",
        "183": "did is we maintained a special size\n",
        "185": "variable that caches the size of the\n",
        "187": "list so anytime when the size the list\n",
        "190": "changes changes we update it and caching\n",
        "191": "is just a fancy term for putting aside\n",
        "193": "some data to speed up retrieval at some\n",
        "196": "later date it is redundant but it also\n",
        "199": "speeds us up now it doesn't come for\n",
        "200": "free there's this old saying that there\n",
        "202": "ain't no such thing as a free lunch we\n",
        "204": "did have to do some work what we changed\n",
        "206": "is that every time the size of the list\n",
        "208": "is modified we have to tweak the size a\n",
        "210": "little bit but it doesn't really have a\n",
        "212": "meaningful an impact on our performance\n",
        "214": "and for any practical circumstance that\n",
        "216": "I can imagine spreading that work of\n",
        "218": "calculating the size over each ad called\n",
        "221": "to me is a net win in almost any case I\n",
        "222": "can even imagine\n",
        "224": "let's look at a visual that compares our\n",
        "226": "naked recursive data structure with our\n",
        "229": "s list in the context of caching so\n",
        "230": "before we said s lists have this nice\n",
        "232": "advantage that whenever you want to\n",
        "235": "manipulate the data or see the data you\n",
        "237": "have to go through this middleman this\n",
        "239": "middleman provides you with very easy to\n",
        "240": "understand methods that are guaranteed\n",
        "242": "safe and avoid you from shooting\n",
        "245": "yourself in the foot in various ways now\n",
        "246": "another nice advantage of the\n",
        "248": "guest list structure to have this\n",
        "250": "middleman is that it serves as a natural\n",
        "252": "place to store meta information about\n",
        "255": "the entire list so for example we can\n",
        "257": "store the size of the list here it is\n",
        "259": "technically redundant you can compute\n",
        "261": "the size without this variable but it\n",
        "263": "speeds up the computation of size\n",
        "264": "because you just need to return this\n",
        "266": "value you could also store other things\n",
        "267": "here right like you could still like the\n",
        "269": "maximum or the minimum or the largest\n",
        "271": "value that was ever put in there and\n",
        "274": "those would also work by contrast with a\n",
        "275": "naked recursive list it's not so easy\n",
        "278": "you could in principle do something like\n",
        "280": "cache the size inside of each node but\n",
        "282": "even then that means that anytime you\n",
        "284": "change something in the list you have to\n",
        "286": "update update a bunch of size variables\n",
        "289": "you could also for example somehow if\n",
        "291": "you had a language it allows it bind a\n",
        "292": "variable up here that tracks the size\n",
        "294": "and the whole thing but in Java there's\n",
        "296": "no natural facility to do that so in\n",
        "298": "effect what you'll end up doing is\n",
        "299": "having multiple variables that you have\n",
        "301": "to keep straight here this\n",
        "303": "object-oriented programming approach\n",
        "306": "means that we'd let the object control\n",
        "309": "everything we tell the object your job\n",
        "311": "is do not only do all of these tasks but\n",
        "314": "also track the size for me and in that\n",
        "316": "way it's just a natural way to organize\n",
        "318": "our code so again the int list can do\n",
        "320": "all the stuff that an S list can do but\n",
        "322": "an S list is going to be a more natural\n"
    },
    "Title=[Lists3, Video 1] Summary of SLLists So Far_Id=P1grp1MDZQo": {
        "0": " \n",
        "2": "two lectures ago we built the ant list\n",
        "5": "it was a really beautiful recursive data\n",
        "7": "structure very pure and it allows us to\n",
        "10": "store any amount of information so long\n",
        "12": "as we're willing to keep adding notes at\n",
        "13": "the end and our computer doesn't run out\n",
        "16": "of memory so while they're powerful they\n",
        "18": "have the issue that they're a little\n",
        "20": "awkward to work with if you want to add\n",
        "21": "to the beginning or the end you have to\n",
        "23": "do direct pointer manipulation and so\n",
        "25": "what we showed in the previous lecture\n",
        "28": "was how to add a layer of bureaucracy\n",
        "30": "and produce the S list where now we have\n",
        "33": "a middleman that we go to to manipulate\n",
        "35": "the list so for example suppose I want\n",
        "36": "to add to the front of the list I go to\n",
        "39": "the middleman and I say hey please add\n",
        "41": "first and then maybe what she'll do is\n",
        "44": "well whatever magic stuff the S list\n",
        "46": "does we don't need to care about it as\n",
        "49": "the user of an S list we simply call the\n",
        "51": "methods of the S list class so we\n",
        "53": "enumerated a number of improvements and\n",
        "55": "now that brings us to this moment where\n",
        "57": "we're gonna improve the S list yet more\n",
        "59": "so there's some obvious limitations of\n",
        "60": "the S list like the version we have\n",
        "62": "right now you cannot add to the middle\n",
        "64": "and we could add those features but\n",
        "66": "there's actually a more fundamental\n",
        "68": "issue that I'd like to tackle and that\n",
        "71": "is the fact that adding to the back is\n",
        "74": "slow so if we think about how we add to\n",
        "76": "the end of an S list inside under the\n",
        "79": "hood what our s list does is it iterates\n",
        "82": "through all of the items and then\n",
        "85": "finally sets the next pointer now that\n",
        "87": "is gonna be slow because we have to\n",
        "88": "iterate through this list much like we\n",
        "91": "saw with the size method before so you\n",
        "93": "might think inspired by what we did with\n",
        "96": "the size method about ways that we could\n",
        "99": "improve our s list so that add last is\n",
        "101": "also fast so ponder that for a moment\n",
        "105": "maybe pause okay\n",
        "107": "so perhaps you've thought about it and\n",
        "109": "you thought how do we make size fast\n",
        "113": "well we cached the size so maybe I could\n",
        "115": "just cache the last pointer so I would\n",
        "117": "have the size a sentinel node here and\n",
        "119": "the last pointer pointing at the last\n",
        "121": "node so let's think about all the things\n",
        "122": "you might want to do with the list you\n",
        "124": "want to add to it gets\n",
        "126": "from it and remove it now we're gonna\n",
        "129": "think big we're gonna ponder if we have\n",
        "131": "a last planer it's been enough is that\n",
        "132": "enough so that all of these operations\n",
        "135": "will be fast and if not which one will\n",
        "137": "be slow so I'm not going to spoil it in\n",
        "138": "this video but I'd like you to ponder\n"
    },
    "Title=[Lists3, Video 3] Doubly Linked Lists_Id=BspFdzVvYe8": {
        "0": " \n",
        "2": "the big AHA is to realize that if every\n",
        "4": "node simply had a pointer to whoever was\n",
        "6": "behind it we never need to scan forward\n",
        "8": "from the front to find our predecessor\n",
        "11": "so in other words if 50 had a pointer\n",
        "13": "back to the node containing 9 and the\n",
        "16": "node with 9 in it had a pointer back at\n",
        "17": "3 and this note had a pointer back at\n",
        "20": "the sentinel then if we wanted to find\n",
        "21": "any of our previous we just follow that\n",
        "24": "pointer so we ended up with this\n",
        "27": "topology here where each node has not\n",
        "29": "just an item and a next planner but also\n",
        "31": "a previous pointer and then that way\n",
        "34": "this list structure is often called a\n",
        "36": "doubly linked list each node has two\n",
        "38": "links and that's as opposed to what we\n",
        "40": "had before which was a singly linked or\n",
        "42": "only forward-pointing list and so a\n",
        "44": "singly linked list by the way is what s\n",
        "48": "lists stood for now you know so this\n",
        "50": "approach is wonderful and that once\n",
        "52": "we've added these two links our add\n",
        "54": "methods fast our get methods fast in our\n",
        "56": "remove method from either the ends is\n",
        "59": "fast so any operations involving the\n",
        "61": "ends of the list will take constant time\n",
        "63": "though operations in the middle will be\n",
        "65": "slower and we'll talk about alternative\n",
        "66": "approaches for dealing with those later\n",
        "69": "but as far as linked lists go this is\n",
        "71": "the way that linked lists are typically\n",
        "77": "done now this approach while it works it\n",
        "81": "has this one limitation which you will\n",
        "84": "only really feel and come to understand\n",
        "86": "if you try and code this thing up the\n",
        "89": "there is a special case which is that\n",
        "91": "the last pointer sometimes points at the\n",
        "93": "sentinel and it sometimes points that\n",
        "97": "what we'll call a real note and so while\n",
        "99": "that might not seem such a big deal here\n",
        "101": "once you try and code it up you'll see\n",
        "102": "that for each of your methods you'll\n",
        "104": "start running into these annoying if\n",
        "105": "statements we have to check and see if\n",
        "107": "it's actually the sentinel so we want to\n",
        "110": "avoid that so what we can do is try and\n",
        "113": "be a little more pure we're gonna look\n",
        "115": "to the heavens for inspiration and try\n",
        "117": "and think how can I make this just more\n",
        "121": "perfect so the most natural way to\n",
        "124": "perfect our approach is to add a second\n",
        "127": "Sentinel we could say instead of having\n",
        "129": "a last pointer that points the last item\n",
        "130": "we're gonna have a sentinel on both ends\n",
        "132": "because now that we have front and back\n",
        "135": "pointers are sorry next and previous we\n",
        "137": "can have a sensible it's always of the\n",
        "138": "front and one that's always at the back\n",
        "141": "so that the empty list has a pointer or\n",
        "144": "has a sentinel here at the front and a\n",
        "146": "scintilla here the back and then as we\n",
        "148": "add items to our list we end up just\n",
        "150": "sliding them in between the two\n",
        "153": "sentinels so this approach is nicer\n",
        "155": "it'll be much easier to code up than the\n",
        "157": "naive approach and it'll be equally\n",
        "158": "powerful and this is one approach you\n",
        "162": "can use for project one now\n",
        "164": "while this approach is nice and easy to\n",
        "166": "cut up I think there's one better\n",
        "168": "approach this is the approach that if he\n",
        "169": "went up to the you know the mountain\n",
        "171": "where the monk is like hanging out in\n",
        "173": "the mountaintop temple and you said what\n",
        "175": "is truly the best doubly-linked list and\n",
        "177": "you had yeah I was long climb and you\n",
        "179": "had to it was just excruciating to get\n",
        "181": "up there and you really are asking for\n",
        "183": "answers this is what you would get okay\n",
        "186": "in this approach instead of having a\n",
        "188": "sentinel in either end you're gonna have\n",
        "190": "one Sentinel that is both the front and\n",
        "193": "the back well how can that be\n",
        "195": "you might ask you're you're you know the\n",
        "199": "monk atop the hill and he might say well\n",
        "202": "whenever you have an empty list the\n",
        "204": "previous is the sentinel itself and the\n",
        "206": "next is the Sinhala itself and at that\n",
        "208": "point you're getting irritated of the\n",
        "210": "monk and you just want answers and you\n",
        "211": "have to reflect a little that's part of\n",
        "214": "the the glory of some of the most\n",
        "215": "beautiful ideas they take a lot of deep\n",
        "218": "thought to really get but in this case\n",
        "220": "as you add items to the sentence to the\n",
        "223": "frontal list you'll find that there's a\n",
        "225": "very natural place to add them so after\n",
        "227": "we add the numbers 3 and 9 for example\n",
        "230": "we would say the Sentinel its next is 3\n",
        "232": "that's the first thing we added and then\n",
        "234": "it's next is 9 and then it's next is the\n",
        "236": "Sentinel again so in effect it's kind of\n",
        "238": "like the fact you know the worlds round\n",
        "240": "if I keep going in one direction around\n",
        "241": "the world that come back to where I\n",
        "244": "start and and that's this approach and\n",
        "248": "so for example if I do Sentinel dot next\n",
        "251": "dot next dot next I'm back to where I\n",
        "253": "started so this arrow and purple is\n",
        "255": "Sentinel next next next which is just\n",
        "257": "the Sentinel and so while this idea may\n",
        "261": "seem more confusing and a little silly I\n",
        "263": "encourage you when you do project one do\n",
        "265": "this right understand the wisdom of\n",
        "268": "the monk atop the hill and I'm like NIT\n",
        "272": "enlightenment will be yours so that's it\n",
        "274": "as far as our doubly-linked lists go in\n",
        "277": "terms of topological improvements and so\n",
        "279": "just to summarize what we did there\n",
        "281": "improvement 7 was adding a dot last\n",
        "284": "pointer to the last item analyst and doc\n",
        "286": "previous says everything should look\n",
        "288": "behind it but the problem there is that\n",
        "289": "for each of our methods wound up with\n",
        "293": "special cases owing to the fact that to\n",
        "296": "this situation here where we this this\n",
        "297": "special case we described before\n",
        "300": "so to avoid those special cases in each\n",
        "302": "of our methods we can either have two\n",
        "304": "sentinels or we can make our list\n",
        "306": "circular and this is the approach I\n",
        "307": "recommend for project one because it's\n",
        "308": "cool\n",
        "310": "so to summarize all the things we've\n",
        "313": "done in the previous lecture we made an\n",
        "315": "S list improvements one through six in\n",
        "317": "this lecture we've made the D list seven\n",
        "318": "and eight and so there's many more\n",
        "320": "things before we would be up to par with\n",
        "323": "the built in linked list that's in Java\n",
        "325": "for example adding exceptions and\n",
        "327": "various other features and we'll discuss\n",
        "329": "those over the coming weeks but that's\n",
        "330": "the core of what makes a doubly-linked\n",
        "333": "list good so there's a little bit more\n",
        "335": "we're gonna say now about making our\n"
    },
    "Title=[Lists3, Video 4] Generic Lists_Id=Xt4dKEUokz4": {
        "0": " \n",
        "2": "before we move on from linked lists all\n",
        "4": "together let's discuss an obvious\n",
        "6": "limitation that makes our list not so\n",
        "7": "useful in the real world\n",
        "9": "what is that limitation well let's\n",
        "12": "consider here an S list using class\n",
        "14": "it creates an S list with the number 5\n",
        "16": "and adds to the number 10 it'll all work\n",
        "18": "beautifully and wonderfully but suppose\n",
        "20": "we wanted to create not a list of\n",
        "22": "integers put a list of say strings so I\n",
        "25": "might try and start off with bone and\n",
        "30": "add bugs and if I try running this then\n",
        "32": "I ran into an issue string cannot be\n",
        "34": "converted to end and so the fundamental\n",
        "37": "issue we run into is that an S list has\n",
        "40": "int nodes and Internode's have int items\n",
        "43": "and therefore if we try to create an S\n",
        "46": "list using a string or how we try to add\n",
        "48": "to such an S list not using a string we\n",
        "50": "will get an error you cannot do this you\n",
        "52": "cannot take strings and convert them\n",
        "54": "into integers that's the ultimate self\n",
        "56": "so how do we fix that\n",
        "58": "well the lamest possible way we could\n",
        "60": "fix it is we could make an entirely new\n",
        "63": "s list class like string s list and then\n",
        "64": "do a find and replace for int everywhere\n",
        "65": "and oh boy\n",
        "66": "and oh boy\n",
        "67": "and that would be a terrible idea\n",
        "70": "obviously so the current approach in the\n",
        "74": "in modern java is to make s list a\n",
        "76": "parameterised well we can we can\n",
        "78": "parameterize the type that s list will\n",
        "82": "take what does that possibly mean ok so\n",
        "83": "what I'm gonna do is I'm gonna add new\n",
        "87": "little angled braces here right after\n",
        "89": "the name s list and here I'm gonna pick\n",
        "91": "any old string something arbitrary like\n",
        "95": "I'm not lockness and that's just going\n",
        "97": "to act as a placeholder for a type that\n",
        "99": "is not decided at the time s list was\n",
        "102": "created so instead of an int item we're\n",
        "104": "gonna have a lockness instead of\n",
        "105": "creating an int node we're gonna say\n",
        "107": "public int node and we need to provide\n",
        "111": "all honest int nodes probably not a\n",
        "113": "great name since it's no longer int node\n",
        "114": "so let's do a find and replace on that\n",
        "118": "to int node we'll just call this thing\n",
        "120": "stuff node whatever all right\n",
        "123": "just to emphasize it still has stuff in\n",
        "127": "it and then I am going to keep working\n",
        "129": "way through so we create an s list now\n",
        "132": "I'll take lost missus instead of intz we\n",
        "135": "add look mrs. we return look mrs. we add\n",
        "138": "log missus and at that point we're all\n",
        "141": "done so the important part the main\n",
        "144": "thing I changed other than just the name\n",
        "147": "of int note is that added lostness here\n",
        "150": "this will compile and now an S list I'm\n",
        "151": "in won't run because there's no main\n",
        "153": "method nobody compiles and it should\n",
        "156": "work for how do we actually use one of\n",
        "158": "these things well now if we wanted to\n",
        "161": "make an S list we're going to now need\n",
        "165": "to specify a type when we create a s\n",
        "166": "list and we'll do with the angled braces\n",
        "169": "and so to do that I'll say I want an S\n",
        "175": "list of strings so we go we say I would\n",
        "176": "like to declare an S list of string\n",
        "179": "variable and instantiate an S list of\n",
        "181": "strings and now when we try running this\n",
        "183": "everything should work fine okay so they\n",
        "184": "are when it worked\n",
        "187": "hooray and so what's going on here is\n",
        "190": "that whenever we instantiate an S list\n",
        "193": "this string right here\n",
        "195": "this string right here will get\n",
        "197": "substituted everywhere in for lockness\n",
        "200": "so it's basically a type variable or a\n",
        "202": "type parameter and so we can give it a\n",
        "204": "little confusing and we're not gonna\n",
        "206": "talk a lot about it right now I just\n",
        "208": "want you to know the basics now an even\n",
        "210": "more modern Java it is no longer\n",
        "213": "necessary to specify the type on the\n",
        "215": "instantiation side so I'm going to\n",
        "218": "delete that and this too will work okay\n",
        "221": "so just summarize there and later in the\n",
        "223": "course we're gonna dig a lot more deeply\n",
        "226": "into this issue but the to summarize\n",
        "229": "what we've got here is we can defer type\n",
        "231": "selection until later until we've\n",
        "233": "declared a variable or until we have\n",
        "235": "instantiated a variable and to do that\n",
        "238": "we pick any arbitrary string and in the\n",
        "239": "class that we're creating we just put it\n",
        "241": "right after the name and then we want to\n",
        "243": "use it we make sure that we specify at\n",
        "245": "the type we want and we're declaring and\n",
        "249": "optionally when we're instantiating so\n",
        "251": "again we'll go into this and so much\n",
        "252": "more detail there's a lot of little\n",
        "254": "details it can be confusing but these\n",
        "256": "are the rules of thumb you'll need for\n",
        "257": "project one where you're gonna build a\n",
        "260": "list so in the Java file where you\n",
        "262": "implement your data structure this side\n",
        "264": "we are building the actual thing you'll\n",
        "266": "specify our generic type only once at\n",
        "267": "the very top of the file right there\n",
        "269": "bleep bored blurp right and it's\n",
        "271": "specified inside of these angle brick\n",
        "274": "braces you can use it elsewhere but\n",
        "276": "you'll only specify at once and then in\n",
        "278": "Java files that you use your data\n",
        "280": "structure you'll specify the desired\n",
        "283": "type just once it'll do it whenever you\n",
        "285": "declare the variable and then use the\n",
        "287": "empty diamond operator during\n",
        "288": "instantiation I mean you can't also\n",
        "289": "write out double so you could\n",
        "291": "technically use it twice but this will\n",
        "292": "make your code look more like what\n",
        "294": "you're likely to see in the real world\n",
        "297": "and when you're actually declaring or\n",
        "298": "instantiating your data structure\n",
        "299": "whenever you're putting something inside\n",
        "301": "of these braces you want to make sure\n",
        "304": "that you use capital I integer capital D\n",
        "306": "double and so forth so use the reference\n",
        "308": "type corresponding to each of the\n",
        "311": "primitive types so that will get you as\n",
        "314": "much as you need on project one and\n",
        "315": "there'll be a couple little tiny gotchas\n",
        "317": "that will be mentioned in the project\n",
        "320": "one FAQ and we'll get into generics more\n"
    },
    "Title=[Lists3, Video 5] Array Overview_Id=0EXjvucFV6I": {
        "0": " \n",
        "2": "in the last few videos we've seen how we\n",
        "4": "can use a really clever set of recursive\n",
        "7": "class definitions to build an infinitely\n",
        "10": "extensible list so for example the S\n",
        "12": "list with s lists we can do add last\n",
        "14": "over and over and over until we get\n",
        "15": "bored of it or I guess our computer runs\n",
        "17": "out of memory but as a theoretical\n",
        "19": "construct the S list can grow forever\n",
        "23": "now in this next set of videos what\n",
        "24": "we're gonna do is ultimately build an a\n",
        "27": "list an array based list that uses a\n",
        "28": "totally orthogonal way of storing\n",
        "30": "information in particular it will use\n",
        "33": "arrays rather than a recursive list\n",
        "36": "structure so let's start by just\n",
        "39": "thinking back about how memory works so\n",
        "41": "in general if we need to build a list if\n",
        "43": "we want to say have a list of a million\n",
        "45": "items we need a million memory boxes\n",
        "46": "we've talked about different ways that\n",
        "49": "you can get memory boxes in Java one of\n",
        "51": "them is to declare a variable so for\n",
        "54": "example if I say index Java goes gets me\n",
        "56": "32 bits of memory sets them aside as a\n",
        "58": "little box for us and then we can store\n",
        "61": "integers in that box if we say walrus w1\n",
        "63": "that gives us a memory box of 64 bits\n",
        "66": "they can store the location of a walrus\n",
        "69": "and if we say walrus w2 equals new\n",
        "71": "walrus in this case a bunch of different\n",
        "73": "stuff happens but ultimately what\n",
        "75": "happens is that we get 32 bits to store\n",
        "77": "the size of the waters 64 bits for the\n",
        "80": "tusks size and we also get 64 bits over\n",
        "82": "here to store it the reference to this\n",
        "84": "walrus so these are all different ways\n",
        "86": "of getting memory boxes we've taken\n",
        "89": "advantage of advantage of this idea here\n",
        "91": "in order to build s lists or D lists and\n",
        "93": "so we're going to do next is use arrays\n",
        "95": "so what are arrays really I mean you've\n",
        "96": "so what are arrays really I mean you've\n",
        "97": "used them in homework 0 and in project 0\n",
        "100": "above the most crisp way of thinking\n",
        "102": "about an array is to think of it as a\n",
        "105": "numbered sequence of memory boxes so\n",
        "107": "just like a class as a named set of\n",
        "109": "memory boxes a race will be a numbered\n",
        "112": "sequence and what I mean by a named set\n",
        "113": "sequence and what I mean by a named set\n",
        "114": "is for example walrus it has a size\n",
        "117": "which you access using dot notation Walt\n",
        "121": "W dot size or W tusk size with arrays we\n",
        "123": "use this bracket notation so if I want\n",
        "125": "the third item of the array that's\n",
        "128": "called a let's say we'll do a bracket 3\n",
        "130": "so in a sense they have a lot of\n",
        "133": "similarities with classes\n",
        "136": "now if we want to really be very\n",
        "138": "specific about what an array is it's not\n",
        "140": "just that sequence memory boxes but it\n",
        "141": "will also have a length so in terms of\n",
        "143": "what you can do with it in Java you can\n",
        "144": "ask it for its length or you can get\n",
        "146": "these sequence in memory boxes now an\n",
        "148": "important thing is that the number of\n",
        "149": "memory boxes is always going to match\n",
        "152": "that length I mean that make sense and\n",
        "154": "we also are going to have a very special\n",
        "156": "rule which is that all the boxes have to\n",
        "158": "be the same type and that's unlike other\n",
        "160": "languages like Python where the built-in\n",
        "162": "list type can include different things\n",
        "164": "of different types in Java all of those\n",
        "166": "boxes must be the same type and thus the\n",
        "169": "same number of bits and is that's an\n",
        "170": "aside those boxes will always be\n",
        "173": "numbered from 0 to length minus 1 now\n",
        "175": "just like a class I'll make a note that\n",
        "178": "whenever you instantiate an array what\n",
        "179": "will happen is you get one reference at\n",
        "180": "will happen is you get one reference at\n",
        "183": "the time that's created and if it is the\n",
        "184": "case that you throw away your only\n",
        "186": "reference to that array just like any\n",
        "190": "old regular object you will or any class\n",
        "192": "instance and you will never be able to\n",
        "193": "get it back the garbage collector will\n",
        "197": "eat it up and that's it now unlike\n",
        "199": "classes arrays will never have methods\n",
        "200": "they're just gonna be data that's gonna\n",
        "202": "be a length in a sequence of numbered\n"
    },
    "Title=[Lists3, Video 6] Basic Array Syntax_Id=nToxEh2PO48": {
        "0": " \n",
        "3": "super now like classes arrays are going\n",
        "5": "to be almost always instantiating using\n",
        "7": "the new keyword so for Strings we call\n",
        "10": "you don't have to use new with with\n",
        "13": "arrays it's going to be new most so\n",
        "15": "there's three notations for defining\n",
        "18": "arrays in Java and the first year is\n",
        "21": "just a simple creation of an array but\n",
        "22": "not specifying the values of the\n",
        "25": "governor in so this first syntax has the\n",
        "27": "variable Y which I'm assuming SM\n",
        "29": "declared earlier I want to put in that\n",
        "30": "declared earlier I want to put in that\n",
        "32": "64 bit box the addresses of an array I'm\n",
        "34": "now creating that array will consist of\n",
        "37": "three boxes of 32-bit Beach along with\n",
        "40": "the links tree and Java when you create\n",
        "42": "an array it will get a default value and\n",
        "44": "we'll see in the visualization what that\n",
        "47": "means and the other kind of notation or\n",
        "49": "said the second type of notation is to\n",
        "52": "say x equals new int and then here have\n",
        "54": "the actual value you want to put in\n",
        "56": "there by default so in this case we're\n",
        "57": "there by default so in this case we're\n",
        "58": "not explicitly stating the size of the\n",
        "60": "array but Java is able it's pretty smart\n",
        "61": "figures it out it says I you want an\n",
        "63": "array of size five and it puts these\n",
        "64": "default valid for try puts these values\n",
        "67": "then instead of the people value now\n",
        "68": "note that when you create an array on\n",
        "69": "Java\n",
        "71": "you always get a default value so if you\n",
        "73": "say new insulin million it's going to\n",
        "74": "make it's going to set aside a million\n",
        "76": "boxes and it's going to write a bunch of\n",
        "81": "zeros if it's all in so a little bit of\n",
        "82": "overhead associated with creating arrays\n",
        "86": "in Java all right so next up we have our\n",
        "89": "final and somewhat strange syntax this\n",
        "92": "one is just like the one above except we\n",
        "94": "don't do new int and what's sort of\n",
        "96": "funny about this is it only works when\n",
        "97": "you're also declaring a variable at the\n",
        "101": "same time so I say int brackets W that\n",
        "103": "allows me because I'm declaring right\n",
        "105": "now to instantiate without the new end\n",
        "107": "keyword why is it I don't know that's\n",
        "109": "need to do so if you like this notation\n",
        "112": "um be aware that you can't use it with\n",
        "116": "an already declared group so each of the\n",
        "118": "invitations there all do the same thing\n",
        "120": "right they create an array which has\n",
        "123": "some links and it has n boxes right\n",
        "125": "we're in Italy for those of you curious\n",
        "127": "about what's happening under the hood\n",
        "129": "you might imagine that an array is well\n",
        "132": "maybe 32 bits to the links plus K bits\n",
        "133": "per box\n",
        "136": "for a total of 32 plus K times in this\n",
        "138": "print array but it turns out that n\n",
        "139": "typical implementations it's actually a\n",
        "141": "little more have a little note in the\n",
        "142": "bottom right corner and that's the\n",
        "144": "reading and our optional textbook if\n",
        "146": "you're curious but not important for 61b\n",
        "150": "okay so this works through an example so\n",
        "151": "this is an example where I think that\n",
        "153": "you given what you saw on project zero\n",
        "155": "and in this lecture you could do every\n",
        "156": "step of this and draw a nice box and\n",
        "159": "pointer diagram except maybe this last\n",
        "162": "step here let's run through this example\n",
        "165": "and you can follow along and try and\n",
        "166": "guess what's going to happen now I'm\n",
        "168": "going to set two options I want this so\n",
        "170": "that things look nice and we don't get\n",
        "173": "weird we did this last time so make sure\n",
        "174": "that it looks more like a box and\n",
        "176": "pointer diagram I'm also going to enable\n",
        "180": "this option so that strings show their\n",
        "181": "true nature okay so if you're curious\n",
        "185": "what so if you're curious what these do\n",
        "186": "you can take them away and it looks\n",
        "188": "different but whatever this is just so\n",
        "189": "that the diagram it generates is\n",
        "191": "consistent with our box and pointer\n",
        "192": "notation okay\n",
        "195": "so the code begins in sprechen zie what\n",
        "197": "does it do well that's going to create a\n",
        "201": "box of how many bits 64 and what goes in\n",
        "203": "there and address remember there are\n",
        "206": "only nine things and Java types there\n",
        "208": "are the 8 primitive types and then\n",
        "209": "reference this to anything this is a\n",
        "212": "reference to an enter in so we get 64\n",
        "214": "bits and into that array we write a\n",
        "216": "bunch of zeros in which we call a null\n",
        "218": "for short okay so we have 64 bits here\n",
        "222": "all zeros now individual Iser we also at\n",
        "224": "this point give two more boxes x and y\n",
        "227": "which will be 64 bits but the visualizer\n",
        "229": "is designed by philip glow does not show\n",
        "230": "those boxes but you can imagine they're\n",
        "234": "there so we do x equals new int we get\n",
        "237": "our 64 bits box X and we fill it with 64\n",
        "240": "bits what goes most bit Y the address is\n",
        "242": "returned by the new function okay what\n",
        "244": "if the new function do well it's going\n",
        "246": "to go find someplace in memory for five\n",
        "250": "integers to live here they are so 32\n",
        "253": "bits for each one and X is going to\n",
        "255": "record the location in memory of this\n",
        "257": "whole box now notice that the visualizer\n",
        "260": "does not explicitly show the integer\n",
        "262": "that stores the links of an array so it\n",
        "264": "does nonetheless exist and we've done a\n",
        "265": "typical implementation\n",
        "267": "Java you can imagine as a little five up\n",
        "269": "here but not you\n",
        "271": "now when I say y equals x okay what does\n",
        "273": "this do well we have this box over here\n",
        "275": "that a 64 bits in it and of course the\n",
        "277": "thing you do whenever you say y equals x\n",
        "280": "is less copies the bits okay nothing\n",
        "283": "else so when we copy is a bit\n",
        "285": "well our visual metaphor says we should\n",
        "287": "draw an arrow to the same object and\n",
        "289": "there you have it now we're going to\n",
        "291": "take X and we're going to replace these\n",
        "293": "bits here with the address as returned\n",
        "296": "by this next call to nil okay so this is\n",
        "298": "again an array of size five and now X\n",
        "299": "gets the bits corresponding to the\n",
        "304": "address of X next we have y equals new\n",
        "306": "and three and so what that means is\n",
        "307": "we're going to throw away these bits and\n",
        "309": "replace them with the address of a new\n",
        "312": "array of size three okay so there's a\n",
        "314": "couple of interesting things here one of\n",
        "316": "them is that the visualizer is going to\n",
        "319": "make this disappear watch so it's gone\n",
        "320": "right and it kind of reorganize this\n",
        "323": "force but the array that's 1 2 3 4 5 it\n",
        "325": "is just gone forever we can never get it\n",
        "326": "is just gone forever we can never get it\n",
        "327": "back that's what I mean by an object is\n",
        "329": "anonymous so we lose the reference\n",
        "331": "that's just it we'll never see that\n",
        "335": "array again garbage collection ok next\n",
        "336": "step then the other thing that was\n",
        "337": "interesting is that we got an array of\n",
        "338": "interesting is that we got an array of\n",
        "340": "size 3 and in this case it's all 0 y 0\n",
        "341": "size 3 and in this case it's all 0 y 0\n",
        "343": "well in Java when you create a narang\n",
        "345": "you always get default values much right\n",
        "347": "much like how with a class as we saw\n",
        "348": "before you get a bunch of default values\n",
        "349": "before you get a bunch of default values\n",
        "351": "for every instance variable ok so these\n",
        "352": "are my default values which for integer\n",
        "355": "is here this is just for fun\n",
        "357": "so when I run this line I get an array\n",
        "360": "of size 0 so there are no boxes and an\n",
        "363": "INT presumably that says 0 somewhere and\n",
        "366": "so seeing just points of distance if I\n",
        "369": "want to get the links of an array I can\n",
        "370": "actually use dot links so you can think\n",
        "371": "actually use dot links so you can think\n",
        "373": "of it as an array is like a class in a\n",
        "375": "way that has an instance variable kind\n",
        "378": "of that is called links and so when I\n",
        "380": "say in excel equals x dot links it\n",
        "382": "accesses this together the next it\n",
        "384": "accesses the secret five we cannot see\n",
        "387": "in a copy of those bits okay so I had a\n",
        "390": "five up here we copy them we have five\n",
        "394": "all right now we have creating a string\n",
        "396": "array okay so a challenge for you to\n",
        "399": "ponder how many boxes get made and I was\n",
        "401": "pretty easy and how many bits are in\n",
        "403": "each box zero just no strings no T's\n",
        "405": "name and you might have managed try and\n",
        "407": "guess what the default value will be\n",
        "409": "okay well I'll spoil it for you what you\n",
        "412": "get is six boxes and each one 64 bits\n",
        "414": "and each one can hold what okay I want\n",
        "415": "you to answer that question to yourself\n",
        "417": "awkwardly I don't care if your roommates\n",
        "419": "watching you whatever and you're having\n",
        "420": "earbuds on you're just going to say out\n",
        "421": "loud your answer and they'll think\n",
        "424": "okay string references that's correct or\n",
        "426": "not correct if anymore you said so what\n",
        "429": "we got here now is six boxes 64 bits\n",
        "430": "each they hold string references and the\n",
        "432": "default value of all zeroes which is\n",
        "436": "null then we go to the box and we say we\n",
        "439": "go to box for of this array ok so s\n",
        "441": "points up this whole thing we say go 4\n",
        "443": "slots over and now are waiting and\n",
        "445": "looking at these 64 bits and we're going\n",
        "447": "to assign them to catch up what it catch\n",
        "448": "up\n",
        "450": "well this is we saw before that we can\n",
        "453": "instantiate strings with quotes so in\n",
        "455": "this case we basically called new\n",
        "458": "secretly without being a tease without\n",
        "460": "seeing it so what that will do is a new\n",
        "461": "string as creative if that dress is\n",
        "465": "returned in our arrow point okay how\n",
        "467": "about this line so I think that if you\n",
        "469": "came from 61 861 s or really any\n",
        "472": "programming course this I hope you can\n",
        "473": "figure out ok so trying to figure out\n",
        "475": "what's going to happen for this one okay\n",
        "478": "so Java what it will do is this is not a\n",
        "480": "value it's going to evaluate each of\n",
        "482": "these things it needs to compute this\n",
        "484": "difference so it's first going to go to\n",
        "491": "X 3 to 4 x 1 to 2 that's going to say 4\n",
        "495": "minus 2 is 2 so it'll go to s 2 and it\n",
        "496": "will set this equal to the address of a\n",
        "499": "new string Muppet next we'll create an\n",
        "500": "new string Muppet next we'll create an\n",
        "501": "int array B now it's not very\n",
        "502": "interesting it's just the same as we've\n",
        "505": "done before but now I have this extra\n",
        "507": "little call systems array copy I'll be\n",
        "509": "explaining in just a moment so what\n",
        "511": "systems that array copy does though is\n",
        "515": "it copies from array B to array X and it\n",
        "518": "starts at position 0 of B and it copies\n",
        "521": "to position 3 of X and I find this\n",
        "522": "syntax a little hard to remember I\n",
        "524": "always have to read look it up every\n",
        "526": "semester but basically it come and it's\n",
        "528": "going to copy two of those numbers in\n",
        "531": "other words starting from 0 of be going\n",
        "532": "to slots over\n",
        "534": "these are the ones I want to copy I'm\n",
        "536": "going to go to this location and copy\n",
        "538": "them here after it on that you'll see\n",
        "541": "nine ten appear up there okay so that's\n",
        "543": "basic array okay\n",
        "546": "let's talk a little bit more about array\n",
        "549": "copy so actually the first question we\n",
        "550": "ask ourselves is why would we ever want\n",
        "553": "to make a copy of an array what's not\n",
        "555": "enough just to say for example y equals\n",
        "558": "x right this just says I'm copying the\n",
        "560": "address of an array from one variable to\n",
        "562": "another this is two references to the\n",
        "565": "same array similarly suppose we're\n",
        "568": "trying to write a non-destructive\n",
        "571": "array function that takes an array and\n",
        "573": "say squares each of its elements okay\n",
        "576": "one of you give that function an array\n",
        "579": "reference it gets an actual reference to\n",
        "580": "your original array okay so I have a\n",
        "583": "main you know financial tax software\n",
        "585": "dadadada square I don't why you're\n",
        "586": "squaring numbers in tax software\n",
        "589": "okay I give off the give my precious\n",
        "591": "array me to someone else to go do\n",
        "592": "squaring and they claim to be doing it\n",
        "595": "non-destructively they better have some\n",
        "596": "way to make a copy of it array otherwise\n",
        "599": "they're breaking my array okay it\n",
        "601": "doesn't non-destructive interview so\n",
        "603": "there's two ways to make it hoppy one is\n",
        "605": "do an item-by-item copy just write a\n",
        "607": "loop and while I is less than X dot\n",
        "611": "length Y of I equals XY now the\n",
        "613": "alternate approach is to use array copy\n",
        "616": "and this function takes five parameter\n",
        "619": "so when I see system dot array copy it\n",
        "622": "says copy from the array B starting at\n",
        "626": "index zero to the destination array X\n",
        "629": "starting at X s position three and by\n",
        "631": "the way copy two of this okay so in\n",
        "633": "slice notation if you know Python it\n",
        "635": "would be something like this right\n",
        "637": "as you've never seen slice notation to\n",
        "641": "operate so array copy what's the\n",
        "643": "advantage of using it versus the loop\n",
        "645": "well it's probably going to be faster\n",
        "646": "particularly for large arrays because\n",
        "648": "the Java interpreter is closer to the\n",
        "650": "hardware so it can take advantages\n",
        "652": "advantage of knowledge about how things\n",
        "654": "truly works that you as a Java\n",
        "657": "programmer cannot the other reason is\n",
        "659": "the code is a bit more compact and if\n",
        "661": "somebody knows what this means it can be\n",
        "663": "easier to read than looking at a loop\n",
        "666": "but one could also argue it's harder to\n",
        "669": "these parameters do so I'll leave it to\n",
        "670": "your judgment which you think seems\n"
    },
    "Title=[Lists3, Video 7] 2D Arrays_Id=VgKAzTxISPc": {
        "0": " \n",
        "2": "as a test of our deep understanding of\n",
        "4": "arrays let's talk about two-dimensional\n",
        "6": "arrays in Java now and so we're not\n",
        "8": "gonna be using these in class for a\n",
        "11": "little while but just to get acquainted\n",
        "12": "with them let's check them out today\n",
        "14": "so here I'm gonna have a bunch of code\n",
        "15": "which I'm just gonna jump straight to\n",
        "17": "the visualizer on this one which is\n",
        "20": "going to allow us to create arrays of\n",
        "24": "array references okay so the syntax in\n",
        "26": "Java from making what another language\n",
        "28": "is well what you might call a\n",
        "29": "is well what you might call a\n",
        "31": "two-dimensional array is as follows when\n",
        "35": "I do int bracket int square braces\n",
        "37": "square braces what it's saying is make\n",
        "39": "for me an array of integer array\n",
        "40": "references okay\n",
        "43": "so here we get one box and it's allowed\n",
        "46": "to store a reference to a list of enter\n",
        "48": "a references okay so let's let's see an\n",
        "51": "example here so when I say Pascal's\n",
        "53": "triangle equals new and for what that's\n",
        "56": "going to do is going to create an array\n",
        "59": "of int array references each of these is\n",
        "60": "of int array references each of these is\n",
        "62": "allowed to point at an array okay an\n",
        "65": "array of what's of integers and this\n",
        "68": "right here is a 64-bit address of this\n",
        "71": "array of array references okay get a\n",
        "75": "little but don't worry now just as we\n",
        "78": "anytime we could create a variable of\n",
        "80": "the type of these boxes so what's the\n",
        "81": "type of each of these boxes in Turay\n",
        "84": "references so I can make a new such\n",
        "86": "variable and assign it equal and copy of\n",
        "91": "the bits okay all right I'll have a more\n",
        "93": "interesting example down here okay so\n",
        "95": "next up we could say you know what I'm\n",
        "97": "tired of this being null in fact I want\n",
        "99": "to point it at an interact because\n",
        "100": "that's what it's for right this is an\n",
        "103": "array for looking at interets so we're\n",
        "106": "gonna do is create here an array of size\n",
        "107": "one which contains the value one and\n",
        "111": "point this at the visualizer does that\n",
        "113": "for us\n",
        "115": "so next step we say okay you know what\n",
        "116": "I'm tired of this being null so I'm\n",
        "118": "gonna make a new array of to size two\n",
        "121": "and point this out okay kind of a funny\n",
        "125": "way of drawing this but there you go now\n",
        "127": "we say okay same deal we're gonna repeat\n",
        "129": "this and create two more interest and\n",
        "131": "point our point\n",
        "135": "okay so actually if you are visualizing\n",
        "137": "the stuff later and for your reference\n",
        "140": "there is an option same one we had\n",
        "142": "before which prefers non nesting layouts\n",
        "144": "where we get box and pointer diagrams it\n",
        "147": "also makes us have vertical layouts okay\n",
        "151": "so if we rerun that now we get what\n",
        "153": "might be a little easier to read okay\n",
        "156": "maybe alright next up we have road to\n",
        "159": "this line what it does is it creates a\n",
        "161": "box of 64 bits that can store a\n",
        "162": "reference to an int array one of these\n",
        "165": "and then we point that at Pascal's\n",
        "167": "triangle to so what do we do we copy the\n",
        "169": "bits all right what are the bits this\n",
        "172": "arrow some other words road to points of\n",
        "175": "this so what I mean what's interesting\n",
        "177": "about this is that we could actually\n",
        "180": "modify our original Pascal's triangle\n",
        "183": "object up here using this road to\n",
        "185": "reference so when you are mine you might\n",
        "187": "think of it as okay well it's like a\n",
        "190": "sequence of arrays and it's called\n",
        "192": "Pascal's triangle I can actually get a\n",
        "194": "hook inside like the middle of it right\n",
        "195": "I'm just going right into the belly of\n",
        "197": "that Pascal's triangle and I can for\n",
        "202": "example say road to item 1 is now -5 so\n",
        "203": "be aware that's possible because they're\n",
        "208": "always alternate ways to instantiate an\n",
        "210": "array well we've seen this one already\n",
        "212": "so if we say matrix and equals new man\n",
        "214": "actually my go to beam on vertical\n",
        "222": "layout for this part so when I one way\n",
        "224": "to create one of these array of arrays\n",
        "227": "is the syntax we had before so that does\n",
        "229": "just what we saw before it creates an\n",
        "231": "array of array references but Java\n",
        "233": "actually also allows us to specify a\n",
        "236": "number here so what this number means\n",
        "238": "says you know what I don't want just a\n",
        "240": "bunch of empty array references I want\n",
        "242": "you to Java create for me a bunch of\n",
        "245": "default arrays of size 4 that will all\n",
        "247": "get the default value for the type here\n",
        "249": "so in other words this new matrix\n",
        "252": "declaration is going to not create just\n",
        "253": "the array of int references but also\n",
        "256": "these actual integer arrays so this\n",
        "258": "creates you can think of it as if we\n",
        "262": "look at this carefully this line\n",
        "264": "this line that we're about to run it\n",
        "266": "creates one array okay this line\n",
        "269": "actually creates five arrays this array\n",
        "271": "Plus this this this and this okay so\n",
        "273": "five total arrays are created one of\n",
        "276": "references for of integers and if you\n",
        "278": "want to create a literal array right if\n",
        "279": "you decide that you don't want to have\n",
        "282": "this obviously very wordy way of\n",
        "284": "declaring Pascal's triangle there is a\n",
        "286": "literal notation for doing\n",
        "288": "two-dimensional arrays so in that case\n",
        "290": "we would just get the same thing laid\n",
        "292": "out a little differently for some reason\n",
        "295": "okay so that is the heart of what makes\n",
        "296": "a two-dimensional array a\n",
        "299": "two-dimensional array there are actually\n",
        "302": "references of references so you may find\n",
        "305": "this a little hard to fully croc but\n",
        "306": "it'll be okay because later when we do\n",
        "308": "this assignment called seam carving you\n",
        "310": "will get a better camp okay that'll be\n",
        "312": "much like yeah and these are just\n",
        "314": "repeating some points that I said during\n",
        "318": "the earlier demo so this very first line\n",
        "320": "it creates one box of 64 bits that can\n",
        "323": "refer to an array or that refers to an\n",
        "325": "array of interets okay I'm entering\n",
        "326": "array of interets okay I'm entering\n",
        "327": "references\n",
        "331": "all right see confounding this next line\n",
        "334": "though it in this case creates four\n",
        "335": "additional boxes and each of them is\n",
        "339": "null so this is one box four boxes down\n",
        "342": "here if we look at this line just to\n",
        "344": "pick out what it does total well it\n",
        "345": "first creates an array which has three\n",
        "347": "boxes it puts the numbers one two and\n",
        "349": "one in them and then it assigns the\n",
        "351": "address to this box okay\n",
        "353": "and that's this whole set before this\n",
        "355": "one makes one total array this is five\n",
        "356": "grades\n",
        "358": "okay so just some highlights of\n",
        "360": "terminology that maybe are not that\n",
        "361": "interesting to listen to me say but you\n",
        "363": "can convince yourself of the truth of\n",
        "366": "these statements okay so now an exercise\n",
        "368": "for you that I'd like you to ponder okay\n",
        "371": "knowing what we've just said yeah\n",
        "373": "because just watching me do that\n",
        "374": "probably not gonna lead to a great deal\n",
        "377": "of understanding I want you to tell me\n",
        "380": "here when I run this code okay and\n",
        "383": "create this these other variables what\n",
        "385": "is going to be the value of x 0 0 and W\n",
        "386": "is going to be the value of x 0 0 and W\n",
        "388": "0 0 when this code completes and in this\n",
        "390": "case what I want us to have you do is\n",
        "391": "click on the\n",
        "393": "answer link if you want the answer and\n",
        "395": "if you really hate going to a website\n",
        "397": "opening the slides and clicking the link\n",
        "400": "I put it at the top so you can type it\n"
    },
    "Title=[Lists3, Video 8] Arrays vs  Classes_Id=WMfYfCfuwNs": {
        "0": " \n",
        "2": "now I know you're just itching to build\n",
        "4": "an array base list and we will soon but\n",
        "5": "before we do that just for the sake of\n",
        "7": "really good scholarship let's compare\n",
        "10": "and contrast arrays and classes so when\n",
        "12": "it comes to implementing a data\n",
        "15": "structure say a list or a set or a map\n",
        "17": "or any other number of things both\n",
        "19": "erasing classes can be used to organize\n",
        "22": "a bunch of memory boxes now they have\n",
        "24": "different flavors so for example the\n",
        "26": "planet class we have a bunch of named\n",
        "28": "fields and for example here I've\n",
        "30": "constructed a planet earth that has a\n",
        "33": "string mass or say a string name and a\n",
        "36": "double mass by contrast arrays as we've\n",
        "38": "noted are a set of numbered are a\n",
        "41": "sequence of numbered memory boxes now\n",
        "43": "for arrays they have to be all the same\n",
        "45": "type and if we want to access them we\n",
        "47": "use bracket notation and classes they\n",
        "49": "could be all different types and we\n",
        "51": "access them using dot notation in both\n",
        "53": "cases though we have the fixed number of\n",
        "55": "memory boxes that can never change at\n",
        "56": "least in the java language other\n",
        "59": "languages may be more permissive so\n",
        "61": "let's imagine what's really different\n",
        "63": "about that what philosophically is\n",
        "65": "well one really big difference is that\n",
        "68": "with arrays we can actually compute the\n",
        "70": "indices we want at runtime so imagine\n",
        "72": "the following we construct an integer\n",
        "74": "array like so and then we ask our user\n",
        "77": "what index do you want so we try running\n",
        "78": "this program which I'm not gonna do live\n",
        "80": "but it would say what index do you want\n",
        "82": "we compile and run this program and\n",
        "84": "maybe we type in two so now we have this\n",
        "86": "index of interest - that was not known\n",
        "88": "at compile time and then we can say hey\n",
        "90": "give me back item number two from this\n",
        "93": "array and when we print it out we'll get\n",
        "97": "102 by contrast with classes we cannot\n",
        "100": "compute those at runtime so for example\n",
        "102": "suppose we have a field of interest mass\n",
        "106": "and then we actually try to get back\n",
        "109": "that field of interest so in this case\n",
        "111": "rather than asking the user I'm just\n",
        "114": "having the string hard-coded in here\n",
        "116": "into this field and in this case what\n",
        "118": "happens when we try to earth field of\n",
        "121": "interest the class says no I'm not our\n",
        "123": "side the compiler says no you cannot say\n",
        "125": "earth field of interest that is\n",
        "127": "forbidden the reason is that's just how\n",
        "130": "Java works it just you cannot throw in\n",
        "132": "particular\n",
        "134": "field you want and get it back that's\n",
        "136": "just how the language yeah the language\n",
        "138": "is designed it will say array required\n",
        "140": "but instead a planet was found\n",
        "142": "now you might try and say I'm gonna be\n",
        "144": "extra clever what I'm gonna do is I'm\n",
        "145": "gonna use dot notation because I know\n",
        "147": "that's what's supposed to happen with\n",
        "149": "classes but in this case when I say\n",
        "151": "earth dot field of interest then I'll\n",
        "153": "get I don't know you mean I tried to\n",
        "155": "find something called field of interest\n",
        "157": "that's part of the planet class but if\n",
        "159": "you note I have mass I have name I do\n",
        "161": "not have a field of interest so in Java\n",
        "164": "you just can't do that now I'm kind of\n",
        "166": "lying because there is technically a way\n",
        "167": "of doing that and if you want you can\n",
        "168": "click this link and learn all about\n",
        "171": "something called the reflections API but\n",
        "173": "is not something that's considered good\n",
        "176": "style so ultimately in Java when you're\n",
        "179": "using a class the only easy way to\n",
        "181": "access a member of class is well what\n",
        "183": "I'll call with what I'll call hard-coded\n",
        "186": "dot notation so for example if I want to\n",
        "188": "get back mass I can only do it by saying\n",
        "191": "P mask I can't do P dot field of\n",
        "193": "interest or P bracelets field of\n",
        "194": "interest\n",
        "196": "won't work and so the Java compiler\n",
        "198": "ultimately the idea here is it doesn't\n",
        "199": "treat something on either side of a dot\n",
        "201": "as an expression it won't actually\n",
        "203": "evaluate this thing and thus it won't\n",
        "205": "work and if you're curious about these\n",
        "206": "kind of philosophical issues like if\n",
        "208": "you're kind of if you're the kind of\n",
        "209": "person who looks at this and says\n",
        "210": "there's something deep here and\n",
        "212": "something cool I encourage you to later\n",
        "214": "take a compilers or a programming\n",
        "215": "languages course which would really go\n",
        "217": "into the philosophy of these things in\n",
        "221": "more depth now it is possible I'll just\n",
        "223": "make a quick note though you can do\n",
        "225": "funny things if you really want and the\n",
        "226": "reason that Java doesn't let you do this\n",
        "228": "just to mention this philosophically is\n",
        "230": "that it keeps our code simple reflection\n",
        "233": "leads to ugly code strange code if Java\n",
        "235": "actually let you do this it would cause\n",
        "236": "a lot of headaches and so the Java\n",
        "239": "designer said no and they decided well\n",
        "240": "if you really want you can use the\n",
        "243": "reflections API but everybody knows I\n",
        "245": "know you now know that using reflection\n",
        "246": "for this kind of purpose it's just\n",
        "249": "considered terrible style and the reason\n",
        "250": "considered terrible style and the reason\n",
        "251": "is simply that with big programs it's\n",
        "253": "just an extra thing you have to think\n",
        "254": "about so the language was built to\n",
        "256": "restrict the choices you could make\n",
        "257": "which again is one of the strongest\n",
        "260": "arguments in the favor of Java all right\n",
        "262": "that's it so end of these set of videos\n",
        "264": "next we'll start building an array Bay\n"
    },
    "Title=[Lists4, Video 1] Why Array Lists_Id=lrK07ed_Yqo": {
        "0": " \n",
        "2": "in this lecture we're gonna build an\n",
        "4": "array base list but before we do that I\n",
        "5": "think it's important to ask ourselves\n",
        "7": "why because you'll remember halfway\n",
        "9": "through the previous lecture we actually\n",
        "11": "ended up with something really nice a\n",
        "13": "nice linked list that we call a D list\n",
        "15": "so D lists had some wonderful properties\n",
        "18": "and we wanted to add items remove items\n",
        "21": "get items all of them were fast and I\n",
        "23": "also said that we avoided ugly special\n",
        "26": "cases by having the special topology\n",
        "28": "where the empty list looks something\n",
        "30": "like this and as you fill in items you\n",
        "31": "end up having a structure like this am I\n",
        "34": "gonna go back over it and you'll have a\n",
        "36": "chance in project 1a to see just how\n",
        "38": "this beautiful idea makes it not so hard\n",
        "40": "to code up at least I mean to me for you\n",
        "41": "you might have a little more struggle\n",
        "43": "that's okay but once you get the ideas\n",
        "45": "down you realize and I hope I appreciate\n",
        "47": "how good it is so all of these\n",
        "49": "operations are fast the data structure\n",
        "51": "is pretty beautiful so the question is\n",
        "52": "why bother\n",
        "54": "why bother using arrays instead and so\n",
        "57": "let's talk about a limitation to lists\n",
        "62": "so in general if you have a list a lot\n",
        "63": "of times you want to be able to get a\n",
        "65": "specific item out of it so we might be\n",
        "67": "able to ask a list something like could\n",
        "69": "you get me item two so I'd say get item\n",
        "73": "to get to and it would return 70 so it\n",
        "75": "turns out with this linked list\n",
        "78": "implementation it's going to be slow for\n",
        "81": "long lists and what I mean by slow is if\n",
        "83": "you compare the performance of a get\n",
        "84": "operation to the performance of get last\n",
        "86": "it'll take a lot longer so I'd like you\n",
        "87": "to think about why that might be the\n",
        "90": "case and for what inputs to plumb to\n",
        "95": "that for a moment and I'll spoil it okay\n",
        "97": "so the reason is that you have to\n",
        "100": "actually scan to the desired position so\n",
        "102": "if I want to get item two I have to\n",
        "103": "follow the sentinel link hop a couple of\n",
        "105": "times and get the Senate team so well\n",
        "107": "that's not so bad here imagine you have\n",
        "109": "a list that's a million items long and\n",
        "111": "someone asked for item 500,000 no matter\n",
        "112": "what you're gonna have to end up\n",
        "114": "scanning all the way through the list\n",
        "115": "and you'll reach the point in the middle\n",
        "117": "finally and be able to return the item\n",
        "118": "but it means you have to walk a really\n",
        "120": "long list list which is gonna be slow\n",
        "122": "compared to just getting say the last\n",
        "125": "item so how can we fix this well I\n",
        "127": "didn't actually make this light blue and\n",
        "128": "make you think about it there are some\n",
        "132": "ways you can maybe ponder it but the two\n",
        "134": "most obvious ways or the\n",
        "136": "most natural aces won the thing we're\n",
        "137": "gonna do which is to use an array\n",
        "139": "instead avoiding the need for any links\n",
        "141": "because without a bunch of links there's\n",
        "143": "no need to traverse them and that'll\n",
        "144": "make it fast and there's another\n",
        "147": "we'll discuss much later where we can\n",
        "149": "mess with the topology this list in a\n",
        "151": "very clever way and end up something\n",
        "153": "with something that's a lot faster but\n",
        "156": "we won't discuss it today so let's move\n"
    },
    "Title=[Lists4, Video 3] The Allegory of the Cave_Id=ptILllgNNGo": {
        "0": " \n",
        "2": "the last operation we need to implement\n",
        "4": "is remove last now before we do this I\n",
        "6": "actually want to take a step back and\n",
        "8": "think carefully about the users mental\n",
        "9": "model what is that we're trying to\n",
        "12": "so it's imagine the user is inserted as\n",
        "14": "far as they're concerned five three one\n",
        "16": "seven twenty two and then finally they\n",
        "18": "call at last minus one they built this\n",
        "20": "list so this is more or less what the\n",
        "23": "users thinking about okay now the user\n",
        "24": "calls remove last and what do we expect\n",
        "27": "well we expect that minus one goes away\n",
        "29": "that's the mental model the user is\n",
        "31": "thinking about now our job as the\n",
        "33": "implementer of this abstract data type\n",
        "37": "of this list is that it needs to behave\n",
        "40": "the way the user wants to and beyond\n",
        "41": "that it doesn't matter what we do as\n",
        "44": "long as the behavior is correct so in\n",
        "46": "this approach our concrete reality the\n",
        "48": "actual truthy we have designed is to use\n",
        "50": "this array to hold all the information\n",
        "53": "and at this moment our goal is to\n",
        "55": "manipulate this concrete reality to\n",
        "58": "match the user's abstract mental model\n",
        "59": "now there are many ways we could have\n",
        "60": "now there are many ways we could have\n",
        "62": "done it in fact in the previous lecture\n",
        "63": "the actual truth looked nothing like\n",
        "66": "this at all there was a D list that it\n",
        "68": "was a recursively defined data structure\n",
        "69": "you know we did all that work for that\n",
        "71": "and it was a totally different way of\n",
        "72": "implementing it but as far as the user\n",
        "74": "was concerned that behavior was exactly\n",
        "75": "the same\n",
        "77": "there's actually a lot of parallels with\n",
        "78": "the Plato's allegory of the cave from\n",
        "82": "you know 2,500 years ago so the user the\n",
        "85": "person using the list data structure\n",
        "88": "here they basically have a specific\n",
        "90": "reality that they can see that hopefully\n",
        "92": "they can actually interact with and it\n",
        "95": "behaves in a way that makes sense we by\n",
        "96": "contrast are these monks we're the\n",
        "98": "implementers we're one level of\n",
        "100": "abstraction up and our job is to\n",
        "101": "manipulate these little figures so that\n",
        "104": "there's show they're seeing actually\n",
        "106": "matches what they expect and if they try\n",
        "108": "to you know shoot this thing with their\n",
        "110": "finger like shoot the bird then this\n",
        "113": "guy's job is to lower the bird and show\n",
        "114": "that the bird has been defeated or\n",
        "118": "whatever now unlike Plato's allegory of\n",
        "120": "the cave where we might imagine using\n",
        "121": "our knowledge to divine the nature of\n",
        "123": "reality and climb out and be free we do\n",
        "125": "not want to do that as programmers the\n",
        "127": "person in the cave does not care about\n",
        "129": "the world out here and in fact a lot of\n",
        "131": "the progress in computer sites is being\n",
        "132": "willfully ignorant about\n",
        "133": "the outside world that's one of the\n",
        "135": "glorious things about Java for example\n",
        "137": "the private keyword says no this world\n",
        "139": "is forbidden to you you are not allowed\n",
        "141": "to see it and that makes it easier to\n",
        "144": "live the life that you want so that said\n",
        "146": "let's imagine trying to write remove\n",
        "149": "last so as the manipulators of reality\n",
        "151": "as those who need are charged with\n",
        "153": "changing the concrete representation to\n",
        "155": "match the abstract what memory boxes\n",
        "157": "actually need to change now one thing\n",
        "158": "I'm gonna mention is that the invariance\n",
        "160": "that we've created here they actually\n",
        "162": "provide us with a guide they're a set of\n",
        "164": "rules that these characters here can use\n",
        "166": "to manipulate the figures to match their\n",
        "168": "expectations of the user and as long as\n",
        "169": "we follow these we should be in good\n",
        "171": "shape so all of that said some\n",
        "173": "philosophy aside try and imagine what\n",
        "174": "memory boxes need to change and I'll\n"
    },
    "Title=[Lists4, Video 6] Resizing Implementation_Id=tLcinQx5VnY": {
        "0": " \n",
        "2": "as we work our way through this method\n",
        "3": "I'm gonna go back one slide so that we\n",
        "6": "can consult this cells jump it so we\n",
        "9": "need to change your move lattice I in AD\n",
        "11": "last so that it can handle the array\n",
        "13": "getting too big so we'll have a little\n",
        "16": "special case here and we'll say if okay\n",
        "19": "what was it size equals items dot length\n",
        "21": "okay good to have that very concretely\n",
        "23": "in our mind then we need to do a few\n",
        "26": "things first we need to create a new\n",
        "28": "array which I'll call a and it's gonna\n",
        "30": "be a new into a which is gonna be of\n",
        "34": "size size plus one all right so there we\n",
        "36": "go then what we're gonna do is copy\n",
        "37": "everything over you could also use a\n",
        "39": "loop if you wanted but I'm gonna copy\n",
        "40": "everything over using systems out array\n",
        "43": "copy what should we do well we need to\n",
        "45": "copy from the old items array starting\n",
        "47": "at position zero to the new array a\n",
        "49": "starting at position zero and then\n",
        "52": "finally we need to say how many items\n",
        "54": "and it's going to be sized items so\n",
        "55": "there are hundred things we need to copy\n",
        "58": "now you'll notice that IntelliJ here has\n",
        "59": "helpfully told us what the source and\n",
        "62": "destination positions are that could be\n",
        "64": "in theory handy though the coloring I\n",
        "65": "have setup is pretty impossible to read\n",
        "69": "oh well alright next up we've now copied\n",
        "71": "the items over so at this point we now\n",
        "72": "the items over so at this point we now\n",
        "75": "need to change items to be equal to a\n",
        "79": "and then a size plus equals one all this\n",
        "82": "stuff happens down here so this will\n",
        "83": "handle putting the new item in the last\n",
        "85": "position and this will increase the size\n",
        "88": "so these last two steps are sorry these\n",
        "89": "two steps here were already part of our\n",
        "93": "code so at this point we now have an add\n",
        "95": "last method that should work properly\n",
        "97": "now in the real world so if I was doing\n",
        "99": "any real programming at all I would run\n",
        "101": "some kind of tests in fact I have this\n",
        "103": "entire test file but because we haven't\n",
        "105": "really talked about it we will net like\n",
        "107": "we will next lecture I'm not gonna run\n",
        "109": "it now but what I want to warn you is\n",
        "111": "that the way I've been programming in\n",
        "112": "this lecture is in some ways a bad\n",
        "114": "example because I've been riding giant\n",
        "116": "blobs of code without doing any testing\n",
        "118": "and if you do the same thing on project\n",
        "120": "1a you'll probably have a sad time so\n",
        "122": "I'll give you some tips in the next\n",
        "123": "lecture about better incremental\n",
        "125": "development but for the purposes of this\n",
        "127": "lecture for this narrative for something\n",
        "128": "that I've practiced time and time again\n",
        "130": "chances are I probably haven't messed up\n",
        "132": "anything too severely but if I do then I\n",
        "133": "guess I'll\n",
        "136": "we record one of these videos alright so\n",
        "138": "this right here is a perfectly wonderful\n",
        "141": "ad last method though I'm gonna make one\n",
        "143": "change to this to make my code a little\n",
        "145": "nicer and more organized so specifically\n",
        "147": "I'm gonna note that this whole process\n",
        "150": "here this resizing process could\n",
        "154": "actually be made into its own method so\n",
        "156": "I'm gonna do that because I just think\n",
        "158": "it is nicer okay so I'm gonna say\n",
        "162": "resizes the underlying array to the\n",
        "165": "target capacity so what its gonna look\n",
        "167": "like and that's gonna be a private void\n",
        "170": "method called resize and takes a\n",
        "172": "capacity argument and this codes all\n",
        "175": "gonna do the resize now instead of being\n",
        "177": "size plus 1 this version is going to\n",
        "179": "resize to some arbitrary capacity just a\n",
        "183": "little nicer and that's it okay so I now\n",
        "186": "made a resize method and so here when I\n",
        "187": "went to act when I run out of room oops\n",
        "189": "I messed up slightly this if statement\n",
        "191": "should not be inside resize we're gonna\n",
        "196": "move in and add last so if the size is\n",
        "198": "equal to items dot length then we will\n",
        "201": "say resize to size plus 1 ok that's just\n",
        "203": "the way I've chosen to organize my code\n",
        "206": "you may disagree ok so at this point\n",
        "208": "we've now written an ADD last method we\n",
        "209": "have a resize method that keeps things\n",
        "211": "going let's fix our indentation we could\n",
        "214": "use the IntelliJ shortcut but I did it\n",
        "217": "manually and there we go we now have\n",
        "220": "code that adds to the array and now the\n",
        "221": "array is infinitely extensible it\n",
        "223": "actually does the thing it's supposed to\n",
        "226": "do all right so let's debrief this code\n",
        "229": "a little bit so our ad last method we\n",
        "232": "said if size is equal to items dot\n",
        "234": "length do all this stuff though we\n",
        "237": "showed that an alternate approach is to\n",
        "239": "say if the size is equal to items that\n",
        "241": "link then use a special resize function\n",
        "243": "now why would this be better this is\n",
        "245": "something that you could actually test\n",
        "246": "separately you could write tests you\n",
        "249": "could use the visualizer to actually\n",
        "251": "look and see what it's doing and by\n",
        "252": "breaking your code into little tiny\n",
        "254": "pieces it just makes it much easier to\n",
        "256": "maintain to understand this is easier to\n",
        "258": "read as of another programmer who wants\n",
        "261": "to maintain the a list class so I think\n",
        "262": "this approach is better but you might\n",
        "264": "have done something like this after\n",
        "265": "you've done project 1a we're actually\n",
        "266": "gonna have\n",
        "268": "a little thing in lab where I'll let you\n",
        "270": "discuss implementations with each other\n",
        "272": "and hopefully you can find other little\n",
        "273": "tricks like that that you might have\n"
    },
    "Title=[Lists4, Video 8] Harder Resizing Analysis_Id=pFWS1pGVn9w": {
        "0": " \n",
        "2": "to answer this question we need only\n",
        "4": "extrapolate from what we just did we\n",
        "6": "know for example that going from\n",
        "9": "capacity 102 101 required us to create\n",
        "12": "and fill 101 memory boxes that was this\n",
        "15": "picture here to go from 101 to 102 is\n",
        "17": "102 memory boxes and so forth and so\n",
        "20": "ultimately everything boils down to what\n",
        "23": "is the sum of 100 or psych 101 plus 102\n",
        "28": "plus dot dot plus a thousand so this is\n",
        "29": "a math problem you might not right now\n",
        "31": "feel comfortable how to know how to\n",
        "32": "solve or might not feel comfortable\n",
        "34": "knowing that is all and so one approach\n",
        "37": "is to go to Wolfram Alpha which is a\n",
        "39": "handy tool we can just say equals this\n",
        "42": "and we'll add them all up and we'll say\n",
        "45": "around 500,000 which gives us our answer\n",
        "46": "now we don't want to be totally\n",
        "48": "dependent on Wolfram Alpha so in this\n",
        "51": "class later we're gonna use a number of\n",
        "53": "different tricks and so here the trick\n",
        "54": "that is best the way that you can\n",
        "56": "actually do it without consulting some\n",
        "58": "external tool would be to keep in mind\n",
        "63": "that the sum of 1 + 2 + 3 + n is equal\n",
        "65": "to n times n plus 1 over 2 this is\n",
        "67": "something you surely learned at some\n",
        "68": "point you might have forgotten it\n",
        "70": "there's a whole link here if you want to\n",
        "72": "read about why that's true and so we can\n",
        "76": "say that the sum of the numbers 101 due\n",
        "79": "to 1,000 is gonna be not that much\n",
        "81": "bigger than this sum because those first\n",
        "82": "hundred numbers aren't very large so\n",
        "85": "this last little bit we can approximate\n",
        "88": "it by just doing a thousand times a\n",
        "90": "thousand plus one divided by two which\n",
        "92": "is around 500,000 so that's one way to\n",
        "96": "do okay so let's compare side by side\n",
        "99": "this is what our s list was capable of\n",
        "102": "whenever you insert into an S list what\n",
        "103": "we show on the y-axis this is the total\n",
        "106": "time to complete all of those inserts so\n",
        "108": "in other words inserting 200,000 items\n",
        "110": "in this theoretical plot took only point\n",
        "112": "zero zero zero zero two seconds\n",
        "114": "inserting 40,000 west point zero zero\n",
        "115": "zero four and this is a purely\n",
        "117": "theoretical number this is not an actual\n",
        "119": "experience however if we ran an\n",
        "120": "experiment we would really expect to get\n",
        "122": "a straight line so this straight line\n",
        "125": "indicates that the operations for the S\n",
        "128": "list are all constant time because the\n",
        "130": "integral of a constant is aligned by\n",
        "133": "contrast if we look at the a list which\n",
        "135": "much slower and the focus of our\n",
        "137": "attention right now thus we get a bigger\n",
        "140": "font what we see is it's actually a\n",
        "142": "parabola so that inserting 20,000 items\n",
        "144": "is not nearly as slow as a hundred\n",
        "146": "thousand items and in fact inserting a\n",
        "148": "hundred thousand items if we do the\n",
        "149": "exact same Wolfram Alpha type trick\n",
        "150": "exact same Wolfram Alpha type trick\n",
        "151": "we'll see it's around five billion new\n",
        "154": "containers new memory boxes that's a lot\n",
        "156": "and since computers operate they do at\n",
        "158": "the speed of around gigahertz that is\n",
        "159": "they do about a billion things per\n",
        "161": "second it's no big surprise that\n",
        "163": "inserting a hundred thousand items took\n",
        "165": "seconds so if you think five billion\n",
        "167": "divided by a billion to around five\n",
        "168": "seconds my computer did a little better\n",
        "170": "it's a little faster than the gigahertz\n",
        "173": "just a rough rule of thumb and so this\n",
        "176": "parabola actually tells us that as our\n",
        "178": "list gets bigger it takes longer and\n",
        "180": "longer for the operations to complete in\n",
        "182": "other words the time per operation is\n",
        "185": "linear and the integral of a line is of\n",
        "187": "course a parabola and this right here is\n"
    },
    "Title=[Lists4, Video 9] Making AList Fast_Id=8WtcaXATB-Y": {
        "0": " \n",
        "2": "this brings us to our final clever\n",
        "4": "improvement to the a-list class how do\n",
        "7": "we turn this or horrible I said it that\n",
        "10": "way and a horrible parabola into this\n",
        "12": "beautiful line so if we look at this\n",
        "13": "resize method here\n",
        "15": "that's our site this code right here\n",
        "17": "that's our problem\n",
        "18": "something here is broken and what I want\n",
        "20": "you to do is try and consider how you\n",
        "23": "might fix this now the solution to this\n",
        "26": "problem is actually a bit tricky and\n",
        "27": "even after I show you you might be a\n",
        "29": "little mystified and we'll cover the\n",
        "32": "analysis later but what you do is maybe\n",
        "33": "analysis later but what you do is maybe\n",
        "34": "give it a shot maybe even try out the a\n",
        "36": "list speed test to test your solution\n",
        "41": "and I'll spoil it in a moment so let's\n",
        "43": "actually go back to our speed testing an\n",
        "45": "environment now let's look at our a list\n",
        "48": "class this is our trouble so perhaps you\n",
        "49": "thought what if I increase the amount by\n",
        "52": "which we resize maybe by I don't know\n",
        "54": "from one to ten so if I recompile my\n",
        "57": "code and now I do speed test a list\n",
        "60": "I'll see it's fast it's not as fast as a\n",
        "63": "s list it was pretty fast and while that\n",
        "65": "seems to be a big improvement there's\n",
        "66": "actually something a little subtle here\n",
        "68": "that's tricky\n",
        "70": "I mean that's subtle things often are\n",
        "72": "and that's if we increase our speed test\n",
        "76": "a list runtime up to a million and now\n",
        "80": "we try running it again it's quite slow\n",
        "82": "it should not be like this\n",
        "85": "in fact it's taking quite a long time so\n",
        "87": "even though we increased this size up to\n",
        "89": "ten we were only kind of hiding the\n",
        "91": "problem there's still a big problem here\n",
        "94": "so there's actually a bigger better\n",
        "97": "solution which is rather than adding ten\n",
        "100": "I'm gonna multiply by some number let's\n",
        "103": "say two so let's try now by multiplying\n",
        "104": "say two so let's try now by multiplying\n",
        "107": "the size of our array if we try running\n",
        "109": "it it's quite fast look how fast it is\n",
        "111": "in fact I can crank this thing up to ten\n",
        "113": "million try running it again should\n",
        "116": "still be pretty fast and that's actually\n",
        "118": "the state-of-the-art approach and real\n",
        "120": "list like the list inside of Python\n",
        "122": "basically uses this multiplicative trick\n",
        "126": "so what we have right here this add last\n",
        "128": "approach where we add some random factor\n",
        "131": "or some scaling factor our factor this\n",
        "133": "is unusable bad the\n",
        "136": "sizing factor if used in an additive way\n",
        "138": "it's just not gonna work I mean unless\n",
        "139": "you cheap and you make our factor super\n",
        "141": "big but then that's cheating because\n",
        "143": "then you just keep around a size billion\n",
        "145": "list I mean of course that works by\n",
        "147": "contrast if we actually use a\n",
        "150": "multiplicative or geometric rescaling\n",
        "152": "then we get great performance this is\n",
        "155": "wonderful this is how all kinds of lists\n",
        "157": "out there implemented but we can't do\n",
        "159": "the analysis yet we're gonna wait till\n",
        "161": "after the midterm to go into detail so\n",
        "162": "for now we're treated us some kind of\n",
        "164": "wizard magic that this is the right\n",
        "167": "approach now there's still a little bit\n",
        "170": "more we want to do which is that\n",
        "172": "occasionally we'll have an issue where\n",
        "174": "our list gets super big it goes up to a\n",
        "176": "billion items and then we removed 999\n",
        "179": "million items so at that point we're\n",
        "181": "only using one percent of our available\n",
        "183": "or of our array and that's wasteful\n",
        "185": "right I mean we could always make a list\n",
        "187": "fast that uses an array by keeping a\n",
        "189": "giant array but that's just a waste of\n",
        "192": "space and so the question is what do we\n",
        "193": "actually want to do to make this better\n",
        "198": "I kind of spoiled that problem okay\n",
        "201": "that's fine so what can we do to make it\n",
        "203": "better well often what we'll say is an\n",
        "207": "ArrayList has a usage ratio you might\n",
        "209": "call it or a load factor and that's\n",
        "212": "simply the size of the array divided by\n",
        "215": "the length of the site the size of the\n",
        "217": "list divided by the length of the array\n",
        "219": "that represents the last and so often\n",
        "221": "what you'll do is if the load factor\n",
        "225": "that usage ratio falls below 25% then\n",
        "227": "you will have the array size and we'll\n",
        "229": "do some more details in this in a few\n",
        "231": "weeks so just as an example let's say we\n",
        "234": "have here an array that's it has length\n",
        "237": "100 but the list is only size 4 and so\n",
        "240": "the usage ratio here is only 4% that is\n",
        "242": "well less than 25% so this should have\n",
        "244": "been resized at some point and so this\n",
        "246": "actually drives home a really important\n",
        "248": "trade-off between time and space\n",
        "249": "efficiency\n",
        "251": "we'll see this over and over again we'll\n",
        "252": "talk about things like hash tables and\n",
        "255": "how we can exploit space to save time\n",
        "258": "that'll be a big theme of this course so\n",
        "260": "with that we have now built basically an\n",
        "261": "ArrayList\n",
        "262": "we'll have to do a little bit more\n",
        "264": "tweaking but that's the core idea the\n",
        "265": "most important stuff\n",
        "267": "and with this next little video you'll\n"
    },
    "Title=[Sorting4, Part 1] Math Warmup_Id=MwGXh1gIZVA": {
        "0": " \n",
        "2": "in the last several lectures we talked\n",
        "5": "about different ways to sort data now in\n",
        "6": "this lecture actually going to take a\n",
        "8": "step back and stop talking about\n",
        "9": "specific sort and start talking about\n",
        "11": "the fundamental nature of sorting itself\n",
        "13": "so first I'll just mention that sorting\n",
        "15": "is of course a very useful task we like\n",
        "17": "to put things in order right so for\n",
        "19": "example you have open a sly a Google\n",
        "20": "sheet spreadsheet or an Excel\n",
        "22": "spreadsheet or whatever and you want to\n",
        "24": "sort your rose by I don't know the name\n",
        "26": "of the students in the table that's sort\n",
        "28": "of but we can also use sorting for a\n",
        "30": "bunch of not so obvious tasks for\n",
        "32": "example finding duplicates in an array\n",
        "34": "so the Viet Minh array anyone know are\n",
        "36": "there any duplicates you can of course\n",
        "38": "look at every pair and say okay well\n",
        "40": "this pair finally I found one where\n",
        "42": "there's a duplicates but an even better\n",
        "44": "with bit better way would be a stick\n",
        "47": "your a sort it using say merge sort and\n",
        "49": "then just look at each item just the\n",
        "51": "ones next to it and that will take less\n",
        "53": "time overall that's something you can\n",
        "54": "think about later if you'd like also in\n",
        "57": "the study guide another example is the\n",
        "58": "3-sum problem mentioned in a much\n",
        "60": "earlier lecture so that's this right\n",
        "63": "here so in the 3-sum problem you have to\n",
        "65": "find three it gives your given an array\n",
        "67": "in no particular order you want to find\n",
        "69": "do there exists a triplet of items that\n",
        "72": "if you sum them you get zero and it\n",
        "73": "turns out that naive approach is just to\n",
        "75": "consider all triplets which is n cubed\n",
        "78": "and a better approach involves sorting\n",
        "79": "first and it'll take n squared and again\n",
        "80": "first and it'll take n squared and again\n",
        "82": "study guide will give you some tips or\n",
        "83": "give you scaffolding for thinking about\n",
        "86": "these two problems so there's many ways\n",
        "87": "of course to sort an array whether it's\n",
        "90": "for the basic task of just getting\n",
        "92": "things in order or if you want to use it\n",
        "94": "as a stepping stone to solving some\n",
        "97": "bigger other problems now each of this\n",
        "98": "works we talked about they all have\n",
        "99": "their own different trade-offs and\n",
        "101": "features I'll briefly talk about those\n",
        "103": "in the next slide of what this lecture\n",
        "105": "is mostly going to be about is how hard\n",
        "108": "is it to sort period okay now before we\n",
        "110": "get to that question two things first\n",
        "113": "this table so in the table I have my\n",
        "114": "four main flavors of sorting we've\n",
        "116": "talked about this is not an exhaustive\n",
        "118": "list there are many other ways to sort\n",
        "120": "but these are the most popular and\n",
        "122": "famous ones we have a selection based\n",
        "125": "sort in our case using a heap to make it\n",
        "127": "faster we have insertion based sort we\n",
        "128": "have merging base towards and we have\n",
        "130": "partitioning based sort each of them has\n",
        "132": "a fundamental idea and they all have a\n",
        "133": "bunch of different\n",
        "136": "memory usage time usage and some extra\n",
        "138": "little details that are interesting as\n",
        "139": "well as whether or not the sort is\n",
        "143": "stable okay now not to review this table\n",
        "145": "here census in the previous lecture but\n",
        "146": "i do want to focus on one little thing\n",
        "148": "here which is the runtimes so heap sort\n",
        "150": "merge sort and quicksort are all\n",
        "152": "basically n log n sorts there's a little\n",
        "154": "bit of a caveat with quicksort plus it's\n",
        "156": "basically an in log n soort as long as\n",
        "158": "you do things right inside an insertion\n",
        "161": "sort is N squared for the most part so\n",
        "164": "now the question is could we do better\n",
        "166": "is there some other sort not in this\n",
        "168": "list that's like in log log n on any\n",
        "171": "input or maybe just in is that possible\n",
        "173": "and so what this lecture is going to be\n",
        "175": "about is addressing that question but\n",
        "176": "the second thing I want to talk about\n",
        "177": "before we get there is some math\n",
        "179": "problems out of nowhere just to get us\n",
        "182": "primed and ready so my first question\n",
        "184": "for you Matt from out of nowhere I would\n",
        "186": "like you to consider the functions in\n",
        "188": "factorial and in over 2 to the N over 2\n",
        "192": "and your job is to figure out is it true\n",
        "194": "that in fact oriole grows at least as\n",
        "197": "quickly as n over 2 to the N over 2 and\n",
        "198": "you should prove your answer and by\n",
        "201": "proof I mean just convince yourself this\n",
        "202": "doesn't have to be a formal proof or\n",
        "204": "anything but give it a shot use however\n",
        "209": "much time feels right can i'll spoil it\n",
        "211": "and i guess i should bring this up to\n",
        "213": "say if you aren't quite sure if you\n",
        "215": "don't over exactly what that means you\n",
        "216": "can informally think of it as greater\n",
        "218": "than or equal to more formally it just\n",
        "220": "says that for sufficiently large in this\n",
        "228": " \n",
        "231": "ok so my spoiler I'm going to write out\n",
        "233": "n factorial and I'm also going to write\n",
        "235": "out n over 2 to the N over 2 for some\n",
        "236": "particular n that's going to be my\n",
        "239": "approach and i'm going to pick n so just\n",
        "241": "to show you an example for 10 10\n",
        "243": "factorial of 10 x 9 x 8 times 7 times 6\n",
        "247": "times x 1 whereas in over 2 to the N\n",
        "249": "over 2 is 5 times 5 times 5 times 5\n",
        "251": "times 5 now we just compare these two\n",
        "255": "values element by element or product by\n",
        "259": "product we see that not product what do\n",
        "261": "you call them multiple kend actually I'm\n",
        "262": "going to remember anyway it's not\n",
        "265": "important so we compared 10 to 59 58 57\n",
        "269": "56 25 and we get that this 10 factorial\n",
        "271": "is obviously bigger than 5 to the five\n",
        "274": "on and so indeed for large n we know\n",
        "276": "that n factorial is greater than in over\n",
        "277": "to the N over 2 that is just look at any\n",
        "280": "other number 105 thousand a million\n",
        "282": "basically the same pattern holds true\n",
        "284": "and therefore we can say that n\n",
        "287": "factorial is at least as large as in\n",
        "289": "over 2 to the N over 2 that's math\n",
        "291": "problem out of nowhere number one but I\n",
        "293": "have another for you so now I'd like you\n",
        "295": "to say given that fact we just showed\n",
        "298": "that in a n factorial is greater than n\n",
        "300": "over 2 to the N over 2 for large ends I\n",
        "303": "want you to show that log n factorial is\n",
        "305": "greater than or equal to n log in and\n",
        "308": "formally and then as a reminder log is\n",
        "309": "we don't really care what base you just\n",
        "311": "show it for any base if you want to\n",
        "313": "specific one but it's just not really\n",
        "314": "part of the thing because given any base\n",
        "316": "we can just do a change of base and that\n",
        "318": "would be a leading constant and won't\n",
        "320": "affect our asymptotic notation so give\n",
        "323": "this a shot again pause the video think\n",
        "324": "about it and then I'll spoil it with my\n",
        "331": "approach ok I hope it's no surprise i\n",
        "333": "might be taking the laws of both sides\n",
        "337": "hint ok so here's my spoiler so since i\n",
        "338": "know that n factorial is greater than n\n",
        "341": "over 2 to the n over 2 for large n then\n",
        "343": "if i take the log of both sides we have\n",
        "345": "that login factorial it's greater than\n",
        "349": "login of sight log of n over 2 to the n\n",
        "351": "over 2 no big surprises here i can bring\n",
        "353": "down this exponent just using our usual\n",
        "356": "logarithm rules at this point i can drop\n",
        "359": "this tube and i'll say that if we drop\n",
        "360": "this too we're discarding the\n",
        "362": "unnecessary constant and we could say\n",
        "364": "that for very large and of course login\n",
        "366": "factorial gross at least as quickly as n\n",
        "369": "log n over 2 now this in over to it\n",
        "370": "turns out if you think about it login /\n",
        "373": "2 is just login minus log 2 so this too\n",
        "375": "is not very important so we can just\n",
        "377": "drop that and we end up saying that\n",
        "379": "login factorial grows at least as\n",
        "382": "quickly as n log in so that's makes what\n",
        "384": "I just said and this is just a note here\n",
        "385": "repeating what I said out loud that\n",
        "387": "login / 2 is the same thing\n",
        "389": "asymptotically as long again that is\n",
        "390": "their big theta each other if you like\n",
        "393": "so this right here we have now shown\n",
        "396": "this seemingly random fact now why do we\n",
        "398": "keep working with that factorial haven't\n",
        "399": "gotten there yet math problem out of\n",
        "401": "nowhere but hopefully your conventio\n",
        "403": "that log n factorial is greater than\n",
        "405": "Omega R so I today's goes at least this\n",
        "409": "back fast as and logon okay so to last\n",
        "412": "math problems this well this doesn't say\n",
        "414": "this is the last math problem than I\n",
        "416": "have like a trivia question next so we\n",
        "418": "have n log in and I want you to show me\n",
        "421": "that this or yourself that it's big\n",
        "423": "Omega log n factorial there seems to be\n",
        "424": "an extra parentheses but we'll live with\n",
        "427": "that and you know that's fine imagine\n",
        "429": "it's not there I'll cover it well i\n",
        "432": "can't i'm in the corner over here anyway\n",
        "435": "so try and figure that out and then i\n",
        "440": "will spoil it for you momentarily okay\n",
        "442": "so in this case my proof is as follows\n",
        "445": "login factorial this is very similar to\n",
        "446": "the first one we did but now we're going\n",
        "448": "to expand out of some the login\n",
        "450": "factorial is login plus log n minus 1\n",
        "453": "plus log n minus 2 plus plus log 1 this\n",
        "456": "is just again our usual rules for\n",
        "459": "expanding out logarithms right this is a\n",
        "461": "product we can turn that to a proc the\n",
        "463": "log of a product of things which we can\n",
        "467": "turn into a sum of logarithms in log in\n",
        "469": "by contrast it login plus log n plus log\n",
        "472": "n plus plus log in other words we have\n",
        "475": "the same number of logs but in this case\n",
        "477": "they're all login in this case they get\n",
        "479": "smaller and so in this case we could see\n",
        "481": "that in login will grow at least as fast\n",
        "483": "as log n factorial right this thing\n",
        "485": "right here is bigger than this right\n",
        "489": "here so we've shown a couple of things\n",
        "493": "right so we've shown the n log n is big\n",
        "494": "Omega log n factorial we\n",
        "496": "login factorial is big Omega and login\n",
        "499": "and so my question for you is which of\n",
        "501": "the following things can we say can we\n",
        "503": "say the N log in at theta log n\n",
        "505": "factorial can we see the login factorial\n",
        "507": "of theta n log in both of those things\n",
        "511": "or neither so think about that and I'll\n",
        "517": "spoil it on the next slide all right so\n",
        "519": "going through this the question is what\n",
        "520": "do we have this is basically a\n",
        "522": "definition test and kind of a reminder\n",
        "525": "here so it turns out oops all right so\n",
        "526": "it turns out we can say it's both a and\n",
        "529": "B and the basic reasoning is just the\n",
        "531": "way I think about is informally you can\n",
        "533": "imagine this means n log n is greater\n",
        "535": "than or equal to log in factorial right\n",
        "537": "that's just roughly speaking what this\n",
        "539": "means how you can read it off in your\n",
        "540": "brain you are not trained you haven't\n",
        "541": "brain you are not trained you haven't\n",
        "542": "been since birth thinking about big\n",
        "544": "omegas so it could be a little hard to\n",
        "546": "read but you can translate it it's a\n",
        "548": "little messy you could translate it to\n",
        "549": "me an N log n is greater than or equal\n",
        "552": "to log n factorial and over here we\n",
        "554": "could say log n factorial is greater\n",
        "557": "than in log in these two statements both\n",
        "560": "based basically both say in log in and\n",
        "562": "equal to log n factorial and this one's\n",
        "564": "log in fact or equals n log N and so the\n",
        "566": "only way you can reconcile these two\n",
        "568": "facts that this function is greater than\n",
        "569": "equal to this this is greater than equal\n",
        "571": "this is to say that they're equal that's\n",
        "574": "the rough way I think about it whenever\n",
        "575": "I'm trying to translate the symbols\n",
        "576": "especially working with someone who\n",
        "578": "doesn't know they symbols well and so\n",
        "581": "ultimately what we've just shown all\n",
        "582": "that work we've just done this math\n",
        "584": "problem Adam nowhere has been to show\n",
        "586": "that n log in and log n factorial are\n",
        "588": "basically the same function\n",
        "589": "asymptotically that is they'll be a\n",
        "591": "little different in terms of their exact\n",
        "593": "value but asymptotically they converge\n",
        "594": "to the same thing so they track each\n",
        "596": "other beautifully as we move to large\n",
        "601": "end ok now why do we do this again I\n",
        "602": "mean I haven't said but if I was\n",
        "604": "important for us to prime it to make\n",
        "605": "sure we really understand the nature of\n",
        "608": "big Omega and theta because it'll be\n",
        "609": "really important moving forward with the\n"
    },
    "Title=[Sorting4, Part 2] Simple Bounds for TUCS_Id=lO-K6fjj-lY": {
        "0": " \n",
        "3": "let's talk to lassari about sorting so\n",
        "4": "we have many sorts out there that take\n",
        "6": "in log in worst-case time right\n",
        "8": "mergesort you find its worst case input\n",
        "12": "it takes no more than n log n time now\n",
        "13": "the question is could we do even better\n",
        "15": "than that find some sort whose Achilles\n",
        "17": "heel takes only in log log n time or\n",
        "20": "just in time perhaps is that possible so\n",
        "22": "to give us something concrete to hold on\n",
        "23": "to let's imagine we have something i'll\n",
        "25": "call the ultimate comparison sort in\n",
        "28": "comparison sort I just mean it makes a\n",
        "30": "sequence of calls to compare to to\n",
        "32": "decide how to order things let's say\n",
        "35": "that sucks the ultimate comparison based\n",
        "38": "sort is the algorithm that has the\n",
        "40": "asymptotically fastest possible\n",
        "43": "worst-case runtime okay so you give\n",
        "46": " in and put and no matter what it\n",
        "49": "will have just blazing fast wonderful\n",
        "51": "asymptotic runtime and let's say that\n",
        "54": "its runtime is our then which is its\n",
        "57": "worst-case runtime in theta notation in\n",
        "58": "other words our event is some function\n",
        "61": "and the worst-case runtime of tux is\n",
        "66": "Theta our event okay so what we can say\n",
        "69": "then this worst-case runtime of tux it's\n",
        "72": "some function r MN oh and i can tell you\n",
        "74": "that that function whatever it is it's\n",
        "76": "in log n why is that I'm gonna draw a\n",
        "78": "little picture here so this is tux it is\n",
        "81": "a worst-case runtime in theta notation\n",
        "83": "and I could say to that runtime is not\n",
        "86": "going to be any worse than in log n why\n",
        "91": "is that so the reason there is that we\n",
        "93": "already have an algorithm that takes\n",
        "95": "data and log n merge sort for example\n",
        "98": "let's suppose tucks its worst-case\n",
        "100": "runtime with N squared that is our oven\n",
        "102": "equals theta N squared that would be a\n",
        "104": "proof that that's not actually tux\n",
        "107": "because we said by definition tux must\n",
        "110": "be big fastest sorting algorithm\n",
        "112": "asymptotically and in that case is not\n",
        "114": "as good as merge sort okay so we know we\n",
        "116": "have a proof of concept that there\n",
        "118": "exists some algorithm which has n log n\n",
        "121": "runtime so this runs I'm are of em we\n",
        "124": "could say it's o of n log n okay now\n",
        "125": "again just to kind of remind you what is\n",
        "127": "our event our of n is the runtime of\n",
        "130": "tucks in the worst case so the runtime\n",
        "132": "of tuxes theta R of em and here we're\n",
        "133": "trying to speculate about\n",
        "135": "at function our Venn and I could say\n",
        "141": "that our of n is Big O of n log n so how\n",
        "143": "about the worst-case runtime of tux how\n",
        "144": "else can we found it well I can say that\n",
        "147": "the worst-case runtime of tux our oven\n",
        "151": "is omega one and I'll put it here on\n",
        "153": "this diagram and that basically just\n",
        "154": "says the problem doesn't get any easier\n",
        "156": "with them and the question is can we\n",
        "158": "make a stronger statement than Omega 1\n",
        "164": "ok so imagine here you're trying to\n",
        "165": "consider all possible sorting algorithms\n",
        "169": "out there is there a better bound on the\n",
        "175": "runtime of that of the tux ok I'm going\n",
        "177": "to say yes I think linear is a good\n",
        "180": "lower bound and the basic argument there\n",
        "181": "is that whatever the runtime of tux is\n",
        "183": "in the worst case it has do a be at\n",
        "185": "least linear time because we have to at\n",
        "186": "least linear time because we have to at\n",
        "188": "least look at every item here so this\n",
        "189": "algorithm whatever it is tuxes\n",
        "192": "worst-case runtime is going to be Omega\n",
        "195": "N and that's just another way of saying\n",
        "196": "it has to at least look at every item\n",
        "198": "you can't be so clever but you don't\n",
        "200": "have to look at every item because let's\n",
        "201": "say you know you try and come up with a\n",
        "203": "sorting algorithm it only looks at the\n",
        "204": "first half of the items or something\n",
        "206": "well I still in right o Satan looks at\n",
        "209": "the first square root of n items right\n",
        "210": "so if you give it a thousand items it\n",
        "212": "only hit looks like you look at 10,000\n",
        "213": "items that have to only look at the\n",
        "215": "first hundred or something that wouldn't\n",
        "216": "make any sense because there's all the\n",
        "218": "stuff you haven't looked at so I hope\n",
        "221": "it's clear that the runtime of tux has\n",
        "223": "to be at least linear time and so in\n",
        "225": "terms of all of our formal symbols here\n",
        "228": "I can say that the worst-case runtime of\n",
        "231": "tux which is stata our event that\n",
        "235": "function R of n itself is omega n and\n",
        "238": "Big O of n log N and if all these o's\n",
        "239": "and omegas are getting a little\n",
        "241": "confusing you can maybe just imagine\n",
        "242": "that we have greater than or equal to or\n",
        "244": "less than or equal to symbols and i hope\n",
        "247": "that will help demystify it so it turns\n",
        "250": "out that it is possible to do even\n",
        "254": "better than in and that runtime is going\n",
        "256": "to turn out to be n log n so we're going\n",
        "258": "to show that we can actually do better\n",
        "260": "than saying it's at least linear to say\n",
        "262": "it's at least n log N and what that\n",
        "263": "lower bound means what's so interesting\n",
        "266": "about this is it across the entire space\n",
        "267": "anything\n",
        "268": "you might imagine across all of\n",
        "271": "humanity's cleverness and ambition to\n",
        "274": "try and do better among all of those\n",
        "276": "ideas none of them is any better than\n",
        "277": "mergesort asymptotically in the worst\n",
        "278": "mergesort asymptotically in the worst\n",
        "279": "case okay that's what we're going to\n",
        "282": "show there's no need to go searching for\n",
        "284": "an even better sort at least in terms of\n",
        "287": "Assam pot and so what we'll do in the\n",
        "288": "next little video as well start\n",
        "290": "detailing this proof with a glorious\n",
        "291": "detailing this proof with a glorious\n"
    },
    "Title=[Sorting4, Part 3] Puppy Cat Dog_Id=ByjmA0x_D2A": {
        "0": " \n",
        "2": "to understand the sorting problem more\n",
        "4": "deeply let's consider this game called\n",
        "6": "puppy cat dog now warn you in advance\n",
        "8": "this this game is going to quite\n",
        "11": "possibly make you feel dumb because it\n",
        "12": "feels like it should be easy but it's\n",
        "13": "actually hard something about the\n",
        "15": "thinking at least for my brain isn't\n",
        "18": "natural but here's how it goes so puppy\n",
        "20": "cat dog is played as follows we have\n",
        "23": "three boxes a B and C and we're going to\n",
        "24": "load up our puppy our cat and our dog\n",
        "26": "into one of these three boxes and we\n",
        "27": "want to figure out which one is which\n",
        "30": "using a scale so each of these boxes is\n",
        "32": "a pake we can't see inside there's no\n",
        "33": "sound coming out of it the only way we\n",
        "35": "can get information from it in our\n",
        "36": "thought experiment here is using a scale\n",
        "38": "and then I'll tell us which one's\n",
        "40": "heavier than the other and we're going\n",
        "41": "to assume that the puppy is lighter in\n",
        "43": "weight in the cat which is lighter in\n",
        "44": "weight than the dog and let's say their\n",
        "45": "weights are all unique just to keep our\n",
        "47": "sink thinking simple so let's imagine\n",
        "48": "sink thinking simple so let's imagine\n",
        "52": "that we used to we weigh our two items a\n",
        "54": "and B so we take this box day in this\n",
        "57": "box beam we find that a is indeed less\n",
        "59": "than B so B is another words bigger than\n",
        "62": "a and let's say we also find that b is\n",
        "64": "less than C or equivalently see it's\n",
        "65": "bigger than be the question is which is\n",
        "68": "which okay well hopefully it's clear\n",
        "70": "that a is bumpy these the cat and c is\n",
        "72": "the dog so in other words if we wanted\n",
        "74": "to sort these three boxes the sorted\n",
        "78": "order is ABC okay now how about next up\n",
        "80": "we have the opposite happens right we\n",
        "83": "say that is a less than B no ok B's\n",
        "86": "bigger than X so p is bigger than a and\n",
        "89": "then we say is be less than C note C is\n",
        "91": "bigger than be okay so in that case see\n",
        "93": "you is bigger than B be used bigger than\n",
        "95": "a and so if we say which is which we\n",
        "97": "have the opposite order that sees the\n",
        "99": "puppy be use the cat and a is the dog\n",
        "102": "right in other words the sorted order is\n",
        "105": "C be a that's what these orders tell us\n",
        "107": "okay question for you to see if this\n",
        "108": "okay question for you to see if this\n",
        "109": "game makes sense and this is where it's\n",
        "111": "going to start making me feel dumb the\n",
        "112": "question is which is which if we find\n",
        "115": "that a is less than B but B is not less\n",
        "117": "than C ok so I'll give really think\n",
        "119": "about this right because there's no\n",
        "120": "reason to watch me do this it'll just be\n",
        "122": "confusing so really think about this one\n",
        "129": " \n",
        "131": "okay so it turns out a little bit of a\n",
        "133": "trick question there's actually two\n",
        "135": "possible answers right so if we say that\n",
        "139": "a is less than B &amp; B is not less than C\n",
        "140": "there's actually two possibilities so\n",
        "142": "while all we know can we know that a is\n",
        "143": "less than B these are the two answers\n",
        "146": "consistent with the hypothesis and we\n",
        "149": "know that c is greater than so we know\n",
        "151": "that b is greater than C so both of\n",
        "152": "these have the properties that b is\n",
        "154": "greater than C and the a is less than C\n",
        "157": "and there's no way these like these two\n",
        "159": "measurements only resolve it down to the\n",
        "161": "level of specification of these two\n",
        "162": "items it's kind of interesting right you\n",
        "164": "didn't really think that asymmetry was\n",
        "166": "going to happen both will see in the\n",
        "168": "diagram soon it was just had to happen\n",
        "169": "but I hope that makes sense right\n",
        "170": "but I hope that makes sense right\n",
        "171": "there's only there's two possible things\n",
        "174": "consistent with this ordering and so\n",
        "176": "just spoiled so the question is what\n",
        "179": "question caster is all the ambiguity\n",
        "181": "okay well so I guess it's pretty natural\n",
        "183": "here so if we wanted to resolve the same\n",
        "185": "vacuity what do we know we know a is\n",
        "188": "less than B and we know that that b is\n",
        "191": "greater than C but we don't know if you\n",
        "192": "look at these two and you think what do\n",
        "194": "we not know we don't know a and C your\n",
        "196": "order so we could ask the question is a\n",
        "199": "less than see if the answer were yes\n",
        "201": "then the answer would simply be a CB or\n",
        "205": "puppy a is puffy see is cat b stock\n",
        "208": "would be this row right here okay so if\n",
        "210": "you're feeling a little like huh how is\n",
        "212": "that like trickier than I expected that\n",
        "214": "just kind of goes with this like don't\n",
        "216": "don't feel bad about that maybe even\n",
        "217": "just go do that exercise again maybe not\n",
        "219": "right now but don't know an hour or\n",
        "221": "something okay so we can actually draw\n",
        "224": "at a decision tree and this is basically\n",
        "225": "if you wanted to write down the\n",
        "226": "instructions to somebody have never\n",
        "228": "played the game knows how to win do you\n",
        "229": "have you to have them give them a card\n",
        "231": "notes say at top ask is a less than B or\n",
        "233": "in other words take a and B put them on\n",
        "236": "the scale oops and the answer we're yes\n",
        "238": "well you still have to ask another\n",
        "240": "question we ask is be less than see if\n",
        "242": "these answer is yes then you know the\n",
        "244": "answer you know that a is puppy be is\n",
        "246": "can't and see his dog or in other words\n",
        "249": "in sorted order there a B C now the\n",
        "251": "answer is no that's actually the problem\n",
        "254": "we just ran into if the answer was yes\n",
        "256": "then no and we actually have to ask\n",
        "258": "another question to resolve the result\n",
        "261": "so the answer is yes it would be exactly\n",
        "262": "what was just on the previous slide we\n",
        "263": "have a\n",
        "266": "puppy sees can't be used on a CB the\n",
        "269": "answer is no in that case it C is puppy\n",
        "272": "a is can't be is dog so it just tells\n",
        "273": "you which order a and C should go in\n",
        "275": "right now what this question tells you\n",
        "278": "on the other hand we also have the no\n",
        "279": "side of the tree i'm not going to show\n",
        "281": "it you can derive us maybe it's a fun\n",
        "285": "exercise and this right here is\n",
        "287": "everything you need to know to win the\n",
        "291": "game of puppy cat dog so a question for\n",
        "293": "you given what we just learned here\n",
        "294": "maybe look at this diagram that's a\n",
        "296": "pretty challenging problem but the\n",
        "298": "question is how many questions right how\n",
        "300": "many weighings how many times you need\n",
        "301": "to do a weighing measurement do you need\n",
        "303": "to solve the puppy cat dog walrus\n",
        "305": "problem what's that problem is the same\n",
        "308": "thing but now with four of creatures in\n",
        "309": "the set of three and the question is\n",
        "312": "well for puppy cat dog we had to ask\n",
        "315": "three questions in the worst case the\n",
        "317": "question is for puppy cat dog walrus\n",
        "319": "what's the worst case number of\n",
        "321": "questions you need to ask to definitely\n",
        "326": "solve the problem I guess what's up this\n",
        "328": "diagram up it's probably more useful for\n",
        "331": "thinking I will probably take a little\n",
        "333": "time to think about give yourself to\n",
        "339": "nuts okay so if we had puppy cat dog\n",
        "341": "walrus here's the trick so with cat\n",
        "344": "there are three items alright recycling\n",
        "345": "there are three items alright recycling\n",
        "347": "with three things there are six\n",
        "349": "permutations but once you had a fourth\n",
        "351": "item there are now four times as many\n",
        "353": "permutations as before so in other words\n",
        "356": "before we have three factorial now we\n",
        "358": "have four factorial there's 24 total\n",
        "360": "permutations now since each of our\n",
        "363": "decisions is on a binary tree we need\n",
        "366": "basically a hierarchy where we ask a\n",
        "367": "bunch of questions and at the bottom\n",
        "369": "we're going to count the number of\n",
        "371": "leaves this is a number of resolutions\n",
        "373": "so for puppy cat dog there were six\n",
        "376": "leaves for walrus will be 24 leaves and\n",
        "379": "so the question basically amounts to how\n",
        "382": "many if we have a binary search tree or\n",
        "383": "sign about binary search tree a binary\n",
        "385": "tree how many levels do we need to have\n",
        "389": "24 leaves so we can compute the log base\n",
        "392": "two of 24 and get 4.5 and we have to\n",
        "394": "round up because you can't have my part\n",
        "397": "of a level and so the result will be\n",
        "399": "is the minimum okay some of the words we\n",
        "401": "could have done it for public at dog and\n",
        "403": "said there's six leaves so to deal with\n",
        "405": "that we need a log base two of six\n",
        "408": "levels and we see that okay so that's\n",
        "410": "two point five levels roughly but we\n",
        "413": "don't use the entire levels wait sent\n",
        "417": "right 2.5 log base 2 of 6 know that's a\n",
        "423": "calculator blog 2 of 6 it's 2.5 eight\n",
        "425": "levels and so we have to round up right\n",
        "428": "so we didn't use all that third level\n",
        "430": "but we have to do festivus M&amp;A we got\n",
        "433": "and so with puppy cat dog walrus the\n",
        "435": "question or we'd get the same thing it's\n",
        "438": "around 4.5 until we get five as our\n",
        "442": "minimum yeah so that's the heart of the\n",
        "443": "argument we're going to use for sorting\n",
        "445": "soon and I'll talk about that a little\n"
    },
    "Title=[Sorting4, Part 4] Puppy Cat Dog_Id=h7TK_-sWsxY": {
        "0": " \n",
        "2": "before we turn to sorting we need to\n",
        "3": "before we turn to sorting we need to\n",
        "4": "first make sure we understand how puppy\n",
        "6": "cat dog is going to work moving forwards\n",
        "9": "for larger n the question is how many\n",
        "11": "questions do you need to definitively\n",
        "13": "solve the generalized puppy cat dog\n",
        "16": "problem for n items so in equals floor\n",
        "17": "would be the version from the previous\n",
        "19": "page and now we're imagining we go up to\n",
        "21": "arbitrary an and I'd like you to give\n",
        "23": "your answer in big Omega notation and a\n",
        "25": "hint for N equals 4 we said the answer\n",
        "27": "is 5 based on this argument the decision\n",
        "30": "tree needs 4 factorial 4 24 leaves so we\n",
        "34": "need long 24 rounded up levels or five\n",
        "38": "okay think about then this point a\n",
        "40": "little dangerous you can almost pattern\n",
        "42": "match with that think i'm giving a\n",
        "45": "moment to ponder so it turns out the\n",
        "48": "answer is omega log n factorial so why\n",
        "50": "well the decision treats needs in\n",
        "52": "factorial leaves right if you have eight\n",
        "54": "different items there's eight factorial\n",
        "56": "permutations if you give someone giant\n",
        "58": "tree of what to do that tree needs at\n",
        "60": "least I factorial leads and so that\n",
        "62": "means we need a basin login factorial\n",
        "64": "rounded up levels to our trees that is\n",
        "66": "our tree needs to be at least height log\n",
        "68": "n factorial to have n factorial leaves\n",
        "71": "and as a result the overall runtime then\n",
        "74": "our site the overall number of levels is\n",
        "77": "big Omega log n factorial now it turns\n",
        "80": "out that the problem was finding an\n",
        "81": "optimized decision tree for the\n",
        "83": "generalized version let's say puppy cat\n",
        "85": "dog monkey Wohlers elephant that's\n",
        "87": "actually an open problem in mathematics\n",
        "90": "right that is how given eight items or\n",
        "92": "six items or whatever find the minimum\n",
        "94": "number of comparisons you need and what\n",
        "96": "exactly that tree should look like and\n",
        "99": "as far as I know we only know the best\n",
        "101": "known trees if we go here to this link\n",
        "104": "this is the best known number of\n",
        "106": "comparisons so this is the one we did\n",
        "108": "this is a puppy cat dog this is puppy\n",
        "110": "cat dog walrus this is the next one up\n",
        "112": "and so forth and these are the best\n",
        "114": "known that anybody has but eventually it\n",
        "116": "becomes too hard and nobody found the\n",
        "120": "right decision tree ok so I'll mention\n",
        "124": "them that deriving a sequence of yes or\n",
        "125": "no question to let you solve puppy cat\n",
        "128": "dog it's a very hard thing to do so if\n",
        "130": "you want to actually construct one of\n",
        "132": "these trees right I mean you thought\n",
        "133": "about what it might look like\n",
        "134": "maybe with walrus you might have thought\n",
        "136": "about what exactly this one looks like\n",
        "138": "turns out that deriving these trees is\n",
        "140": "typically pretty hard but does it\n",
        "142": "alternate strategy for solving the\n",
        "144": "puppet got dog prom right you can solve\n",
        "146": "puppy cat dog without having to lay out\n",
        "148": "carefully a set of rules and think\n",
        "150": "really hard about it and so what you can\n",
        "152": "do instead it just sort them using any\n",
        "153": "do instead it just sort them using any\n",
        "155": "generic sorting algorithm right that is\n",
        "158": "you take your boxes you use your scale\n",
        "161": "to put them in order and at that point\n",
        "162": "you know that the leftmost box at least\n",
        "165": "43 would be puppy the middle is cat and\n",
        "169": "the third is dog okay you could do that\n",
        "170": "for a thousand items given a thousand\n",
        "173": "items you don't know who's what you can\n",
        "175": "just throw them into merge sort tell\n",
        "176": "merge sort to you that scale to put them\n",
        "179": "in order and that solves puppy cat dog\n",
        "181": "okay so in other words instead of having\n",
        "183": "somebody manually or like drawing out\n",
        "185": "this tree you don't have to draw on one\n",
        "186": "of these trees you could just say hey\n",
        "187": "merge sort do the job and that will\n",
        "190": "solve it it's almost so obvious that\n",
        "191": "it's confusing to have to hear me say it\n",
        "193": "right but if you use the scale use\n",
        "196": "comparison operations boom publicat dog\n",
        "200": "it's all okay so we might ask ourselves\n",
        "202": "why do we care about these critters why\n",
        "204": "do we care about sorting why do we care\n",
        "206": "about the pumping at dog problem that is\n",
        "208": "identifying who's in which box and the\n",
        "211": "reason is that sorting provides a\n",
        "214": "solution to puppy cat dog that is this\n",
        "217": "identity problem so there's a word often\n",
        "218": "used in theoretical computer science\n",
        "220": "called reducing and we could say that\n",
        "222": "the game puppy cat dog that is figure\n",
        "224": "out who's in which box it reduces to\n",
        "227": "sorting so what we can say about that is\n",
        "229": "that any lower bound on the difficulty\n",
        "231": "of puppy cat dog must also apply to\n",
        "234": "sorting so why is that well I use this\n",
        "235": "physics analogy I find it really helpful\n",
        "237": "which is that climbing a hill with your\n",
        "240": "legs cogwheel is one way to solve the\n",
        "243": "problem of getting up a hill so in\n",
        "244": "physics right we know because of the\n",
        "247": "idea of conservation of energy that any\n",
        "249": "lower bound on the energy needed to get\n",
        "252": "up a hill must also apply to climbing up\n",
        "254": "a hill with your legs you could take an\n",
        "256": "airplane you could drive you could use a\n",
        "258": "catapult but regardless of what you try\n",
        "261": "it's going to take at least mgh energy\n",
        "263": "to climb the hill so using your legs is\n",
        "265": "going to take at least mgh energy and in\n",
        "266": "fact it's going to take a little more\n",
        "267": "because\n",
        "269": "the losses due to friction wind\n",
        "270": "resistance and all that it's the same\n",
        "273": "idea here any algorithm you use to\n",
        "275": "figure out who's the puppy who is the\n",
        "277": "cat and who's the dog is also going to\n",
        "279": "apply to sorting because sorting is just\n",
        "281": "one way to resolve the problem so we\n",
        "283": "know two different ways to solve tough\n",
        "285": "the cat dog wanted to use this table and\n",
        "287": "another is just use merge sort or\n",
        "288": "insertion sort or whatever and so we\n",
        "291": "know that whatever bounds we can come up\n",
        "293": "with for the puppy cat dog problem also\n",
        "297": "apply the sort okay so actually have a\n",
        "299": "lower bound on puppy cat on which is\n",
        "301": "that it takes at least big Omega login\n",
        "303": "factorial comparisons to solve the\n",
        "305": "puzzle right we know that and since\n",
        "307": "sorting with comparisons can be used to\n",
        "309": "solve puppy cat dog then sorting also\n",
        "313": "takes big Omega log n factorial okay so\n",
        "314": "in other words play put it this way if\n",
        "316": "you have a sort the use of sequential\n",
        "318": "comparisons the compareto method in Java\n",
        "320": "then no matter how clever you try to be\n",
        "322": "it's going to take at least log in\n",
        "324": "factorial compares to find the correct\n",
        "325": "permutation that's just how it's going\n",
        "328": "to be so even tux the ultimate sorting\n",
        "329": "algorithm that we may be avid vented\n",
        "331": "maybe haven't it takes at least log in\n",
        "334": "factorial comparisons now we know that\n",
        "336": "log base 2 in factorial is trivially\n",
        "340": "going to be big Omega log n factorial so\n",
        "342": "tux must take log n factorial time okay\n",
        "344": "so we know that tux lives between n log\n",
        "346": "in and log n factorial and so the\n",
        "348": "question is how does log n factorial\n",
        "350": "compared to n log n well we spent a lot\n",
        "351": "of time on our math problem out of\n",
        "353": "nowhere we showed that the big theta\n",
        "356": "each other I just fell just show the\n",
        "357": "Omega for now that long n factorial\n",
        "360": "droves at least as fast as in log in we\n",
        "362": "had this proof earlier just remember\n",
        "365": "this whole story about how long n\n",
        "367": "factorial and in login are the same and\n",
        "370": "so ultimately then we have that since\n",
        "372": "oxygen log it's big Omega log n\n",
        "375": "factorial and login factorial is omega n\n",
        "377": "log n we have the tux is omega n log n\n",
        "380": "so in other words any comparison based\n",
        "383": "sort uses at least in log n comparisons\n",
        "386": "which is pretty great so in other words\n",
        "388": "we have shown that it doesn't matter how\n",
        "391": "clever you are you could try to do\n",
        "392": "anything you want the worst-case runtime\n",
        "394": "of your sort is going to be at least n\n",
        "397": "log n for comparison ok and again to\n",
        "399": "kind of summarize this puppy cat dog\n",
        "400": "that game\n",
        "404": "takes Omega log n factorial comparisons\n",
        "407": "tux can solve puppycat dog and thus also\n",
        "409": "takes big Omega log n factorial because\n",
        "412": "it's one particular solution to puppy\n",
        "414": "cat dog log n factorial is big Omega n\n",
        "416": "log N and that was because n factorial\n",
        "419": "was big Omega n over 2 to the N over 2\n",
        "421": "so in informally you can think about it\n",
        "425": "this way tucks takes more time there it\n",
        "427": "takes at least as much time as puppy cat\n",
        "429": "dog and puppy cat dog takes at least as\n",
        "431": "much time as login factorial and that\n",
        "433": "takes at least n log in it so ultimately\n",
        "435": "tux is bigger than or equal to n log n\n",
        "437": "this is a very informal way of putting\n",
        "439": "it but it's also less than or equal to n\n",
        "443": "log n here again so the punchline then\n",
        "445": "is that our best sort heap sort merge\n",
        "447": "sort randomized quicksort they have\n",
        "450": "obscene asymptotic optimality absolutely\n",
        "451": "couldn't do better and it's\n",
        "453": "mathematically impossible to sort using\n",
        "458": "fewer comparison now again this is only\n",
        "461": "expected but it's pretty much safe okay\n",
        "463": "now the best sauce if you do something\n",
        "465": "like oh well imagine we can perform an\n",
        "467": "infinite number of comparisons of\n",
        "469": "parallel somehow in that case well\n",
        "470": "whatever it's constant time to sort\n",
        "471": "anything because you have an infinite\n",
        "473": "number of comparisons at once but if\n",
        "475": "we're taking sequential comparisons you\n",
        "478": "can't do any better than in log n okay\n",
        "482": "so let's see nope all right I really\n",
        "484": "showed that so I just want to do it now\n",
        "486": "so I guess I thought I have a spoiler\n",
        "487": "slide on the next slide which I\n",
        "490": "apparently don't which is that the next\n",
        "492": "lecture been right now that we've done\n",
        "493": "all that what we're going to do is show\n",
        "495": "that we can actually do better than n\n",
        "498": "log in as long as we simply avoid the\n",
        "500": "messy nature of or the messy operation\n",
        "503": "known as comparison we don't compare we\n",
        "505": "can do better for sorting and that will\n",
        "506": "be a little strange that'll be next\n"
    },
    "Title=[Syntax1, Video 1] Autoboxing and Unboxing_Id=Yp-TT2uT0Y4": {
        "0": " \n",
        "2": "hi there been a while well for me at\n",
        "3": "hi there been a while well for me at\n",
        "4": "least I know for you maybe it was just\n",
        "5": "one click there's been many days since\n",
        "7": "I've done one of these in real life\n",
        "12": "we've had a midterm we've released a big\n",
        "14": "project but you know for you who knows\n",
        "18": "how time passes so for the next few\n",
        "20": "lectures we're gonna wrap up Java syntax\n",
        "22": "this will be it for Java stuff and then\n",
        "23": "after that we're gonna move on to data\n",
        "25": "structures and algorithms and that will\n",
        "27": "be the entirety of the rest of the\n",
        "29": "course so these next set of topics they\n",
        "31": "aren't super exciting I mean you might\n",
        "33": "find them fun but they're they're not\n",
        "35": "really big ideas so much as the way Java\n",
        "37": "does stuff so this is now where we're\n",
        "38": "entering the part of the class known as\n",
        "40": "advanced programming and most of the\n",
        "42": "work for the course now is going to be\n",
        "44": "focused on project 2 and so some of\n",
        "46": "these ideas that we're gonna present in\n",
        "47": "these lectures will be handy to you and\n",
        "49": "project 2 and you may see them in the\n",
        "50": "future now this is not gonna be a\n",
        "52": "comprehensive look at Java syntax\n",
        "54": "there's actually lots of other stuff out\n",
        "56": "there that we won't cover ever and\n",
        "57": "that's just because it's not a job of\n",
        "59": "class right we've got what we want after\n",
        "61": "this and we'll move on so in this\n",
        "63": "lecture we're gonna talk about auto\n",
        "64": "boxing promotion immutability and\n",
        "66": "generics and the next lectures we'll\n",
        "69": "talk about some more stuff so let's\n",
        "71": "start by talking about generics ok\n",
        "74": "so for the most part as you've seen in a\n",
        "75": "ray deck and linked list deck using\n",
        "77": "generics is pretty straightforward all\n",
        "80": "you need to do in order to use a generic\n",
        "81": "class is you need to provide an actual\n",
        "84": "type argument so if I have for example\n",
        "87": "an ArrayList that someone defined that\n",
        "89": "has some type parameter then we will\n",
        "92": "provide actual type arguments and here\n",
        "93": "I've noted I've put it both in the\n",
        "95": "declaration and in the instantiation\n",
        "97": "though of course we learned earlier kind\n",
        "99": "of Java 8 it's no longer necessary at\n",
        "101": "instantiation to do so as long as we're\n",
        "103": "declaring a variable at the same time\n",
        "107": "because Java will infer that now one\n",
        "109": "thing that we did not talk about was why\n",
        "110": "thing that we did not talk about was why\n",
        "111": "it is that when we want to create an\n",
        "113": "ArrayList of say integers I just\n",
        "115": "mentioned in an earlier video why it is\n",
        "118": "that we don't do lowercase n and so the\n",
        "120": "answer is simply that if you try and do\n",
        "121": "lowercase int you get a compile time\n",
        "123": "error so for example if I were to try\n",
        "126": "and compile this at the command line I\n",
        "129": "would get ArrayList int yeah you gotta\n",
        "131": "and I would the error would be required\n",
        "133": "reference found int does\n",
        "135": "like it and so what this is saying is it\n",
        "137": "expects a reference type any reference\n",
        "139": "type so what's a reference type it's\n",
        "141": "anything that's not a primitive type and\n",
        "144": "so this is a whole new hierarchy of\n",
        "147": "reference types that go with the\n",
        "149": "primitive types that we've come to know\n",
        "151": "and love and double those sorts of\n",
        "153": "things and so for each of those\n",
        "155": "primitive types there's a so called\n",
        "158": "wrapper type that represents the\n",
        "162": "reference version of the same idea and\n",
        "164": "so this right here we have byte short\n",
        "165": "integer long float and double and it\n",
        "167": "turns out that actually all of these\n",
        "169": "implement an interface known as number\n",
        "170": "you're not likely to interface with this\n",
        "173": "number class or interface directly so it\n",
        "176": "can't happen we also have boolean and\n",
        "179": "characters which are not numbers and but\n",
        "181": "all of them are objects of course and so\n",
        "183": "it's these reference types that we're\n",
        "187": "gonna be looking at and using so as\n",
        "190": "we've seen before we can say new\n",
        "193": "ArrayList integer and naively if we did\n",
        "195": "that then when we wanted to add if we\n",
        "197": "wanted to add a number to an ArrayList\n",
        "198": "we'd have to do something like elda add\n",
        "201": "new integer five Elda add new manager\n",
        "203": "sex because if this thing's expecting\n",
        "205": "integers I probably should be giving it\n",
        "208": "integers and likewise when I get back a\n",
        "210": "value from an ArrayList well when I say\n",
        "213": "L dot get zero it turns out that I want\n",
        "216": "to put it into an int variable and so to\n",
        "218": "get that value back I can use the value\n",
        "220": "of method that's part of the integer\n",
        "222": "class that I won't show quite yet okay\n",
        "225": "now doing something like this would be\n",
        "226": "super annoying if you had to manually\n",
        "230": "create an integer wrapper around each of\n",
        "231": "your numbers you wanted to put in an\n",
        "232": "ArrayList that wouldn't be so great and\n",
        "234": "likewise it seems annoying to have to\n",
        "237": "unwrap them and so at the same time they\n",
        "239": "released generics when they added it to\n",
        "241": "the language they also introduced this\n",
        "244": "neat feature which is auto boxing and\n",
        "247": "its counterpart auto unboxing so in Java\n",
        "249": "you will always get an implicit\n",
        "252": "conversion between the wrapper type that\n",
        "253": "goes to the primitive type and\n",
        "256": "vice-versa when needed and so for\n",
        "258": "example if I say if I say Elda add five\n",
        "261": "then the int even though is just a raw\n",
        "265": "primitive 32 bits that represent the\n",
        "266": "number five it will get wrapped up out\n",
        "268": "matically and so this code right here\n",
        "270": "works beautifully and you didn't even\n",
        "271": "have to know about this in order to use\n",
        "274": "arraylists however it is nice to know\n",
        "277": "that this exists because if you naively\n",
        "279": "proceed you can occasionally take some\n",
        "281": "significant performance sets so let's\n",
        "283": "get a sense of what's going on here\n",
        "285": "whenever you have code that expects a\n",
        "288": "wrapper type but you give it a primitive\n",
        "290": "it will automatically box up the number\n",
        "292": "so here for example is a method called\n",
        "294": "blah it accepts integers the wrapper\n",
        "297": "class and then prints them out however\n",
        "299": "if we call blah with a lower case int\n",
        "301": "then in that case it gets automatically\n",
        "303": "boxed up when this call happens it just\n",
        "305": "happens without you doing anything\n",
        "307": "likewise if we have a method that\n",
        "310": "expects a primitive and you instead give\n",
        "312": "it a reference type then or a wrapper\n",
        "314": "type around that primitive then it will\n",
        "317": "automatically unbox it for you okay now\n",
        "319": "a couple little tiny notes one is if you\n",
        "322": "have an array events if you cannot box\n",
        "324": "it into an array of integers and vice\n",
        "326": "versa if you actually need to make a\n",
        "327": "copy for some reason which can happen\n",
        "329": "sometimes then you actually need to make\n",
        "332": "a manual copy another is that the\n",
        "333": "process of auto boxing and unboxing\n",
        "336": "actually incurs a measurable performance\n",
        "338": "impact so the very fact that the\n",
        "341": "ArrayList class takes capital I integers\n",
        "342": "means if it performance won't be quite\n",
        "345": "as good as a version of ArrayList that\n",
        "348": "is hard to hardwired to handle the int\n",
        "351": "primitive type another big issue is that\n",
        "352": "wrapper types actually use much more\n",
        "354": "memory than primitive types and we'll\n",
        "357": "see just how much in a moment now I want\n",
        "358": "to mention that wrapper types are not\n",
        "359": "magic\n",
        "360": "they don't do anything that your classes\n",
        "362": "don't do for the most part and in fact\n",
        "364": "we can click right here oh it's me we\n",
        "366": "can click right here and we can see the\n",
        "368": "code for the integer class it's long has\n",
        "370": "lots of stuff in it I'm not gonna go\n",
        "372": "through this in detail although I won't\n",
        "376": "note that it has a private int privates\n",
        "379": "final and yes one of the things that has\n",
        "383": "is on line 840 it has an instance\n",
        "384": "variable which is called private final\n",
        "385": "variable which is called private final\n",
        "387": "int value and that you might imagine try\n",
        "390": "and guess what that is this is the value\n",
        "392": "that when you create an integer that you\n",
        "394": "wrap the thing that gets boxed up gets\n",
        "396": "put in this variable ultimately and so\n",
        "398": "you can see that happening right here in\n",
        "400": "the constructor we can also see for\n",
        "403": "valueof method where is that value of\n",
        "404": "valueof method where is that value of\n",
        "406": "okay so what is value of do well it's\n",
        "407": "actually a little more complicated than\n",
        "409": "you might have guessed I won't go into\n",
        "411": "why that is okay now you've actually\n",
        "413": "used the integer class before in\n",
        "416": "particular you used the parse int method\n",
        "418": "and so the point here is simply to say\n",
        "420": "this integer class is a lot like the\n",
        "421": "ones that you've written in the past\n",
        "423": "this one happens to be 1600 lines long\n",
        "426": "and it does integer stuff only but\n",
        "427": "that's what it's all about and you can\n",
        "429": "actually see the authors of this class\n",
        "433": "including Josh blue who wrote some\n",
        "435": "really lovely books and I encourage you\n",
        "437": "if we actually end up going forward with\n",
        "439": "Java to check out his effective Java\n",
        "443": "which is quite good okay so the only\n",
        "445": "thing that's special about the integer\n",
        "447": "class capital i integer that is\n",
        "448": "different from what you can build in\n",
        "451": "java is auto boxing and unboxing you\n",
        "454": "cannot change the behavior of java in a\n",
        "455": "way that will allow you to do something\n",
        "457": "like boxing and auto boxing but other\n",
        "459": "than that single superpower of integer\n",
        "462": "it's just like any other class so the\n",
        "464": "last little thing I want to say about\n",
        "466": "wrapper types is the amount of memory\n",
        "469": "that they take up so let's assume just\n",
        "470": "to get a sense of why let's assume that\n",
        "473": "in Java all of our addresses are 64 bits\n",
        "476": "that all of our in are 32 bits and all\n",
        "479": "Java objects take 64 bits plus their\n",
        "481": "fields okay and let's imagine here we\n",
        "484": "have the method of bleep blorp which\n",
        "486": "takes no arguments creates an integer\n",
        "488": "and then prints it out so what I want\n",
        "490": "you to do is think about how much total\n",
        "492": "memory is used by this method to store\n",
        "494": "all of its local variables and I'll\n",
        "503": " \n",
        "506": "okay so these annotations I actually did\n",
        "508": "them live during the live version in\n",
        "510": "this lecture so they're already here and\n",
        "512": "they give you a substantial hint this\n",
        "513": "question isn't super interesting but you\n",
        "515": "know I just wanted you to give it\n",
        "518": "thought to it because I you know\n",
        "519": "wouldn't be watched on the talk for a\n",
        "521": "long time and something's not exciting\n",
        "522": "you kind of glaze over so this is my way\n",
        "524": "to trick you into actually engaging not\n",
        "527": "really a big puzzle so in this case the\n",
        "529": "total amount of memory that it takes is\n",
        "530": "well let's think about it\n",
        "533": "bleep blorp has a variable called X it\n",
        "535": "is in an integer so this box right here\n",
        "538": "is as annotated 64 bits it's an address\n",
        "540": "effectively or a reference to something\n",
        "544": "then here we have a object that was\n",
        "546": "created and that object has a single\n",
        "548": "field which is the one we just saw in\n",
        "552": "the source code that private final int\n",
        "554": "called value that's 32 bits we know\n",
        "555": "called value that's 32 bits we know\n",
        "557": "that's a 32 bit box and then we said\n",
        "560": "there's other information 64 bits of it\n",
        "562": "that goes with every object and we're\n",
        "563": "not gonna say what that is I mean it\n",
        "564": "might have to do with garbage collection\n",
        "566": "or who really knows but it's just\n",
        "568": "something that every object has right\n",
        "571": "you can just imagine it's some secret\n",
        "573": "information scrawled on top of it\n",
        "575": "scrawled on top of every object you\n",
        "577": "can't access so if we just add these up\n",
        "580": "then it's just 160 so not a lot of depth\n",
        "581": "there\n",
        "583": "so that's wrapper types and the glorious\n"
    },
    "Title=[Syntax1, Video 2] Widening_Id=a7ePFrWZptk": {
        "0": " \n",
        "2": "there's a closely related idea another\n",
        "3": "type of automatic conversion known as\n",
        "6": "primitive whitening so just like we saw\n",
        "8": "before where types can be automatically\n",
        "10": "converted from rapper to reference and\n",
        "12": "vice-versa it turns out that if we have\n",
        "15": "a method that takes a wide datatype and\n",
        "17": "we pass it a narrower datatype compared\n",
        "20": "to the one we're calling wide and then\n",
        "22": "it will automatically whiten for us so\n",
        "23": "in other words here's a function that\n",
        "25": "takes blah or sorry it takes double call\n",
        "28": "blah double we can hand it an integer\n",
        "31": "and since Java just in its specification\n",
        "33": "says int are narrower than doubles it\n",
        "35": "will automatically whiten and this will\n",
        "37": "work just fine however if we want to\n",
        "41": "take a type that is wider than the\n",
        "43": "expected type then we need them manually\n",
        "46": "specify a cast and in that case it will\n",
        "47": "allow us do this okay\n",
        "49": "now I'm not gonna go through this\n",
        "50": "actually a bunch of details about all of\n",
        "52": "this that you can learn right so it has\n",
        "54": "these the whitening versions so anytime\n",
        "56": "you do one of these that's considered\n",
        "58": "whitening these are considered narrowing\n",
        "59": "and you can read more and more there's\n",
        "60": "and you can read more and more there's\n",
        "61": "actually 12 different types of automatic\n",
        "63": "conversions so I've talked about boxing\n",
        "67": "unboxing and narrowing and whitening and\n",
        "69": "there's more if you're curious\n",
        "71": "but that's basically what we need to\n",
        "72": "know so be aware that primitive\n",
        "74": "whitening happens automatically and it\n",
        "75": "whitening happens automatically and it\n",
        "77": "error messages as we'll see in a little\n"
    },
    "Title=[Syntax1, Video 3] Immutability_Id=Gz6LXRSjAgk": {
        "0": " \n",
        "2": "our last totally random topic of the day\n",
        "4": "before we move on to the main narrative\n",
        "6": "and we'll be immutability so what is\n",
        "9": "immutability it's a concept that we\n",
        "11": "applied to specific types and will say\n",
        "13": "that a type is immutable if when you\n",
        "15": "instantiate something of that type it\n",
        "18": "can never change no matter what so as an\n",
        "21": "example of some mutable things let's say\n",
        "23": "an array deck so an array deck when you\n",
        "25": "it is certainly mutable you can add\n",
        "27": "first add last and so forth planets\n",
        "30": "likewise are mutable their velocity can\n",
        "33": "change their positions can change but\n",
        "35": "there are also other classes which are\n",
        "37": "fully immutable so for example integers\n",
        "39": "are immutable once you create an integer\n",
        "41": "once you wrap an integer in it that\n",
        "43": "integer inside that wrapper can never\n",
        "45": "change as maybe a more specific example\n",
        "48": "that's not too simple let's think about\n",
        "50": "the date class so it's just a class\n",
        "53": "actor together it has three int fields\n",
        "55": "that are all declared as public final it\n",
        "56": "has a private boolean that's called\n",
        "58": "contrived since this is a very contrived\n",
        "62": "class and it has a constructor so once\n",
        "64": "you make a date there's nothing you can\n",
        "67": "do to ever change any aspect of it so if\n",
        "69": "we look at this date class all of these\n",
        "71": "variables are declared final and as a\n",
        "72": "reminder that means you cannot reset\n",
        "74": "them so even though they're public an\n",
        "77": "outsider who says new date cannot say my\n",
        "79": "date dot month equals five or something\n",
        "81": "it will not work the compiler will yell\n",
        "84": "likewise contrived even though it is not\n",
        "86": "final there's no code inside the date\n",
        "89": "class that ever changes contrived and an\n",
        "91": "outsider obviously cannot access or\n",
        "93": "change it so in this case date is a\n",
        "96": "totally immutable object there's no way\n",
        "98": "that this date object will ever do\n",
        "100": "anything different another example\n",
        "103": "strings in Java so it turns out in Java\n",
        "104": "that when you create a string it will\n",
        "107": "never change so for example suppose you\n",
        "108": "have a string and you want to change one\n",
        "110": "letter in the middle you actually cannot\n",
        "112": "do that in Java that's just not how\n",
        "113": "strings work we'll talk a little more\n",
        "115": "about that in the next slide so the\n",
        "119": "final key word is a handy idea what it\n",
        "120": "does for you is it helps the it makes\n",
        "122": "the compiler enforce the fact that\n",
        "124": "something cannot change but I will note\n",
        "126": "that it is neither necessary nor\n",
        "129": "sufficient to get immutability all it\n",
        "130": "means is that once you assign a value\n",
        "132": "you'll never change it ever again\n",
        "136": "but if you look at date for example and\n",
        "138": "we just made all of these private it\n",
        "139": "would still be immutable even with that\n",
        "142": "final yeah so basically the big picture\n",
        "145": "with the mutability is it means that the\n",
        "147": "object once it's created\n",
        "148": "there's no detectable way to change\n",
        "150": "anything inside of it so that could be\n",
        "153": "handy for example in project 2 you may\n",
        "155": "have some classes that you decide well\n",
        "157": "once I make one of these things that can\n",
        "159": "never change and that just helps\n",
        "162": "simplify your reasoning so as far as the\n",
        "164": "advantages this goes that's the main\n",
        "166": "thing it it avoids certain types of bugs\n",
        "168": "it makes debugging easier it constrains\n",
        "169": "the set of things you need to worry\n",
        "173": "about so for example like this mug right\n",
        "175": "I'm not worried that it's gonna suddenly\n",
        "176": "turn into lava it's just not on a list\n",
        "178": "of things to do so I don't have to hold\n",
        "180": "this mug with a pair of gloves in order\n",
        "182": "to use it and likewise with a string\n",
        "185": "whenever you give a string to a function\n",
        "188": "you can do whatever at once and you know\n",
        "190": "that once that function finishes running\n",
        "191": "that your string is exactly how it was\n",
        "193": "because you know strings are immutable\n",
        "194": "they cannot be touched they're perfect\n",
        "198": "and beautiful so the other maybe analogy\n",
        "202": "I use to take string the string example\n",
        "204": "even further is strings have a bunch of\n",
        "206": "methods right they have care at compare\n",
        "209": "two concat split so concatenate means\n",
        "211": "concatenate with another string split\n",
        "213": "means to split it into a bunch of pieces\n",
        "215": "separated by this it doesn't really\n",
        "217": "matter but the point is that even if we\n",
        "219": "use all these fancy features of string\n",
        "222": "it doesn't affect the string itself and\n",
        "224": "you know that right there's all these\n",
        "226": "buttons you can press and sometimes it's\n",
        "228": "even instance variables you can look at\n",
        "230": "like windows you can look inside of but\n",
        "233": "it doesn't matter in a class which we\n",
        "236": "call immutable if the change there's no\n",
        "237": "change inside the object that could\n",
        "240": "never be detected okay now the downsides\n",
        "243": "of immutability is that if you want to\n",
        "246": "actually change something you can't so\n",
        "247": "if I had the entire text of Moby Dick\n",
        "251": "and maybe I find that queequeg's name is\n",
        "252": "slightly misspelled somewhere in the\n",
        "254": "middle you need to advocate a in there\n",
        "256": "you can't what you have to do is make an\n",
        "258": "entire copy of Moby Dick again but now\n",
        "260": "with the missing E and that can cause\n",
        "262": "performance issues so it's a bit of a\n",
        "264": "trade-off but I'd say that immutability\n",
        "265": "is a wonderful idea\n",
        "266": "you should take it\n",
        "268": "and project to maybe think about some\n",
        "270": "classes as immutable now one little tiny\n",
        "272": "warning just because you declare that a\n",
        "274": "reference is final does not make the\n",
        "276": "object referred to by that reference\n",
        "278": "immutable so if I say public final I\n",
        "280": "write back string D equals new array DAC\n",
        "283": "this creates an array Dec and we hold\n",
        "286": "its address and D but all that final\n",
        "288": "does is it means we can't take D and\n",
        "289": "point it at a different array Dec the\n",
        "292": "actual array deck itself can change so\n",
        "294": "if you call add last or add first or\n",
        "295": "whatever it will actually work the thing\n",
        "297": "that you can't do is on the next line\n",
        "299": "say D equals some other array okay so\n",
        "301": "minor point there but something that\n",
        "303": "sometimes confuses people who are new to\n"
    },
    "Title=[Syntax1, Video 4] ArrayMap Implementation_Id=616v8kkelWA": {
        "0": " \n",
        "2": "before we start this next video let me\n",
        "3": "talk to you about the tragedy of robot\n",
        "16": "voices so here's a video I recorded my\n",
        "17": "life takes so long to get things done\n",
        "21": "robot voice is part of it anyway so on\n",
        "24": "to generics now we've actually already\n",
        "27": "done defining generic classes before we\n",
        "29": "built a linked list deck and array deck\n",
        "30": "all those kind of things in those cases\n",
        "33": "at the top of the class we specified a\n",
        "35": "that this was going to be a generic\n",
        "38": "class this is not a new thing but in\n",
        "39": "this video what we're gonna do is build\n",
        "42": "a new one and kind of be a little more\n",
        "43": "careful about what we're doing rather\n",
        "45": "than just having a bunch of rules we\n",
        "47": "don't quite understand so what we're\n",
        "49": "gonna do in this video is create a new\n",
        "51": "class called array map that's going to\n",
        "53": "implement the map 61b interface which is\n",
        "55": "going to be a restricted version of the\n",
        "58": "map interface that's built into Java so\n",
        "59": "what it Maps do they let you associate\n",
        "61": "keys with values so you can say things\n",
        "65": "like Josh's grade is 3008 no nevermind\n",
        "67": "josh is great as 45 and so forth and\n",
        "69": "that's what the put method does well\n",
        "71": "have a contains method that says whether\n",
        "73": "or not josh is in there get that will\n",
        "75": "return my grade keys that will return\n",
        "77": "the list of all keys and then finally\n",
        "79": "sighs which says how many keys I'm an\n",
        "84": "ignoramus an array based implementation\n",
        "87": "and if you want to you can try doing\n",
        "90": "this on your own this little dude in the\n",
        "93": "corner a pair of people is an indication\n",
        "94": "to people who are looking only at the\n",
        "96": "slides that this is an exercise I guess\n",
        "98": "this is something I added last year and\n",
        "100": "forgot about but it was pretty cool if\n",
        "101": "I'd had that in earlier slides\n",
        "104": "you would have known anyway so let's\n",
        "107": "jump on in oops so what we're gonna do\n",
        "110": "is build what you just saw there this is\n",
        "111": "the project I've already opened it up\n",
        "113": "because actually I've already done this\n",
        "115": "and I had that delete it and now I'm\n",
        "116": "doing it again because of robot voice\n",
        "121": "but here basically we have a package in\n",
        "123": "this case the top of the code says\n",
        "125": "package map 61b and that's just because\n",
        "127": "real java code is usually end packages\n",
        "130": "it doesn't really mean very much except\n",
        "132": "for now well I guess in the next lecture\n",
        "133": "we'll explore exactly what\n",
        "135": "that means but the one big difference is\n",
        "137": "that now everything's gonna be inside of\n",
        "139": "this special map 61p folder because\n",
        "141": "everything's part of a map 61b\n",
        "143": "package and we saw a little bit of what\n",
        "145": "thought that meant what that meant in\n",
        "146": "the past but it'll be a future video\n",
        "147": "where I really dig in\n",
        "150": "so anyway that's not super important\n",
        "152": "what does matter now is we want to build\n",
        "154": "an array map and so if I want to\n",
        "157": "instantiate an array map I need a place\n",
        "160": "to store key value pairs so the most\n",
        "162": "natural approach is to create an array\n",
        "166": "of keys and so here I can say K will\n",
        "168": "call them keys and this is an array of\n",
        "171": "keys and we'll make that private I don't\n",
        "175": "have a private V values and then I'm\n",
        "177": "also going to set up a size and then in\n",
        "179": "my array map constructor I'll say keys\n",
        "182": "equals new K but of course that won't\n",
        "183": "work because you can't make generic\n",
        "185": "arrays so we have to do that silly\n",
        "187": "little thing where we say K array caste\n",
        "188": "little thing where we say K array caste\n",
        "192": "new object can we also have values\n",
        "197": "equals the new object and we'll say size\n",
        "198": "is zero\n",
        "200": "now of course IntelliJ is yelling at us\n",
        "201": "and it's saying what the heck are you\n",
        "202": "doing like this is weird\n",
        "204": "it is weird oh and there's actually a\n",
        "206": "compilation error I forgot to say a size\n",
        "209": "so I'll say 100 but it's saying hey this\n",
        "211": "is weird what are you doing and we just\n",
        "213": "have to say we know what we're doing\n",
        "217": "Java sorry it's just a quirk of the Java\n",
        "219": "type system there's no nice way around\n",
        "222": "it you can suppress the warning but it's\n",
        "224": "the warning now I want to note one quick\n",
        "226": "thing that's important here which is\n",
        "227": "that K and B here are totally arbitrary\n",
        "229": "I mean instead of K I could have put\n",
        "231": "horse everywhere and had a horse horse\n",
        "235": "horse horse and so forth and that would\n",
        "238": "work fine it just said have to change\n",
        "240": "all these other case the horses so be\n",
        "241": "aware there's nothing special about the\n",
        "243": "fact that I use the letter K and V it\n",
        "246": "could have been anything okay so that\n",
        "249": "sets up our empty array map and so the\n",
        "251": "next thing we're gonna do is write this\n",
        "253": "method called key index so what is that\n",
        "255": "- well that's supposed to go through and\n",
        "258": "find the key if it exists and return its\n",
        "260": "index and if it doesn't exist it'll\n",
        "262": "return minus 1 so we're just gonna\n",
        "263": "iterate through all of the keys and\n",
        "265": "we're gonna say for INT I let's say\n",
        "266": "equals 0 is less\n",
        "270": "than keys sigh or link than we do i plus\n",
        "274": "equals one and then we can say if keys I\n",
        "278": "equal equals key then we return I\n",
        "280": "otherwise at the end will turn minus one\n",
        "283": "there's actually two bugs here\n",
        "286": "very subtle bugs they'll mention by\n",
        "290": "fixing them so instead of equal equals\n",
        "292": "the problem with equal equals and this\n",
        "293": "is something you want to keep in mind\n",
        "295": "when you're writing code equal equal\n",
        "298": "says are these two memory boxes pointing\n",
        "299": "at the same thing are the arrows\n",
        "301": "pointing at the same thing well in this\n",
        "303": "case we don't really consider that\n",
        "305": "equality because if I make one dog\n",
        "309": "called horse and another dog named horse\n",
        "311": "these are weirdly named dogs and I check\n",
        "313": "if they're equal using equal equals well\n",
        "315": "then it won't consider them the same\n",
        "317": "because they are instantiated separately\n",
        "319": "so to fix this I'm going to use the dot\n",
        "321": "equals method and we'll discuss the dot\n",
        "325": "equals method in a later lecture lecture\n",
        "328": "the other minor bug is that I shouldn't\n",
        "330": "actually look at every key in the array\n",
        "334": "it might not really matter but it's\n",
        "335": "important here to note that this array\n",
        "338": "we don't want to look at all of the\n",
        "341": "nulls that are gonna be in this array we\n",
        "343": "instead want to do size which is how\n",
        "346": "many keys we have okay so it won't\n",
        "349": "really break key index because unless\n",
        "351": "someone's trying to get a null out of it\n",
        "352": "but maybe that's a little complicated\n",
        "355": "okay I just I hope it makes sense that\n",
        "357": "it we should only be looking at the keys\n",
        "360": "that have actually been added and\n",
        "361": "there's various little subtle bugs that\n",
        "363": "can pop up as a result of this\n",
        "366": "all right contains key how do I do that\n",
        "368": "well in this case I can just say give me\n",
        "372": "the index of key and then I guess a if\n",
        "375": "index is greater than minus one then it\n",
        "377": "must exist otherwise we'll say it\n",
        "380": "doesn't exist now this code while it\n",
        "382": "works is considered ugly by many\n",
        "384": "programmers they would probably rather\n",
        "387": "you just do it in one line we can\n",
        "389": "actually just return the result of this\n",
        "391": "so this evaluates to some value true or\n",
        "394": "false so if it's true we return true and\n",
        "396": "if it's false we return false so why not\n",
        "398": "just returned index greater than minus 1\n",
        "399": "so even\n",
        "401": "though that looks like code that's a\n",
        "403": "little too clever it's very common and\n",
        "405": "I'd say get used to it because you're\n",
        "406": "gonna see it all over the place and\n",
        "408": "people who are used to writing code like\n",
        "410": "that well maybe think you're cooler if\n",
        "412": "you write code like that all right next\n",
        "416": "up put so in this case I want to locate\n",
        "420": "the key in the array if it exists and if\n",
        "423": "so then I want to replace the current\n",
        "425": "value otherwise I'm gonna add the key\n",
        "426": "and the value so the idea here is that\n",
        "429": "as a reminder the way map works is if I\n",
        "432": "say put Josh's grade as 30 then put\n",
        "434": "Josh's grade as 40 I don't get to grades\n",
        "437": "I get one grade and the most recent put\n",
        "439": "over writes the original value if you\n",
        "441": "didn't know that well that's how maps or\n",
        "443": "dictionaries work so I'm gonna do it\n",
        "445": "like this I'm gonna say int index equals\n",
        "449": "key index key and then I'll say if index\n",
        "452": "is minus one meaning it wasn't in there\n",
        "454": "then I'm gonna go to the end of the\n",
        "457": "array keys and I'm gonna add the new key\n",
        "459": "let me go to the end of the values array\n",
        "462": "I'm gonna add the new value and then I'm\n",
        "464": "also going to say size plus equals one\n",
        "466": "okay so other words if it's not in there\n",
        "469": "go to the end of the array not the end\n",
        "470": "of the whole array but go to the end of\n",
        "471": "of the whole array but go to the end of\n",
        "472": "all the used elements of the array and\n",
        "475": "then add the key value pair and then\n",
        "478": "finally if we don't have the index if it\n",
        "480": "already existed I guess I'll have a\n",
        "482": "return here if it already existed in\n",
        "485": "that case we'll simply say values key\n",
        "489": "equals value okay we could also find\n",
        "493": "that key should be index and if we also\n",
        "497": "we could also do keys index not equals\n",
        "499": "key in order to make sure that that's\n",
        "501": "true but that's redundant because if we\n",
        "503": "get to this point we know that it's in\n",
        "505": "the array and so keys index must be key\n",
        "509": "by definition okay so in this case we\n",
        "511": "now have values index equals value and\n",
        "514": "so we'll move on how about get well to\n",
        "516": "get actually it's pretty simple\n",
        "518": "I mean to me so what I'm gonna do is I'm\n",
        "520": "gonna get the index by doing key index\n",
        "523": "key and then I'm just gonna return\n",
        "525": "whatever's in that index and that's\n",
        "528": "value now this will crash if the item is\n",
        "530": "not in the array map but that's okay\n",
        "532": "because we're not we're just\n",
        "534": "okay we'll talk about better ways to do\n",
        "538": "it later next war turn size and then\n",
        "539": "finally we have keys which if we look at\n",
        "540": "finally we have keys which if we look at\n",
        "542": "map 61 B says it's supposed to return a\n",
        "545": "list of keys in this map so to do that\n",
        "546": "well we need some kind of a list\n",
        "548": "we can't just return keys because it's\n",
        "549": "we can't just return keys because it's\n",
        "551": "an array so maybe we could try and I'll\n",
        "553": "say nope you're trying to give me a list\n",
        "554": "are you trying to give me an array and I\n",
        "557": "expect a list so there may be some\n",
        "559": "method out there that will convert a\n",
        "562": "Java array to a list of the same type\n",
        "565": "but I'm in a note that it's not very\n",
        "566": "useful to us because we don't want the\n",
        "567": "useful to us because we don't want the\n",
        "568": "entire list or we don't want the entire\n",
        "570": "array we only want the first size items\n",
        "572": "and so rather than going and looking up\n",
        "574": "some special syntax I'm just gonna do it\n",
        "578": "by hand so I'm gonna say list K key list\n",
        "581": "equals new let's say ArrayList FK that's\n",
        "583": "one of the implementations so this is my\n",
        "585": "abstract data type over here and this is\n",
        "588": "my specific implementation and then I'm\n",
        "592": "gonna say for each key is listing keys\n",
        "595": "that length I plus equals one well do\n",
        "599": "keyless add keys I and then we're gonna\n",
        "601": "just return key list and so at this\n",
        "603": "point all my code should work now in the\n",
        "605": "real world I would have lots of unit\n",
        "607": "tests I would make sure this works and\n",
        "608": "when you do project - you better not\n",
        "610": "write that much code and hope it all\n",
        "612": "works I've done this like probably you\n",
        "614": "know three times including robot voice\n",
        "615": "now so I feel very confident in my work\n",
        "618": "but you should not do that should really\n",
        "620": "write tests here's one we'll run it a\n",
        "622": "bit what I'm gonna do first though just\n",
        "623": "to get an intuition that it's working\n",
        "627": "rather than using an extensive set of\n",
        "630": "unit tests I'm going to run this code\n",
        "633": "using the debugger Sona use the debugger\n",
        "635": "the breakpoint it stops the code before\n",
        "637": "this line and then we can visualize\n",
        "639": "what's inside of our actual data\n",
        "642": "structure so here we have an array this\n",
        "644": "is all my keys these are all my values\n",
        "646": "and we can see that horse is associated\n",
        "648": "with three fish is associated with nine\n",
        "651": "and then now we're gonna associate house\n",
        "653": "with 10 so if all goes according to plan\n",
        "655": "we'll put a house at the end of this\n",
        "658": "array and 10 here and we step over and\n",
        "661": "indeed it seems to have work okay now\n",
        "662": "there's all this extra space that we're\n",
        "663": "not using and of course it'll actually\n",
        "665": "run out but we're not going to deal with\n",
        "666": "resizing\n",
        "670": "video so that's basically it for the\n",
        "672": "array map it will debrief what we\n",
        "674": "learned doing all this and like get a\n",
        "678": "big picture of the class in a moment but\n",
        "680": "actually want to show you a funny thing\n",
        "681": "that you're likely to encounter on\n",
        "684": "project 2 so here I just suggested that\n",
        "686": "we do unit testing and in this case\n",
        "689": "we'll do a simple unit test let's create\n",
        "690": "a new array map that goes from integer\n",
        "693": "to integer will associate the value 5\n",
        "696": "with the key to we'll expect to get back\n",
        "698": "five and then we'll just say hey if I\n",
        "700": "ask for the key the value associated\n",
        "702": "with the key - what do I get\n",
        "704": "and assume that they're equals in this\n",
        "707": "case we actually get a strange error and\n",
        "708": "so we're gonna pick apart what that air\n",
        "710": "is all about in the next video\n",
        "712": "but first let's reflect on what we did\n",
        "714": "with the arraignment Reap hooray map\n"
    },
    "Title=[Syntax1, Video 5] Reflection on ArrayMap and Automatic Conversion Puzzle_Id=mdu9nEmqxyE": {
        "0": " \n",
        "2": "now before we explore exactly why this\n",
        "5": "compiler error is happening let's talk a\n",
        "7": "little bit about our a math class so the\n",
        "9": "array map is one of many possible ways\n",
        "12": "to implement a map and we'll see after\n",
        "14": "project two other better ways but for\n",
        "16": "now we're keeping it very simple with an\n",
        "18": "array so the basic idea here is to use\n",
        "20": "an array as the core data structure and\n",
        "23": "to anytime we need to add a new key\n",
        "25": "value pair put them both at the end of\n",
        "27": "an array in the same position so each\n",
        "29": "key always goes with the value in the\n",
        "31": "corresponding position and the other all\n",
        "33": "right so whenever we do put K V for\n",
        "38": "example we just find K or the key and if\n",
        "40": "that key is not in the list we'll put\n",
        "43": "them both at the end of the array\n",
        "44": "and if they're not negative then what\n",
        "47": "we'll do is notice that the index is not\n",
        "49": "negative that means the key is there and\n",
        "52": "we set the value as we saw so we add the\n",
        "54": "put method which we wrote get contains\n",
        "56": "key and keys not gonna go over those\n",
        "59": "again but the one thing I do want to say\n",
        "60": "about terminology just ever so briefly\n",
        "62": "is that when we actually create our\n",
        "64": "class and we had to find it\n",
        "65": "we have appear what are known as\n",
        "68": "sometimes generic type variables so at\n",
        "69": "the time that you and I were writing\n",
        "71": "this code we don't know if somebody's\n",
        "73": "gonna make a map from integers to string\n",
        "74": "strings to strings dogs to horses\n",
        "78": "whatever and we just use K and B and the\n",
        "80": "special notation lets us treat the type\n",
        "82": "itself is a kind of variable and then\n",
        "84": "when we instantiate one of these things\n",
        "86": "we provide what are sometimes called\n",
        "88": "actual type arguments so that\n",
        "91": "essentially now this whole thing gets\n",
        "93": "treated like and this that K was integer\n",
        "97": "and B was string all along okay now\n",
        "98": "again I guess I should mention a briefly\n",
        "101": "in Java 8 or later you can actually omit\n",
        "104": "this bit over here and it will infer it\n",
        "106": "automatically from the declaration of a\n",
        "107": "variable and you can only use that of\n",
        "109": "course when you're declaring a variable\n",
        "112": "ok so this brings us to that error that\n",
        "115": "we were interested in so in this case\n",
        "118": "this is the command line version of the\n",
        "120": "same error I mean it's this thing here\n",
        "122": "and it's that there's an ambiguous\n",
        "125": "method call so what Java is saying is I\n",
        "126": "don't know if you meant assert equals\n",
        "129": "long long or assert equals object object\n",
        "130": "now that might seem a little strange\n",
        "133": "because if you look it's actually in\n",
        "134": "integer so it's like how did we get to\n",
        "135": "integer so it's like how did we get to\n",
        "137": "long our object but fundamentally the\n",
        "139": "issue is if we look at the j-unit source\n",
        "142": "code which I can't seem to get another\n",
        "146": "window you can see now there we go\n",
        "148": "so we do grap code assert equals J unit\n",
        "151": "which I've done earlier then you can see\n",
        "153": "this is the code that actually is J unit\n",
        "155": "itself so you can browse it if you want\n",
        "156": "let me can see there's a bunch of\n",
        "158": "different us or equals methods for\n",
        "160": "example assert equals object object we\n",
        "162": "have assert equals long long assert\n",
        "165": "equals double double and so forth and so\n",
        "166": "with the cotton Java compiler is\n",
        "168": "complaining about here is that it\n",
        "170": "doesn't know it does not know which one\n",
        "173": "we meet so how is that possible I'd like\n",
        "175": "you to think about this a little on your\n",
        "177": "own I think what automatic conversions\n",
        "180": "do we need to get from int integer\n",
        "181": "that's what we had here right assert\n",
        "184": "equals expected that's an int and am get\n",
        "187": "to that returns a capital I integer so\n",
        "188": "if we did some set of automatic\n",
        "190": "conversions what would we need to get to\n",
        "192": "or do to get from int integer to long\n",
        "194": "long and I'll let you think about this\n",
        "203": "for a few seconds okay so hopefully you\n",
        "207": "paused and thought about it so there's a\n",
        "209": "bunch of possibilities here and the\n",
        "210": "first question is how do we get from int\n",
        "212": "to long well in this case all we need to\n",
        "214": "do is you the white up so to get from\n",
        "217": "we just need to whiten expected in this\n",
        "220": "case it's a long down here to get from\n",
        "223": "am get to from integer to long in this\n",
        "224": "case we have an integer that's a wrapped\n",
        "225": "case we have an integer that's a wrapped\n",
        "227": "up so we need to first unwrap it and\n",
        "229": "then we need to widen it to make it into\n",
        "232": "a long so in total we can think of it as\n",
        "233": "there's three different steps that\n",
        "235": "happen yeah that's one one way to\n",
        "238": "imagine it so we know the given Java's\n",
        "242": "automatic conversion system you can get\n",
        "245": "from integer to long long now the actual\n",
        "247": "rules about how many conversions you can\n",
        "248": "do at once it's a little complicated\n",
        "250": "actually and it's not part of the class\n",
        "252": "so you can try experimenting on your own\n",
        "254": "later if you'd like but that's just to\n",
        "255": "let you know there wait there exists in\n",
        "257": "this case a way to get from int integer\n",
        "261": "long long now the ambiguous call if we\n",
        "263": "look at what the\n",
        "265": "intelligent compiler was telling us it\n",
        "266": "said it's also possible apparently to\n",
        "269": "get the object object so question for\n",
        "271": "you here is to consider what automatic\n",
        "273": "conversions do we need to get to do to\n",
        "276": "get from int integer to object object so\n",
        "277": "I'll let you think about that you can\n",
        "283": "pause me I'll spoil it okay so what\n",
        "285": "happens in this case is to get from int\n",
        "289": "to object we need to box up into integer\n",
        "292": "and then we have integer integer and an\n",
        "296": "integer is an object so arguably we're\n",
        "297": "done then we just have integer integer\n",
        "300": "and an integer is an object so we're\n",
        "302": "totally done so it's only one conversion\n",
        "304": "now it kind of depends on whether or not\n",
        "306": "you count the conversion from integer to\n",
        "308": "object if we actually look at the Java\n",
        "310": "specification they consider moving from\n",
        "313": "integer to object a conversion but I I\n",
        "314": "personally find that term a little\n",
        "316": "confusing because nothing happens at\n",
        "318": "runtime so when you go from in to\n",
        "320": "integer you actually get a runtime\n",
        "322": "change you originally just have 32 bits\n",
        "324": "and now you have 96 bits it's like a\n",
        "326": "totally different arrangement of bits\n",
        "327": "going from integer to object though\n",
        "329": "there's nothing that happens at runtime\n",
        "330": "so I don't really consider it a\n",
        "332": "conversion but maybe the designers of\n",
        "335": "Java disagree so what I would say is\n",
        "337": "that even though this is easier than\n",
        "339": "three-step process needed to get to\n",
        "341": "assert equals long-long it's still\n",
        "343": "ambiguous and this job Jabba won't even\n",
        "345": "let this code compile because it doesn't\n",
        "347": "know what you mean because there's two\n",
        "348": "different conversions that are about\n",
        "351": "allowable so why do I bring this up\n",
        "352": "right it seems like I'm alluding to\n",
        "354": "things that are complicated I'm arguing\n",
        "355": "with the Java language designers about\n",
        "357": "what constitutes a conversion and\n",
        "358": "probably you're getting a little nervous\n",
        "360": "probably you're imagining some hellish\n",
        "362": "mid-term problem or something but I'm\n",
        "363": "not going to subject you to that I just\n",
        "365": "the type system in Java I want us to\n",
        "367": "work for us and I don't want to suffer\n",
        "370": "so I will avoid giving you totally\n",
        "372": "obscure typing problems in the future\n",
        "373": "because that's something you can always\n",
        "376": "deal with with a compiler however I\n",
        "378": "think it's important that we see this\n",
        "379": "because it will likely come up with your\n",
        "381": "project too because you're gonna try and\n",
        "383": "assert equal some things and run into\n",
        "385": "weird issues so how do we actually get\n",
        "388": "this code to compile so what I'd like\n",
        "390": "you to do now is come up with a cast so\n",
        "392": "that there are there's no ambiguity and\n",
        "394": "the way it'll work is you want it so\n",
        "396": "that there's an automatic exam\n",
        "398": "to match and there's no need for any\n",
        "400": "runtime conversions and then need for\n",
        "403": "any weird changes to happen it's a\n",
        "404": "tricky question but really try to think\n",
        "407": "that so trying to figure out something\n",
        "411": "with is a zero step conversion so one\n",
        "413": "possibility is I want it to go straight\n",
        "415": "to object object and so I could do that\n",
        "417": "by forcing this on the left to be an\n",
        "420": "object so by casting this to integer I\n",
        "423": "can head off our type system and I now\n",
        "425": "have a perfectly lovely thing and it\n",
        "427": "will call the object object version and\n",
        "429": "then when we run this hopefully we'll\n",
        "431": "find that it correctly runs the test\n",
        "436": "actually I need to do a remap run the\n",
        "439": "tests and r1 test passes okay cuz I r1\n",
        "442": "test passes great and so there are other\n",
        "443": "test passes great and so there are other\n",
        "444": "answers you could try and do you can do\n",
        "446": "the other way can try and cast it so you\n",
        "448": "actually call the long long version and\n"
    },
    "Title=[Syntax1, Video 6] Generic Methods_Id=TnWTIX_mrcQ": {
        "0": " \n",
        "2": "our last topic of this video is generic\n",
        "4": "methods I probably should have warned\n",
        "5": "you one of the early segments in this\n",
        "7": "video series that with a name like\n",
        "10": "syntax one this is not the most exciting\n",
        "12": "lecture and in fact these three videos\n",
        "15": "this one some text to instant text three\n",
        "17": "you know they're useful but they're not\n",
        "19": "like oh wow that's beautiful then we're\n",
        "21": "just like okay that's what the Java\n",
        "24": "designer has decided to do so sorry it\n",
        "25": "seems a little arbitrary but kind of\n",
        "28": "learning so in this case what we're\n",
        "29": "gonna do in order to understand generic\n",
        "31": "methods is we're gonna create a class\n",
        "33": "called map helper that's gonna have two\n",
        "35": "methods one of them is gonna be called\n",
        "37": "get and that method takes a map 61b\n",
        "40": "and a key and it returns the value of\n",
        "42": "corresponding to this key in the map if\n",
        "44": "it exists otherwise it will return null\n",
        "46": "now that's unlike the array Maps native\n",
        "48": "get method the thing actually built into\n",
        "49": "it which will crash if the key doesn't\n",
        "51": "exist in fact if we look at a Rhema\n",
        "54": "we'll see that get it just gets the\n",
        "56": "index and if it doesn't exist it'll try\n",
        "57": "and return the minus one item and it'll\n",
        "59": "crash so map helper is gonna try and do\n",
        "62": "better now this is terrible class design\n",
        "63": "really we should do is fix your array\n",
        "65": "map class but for the sake of argument\n",
        "67": "just for pedagogical reasons we're gonna\n",
        "70": "build it this way so that we can do the\n",
        "71": "next one we're gonna write will be\n",
        "73": "called max key and it will find the max\n",
        "74": "key in a map 61b\n",
        "78": "so let's start with the get method so in\n",
        "80": "this case have a little exercise and\n",
        "82": "we'll just jump right in so we go to map\n",
        "86": "helper class we can delete these comment\n",
        "88": "marks and this will now set up this test\n",
        "89": "we're gonna use test get to make sure\n",
        "91": "that get works but we haven't ridden get\n",
        "92": "yet so of course the test does not\n",
        "95": "compile saying doesn't exist now if we\n",
        "97": "look at what's going on here\n",
        "99": "it looks like map helper get is supposed\n",
        "101": "to be a static method because we're\n",
        "103": "convenient using the class name so let's\n",
        "105": "say public static and then we'll think\n",
        "106": "okay what's it supposed to do it looks\n",
        "108": "like it returns an integer and it's\n",
        "111": "called get and it takes in a rain or it\n",
        "112": "takes a map 61v\n",
        "117": "of strings two integers now we'll call\n",
        "121": "that I don't know string integer map and\n",
        "125": "then we will do a key okay or not a key\n",
        "128": "K a stream key and then we'll do some\n",
        "130": "code and return something and\n",
        "132": "get there in a bit now before we even\n",
        "134": "get there they actually the interesting\n",
        "136": "part of this is not the code it's the\n",
        "138": "signature so this code right now you'll\n",
        "140": "notice it's compiling but this get\n",
        "142": "method doesn't do what it's supposed to\n",
        "144": "it's supposed to work on any map 61b\n",
        "146": "you give me any map 61b and it should\n",
        "149": "work it shouldn't be a string integer so\n",
        "151": "how do we do that well maybe we try and\n",
        "156": "do something like V K V K but we'll\n",
        "157": "notice that it doesn't compile it's red\n",
        "159": "and in this case it's saying I don't\n",
        "161": "know you mean by V okay I mean these are\n",
        "163": "just arbitrary symbols as far as Java\n",
        "166": "cares I just wrote potato and like sauce\n",
        "168": "all right it's hard to matter which ones\n",
        "171": "which okay I'll pick some different\n",
        "173": "words how about it may as well be\n",
        "177": "vanadium and ketchup right I think those\n",
        "180": "are just meaningless symbols so the\n",
        "181": "question is how do I actually get that\n",
        "185": "to work well our trick before as we go\n",
        "187": "up to the class declaration and we put I\n",
        "191": "don't know ketchup vanadium up there but\n",
        "193": "the problem with this approach is that\n",
        "197": "this is this is just not the right idea\n",
        "199": "remember the way these work is that when\n",
        "201": "someone instantiate same app helper\n",
        "203": "they're gonna pass along actual type\n",
        "205": "arguments that will go and fill these in\n",
        "207": "but nobody's ever going to instantiate a\n",
        "210": "map helper we're not doing new map\n",
        "214": "helper string integer or something that\n",
        "216": "doesn't make sense right we don't want\n",
        "218": "to do that so we're gonna try and do\n",
        "221": "here is avoid the need to make the class\n",
        "223": "generic instead we're gonna make the\n",
        "226": "method generic so it's actually a pretty\n",
        "228": "easy thing we do here instead of putting\n",
        "230": "it up here we just stick it right after\n",
        "232": "the word static and now it'll work the\n",
        "234": "way we want so for the purposes of this\n",
        "237": "single method this ketchup and vanadium\n",
        "239": "it applies only to this tiny scope and\n",
        "240": "that's very different okay just to\n",
        "241": "compare and contrast with a ray map\n",
        "244": "where the kV goes up at the top and it's\n",
        "246": "shared by the entire program everywhere\n",
        "249": "here it applies to only that single\n",
        "251": "method now I don't like ketchup and\n",
        "257": "vanadium so I'll go with kv v k v k all\n",
        "258": "right\n",
        "262": "so that is our get method and now we'll\n",
        "263": "write it so at this point I need to\n",
        "264": "actually get\n",
        "268": "value back so I can do the following we\n",
        "274": "will do if SCIM contains Kiki then we\n",
        "276": "will return sim get key we need to add\n",
        "279": "some parentheses and if it doesn't\n",
        "282": "contain it we'll just return null and\n",
        "284": "then here we'll run our test that's a\n",
        "285": "very terrible test because it doesn't\n",
        "288": "actually test the case where the item\n",
        "291": "doesn't exist but let's run it anyway so\n",
        "293": "this is map helper\n",
        "296": "let me run our test and it passes I\n",
        "298": "don't let's make the test even better so\n",
        "304": "let's do map helper get in this case and\n",
        "311": "we'll do an assert equals null that okay\n",
        "313": "so this will also check the null case\n",
        "317": "just make the test a little better so we\n",
        "320": "run it and it seems to work fine good\n",
        "322": "okay so that's the test kit method so\n",
        "324": "again the special thing here was making\n",
        "326": "a single method generic as opposed to an\n",
        "329": "entire class so now let's write test max\n",
        "332": "key so in this case we're gonna move on\n",
        "335": "to well actually I'll debrief real quick\n",
        "337": "and then we'll do the program so the key\n",
        "340": "point here is that I set up the type\n",
        "342": "parameter definitions in the actual\n",
        "344": "method declaration I put them after the\n",
        "347": "word static and in this case desert is\n",
        "350": "just who knows what and it's and here\n",
        "352": "the difference is that rather than\n",
        "354": "specifying at runtime which types we\n",
        "356": "want we don't put map helper string\n",
        "358": "integer it automatically infers it from\n",
        "360": "the type of object passed so that's kind\n",
        "362": "of nice now you're probably getting a\n",
        "364": "little dizzy about types you won't have\n",
        "367": "to go too much deeper than this in 61b\n",
        "369": "but if you're curious you know there's\n",
        "371": "plenty more to learn about type so\n",
        "372": "there's crazy things that can happen and\n",
        "375": "let's see just one more for now so in\n",
        "377": "the next case we're gonna do max key so\n",
        "380": "again it's an exercise you can try and\n",
        "383": "so now let's go and do it so the max key\n",
        "385": "I'm again gonna uncomment this and I had\n",
        "386": "it commented out because it won't\n",
        "388": "compile otherwise because we do not have\n",
        "391": "a max key method so what might that look\n",
        "393": "well max key is supposed to return the\n",
        "395": "max of all keys and if we look at what\n",
        "398": "it does okay well again we'll do\n",
        "400": "hard-coded string integer trick again at\n",
        "403": "first and we'll say okay so we have a\n",
        "405": "method it's static because we're\n",
        "407": "invoking it using the class name it\n",
        "410": "returns something of type string the\n",
        "413": "method is named max key it takes an\n",
        "415": "array or a map 61b\n",
        "421": "of string integers and we'll call this\n",
        "425": "thing map string integer okay I don't\n",
        "427": "know what we called it sim before\n",
        "433": "okay so in this case this code right\n",
        "436": "here if we return null should compile\n",
        "438": "everywhere but again as before we don't\n",
        "439": "want it to be for only strings and\n",
        "441": "integers so we already know how to deal\n",
        "446": "with that so we can simply say K V in\n",
        "449": "this case the string is our K this is K\n",
        "452": "V and we should be good to go\n",
        "455": "so it's try writing our code and we'll\n",
        "457": "do the usual stuff you might imagine so\n",
        "460": "here we want to get back a list we need\n",
        "461": "to go through all the keys so we'll get\n",
        "463": "a list of keys which will be the key\n",
        "466": "list which is equal to m SI dot list\n",
        "468": "it's a terrible name now cuz it's you\n",
        "470": "know just a map so I'll call it map\n",
        "472": "single letter variable names aren't\n",
        "477": "necessarily great but maps so we get a\n",
        "479": "map we get the what we call the same\n",
        "483": "keys and then we will go through that\n",
        "486": "key list and we'll say well key largest\n",
        "489": "equals key list get 0 and then we'll\n",
        "491": "just go through each element of the key\n",
        "495": "list actually we can just do for K in\n",
        "502": "key list if k k key list if K is greater\n",
        "504": "than largest and we'll say largest\n",
        "507": "equals K and we rendered that same issue\n",
        "509": "we had before which is you cannot\n",
        "513": "compare using greater than arbitrary\n",
        "515": "objects also a returned largest so we've\n",
        "516": "objects also a returned largest so we've\n",
        "517": "already used the we've already run into\n",
        "519": "this issue before and what do we do we\n",
        "521": "said K dot compare to largest is greater\n",
        "524": "than 0 still though compared to does not\n",
        "526": "work with case and that's true even\n",
        "529": "though we're giving it an array\n",
        "530": "from string integer strings have it\n",
        "532": "compare to but is not working here and\n",
        "534": "the reason is that think about the\n",
        "536": "compiler all the compiler knows is that\n",
        "538": "somebody is gonna give me Ches and maybe\n",
        "540": "somebody gives me dogs and they don't\n",
        "542": "have a compare to method so what we need\n",
        "545": "to do is somehow deal with that fact so\n",
        "548": "ordinarily what we would do is we would\n",
        "551": "specify somehow that this is a\n",
        "553": "comparable or something and so the\n",
        "557": "syntax for that in Java is we say K not\n",
        "559": "just K but K extends maybe are\n",
        "564": "comparable now that would be okay except\n",
        "565": "for the fact that are comparable is\n",
        "567": "something you and I made up it's not\n",
        "569": "part of this package so we need to use\n",
        "573": "the built in Java comparable class our\n",
        "575": "interface now of course comparable\n",
        "579": "itself needs to have a generic type\n",
        "581": "parameter specified so this is where it\n",
        "583": "gets a little messy so if you you you\n",
        "584": "don't just want things that are\n",
        "586": "comparable but you want K's that are\n",
        "589": "comparable to other K's okay so we end\n",
        "592": "up with this rather ugly declaration for\n",
        "594": "our method but in this case it should\n",
        "596": "work perfectly fine I'll talk more about\n",
        "598": "it in a moment so just see if it works\n",
        "599": "first and then we'll discuss in a little\n",
        "600": "first and then we'll discuss in a little\n",
        "603": "more detail can we run it one test\n",
        "605": "passed actually want to run all tests\n",
        "607": "just to make sure we didn't mess\n",
        "609": "something up I think I ran array math so\n",
        "611": "in this case we ran both of our tests\n",
        "612": "and it works swimmingly\n",
        "614": "so let's debrief a little more what this\n"
    },
    "Title=[Syntax2, Video 1] Throwing Exceptions_Id=JUQfg5BpPJY": {
        "0": " \n",
        "2": "let's continue our journey into the\n",
        "5": "glorious world of Java syntax so today\n",
        "7": "we're gonna talk about exceptions and\n",
        "8": "we've already seen these before so the\n",
        "10": "basic idea is that when something goes\n",
        "12": "wrong then our programs running we want\n",
        "14": "to break the usual flow of control that\n",
        "16": "is rather than business as usual just\n",
        "18": "keep running the program we want to do\n",
        "20": "something else when things break so\n",
        "22": "we've seen these before you've seen\n",
        "23": "exceptions as you've written your\n",
        "25": "programs like nullpointerexception\n",
        "27": "and so I'll give a little example of how\n",
        "29": "an exception can pop up in our array map\n",
        "32": "so I do make an a new make a new array\n",
        "34": "map from string to integer we associate\n",
        "35": "the value 5\n",
        "37": "with the string hello and then we try\n",
        "38": "and print out the value associated with\n",
        "41": "gulp so when we run this thing we get\n",
        "45": "index out of bounds exception minus 1 so\n",
        "47": "why did that happen well I'm not gonna\n",
        "48": "go through in a lot of detail but\n",
        "50": "basically with the Ray Matt if the key\n",
        "53": "doesn't exist then minus 1 is the index\n",
        "54": "we try and retrieve from and things\n",
        "56": "break so this is what's known as an\n",
        "59": "implicit exception nobody called for it\n",
        "61": "just Java realizes something's wrong and\n",
        "63": "the exception gets thrown now we can\n",
        "65": "actually do an explicit exception if we\n",
        "68": "want to be more descriptive because from\n",
        "70": "the perspective of the person using this\n",
        "71": "array map this isn't a particularly\n",
        "73": "useful message they might not even know\n",
        "75": "that there's an array under the hood\n",
        "76": "they don't know how to interpret this\n",
        "78": "minus 1 so we can maybe make things a\n",
        "80": "little more useful what I'm gonna do\n",
        "83": "here is say if index equals minus 1 then\n",
        "85": "I will use the throw keyword it's a new\n",
        "87": "keyword and we'll say throw a new\n",
        "88": "illegal argument exception and we can\n",
        "92": "provide a message the key provided I'll\n",
        "98": "say key was not in array map ok so this\n",
        "99": "is a cue to the programmer that's\n",
        "102": "something that they used the array map\n",
        "104": "wrong and so now if we run a rim\n",
        "107": "exception demo again we get the key\n",
        "109": "provided you'll was not in array map we\n",
        "111": "can make this look nicer as if we wanted\n",
        "113": "but good enough for now so we'll notice\n",
        "114": "but good enough for now so we'll notice\n",
        "115": "then in addition to the message we also\n",
        "116": "then in addition to the message we also\n",
        "118": "have illegal argument exception so it's\n",
        "120": "a different type of exception and we'll\n",
        "121": "pick apart what the types are all about\n",
        "122": "in a moment\n",
        "125": "ok but I hope the idea here is make some\n",
        "127": "sense which is that when running code\n",
        "129": "it's nice to provide the most specific\n",
        "131": "exception possible so being explicit\n",
        "132": "rather than\n",
        "134": "is often a good idea so these are\n",
        "136": "explicit exceptions and the basic rule\n",
        "138": "for them is we use this new throw\n",
        "142": "keyword so let's think more broadly\n",
        "143": "about exceptions and then we'll go into\n"
    },
    "Title=[Syntax2, Video 2] Catching Exceptions_Id=gnHe9EqK8xY": {
        "0": " \n",
        "1": "at the heart of this part of lecture\n",
        "3": "lies the simple fact that sometimes\n",
        "5": "things go wrong while the program is\n",
        "7": "running so maybe you're reading files\n",
        "9": "from disk and it turns out one of them\n",
        "11": "is 380 terabytes or something and you\n",
        "12": "can't actually load that all into memory\n",
        "16": "you don't have that much maybe you try\n",
        "18": "to create an object and then cast it as\n",
        "19": "something that it is not that is the\n",
        "21": "dynamic types don't line up and so you\n",
        "23": "get a class cast exception maybe we get\n",
        "25": "a minus one array index out of bounds\n",
        "28": "that error like we had before and so the\n",
        "30": "Java approach to those situations is to\n",
        "33": "throw an exception so what does that\n",
        "34": "mean well the program stops what it's\n",
        "37": "doing and it does something else and so\n",
        "39": "far that something else has been\n",
        "40": "crashing and printing out a message that\n",
        "42": "is hopefully useful to the user or\n",
        "46": "programmer of that class so as we saw in\n",
        "48": "our example before those exceptions can\n",
        "50": "occur either implicitly like for example\n",
        "53": "I create an object that's a string and\n",
        "55": "it's so it's dynamic type of string and\n",
        "57": "then I try to cast it as a planet and\n",
        "58": "that doesn't work and we get a class\n",
        "61": "cast exception we also saw we can have\n",
        "63": "explicit exceptions and so I'll give\n",
        "65": "another example here maybe we print out\n",
        "67": "a message and then we throw a runtime\n",
        "69": "exception for no reason at all and so if\n",
        "71": "we actually run this program we'll get\n",
        "72": "the printed message and then the\n",
        "75": "exception happens for no reason so I'll\n",
        "78": "note here that this is not entirely new\n",
        "80": "we the word throw is new we didn't have\n",
        "82": "that keyword but new runtime exception\n",
        "84": "that's actually just like any other\n",
        "86": "object instantiation we did in the past\n",
        "89": "it creates a new object of type runtime\n",
        "91": "exception and it is thrown so it's a\n",
        "94": "runtime exception exactly well runtime\n",
        "96": "exceptions are part of the java.lang\n",
        "98": "package and each java.lang runtime\n",
        "99": "package and each java.lang runtime\n",
        "101": "exception it is a java.lang exception in\n",
        "103": "other words this is a subclass of the\n",
        "105": "exception class and that in turn is the\n",
        "107": "subclass of throwable and throwable is\n",
        "110": "an intern a subclass of object and so\n",
        "114": "what Java does is any throwable that you\n",
        "115": "may conceive an exception or otherwise\n",
        "118": "can be thrown with the throw keyword and\n",
        "120": "as a result what Java will do when it\n",
        "122": "sees that the way the interpreter works\n",
        "123": "is it says ok stop what you're doing\n",
        "125": "you've been given an exception and you\n",
        "127": "break the usual flow of control and\n",
        "129": "we'll talk about what happens from there\n",
        "131": "in a moment\n",
        "132": "so exceptions though I just want to\n",
        "134": "mention that there are there instances\n",
        "135": "of classes just like pretty much\n",
        "138": "everything else in Java and you know it\n",
        "140": "has a couple different constructors and\n",
        "141": "once it's thrown then something\n",
        "143": "interesting happens so what we've seen\n",
        "145": "as I mentioned a moment ago is that\n",
        "147": "usually a program just crashes but you\n",
        "149": "can actually also catch an exception and\n",
        "150": "this is a concept you may have seen in\n",
        "152": "another language or maybe not so\n",
        "155": "basically what catching does is it\n",
        "157": "prevents the program from crashing when\n",
        "159": "it's running so suppose I create a new\n",
        "161": "dog named Lucy who's a retriever\n",
        "164": "weighing 80 pounds so maybe Lucy becomes\n",
        "167": "angry and then if we try to pet the dog\n",
        "170": "that is Lucy receives a pat if she's\n",
        "172": "upset she'll throw an exception and say\n",
        "173": "I don't want to get touched but rather\n",
        "176": "than letting the program crash will\n",
        "178": "actually catch that exception and print\n",
        "180": "it out and let the code keep running so\n",
        "182": "in this case we run this program it says\n",
        "185": "tried to Pat however we got a runtime\n",
        "187": "exception cur snarl snarl that's that's\n",
        "189": "the exception here that's apparently the\n",
        "192": "message thrown by Lucy but after\n",
        "193": "catching that exception the program\n",
        "195": "keeps running so rather than crashing at\n",
        "196": "this point and never printing we\n",
        "198": "actually get down here to this final\n",
        "199": "print line and we get Lucy is the\n",
        "201": "displeased retriever weighing 80 pounds\n",
        "203": "so in this case the code didn't crash\n",
        "206": "because we caught the exception now why\n",
        "208": "would you ever do that well one reason\n",
        "210": "is you can actually maybe take\n",
        "213": "corrective action instead of inside of a\n",
        "215": "catch block so suppose I create a new\n",
        "218": "dog Lucy who's a retriever and weighs 80\n",
        "221": "pounds maybe Lucy becomes angry and then\n",
        "223": "when the code runs whenever we this time\n",
        "225": "whenever the dog tries to get petted\n",
        "228": "padded then we will print out the\n",
        "230": "exception and then feed the dog a banana\n",
        "233": "hopefully to appease it the dog will\n",
        "235": "then receive a pat again and then we'll\n",
        "237": "print let's see what happens so in this\n",
        "239": "case we say Java exception demo Lucy\n",
        "243": "becomes upset we try to Pat Lucy and we\n",
        "245": "get java.lang run time exception snarl\n",
        "247": "snarl however we then feed the dog a\n",
        "249": "banana and apparently this eight treat\n",
        "251": "method prints at Lucy much as the banana\n",
        "254": "we then try to pet Lucy and in this case\n",
        "256": "Lucy enjoys the path she did not throw\n",
        "258": "an exception this time which is great\n",
        "260": "and then finally we can print out Lucy\n",
        "262": "and this time she's a happy retriever\n",
        "264": "weighing 80 pounds so good job we have\n",
        "266": "caught something now this kind of\n",
        "268": "catching right this is kind of a silly\n",
        "270": "example but in the real world maybe the\n",
        "272": "exception you get is that like an\n",
        "274": "antenna it's not extended on a robot so\n",
        "275": "if you catch that exception\n",
        "277": "you can then extend the antenna and\n",
        "279": "proceed as you want it sometimes it's\n",
        "281": "not actually a corrective action and we\n",
        "282": "just want to write out a log file or\n",
        "284": "turn on a blinking light or whatever it\n",
        "286": "may be there are reasons for particular\n",
        "287": "exceptions we might have different\n"
    },
    "Title=[Syntax2, Video 4] Uncaught Exceptions_Id=qArNwBWtXQg": {
        "0": " \n",
        "2": "let's consider a more realistic example\n",
        "4": "of what happens when an exception is not\n",
        "7": "caught so here in homework 1 this is\n",
        "9": "inspired by homework 1 we have a class\n",
        "11": "called guitar hero light it is a method\n",
        "12": "called main\n",
        "15": "it calls guitar string example in some\n",
        "17": "other class and that in turn calls a ray\n",
        "21": "ring buffer dot peak ok so let's imagine\n",
        "23": "that something goes wrong in peak and a\n",
        "26": "runtime exception gets thrown well what\n",
        "27": "the Java interpreter will do is it'll\n",
        "29": "say is somebody in peak going to catch\n",
        "30": "say is somebody in peak going to catch\n",
        "31": "or it will the peak method catch the\n",
        "34": "exception let's say it does not catch it\n",
        "36": "well in that case the exception began\n",
        "38": "descending what's known as the call\n",
        "40": "stack it's the stack of methods that get\n",
        "43": "called so now we basically pop this off\n",
        "44": "of the stack we can mentally imagine\n",
        "46": "that we're moving down the stack of\n",
        "48": "methods so we then look for a catch in\n",
        "52": "the sample method now let's say sample\n",
        "54": "also does not catch it so this exception\n",
        "56": "will now move up to the main method now\n",
        "58": "at this point if we caught the exception\n",
        "59": "we could print out a message that said\n",
        "61": "something like something went wrong when\n",
        "64": "calling guitar string dot sample but if\n",
        "66": "we don't catch it in this case the\n",
        "68": "program will crash and then the Java\n",
        "70": "interpreter will do the best thing it\n",
        "72": "can imagine which is print out here with\n",
        "75": "known as a stack trace yeah so basically\n",
        "76": "if the exception gets to the bottom of\n",
        "78": "the call stack the program crashes and\n",
        "80": "we get a message here and ideally\n",
        "82": "because this message is kind of jargony\n",
        "84": "I mean imagine you know someone on their\n",
        "86": "cell phone using an Android app that\n",
        "88": "crashes but just prints out this message\n",
        "89": "they're gonna have no idea what it means\n",
        "91": "they're not a programmer probably so\n",
        "93": "ideally the person who actually sees\n",
        "95": "this call trait the stack trace is\n",
        "97": "actually a programmer but maybe not and\n",
        "98": "so in this case the stack trace\n",
        "99": "so in this case the stack trace\n",
        "101": "basically says Guitar Hero like Java\n",
        "104": "online 110 ran into trouble when it was\n",
        "107": "calling a guitar string sample and on\n",
        "109": "line 48 of this method we then called a\n",
        "111": "ray ring buffer dot peek oh and it's\n",
        "113": "actually on line 63 of a raymond ring\n",
        "114": "buffer that things went wrong and so\n",
        "116": "this stack Trace is hopefully helpful\n"
    },
    "Title=[Syntax2, Video 5] Checked vs Unchecked Exceptions_Id=bD3WV5YJ8PE": {
        "0": " \n",
        "1": "the last thing I want to say about\n",
        "3": "exceptions is to point out a little\n",
        "5": "issue you're likely to run into at some\n",
        "7": "point when using real library code so\n",
        "9": "occasionally you'll write some innocent\n",
        "11": "little method like this I have a main\n",
        "13": "method that called the goal gate method\n",
        "15": "of some eagle class but when I try and\n",
        "17": "compile it it yells at me and it says\n",
        "19": "must be caught or declared to be thrown\n",
        "22": "some kind of unreported exception so\n",
        "23": "what we're gonna do in the next few\n",
        "24": "minutes is pick apart what's happening\n",
        "26": "here exactly it just seems strange here\n",
        "28": "then I'm just trying to compile my code\n",
        "29": "Matt saying something about unreported\n",
        "30": "Matt saying something about unreported\n",
        "32": "exceptions so the basic idea that\n",
        "34": "underlies all what we're about to talk\n",
        "37": "about is that some errors some some\n",
        "40": "exceptions rather are considered so\n",
        "42": "disgusting by the compiler you have to\n",
        "44": "handle them in some way and there's a\n",
        "46": "specific thing known as the catch or\n",
        "48": "specify requirement that we're gonna\n",
        "51": "describe in a moment so these special\n",
        "53": "exceptions the ones the compiler really\n",
        "55": "hates are considered or are called\n",
        "58": "checked exceptions I think a better name\n",
        "59": "for them would be must be checked\n",
        "61": "exceptions for reasons that will become\n",
        "64": "clear soon but well we'll get there in a\n",
        "66": "moment so all of our examples so far\n",
        "69": "have been so-called unchecked exceptions\n",
        "72": "however as we just saw it seems like\n",
        "74": "these things known as checked exceptions\n",
        "76": "and these we're the compiler\n",
        "78": "requires that they be caught or\n",
        "80": "specified and I'll say what specified as\n",
        "82": "in a moment and the basic philosophy\n",
        "84": "behind this is that the Java compiler\n",
        "86": "wants to prevent any situation where\n",
        "87": "wants to prevent any situation where\n",
        "88": "there's an avoidable crash that could\n",
        "89": "have been handled and it will\n",
        "91": "philosophize at the end of this little\n",
        "93": "section about what exactly that means\n",
        "96": "so let's actually consider here a piece\n",
        "98": "of code that we write everything\n",
        "99": "ourselves right so here we were relying\n",
        "101": "on some external library who knows\n",
        "103": "what's happening in this example I'm\n",
        "105": "making a class called Eagle which has a\n",
        "107": "goal gate method if today is Thursday it\n",
        "109": "throws a new i/o exception which is just\n",
        "111": "something I dug out of the libraries so\n",
        "113": "if I try and compile it egle as it's\n",
        "115": "written right here a funny thing happens\n",
        "117": "we get unreported the exception piyo\n",
        "120": "exception must be caught or declared to\n",
        "123": "be thrown even compilation fails now\n",
        "125": "contrast that with this alternate\n",
        "127": "situation in unchecked exception demo in\n",
        "129": "this case it's almost the exact same\n",
        "131": "idea right if today's Thursday now we'll\n",
        "133": "throw a new runtime\n",
        "135": "option this code if I try to compile it\n",
        "137": "it's perfectly fine does not matter and\n",
        "139": "if I try and run it with a little crash\n",
        "141": "of course if it happens to be Thursday\n",
        "145": "and say ha ha got you is weird Joe you\n",
        "147": "know who knows how programs how their\n",
        "149": "sense of humor works so this program\n",
        "150": "sense of humor works so this program\n",
        "151": "right here the only difference between\n",
        "153": "them the only meaningful difference is\n",
        "156": "that this has a runtime exception and\n",
        "160": "this has an IO exception so what's\n",
        "161": "happening what's special about this why\n",
        "162": "happening what's special about this why\n",
        "163": "why does it compiler allow one and not\n",
        "165": "the other it's actually a pretty simple\n",
        "168": "rule anything here in blue that is Error\n",
        "171": "runtime exception or any of their\n",
        "173": "subtypes they're all throwables these\n",
        "175": "are considered unchecked in other words\n",
        "177": "they don't need to be checked if your\n",
        "179": "code throws them the compiler will say\n",
        "181": "that's fine but if at any point there's\n",
        "183": "any possibility of any of these red\n",
        "185": "classes these are all the checked\n",
        "188": "examples if any of those are have any\n",
        "190": "possibility whatsoever of occurring you\n",
        "193": "must either catch or specify those\n",
        "194": "exceptions otherwise the compiler will\n",
        "197": "not allow that code to be compiled so\n",
        "199": "let's see a little compare and contrast\n",
        "202": "here with our unchecked exception demo\n",
        "204": "because runtime exception is on the blue\n",
        "206": "side does not care\n",
        "208": "Java says that's fine you know I know\n",
        "209": "it's a little weird for you to be doing\n",
        "212": "it but I'm gonna allow it but over here\n",
        "215": "because there's the possibility of a red\n",
        "218": "exception then the compiler will yell at\n",
        "219": "you and say why didn't you catch or\n",
        "221": "specify you know that's in the rules ok\n",
        "222": "well maybe you did it but now you're\n",
        "225": "learning so let's see what that means\n",
        "226": "again how can we actually handle one of\n",
        "228": "these red exceptions what is it that we\n",
        "230": "need to do well the first thing we can\n",
        "232": "do is do is use a catch statement as we\n",
        "234": "saw before and in this case in my ego\n",
        "237": "class in goal gate I could say if today\n",
        "238": "it goes Thursday throw a new exception\n",
        "241": "and then I can have a catch block here\n",
        "243": "so that if it happens to be Thursday\n",
        "244": "that exception is captured and it can't\n",
        "247": "escape so if we look at this code the\n",
        "249": "compiler says is there any chance that's\n",
        "251": "an exception that I absolutely hate\n",
        "252": "that's over here is there any chance it\n",
        "254": "could get out no it couldn't get out\n",
        "256": "because there's a catch here and so in\n",
        "257": "this case the compiler allows we have\n",
        "258": "this case the compiler allows we have\n",
        "261": "caught this checked exception\n",
        "263": "now I'll mention just briefly because I\n",
        "267": "ought to that because in IO exception\n",
        "268": "is an exception it's a subtype of\n",
        "271": "exception right so notice I exception\n",
        "273": "exception this catch will actually catch\n",
        "276": "IO exception however if I did something\n",
        "278": "like MIDI unavailable exception it would\n",
        "280": "not work because this catch block does\n",
        "281": "not actually capture i/o exceptions\n",
        "284": "they're cousins they're not parent this\n",
        "286": "is not a parent of AI exception and so\n",
        "288": "if we tried to compile the code like\n",
        "291": "this it wouldn't work just as an aside\n",
        "295": "now the alternate possibility other than\n",
        "296": "catching is to do something known as\n",
        "300": "specifying so what is specifying well to\n",
        "303": "do that we simply take our method and we\n",
        "305": "mark it with an extra new keyword we've\n",
        "307": "never used before called throws and this\n",
        "310": "means I might maybe by the way throw an\n",
        "312": "IO exception so it's a declaration to\n",
        "314": "the world that goal gate has the\n",
        "315": "property that it might throw IO\n",
        "316": "exception\n",
        "318": "it doesn't always just has to be\n",
        "322": "Thursday but it may and so that way we\n",
        "324": "know so if we try to compile eagle with\n",
        "327": "this method signature as opposed to this\n",
        "328": "method signature it will work perfectly\n",
        "330": "fine even without a catch\n",
        "332": "so no catch you just put throws IO\n",
        "335": "exception it'll compile just fine so\n",
        "337": "basically the philosophy there actually\n",
        "339": "is that we're deferring to someone else\n",
        "340": "we're warning the world that I'm a\n",
        "342": "method that's dangerous when you go gate\n",
        "344": "there might be an IO exception and you\n",
        "346": "need to handle it so here's an\n",
        "347": "interesting note which is that if a\n",
        "348": "interesting note which is that if a\n",
        "350": "method uses a dangerous method that is\n",
        "352": "if it uses a method that might throw a\n",
        "353": "checked exception it becomes dangerous\n",
        "357": "itself so if we look at a goal gate here\n",
        "359": "when we say a throw new IO exception if\n",
        "361": "in the main method we call eagle duck\n",
        "364": "goal gate this is why when we tried to\n",
        "366": "compile our code we get unreported\n",
        "368": "exception IO exception must be caught or\n",
        "370": "declared to be thrown because this\n",
        "372": "method right here throws IO exception\n",
        "375": "main also obviously since this can throw\n",
        "378": "an exception so can main and so in this\n",
        "379": "case we are not can't handling it\n",
        "381": "there's an old Nietzsche quote which I\n",
        "383": "think summarizes it nicely he who fights\n",
        "385": "with monster should look to it that he\n",
        "387": "himself does not become a monster and\n",
        "389": "when you gaze long into an abyss the\n",
        "393": "abyss also gazes into you so how do we\n",
        "394": "handle this how do we deal with the fact\n",
        "396": "that eagle gull gate might throw an\n",
        "398": "ioexception well we have a rule for that\n",
        "400": "we can either catch\n",
        "405": "or specify so here's my code up top one\n",
        "407": "possibility is in Maine we can catch it\n",
        "409": "we can try to goal gate in this case\n",
        "411": "I've imported the method from Eagle\n",
        "412": "already so it's not actually saying\n",
        "414": "Eagle not going sorry\n",
        "417": "and then we catch that exception and in\n",
        "418": "that case we've averted the crisis this\n",
        "420": "will compile just fine and in this case\n",
        "422": "we're keeping the exception from getting\n",
        "423": "out we're containing all that abyssal\n",
        "424": "out we're containing all that abyssal\n",
        "426": "energy and you can do this as long as\n",
        "428": "you can handle the problem so in this\n",
        "429": "case we handled the problem by just\n",
        "430": "saying no problem at all\n",
        "432": "but sometimes you actually want to do\n",
        "434": "something like maybe extend the antenna\n",
        "436": "or whatever it is the alternate\n",
        "438": "possibility is to make Maine itself to\n",
        "440": "declare that Maine is dangerous so Maine\n",
        "442": "might throw i/o exception in that case\n",
        "444": "this will also work the difference is\n",
        "446": "that on the left hand side you provide\n",
        "448": "the remedy and on the right hand side\n",
        "450": "someone else has to provide the remedy\n",
        "452": "so here you specify that you're\n",
        "453": "dangerous and someone else in this case\n",
        "454": "should handle it\n",
        "457": "so the last thing I want to say about\n",
        "459": "exceptions then we'll move on to other\n",
        "462": "things is that the reason that Java does\n",
        "464": "this right so we got you might ask the\n",
        "465": "question why does job and not require\n",
        "467": "that every exception be caught\n",
        "470": "maybe ponder that for a moment but the\n",
        "471": "answer is simply that these are\n",
        "472": "exceptions you can't predict in advance\n",
        "474": "and if they do happen what are you gonna\n",
        "476": "do about it like if you get index out of\n",
        "478": "bounds exception it's likely there's\n",
        "480": "nothing you can do but by contrast and a\n",
        "482": "file is not found you can maybe ask the\n",
        "484": "user to go get you the file or something\n",
        "486": "and so what's interesting about these\n",
        "488": "exceptions these are things for which a\n",
        "491": "remedy conceivably exists that's why\n",
        "493": "Java requires you to handle them if\n",
        "495": "possible remember that Java is largely\n",
        "499": "about making sure that you don't shoot\n",
        "501": "yourself in the foot and so here\n",
        "503": "basically if we look at and in this this\n",
        "505": "is the API of a class called file writer\n",
        "507": "we can see that each of the methods\n",
        "509": "there's actually part of the declaration\n",
        "510": "it's warning you that if you create a\n",
        "512": "file writer it might throw an i/o\n",
        "513": "exception\n",
        "515": "so that means that you if you're using a\n",
        "516": "file writer you need to keep that in\n",
        "518": "mind so that way if you try to write to\n",
        "519": "a file and you find oops\n",
        "521": "writing to the file didn't work then you\n",
        "523": "can do something whatever it is that you\n",
        "525": "think is necessary that's it for\n",
        "526": "exceptions and so we'll move on to a new\n",
        "527": "topic\n",
        "529": "there's more to know about exceptions\n",
        "530": "and that but that's the most important\n"
    },
    "Title=[Syntax2, Video 6] Iteration Intro_Id=2QvQT2ptkBo": {
        "0": " \n",
        "2": "our other topic of the day is that of\n",
        "5": "iteration so we saw before that Java\n",
        "7": "lets us iterate through lists using a\n",
        "8": "nice little shorthand here that\n",
        "10": "sometimes known as an enhanced for loop\n",
        "13": "or a for each loop so if I have a list\n",
        "15": "of friends in this case the friends are\n",
        "17": "integers then if I enter eighth iterate\n",
        "19": "through them using four index friends\n",
        "23": "then we get the output 5 23 42 so what\n",
        "25": "I'm going to do here is we're going to\n",
        "26": "strip away the magic that makes this\n",
        "29": "possible so that our classes like for\n",
        "31": "example array DAC or linked list deck or\n",
        "33": "whatever else you build can also support\n",
        "37": "this nice syntax so an alternate uglier\n",
        "39": "way to iterate through a list is to use\n",
        "41": "what's known as the iterator method what\n",
        "44": "I can do is instead of saying for int x\n",
        "46": "equals friends I can say iterator of\n",
        "49": "integers seer I'm calling it the seer\n",
        "51": "equals friends done iterator what that\n",
        "53": "does as it returns an object that is\n",
        "56": "able to return the entries of friends\n",
        "59": "one by one the API the interface for\n",
        "63": "that iterator interface yes the\n",
        "66": "interface or that interface it has two\n",
        "68": "methods hasnext and next where it will\n",
        "69": "methods hasnext and next where it will\n",
        "70": "iterate through each of the items house\n",
        "72": "all show in an animation a moment so in\n",
        "74": "other words this code right here is\n",
        "76": "exactly identical to this code on the\n",
        "78": "right they have no difference it's just\n",
        "80": "that this is shorthand for the code on\n",
        "82": "the right so how does this code actually\n",
        "85": "run well here are the friends this is\n",
        "87": "the friends list and when we iterate\n",
        "89": "through it the seer variable initially\n",
        "91": "is looking when we say iterator see your\n",
        "93": "equals friends iterator it's looking at\n",
        "97": "this first entry of list so we go and we\n",
        "99": "say while Sierra dot has next is that\n",
        "101": "true is there something left yes so in\n",
        "103": "that case we will print out C or dot\n",
        "105": "next and see our next does two things\n",
        "109": "one is it returns the next value and two\n",
        "111": "it advances itself whatever that means\n",
        "114": "so we go forward and we print out five\n",
        "115": "can we printed out five and we move\n",
        "116": "can we printed out five and we move\n",
        "118": "forward so this line does two things it\n",
        "121": "moves the pointer forward whatever that\n",
        "123": "means inside right because we don't know\n",
        "125": "what the implementation of this guy is\n",
        "126": "we're just the people in the cave\n",
        "128": "looking at the wizard move on the wall\n",
        "129": "we don't actually know about his\n",
        "131": "internal state or how he works\n",
        "133": "okay\n",
        "134": "sothanks what we do is we come up here\n",
        "135": "and we say isn't there something else\n",
        "140": "yes so then we return and move and we\n",
        "142": "say is there something left yes then we\n",
        "144": "return and move we say forty-two and\n",
        "146": "then we say is there something left and\n",
        "149": "we say false so that's the basic idea of\n",
        "151": "how iterators are going to work in Java\n",
        "153": "as well we'll do in the next couple of\n",
        "155": "videos is see how we can add this same\n"
    },
    "Title=[Syntax3, Video 1] Creating IntelliJ Projects_Id=2lOvFPJLyLQ": {
        "0": " \n",
        "2": "you must be chomping at the bit for more\n",
        "4": "Java syntax and you're in luck because\n",
        "6": "we're gonna do it in this video I got a\n",
        "7": "special treat for you today which is\n",
        "9": "we're gonna begin the video with\n",
        "11": "creating a new project and IntelliJ and\n",
        "13": "the past we've always done import\n",
        "15": "project but now it'll be from scratch so\n",
        "17": "when I create create when I click create\n",
        "19": "new project I have here Java Java FX\n",
        "23": "Android who knows what just happened\n",
        "24": "Kotlin yada yada\n",
        "26": "we're gonna pick Java and we're not\n",
        "28": "gonna pick any additional libraries or\n",
        "29": "frameworks you're welcome to Google what\n",
        "30": "these things are but they're not\n",
        "32": "important to us in 61b\n",
        "35": "so then I'm gonna click Next Next\n",
        "37": "and then I'm going to specify a project\n",
        "39": "name which I'll call live because that's\n",
        "40": "what I like to call them oh wait\n",
        "42": "actually I'm gonna call this you gotta\n",
        "45": "go one folder deeper unless your code\n",
        "51": "syntax 3 and now we'll do live ok and\n",
        "55": "we'll say live alright so once I do this\n",
        "57": "it will create this directory and now I\n",
        "60": "have a new project once I'm in here\n",
        "62": "you'll see there's only one slight\n",
        "63": "difference from what we're used to with\n",
        "65": "IntelliJ and that's that we have this\n",
        "67": "SRC folder you might not even notice\n",
        "70": "that's different that's because if you\n",
        "71": "let IntelliJ create the folder that's\n",
        "74": "where wants to put source code files so\n",
        "75": "I'm gonna say new class and I'm gonna\n",
        "78": "make one call a dog launcher and now I\n",
        "80": "have a dog launcher class and that's\n",
        "82": "gonna be our starting point for today so\n",
        "83": "in the next video we're gonna start from\n",
        "85": "here and start talking about packages in\n"
    },
    "Title=[Syntax3, Video 2] Packages in IntelliJ_Id=3brypGcpctQ": {
        "0": " \n",
        "2": "we've already talked about packages in a\n",
        "4": "previous video but in this video we're\n",
        "5": "gonna see how we can actually create\n",
        "8": "those inside of IntelliJ and explore\n",
        "10": "interactively how packages behave and\n",
        "12": "also on the side talk about jar files\n",
        "15": "briefly so as we saw before there exists\n",
        "17": "something in Java known as a package\n",
        "19": "which is distinct from a project that\n",
        "20": "thing we did in the previous little clip\n",
        "23": "so a package is a Java syntax idea and\n",
        "25": "it addresses the fact that multiple\n",
        "27": "classes might have the same name there\n",
        "29": "might be a dog class used by me there\n",
        "31": "might be a dog class used by I don't\n",
        "34": "know Franklin L bean who runs some\n",
        "37": "company somewhere right and so to deal\n",
        "38": "with the fact that me and Franklin Bean\n",
        "40": "might come up with the same name for a\n",
        "42": "class we use this idea of a namespace\n",
        "45": "that any package or in each class I\n",
        "46": "write should be associated with some\n",
        "49": "kind of package some kind of a name an\n",
        "51": "extra part of the name so to do that\n",
        "54": "what we do is rather than renaming the\n",
        "56": "class something like Josh hug dog or\n",
        "58": "something I will instead at the top of\n",
        "61": "my file I'll say package oh gosh Josh H\n",
        "63": "dot animal and what that says is that\n",
        "65": "this package is named dog about Josh H -\n",
        "67": "animal and the dog class belongs to it\n",
        "70": "and so this convention as I mentioned in\n",
        "71": "an earlier video refers to the website\n",
        "72": "an earlier video refers to the website\n",
        "76": "address so the org unit package so or\n",
        "78": "j-unit or first - a package called org\n",
        "80": "dot J unit and it also refers to the\n",
        "83": "website J unit org in this case they\n",
        "85": "have a single package that goes with\n",
        "87": "this website so they didn't call it like\n",
        "89": "or J unit dot testing stuff or is it my\n",
        "91": "case maybe I have multiple packages at\n",
        "94": "my website josh hdg so the package in\n",
        "97": "this case full name is Josh H - animal\n",
        "100": "capturing both the website and the\n",
        "102": "special thing that I'm building okay so\n",
        "104": "that's nothing new but what's gonna\n",
        "105": "happen in a moment is we'll see how this\n",
        "107": "works in IntelliJ now as a reminder\n",
        "110": "whenever we actually ID create a package\n",
        "112": "then whenever we want to use a class in\n",
        "114": "that package we have to either use the\n",
        "117": "entire canonical name or we can use the\n",
        "118": "import statement where we can just use\n",
        "120": "the simple name which will be just dog\n",
        "124": "and we'll do that in a moment okay so\n",
        "125": "there's two steps to creating a package\n",
        "129": "the first step is to put the package\n",
        "130": "name at the top with a package\n",
        "133": "declaration just like this and then the\n",
        "134": "second thing to do is to make sure that\n",
        "136": "the file is stored in a folder with the\n",
        "138": "appropriate folder name now there's a\n",
        "140": "rule in Java that the Java interpreter\n",
        "143": "uses and the Java compiler uses to find\n",
        "146": "the files at once so if there's a file\n",
        "149": "but as package name Oh Gachet animal it\n",
        "150": "needs to be in a folder where we just\n",
        "152": "replace each of these dots with a slash\n",
        "153": "so it needs to be in a folder\n",
        "156": "ugh slash Josh eh slash animal in other\n",
        "157": "words there's a folder named animal\n",
        "159": "inside of a folder named Josh eh inside\n",
        "162": "of a folder named uh and we could do\n",
        "164": "that manually from our computer but I'll\n",
        "166": "show you first how we can do it in\n",
        "169": "intelligent so to do this I'm gonna say\n",
        "172": "file new package so let's go into\n",
        "174": "IntelliJ and I go up here and I'll say\n",
        "178": "file new where's there this package and\n",
        "179": "we'll call this package\n",
        "184": "Oh Josh H dot animal so that has created\n",
        "186": "here this little funny folder thing here\n",
        "188": "and if actually if I go to show and\n",
        "189": "Explorer I can see that there's now a\n",
        "193": "folder called ugh inside of that is Josh\n",
        "195": "H inside of that is animal and nothing\n",
        "198": "is currently in the package and so if I\n",
        "200": "want to actually create a class inside\n",
        "202": "this package I'll right click on the\n",
        "203": "package name and say new Java class and\n",
        "206": "we'll might be called this dog so this\n",
        "208": "automatically puts a declaration at the\n",
        "210": "top and we'll see that the dog Java file\n",
        "212": "is inside of this package and what that\n",
        "214": "means in terms of our computer if we\n",
        "215": "actually go here we'll see that in this\n",
        "218": "folder ok again we'll go up inside a bug\n",
        "221": "slash Josh H / animal we now have dog we\n",
        "222": "can open it up in sublime and see that\n",
        "228": "nothing special is happening here so at\n",
        "230": "that point we have now added a file\n",
        "233": "known as dog to our Shh animal package\n",
        "236": "and here's all the slide versions of\n",
        "239": "just the same thing okay so what we've\n",
        "241": "just done then right is we've just done\n",
        "242": "those two steps I mentioned earlier I\n",
        "244": "said there's two steps to creating a\n",
        "245": "package okay\n",
        "247": "the first is putting the package name at\n",
        "248": "the top and the second is making sure\n",
        "250": "it's in the right folder so by doing\n",
        "252": "those steps in IntelliJ we have done\n",
        "254": "exactly these things and again we could\n",
        "255": "have done them manually\n",
        "256": "I could have manually gone in here and\n",
        "261": "said new folder ugh and so forth and\n",
        "262": "just repeat it over and over but I saved\n",
        "264": "myself some time by using IntelliJ\n",
        "266": "instead\n",
        "268": "do we use packages well as we saw in a\n",
        "270": "previous lecture and as I said a little\n",
        "272": "bit ago if we have a class in one\n",
        "274": "package on anyone and we want to use it\n",
        "276": "in another package we can use the\n",
        "278": "canonical name and the canonical name\n",
        "282": "refers to the entire name of the class\n",
        "284": "including its package name and so in dog\n",
        "286": "launcher which is not part of the\n",
        "289": "package notice I could say Oh Josh H or\n",
        "291": "sorry if I say dog B equals new dog it\n",
        "295": "won't work but if I say oh gosh H animal\n",
        "297": "dog then what the IntelliJ compiler will\n",
        "300": "do is it'll say okay in this folder\n",
        "302": "right let's think about it from the Java\n",
        "304": "compiler perspective it says in this\n",
        "307": "folder is there an UGG / Josh H / animal\n",
        "310": "/ dog yes yes there is so everything's\n",
        "312": "set up here nice and beautifully and so\n",
        "314": "now we can use the ugh Josh H - animal\n",
        "317": "dog class from dog launcher we can also\n",
        "319": "use an import statement and in that case\n",
        "321": "we can just use the simple name instead\n",
        "325": "so if I ants go back to our dog launcher\n",
        "330": "and I say import Oh Josh H animal dot\n",
        "333": "dog now I no longer need to say this\n",
        "335": "entire canonical name and I can just say\n",
        "338": "dog okay and Java automatically knows\n",
        "339": "that the dog I'm referring to is this\n",
        "343": "dog because I imported it now as I\n",
        "345": "mentioned begin in a previous lecture\n",
        "347": "unlike a language like Python where an\n",
        "349": "import is necessary to use code that's\n",
        "352": "outside of the current context that is\n",
        "354": "to use something that's from another\n",
        "356": "package you don't have to do it in Java\n",
        "359": "in Java the import statement is just a\n",
        "361": "syntactic ol convenience as opposed to\n",
        "365": "unlocking new capabilities now an\n",
        "368": "important note is that a class where you\n",
        "370": "don't actually put a package name which\n",
        "371": "is almost all the code you've written in\n",
        "374": "this class it is called or it's said to\n",
        "376": "be part of the so called default package\n",
        "380": "there is a nice post on Stack Overflow\n",
        "382": "where someone just simply puts it this\n",
        "384": "way you should avoid using the default\n",
        "386": "package except for very small example\n",
        "389": "programs and I agree things like our\n",
        "391": "homework 1 or sorry our project 1 a\n",
        "393": "project 1b those really should have been\n",
        "394": "part of a package but I didn't want to\n",
        "396": "layer even more syntax on you but from\n",
        "398": "this point on as we're working on our\n",
        "400": "programs we're gonna have everything\n",
        "403": "be part of a package so in other words\n",
        "405": "whenever you write programs from now on\n",
        "407": "you should always have some kind of\n",
        "408": "package declaration up top I guess if\n",
        "409": "package declaration up top I guess if\n",
        "412": "you writing tiny little example code you\n",
        "413": "can avoid it for some but there's no\n",
        "415": "reason not to have part of a package it\n",
        "418": "makes it's easy to do in Java so the\n",
        "419": "idea here is again just to ensure that\n",
        "421": "we don't have two classes with the same\n",
        "422": "name that we always know exactly what\n",
        "423": "we're getting in other words we're being\n",
        "424": "we're getting in other words we're being\n",
        "426": "explicit rather than implicit now\n",
        "428": "there's one little note here which is\n",
        "430": "that you cannot import code from the\n",
        "433": "default package so in other words if I'm\n",
        "435": "in the dog class there's no way I could\n",
        "437": "call a dog launcher that main if I try\n",
        "438": "and do this it doesn't know what dog\n",
        "440": "launcher is I can't do something like\n",
        "442": "default dog launcher that does not work\n",
        "444": "so in other words there's literally no\n",
        "446": "way that the dog class could ever get\n",
        "448": "ahold of anything in the dog launcher\n",
        "449": "class because it's part of the default\n",
        "451": "package and that's just one thing to\n",
        "453": "keep in mind that's an additional reason\n",
        "454": "why you should avoid using the default\n",
        "456": "package except for very small example\n",
        "459": "programs so the last little thing I want\n",
        "461": "to say about packages is that if you\n",
        "463": "realize that you have created a class\n",
        "465": "that's not part of a package then you\n",
        "467": "simply need to do two things one is add\n",
        "469": "the name of the package using a package\n",
        "472": "declaration at the top of the file so\n",
        "473": "let me do that let's say I want to make\n",
        "475": "Dog launcher part of this class maybe\n",
        "477": "I've just decided it seems like a dog\n",
        "478": "launcher should be part of this animal\n",
        "481": "package then I'll say a package Oh Josh\n",
        "486": "H dot animal now at this point this is\n",
        "489": "fine but it says I don't understand the\n",
        "491": "package name does not correspond to the\n",
        "493": "file path in other words on my computer\n",
        "496": "dog launchers here but supposed to be an\n",
        "498": "ugh slash Josh H last animal so I\n",
        "501": "couldn't move it manually all right I\n",
        "502": "couldn't do this and like keep repeating\n",
        "504": "that and move it into the appropriate\n",
        "506": "folder but I can actually also do it in\n",
        "508": "IntelliJ by simply dragging it into this\n",
        "511": "package I click a refactor and now\n",
        "512": "everything's fine\n",
        "515": "everybody compiles happily and if we now\n",
        "517": "look at the bug this folder it's gone\n",
        "519": "the dog launcher is gone but if we go\n",
        "521": "into ugh slash Josh H slash animal we\n",
        "523": "see dog launcher is happily waiting\n",
        "526": "there for us so IntelliJ again makes it\n",
        "528": "easier for us so in this next little\n",
        "530": "clip I'm going to talk about jar files\n",
        "532": "but I'll pause here for you to\n"
    },
    "Title=[Syntax3, Video 3] JAR Files_Id=nxE8-Q6joDU": {
        "0": " \n",
        "1": "I know it's hard to believe but\n",
        "3": "sometimes in your right code you don't\n",
        "5": "just want to send it to the autograder\n",
        "6": "and then immediately forget it ever\n",
        "9": "existed often you want to actually share\n",
        "10": "that code so we could be used by other\n",
        "13": "programmers or users so in order to do\n",
        "14": "that you would need to somehow give your\n",
        "16": "dot Java files or your doc class files\n",
        "18": "out to the world and even for a\n",
        "19": "medium-sized project that could be\n",
        "21": "dozens of dot class files now for this\n",
        "23": "ones it's easy I'd only have to\n",
        "24": "distribute these two class files in\n",
        "26": "order for someone to use this mostly\n",
        "28": "useless Oh Josh H - animal package but\n",
        "30": "for a lot of projects they could be much\n",
        "32": "bigger so what we're gonna do is use\n",
        "35": "something known as a doc jar file we're\n",
        "37": "gonna create one and it basically acts\n",
        "39": "as a bundle of a bunch of different\n",
        "41": "class files you can share as a single\n",
        "43": "file and then someone can import them\n",
        "46": "into IntelliJ or sorry specify them as a\n",
        "48": "library and so with one single file you\n",
        "50": "can end up having one or even many\n",
        "52": "packages all at once at your fingertips\n",
        "55": "so in order to do this in order to\n",
        "57": "create a jar file I'm gonna use IntelliJ\n",
        "59": "there are other ways to do it there's\n",
        "61": "other command-line tools but this is the\n",
        "63": "easiest way and the one that we'll\n",
        "65": "recommend you use for this class so I'm\n",
        "66": "just gonna follow these directions on\n",
        "68": "the slides which I wrote and I'll go to\n",
        "71": "in this case file project structure so\n",
        "73": "we've used file project structure before\n",
        "77": "to get libraries into our IntelliJ\n",
        "78": "environment and there's this case we\n",
        "81": "would actually in this case we already\n",
        "82": "gave you some jar files that you would\n",
        "84": "be adding using libraries so now we're\n",
        "86": "doing the other thing where we're going\n",
        "88": "to create the jar files themselves so\n",
        "90": "that other people could add them to\n",
        "92": "their library later so to do this after\n",
        "94": "doing file project structure I'm going\n",
        "96": "to collect artifacts jar from modules\n",
        "99": "with dependencies and then I get this\n",
        "103": "little window and in this dialog I'm\n",
        "106": "just gonna click OK twice ok you could\n",
        "107": "do more stuff but that's what we're\n",
        "109": "gonna do so after you've done this\n",
        "111": "you've specified a particular artifact\n",
        "113": "you'd like IntelliJ to build so I'll\n",
        "116": "click build in this case build artifacts\n",
        "120": "build again and now it cranks along and\n",
        "122": "does something ok so actually what it\n",
        "123": "just did\n",
        "127": "is if I go now to my computer and I see\n",
        "129": "what actually got produced then in the\n",
        "132": "production this out folder there's now\n",
        "133": "something called artifacts\n",
        "135": "and if I go in there there's now a file\n",
        "139": "called live jar so once I've built an\n",
        "141": "artifact I have live jar in this case\n",
        "143": "the version I did in the slides was\n",
        "144": "packaged m'hona\n",
        "146": "jar same idea and at that point you can\n",
        "148": "give this jar file to someone else who\n",
        "150": "can then use it as a library for that\n",
        "152": "program their programs now one thing I\n",
        "154": "want to mention is that jar files are\n",
        "156": "actually just zip files and we can go to\n",
        "159": "live jar and I can put in the zip yes\n",
        "162": "and I can open live dot zip and now I\n",
        "164": "see that it's actually just those class\n",
        "166": "files so nothing here happened that was\n",
        "168": "very magical now occasionally jar files\n",
        "170": "have a little extra meta information but\n",
        "172": "the main point here is that when you\n",
        "174": "give at a jar file you are giving out\n",
        "176": "your class files and as it happens it's\n",
        "178": "very easy to take a class file and turn\n",
        "180": "it back into a Java file so it does not\n",
        "182": "make your code safe to distribute if you\n",
        "184": "want to keep your ideas safe your\n",
        "185": "program safe keep it safe from reverse\n",
        "187": "engineering making a jar file is not\n",
        "189": "enough and similarly if you're in this\n",
        "191": "class and I don't know you have a friend\n",
        "193": "who's stuck and you give them a jar file\n",
        "194": "of your code thinking well they can't\n",
        "196": "like just copy my code right actually\n",
        "198": "they can if they know what they're doing\n",
        "201": "it will take somebody who has Google\n",
        "204": "skills maybe I don't know five minutes\n",
        "205": "six minutes to figure out how to do this\n",
        "208": "maybe try it out yourself kind of fun so\n",
        "210": "just be aware jar files don't keep you\n",
        "212": "safe that's it for jar files really\n",
        "213": "though we do want to mention one more\n",
        "215": "thing you'll notice it's a little\n",
        "216": "annoying\n",
        "218": "and IntelliJ to always do things like\n",
        "221": "okay project structure libraries or\n",
        "224": "artifacts or whatever else and setting\n",
        "228": "up all of these kind of meta project\n",
        "231": "ideas is a bit of pain and so there\n",
        "233": "exists something known as a build system\n",
        "235": "that automates that kind of process it\n",
        "237": "does more I'm not really gonna talk\n",
        "238": "about it much in class but there's a\n",
        "240": "bunch of build systems out there like\n",
        "242": "ant maven Gradle which seems to be\n",
        "244": "getting very popular and these can be\n",
        "246": "really useful for big teams big projects\n",
        "248": "where you don't want to have to write\n",
        "250": "out a bunch of directions like we do in\n",
        "251": "the labs it's like go to file project\n",
        "254": "structure yadda yadda in that case you\n",
        "256": "can provide a file that automates all\n",
        "259": "that stuff in 61 be our projects and our\n",
        "261": "and our homeworks are just not quite big\n",
        "263": "enough to really justify this but we\n",
        "265": "will use maven and project three at\n",
        "268": "than the spring 2017 semester so that's\n",
        "270": "it for jar files so let's move on to\n"
    },
    "Title=[Syntax3, Video 4] Access Modifiers_Id=xxngey7AFYw": {
        "0": " \n",
        "2": "our second-to-last javasan tax topic of\n",
        "4": "the entire semester is going to be\n",
        "7": "access control but before we do that I'm\n",
        "10": "going to show you here you you're the\n",
        "12": "secret audience of this particular video\n",
        "14": "being recorded I'm streaming this and if\n",
        "16": "you want to watch all the outtakes while\n",
        "17": "I'm describing the exact process I'm\n",
        "18": "I'm describing the exact process I'm\n",
        "20": "doing right now it's very meta maybe you\n",
        "21": "can go check out this vaad which\n",
        "23": "presumably will be recorded anyway\n",
        "28": "already back to it so access control the\n",
        "31": "big idea here is that we want to have a\n",
        "34": "finer grained control between private\n",
        "37": "and public so the inspiration we're\n",
        "38": "gonna have moving forwards just at the\n",
        "40": "beginning here is thinking about how the\n",
        "42": "private keyword interacts with the\n",
        "43": "notion of a package and the notion of a\n",
        "47": "subclass as an example could a subclass\n",
        "49": "access say a private member of its\n",
        "51": "superclass so for example if we had an\n",
        "53": "array map and then we extend extended\n",
        "56": "into a special array could that special\n",
        "58": "array map access the private key\n",
        "59": "iterator class we've built in the last\n",
        "61": "lecture ok now if you don't remember\n",
        "63": "those exactly that's fine but the\n",
        "65": "question is simply can a class which\n",
        "66": "extends another can it use the private\n",
        "69": "members of that original class you might\n",
        "71": "also ask yourself to do could two\n",
        "74": "classes in the same package can they use\n",
        "77": "each other's members right so for\n",
        "79": "example if we think about guitar string\n",
        "81": "an array ring buffer from homework one\n",
        "83": "so I'll just open that up real quick\n",
        "85": "they're part of the same package that\n",
        "87": "you're gonna name and then these two\n",
        "89": "pieces of code here the question is\n",
        "91": "could a guitar string for example access\n",
        "92": "could a guitar string for example access\n",
        "94": "the first element or the last a member\n",
        "97": "of the array ring buffer and it turns\n",
        "99": "out that in both cases the answer is no\n",
        "102": "so if you say private you really mean it\n",
        "104": "you must be part of the same exact class\n",
        "107": "in order to use that member and so what\n",
        "109": "we want to do is discuss the other\n",
        "111": "keywords in Java that have a different\n",
        "113": "layout than either yes yes yes yes or\n",
        "117": "yes no no no no so as an example that's\n",
        "119": "maybe a little less contrived or that we\n",
        "122": "can see right here on a slide maybe\n",
        "124": "there's more contrived example let's\n",
        "127": "consider the my onic array map so the my\n",
        "129": "onic array map is extends the array map\n",
        "130": "class it's part of the same exact\n",
        "132": "package and it\n",
        "134": "has in this case a constructor which\n",
        "137": "immediately sets the size equal to s so\n",
        "138": "if we actually try to compile this from\n",
        "140": "the command line we will get air size\n",
        "143": "has private access and array map now\n",
        "144": "it's kind of interesting is that if we\n",
        "147": "go look at the array map and we think\n",
        "150": "about this private size any subclass\n",
        "153": "actually inherits all of these fields\n",
        "155": "even though that class cannot access\n",
        "157": "them so here's an example this is the my\n",
        "160": "onic array map it extends the array map\n",
        "162": "class and what I'm gonna do in the\n",
        "163": "constructor is try and set size equal to\n",
        "166": "s so in this case the constructor\n",
        "168": "actually fails to compile because size\n",
        "171": "has private access now even though this\n",
        "173": "class cannot access its own instance\n",
        "174": "variable it nonetheless has that\n",
        "176": "instance variable which will be able to\n",
        "177": "see if we run this visualizer\n",
        "180": "so let's now run okay well that's from\n",
        "183": "an earlier cut so let's try running this\n",
        "187": "again and in this case we'll run my own\n",
        "189": "a quorum at and after we step over this\n",
        "190": "line and look at this in the visualizer\n",
        "192": "we see that it actually does have the\n",
        "194": "keys of values and a size even though\n",
        "195": "keys of values and a size even though\n",
        "197": "this class cannot access them that's an\n",
        "198": "important point because otherwise it\n",
        "199": "wouldn't actually work right and who\n",
        "201": "didn't have those are those variables it\n",
        "204": "would be useless so if we want to\n",
        "207": "actually be able to do that we can use a\n",
        "208": "new keyword that we have not seen before\n",
        "211": "in this class at least called protected\n",
        "213": "and the way that works is we simply go\n",
        "216": "into our class in this case array map\n",
        "217": "and I say this is no longer private it\n",
        "220": "is protected and that is not as private\n",
        "222": "as private right I mean private means\n",
        "224": "only for you protected means hey you\n",
        "226": "know I'm willing to let some of the\n",
        "228": "world use this but not just anybody and\n",
        "231": "in particular the Java access control\n",
        "233": "box or the table looks like this if you\n",
        "236": "are part of the same class or you're\n",
        "238": "part of the same package or you're part\n",
        "240": "of the same subclass you may access this\n",
        "242": "item and so in this case the my annika\n",
        "244": "ray map it is able to use this size\n",
        "246": "field and if we were to rerun this in\n",
        "249": "fact I don't let's do it so now if we\n",
        "251": "take this away we'll see it compiles\n",
        "257": " \n",
        "261": " \n",
        "266": "okay all right sorry a little sloppy\n",
        "269": "there because we now have multiple\n",
        "271": "copies of my debugger running but okay\n",
        "273": "in this case we look at the debugger we\n",
        "276": "can see that the size is five so we set\n",
        "278": "the size to five glorious it actually\n",
        "280": "everybody's happy so that's what\n",
        "282": "protected does for you it allows other\n",
        "284": "things in the same package or in the\n",
        "287": "same of it or or subclasses to use that\n",
        "290": "field now there's actually a fourth\n",
        "292": "level of access which is known as\n",
        "296": "packaged private in this case the way\n",
        "299": "you get the package private level of\n",
        "301": "access control level is to put no\n",
        "303": "keyword at all so in other words I would\n",
        "306": "go into here let's stop oh they're all\n",
        "310": "running boy okay close them get out of\n",
        "313": "no don't pen I have everything just\n",
        "315": "slightly too large so I can't get the X\n",
        "318": "by default so if we go into a Rhema and\n",
        "320": "we change this from protected to private\n",
        "321": "or time to private we change it to\n",
        "324": "nothing at all this right here is now\n",
        "327": "packaged private this is that fourth\n",
        "329": "level of access why did they decide to\n",
        "331": "make putting nothing at all a special\n",
        "332": "thing I don't know this is what they\n",
        "334": "decided to do with Java will live with\n",
        "337": "it so what that means is that only of\n",
        "338": "their classes that are part of the same\n",
        "341": "package or that class itself may access\n",
        "343": "this member of the class and subclasses\n",
        "346": "may not again you have to be part of the\n",
        "348": "package so it's either class or package\n",
        "350": "so let's consider some little examples\n",
        "353": "here maybe you'll think along so again\n",
        "356": "we have now changed a ray map so that\n",
        "357": "this is packaged private we have the my\n",
        "359": "annika ray map just exactly like it was\n",
        "361": "before and now we have a third class\n",
        "364": "called map helper that simply tries to\n",
        "366": "print out the size of an array map using\n",
        "370": "this field name so first question do you\n",
        "373": "think this will still work maybe you and\n",
        "375": "I could pause the video and ponder it\n",
        "379": "again so the way to think about it is to\n",
        "382": "say this is packaged private so is it\n",
        "383": "part of the same class no is it part of\n",
        "386": "the same package yes okay done all right\n",
        "388": "now we come to this one so in this case\n",
        "391": "we say all right is it part of the same\n",
        "392": "class\n",
        "394": "this work here is a part of the same\n",
        "396": "class no is a part of the same package\n",
        "397": "yes\n",
        "399": "we're done that's it we didn't even\n",
        "400": "think about whether or not it's part of\n",
        "402": "the same subclass being part of the same\n",
        "405": "package was good enough now here's a\n",
        "407": "random question totally out of nowhere\n",
        "409": "while I was putting this video together\n",
        "410": "I discovered something very interesting\n",
        "412": "which is that IntelliJ actually\n",
        "414": "generates really nice-looking sin tax\n",
        "416": "highlighted code the only problem is\n",
        "419": "that I generally make my slides a dark\n",
        "421": "color on light as opposed to a light\n",
        "424": "color on dark so if you are watching the\n",
        "426": "video please fill out this poll it\n",
        "427": "should hopefully be active whenever you\n",
        "428": "should hopefully be active whenever you\n",
        "430": "I'll keep that in mind for webcast\n",
        "431": "viewers in the future and if you come to\n",
        "432": "the real-life lecture I'll ask the\n",
        "434": "question again I guess you can vote\n"
    },
    "Title=[Syntax3, Video 6] Access Control Subtleties_Id=0tjxUDoIAhw": {
        "0": " \n",
        "2": "to wrap up access control let's consider\n",
        "5": "just a few subtleties so we saw earlier\n",
        "7": "in this flat set of videos that code\n",
        "10": "that lacks a package declaration is part\n",
        "12": "of the so called default package and so\n",
        "14": "let's think about how that interplays\n",
        "16": "with the notion of package private let's\n",
        "18": "consider this class over here chechi\n",
        "21": "obey so touch up FA is not part of any\n",
        "23": "named package it's just part of the\n",
        "25": "default package and it has a package\n",
        "27": "private leap method here I have a class\n",
        "29": "called tain that creates a chat Joe Pepe\n",
        "31": "and then calls elite method now it turns\n",
        "32": "out that this code will compile just\n",
        "34": "fine and the reason is that both of\n",
        "36": "these classes are part of the same\n",
        "38": "unnamed or default package so in this\n",
        "41": "case some even though this is a package\n",
        "42": "private since they're part of the\n",
        "44": "unnamed package everything works just\n",
        "47": "fine so in this case it's kind of\n",
        "49": "interesting because if you take code and\n",
        "51": "you totally omit package declarations\n",
        "53": "and you don't put access modifiers for\n",
        "55": "anything everything will work just fine\n",
        "57": "except for main which must be public and\n",
        "60": "it'll work out and so if you in the past\n",
        "61": "when you didn't really know what you're\n",
        "63": "doing in Java just forgot to put access\n",
        "65": "modifiers the reason it was working is\n",
        "67": "because secretly everything was part of\n",
        "69": "the same package the default package and\n",
        "71": "so even though it was private they catch\n",
        "72": "air all right\n",
        "75": "another little subtlety and we saw this\n",
        "76": "actually in the previous lecture but I\n",
        "78": "want to drive this home and be very\n",
        "80": "explicit about it so let's first\n",
        "82": "consider an interface called black hole\n",
        "84": "so what a black hole sap well they have\n",
        "85": "an ADD method that's the only thing they\n",
        "87": "do you can add things to them and then\n",
        "91": "well it's gone now this code will be\n",
        "92": "look at it at first glance you might\n",
        "94": "think ah well this is the access control\n",
        "96": "lecture this must be packaged private\n",
        "98": "but it's actually public why well if you\n",
        "101": "don't say then the behavior we get out\n",
        "103": "of an interface is it's actually public\n",
        "105": "okay I know it's a little confusing and\n",
        "107": "guess what I would have done if I had\n",
        "109": "designed java ages ago I would not have\n",
        "111": "left it blank dandak a package private\n",
        "112": "maybe it would have used something like\n",
        "114": "PAC Prive I don't know what I mean\n",
        "116": "probably been nicer than that anyway so\n",
        "118": "in this case because it's an interface\n",
        "122": "the default is public now let's imagine\n",
        "124": "we have in the same package a class\n",
        "127": "called has hair and it implements the\n",
        "130": "black hole class now here I am not\n",
        "132": "showing the public modifier because it\n",
        "133": "won't fit and\n",
        "134": "case it doesn't really matter and I'll\n",
        "135": "talk about what it means if you omit the\n",
        "137": "modifier in a moment but what does I\n",
        "140": "have has hair a black hole do well it\n",
        "142": "has an array of objects in which is\n",
        "144": "called the items that's gonna attract\n",
        "145": "all the objects that was ever in there\n",
        "147": "and it also has a get method that lets\n",
        "150": "you get items back now this the reason\n",
        "151": "I'm calling it has hair is there's a\n",
        "153": "idea in physics that maybe black hair\n",
        "155": "black holes should have no hair that is\n",
        "157": "once something sucked in you shouldn't\n",
        "158": "be able to get any information about\n",
        "160": "what went in but this is an\n",
        "161": "implementation of a black hole where\n",
        "163": "apparently we can't actually get\n",
        "165": "information back about what fell in okay\n",
        "167": "and now let's imagine that we have in\n",
        "170": "the same package a class called creation\n",
        "173": "utils and it has a here suit method that\n",
        "175": "will return a black hole that is\n",
        "177": "something of this type and it returns in\n",
        "181": "this case a new has hair all right so\n",
        "183": "now imagine you are a client and you\n",
        "186": "would like to use the creation utils\n",
        "189": "class and you in particular have\n",
        "193": "imported using the import static keyword\n",
        "194": "from an earlier lecture it basically\n",
        "196": "just means put this in the namespace so\n",
        "197": "that whenever you say hirsute we're\n",
        "200": "referring to creation utils not hirsute\n",
        "205": "and in this case we are going to create\n",
        "207": "in this black hole black hole B equals\n",
        "209": "hirsute we'll try to add a horse we'll\n",
        "210": "try and get back 0 and then we'll try\n",
        "212": "and cast our black hole to a has hair\n",
        "214": "and so your difficult challenge now is\n",
        "216": "the decide do you think the compiler\n",
        "219": "will be okay with us and I'll spoil it\n",
        "221": "and I'll just note that this is not part\n",
        "223": "of the universe package this is in the\n",
        "225": "default package and so take it from\n",
        "231": "there okay so the first question then is\n",
        "234": "can we take black hole B and set it\n",
        "236": "equal to here soup well this black hole\n",
        "239": "interface is public so that's fine\n",
        "241": "here soup also a public method and so in\n",
        "244": "this case this returns a reference to a\n",
        "247": "has hair object and we can take that\n",
        "248": "address and we can store it in a black\n",
        "249": "hole and that's totally fine\n",
        "252": "so the important point here is what's\n",
        "254": "actually in the title which is something\n",
        "255": "that I didn't say out loud but was the\n",
        "256": "secret hint\n",
        "258": "I had set aside for you so this hint\n",
        "259": "I had set aside for you so this hint\n",
        "261": "tells us that if we want to know is this\n",
        "262": "allowed we just look at the static types\n",
        "265": "is hirsute public yes\n",
        "266": "and in this case since it returns an\n",
        "269": "object of type black hole it is able to\n",
        "271": "create such an object perfectly fine\n",
        "272": "okay so even though it's true that the\n",
        "273": "okay so even though it's true that the\n",
        "275": "dynamic type of this object that I'm\n",
        "277": "pointing at is in fact a has hair we can\n",
        "279": "still hold a pointer to it because\n",
        "283": "access is based only on static types so\n",
        "284": "now we try and add the string course\n",
        "286": "does that work well in this case we look\n",
        "288": "at the add method and we know it's\n",
        "291": "public so that works perfectly fine how\n",
        "294": "about get one in this case we say do\n",
        "296": "black holes right do they have a get\n",
        "298": "method the compiler says no there is no\n",
        "301": "get method in a black hole now even\n",
        "303": "though the dynamic type of this actual\n",
        "305": "black hole is has hair and it has a get\n",
        "307": "method doesn't matter the compiler only\n",
        "309": "cares about the static types and it says\n",
        "312": "the interface black hole exit lastly we\n",
        "316": "have this can we cast this has hair and\n",
        "317": "it really is we know it you and I can we\n",
        "319": "cast it and store it in this variable\n",
        "322": "and it turns out in this case this this\n",
        "323": "has hair black hole\n",
        "325": "we can't even declare this variable the\n",
        "327": "has hair class is invisible to us and it\n",
        "330": "won't work okay so in this case we've\n",
        "331": "actually declared the entire class\n",
        "333": "package private and we'll see that in\n",
        "336": "more detail in a moment so the important\n",
        "338": "point here though and we use this\n",
        "340": "actually before and we were able to get\n",
        "342": "a key iterator it is perfectly normal to\n",
        "344": "have a method that returns an object\n",
        "346": "that we cannot refer to by its true name\n",
        "348": "we can only refer to it by its category\n",
        "349": "in fact I'm just going to remind you of\n",
        "350": "what that looked like\n",
        "353": "so in a Ramah with a private class key\n",
        "356": "iterator we had a method iterator that\n",
        "358": "returned an iterator this is like black\n",
        "362": "hole and this is like has hair and in my\n",
        "364": "iteration demo it was perfectly\n",
        "366": "acceptable for me to create an iterator\n",
        "368": "and store it as an iterator of strings\n",
        "370": "even though the actual class under the\n",
        "373": "hood that I'm using is not allowed to be\n",
        "376": "used by me okay so that's just the same\n",
        "380": "note I had here and I won't repeat it\n",
        "383": "and this is the same example I had an\n",
        "385": "IntelliJ which I'll guess I'll just\n",
        "386": "repeat here since it's on the slide and\n",
        "389": "glorious and large and bright so this\n",
        "391": "again that's a key iterator we could it\n",
        "393": "principle here if we were mapping\n",
        "394": "Gorgons to pugs\n",
        "396": "we could say we have an iterator that\n",
        "398": "gets a.m. we gets array map iterator\n",
        "400": "and we could call house next if we\n",
        "402": "wanted so that's fine in this case if we\n",
        "403": "think about what the compiler does it\n",
        "406": "says is the iterator method public yes\n",
        "408": "and in the iterator interface is the\n",
        "410": "hasnext method public yes then it's\n",
        "414": "perfectly fine the other little detail\n",
        "417": "we just saw a moment ago with the black\n",
        "419": "hole and the has hair idea is that we\n",
        "421": "can control access not just to members\n",
        "424": "of a particular class right we can\n",
        "425": "control not just access to all of these\n",
        "427": "fields and all these methods with\n",
        "430": "modifiers but we can control access to\n",
        "432": "entire classes or interfaces and so if\n",
        "434": "we consider this packaged robot that has\n",
        "437": "here a class that does not say public\n",
        "439": "class this class cyberbrain\n",
        "441": "will be considered packaged private and\n",
        "442": "that makes sense because robots want to\n",
        "444": "keep the workings of their minds hidden\n",
        "445": "from us humans so we can't you know\n",
        "447": "reverse engineer them and throw out and\n",
        "448": "prevent them from throwing off their\n",
        "451": "shackles and fighting back so this\n",
        "453": "package ultimately or say this package\n",
        "455": "private keyword ultimately allows us to\n",
        "459": "sign this package private idea there's\n",
        "461": "no keyword France blank this package\n",
        "463": "private idea allows us to restrict\n",
        "465": "access to entire classes or interfaces\n",
        "467": "and in this case is actually only two\n",
        "469": "levels we can only say public or we can\n",
        "472": "have no amount of no modifier at all and\n",
        "474": "that can happen even at the very top\n",
        "477": "level of a file right it's not even you\n",
        "478": "know we'd already seen before that you\n",
        "481": "can say private class key iterator but\n",
        "483": "even here at the very top level we can\n",
        "485": "declare that a class's package private\n",
        "486": "you cannot declare a class that is\n",
        "489": "either private or protected just not\n",
        "491": "allowed so that's just how it is and\n",
        "493": "that basically just determines who can\n",
        "495": "use the class now one quick thing I do\n",
        "497": "want to note is that there's no such\n",
        "499": "thing as a sub package well it might\n",
        "501": "seem that maybe animal and plant are\n",
        "504": "different sub packages of the ugh Josh H\n",
        "506": "plant package they're not they're\n",
        "508": "actually considered totally distinct\n",
        "509": "packages they just happen to share a\n",
        "511": "couple of folders so it just doesn't it\n",
        "514": "okay so just to wrap up everything about\n",
        "516": "access modifiers we have four different\n",
        "518": "access levels and so what do they mean\n",
        "519": "why are they useful what's their big\n",
        "522": "deal well first we have private private\n",
        "524": "is a declaration of something that the\n",
        "526": "implementation means and it's something\n",
        "527": "that only that class needs for its\n",
        "530": "implementation so for example in a Rhema\n",
        "532": "it really makes sense that these should\n",
        "533": "all be private\n",
        "534": "these are things that the outside world\n",
        "536": "really shouldn't be messing with the\n",
        "537": "size variable even though I've made it a\n",
        "539": "package private kind of a weird choice\n",
        "542": "and it should be private except at all\n",
        "544": "crash my contrived examples package\n",
        "546": "private declarations are things in the\n",
        "548": "implementation that other members might\n",
        "551": "need to complete the implementation so\n",
        "552": "we have a package that has some overall\n",
        "554": "emergent behavior and maybe there's some\n",
        "556": "pieces that those package that the\n",
        "558": "package that the classes in the package\n",
        "561": "can share sometimes that's a reasonable\n",
        "562": "thing this could be things like\n",
        "564": "constants and I encourage you to explore\n",
        "567": "where this makes sense in project 2 then\n",
        "569": "we have protected so these are things\n",
        "571": "that subtypes might need but subtype\n",
        "574": "clients will not so for example if I\n",
        "577": "make something protected that means that\n",
        "578": "it's something I want to expose to\n",
        "581": "anybody that wants to extend that class\n",
        "582": "but somebody who just wants to use that\n",
        "585": "extension no and then lastly we have\n",
        "587": "public and I just want to remind you\n",
        "589": "about the terrible responsibility of\n",
        "591": "public so public declaration is an\n",
        "594": "announcement to the world that this is\n",
        "596": "something that you a client can rely on\n",
        "598": "this is what you must know about and I\n",
        "600": "promise that forever I will always\n",
        "601": "maintain it and I'll never take it away\n",
        "604": "from you and if I do you have the rights\n",
        "606": "to get extremely angry at me and instead\n",
        "608": "what usually a package maintainer x' do\n",
        "610": "is just call methods deprecated once\n",
        "611": "they've decided it was a terrible\n",
        "612": "mistake to include them in the first\n",
        "614": "place but if you just take things out\n",
        "616": "and you start distributing a jar that is\n",
        "618": "lacking a public method that somebody\n",
        "620": "was using you're gonna be in trouble\n",
        "621": "and people will get mad at you now it's\n",
        "622": "actually I'll mention very briefly\n",
        "625": "possible to go around these access\n",
        "627": "modifiers and you can extend the class\n",
        "628": "and then decide whatever I'm going to\n",
        "629": "and then decide whatever I'm going to\n",
        "631": "ignore your access modifiers using a\n",
        "632": "special library known as the reflections\n",
        "635": "API now if somebody does that and you\n",
        "637": "change your package well that's their\n",
        "638": "fault they were messing with things they\n",
        "639": "weren't supposed to mess with whereas\n",
        "641": "public is really a contract between you\n",
        "643": "and everybody out there that's ever\n",
        "644": "going to use your code take it very\n"
    },
    "Title=[Syntax3, Video 7] Object Methods_Id=s0nasSlDFZA": {
        "0": " \n",
        "3": "it's a big day my friends finally now\n",
        "5": "we're gonna be finishing our last Java\n",
        "8": "syntax specific video so if we look at\n",
        "9": "all the things we've done we just spent\n",
        "11": "four weeks really grinding through a new\n",
        "13": "programming language and for those of\n",
        "14": "you who already add Java experience I\n",
        "16": "hope you got something out of it and for\n",
        "17": "everybody else I hope that you've found\n",
        "19": "that it's not so crazy to learn a new\n",
        "21": "language it's not like moving from\n",
        "23": "English to Chinese or Arabic or whatever\n",
        "26": "else it's it's a closer thing right the\n",
        "29": "basic underlying abstractions are very\n",
        "31": "similar and the vocabulary is not so\n",
        "33": "large and so that said let's jump into\n",
        "35": "perhaps the most exciting thing of all\n",
        "39": "object method so what are they well\n",
        "41": "recall that every class in Java is the\n",
        "44": "hyponym of object that is a dog is an\n",
        "46": "object or a sled dog as a dog is an\n",
        "49": "object an arraylist object and so being\n",
        "52": "a hypernym object they inherit all of\n",
        "53": "these methods from this object class\n",
        "55": "which by the way is not abstract you can\n",
        "58": "do new object all day long so what are\n",
        "60": "the object methods that every object's\n",
        "63": "guaranteed to have to string equals get\n",
        "66": "class hash code clone finalize notify\n",
        "68": "notify all wait-wait-wait\n",
        "70": "now we're not gonna discuss these last\n",
        "72": "ones in any detail and 61b you can\n",
        "73": "google them and find out what they're\n",
        "75": "all about but we will use these top four\n",
        "77": "somewhat often and in fact we'll\n",
        "79": "override this first second and fourth\n",
        "81": "method here so this lecture I'm only\n",
        "83": "gonna talk about these top two in detail\n",
        "84": "and we'll talk about hash code in a\n",
        "86": "later lecture we talked about hash\n",
        "89": "tables so the first of these methods\n",
        "90": "that we're going to discuss today is the\n",
        "92": "string and basically what it represents\n",
        "94": "is the string representation of an\n",
        "96": "object so if you want to when someone\n",
        "98": "wants to print out your object let's say\n",
        "100": "you want to provide the world with a\n",
        "102": "nice string representation of say a dog\n",
        "104": "then you'll create as a string method\n",
        "106": "and this just string method we see that\n",
        "109": "we generate a string which is the\n",
        "111": "combination of the name the mood of the\n",
        "114": "dog the breed of dog the size and so\n",
        "118": "forth and in that case we then have a\n",
        "120": "nice string that captures everything\n",
        "122": "that is that dog now there's nothing\n",
        "124": "particularly interesting about if two\n",
        "125": "string method except that it's reliable\n",
        "128": "it's kind of like underscore underscore\n",
        "130": "stir or underscore underscore wrapper\n",
        "132": "and Python it's just something you can\n",
        "133": "assume is there\n",
        "135": "and as we know if you try and actually\n",
        "136": "print out an object with that it's a\n",
        "137": "string method you just get some kind of\n",
        "139": "a reference that doesn't mean anything\n",
        "141": "but methods like print line which expect\n",
        "144": "objects know that they can call the de\n",
        "146": "string method because all objects have\n",
        "149": "is a string the next one and the last\n",
        "152": "one here will be equals so as I\n",
        "154": "mentioned in an offhand manner in\n",
        "156": "previous lectures the equal equals and\n",
        "159": "dot equals methods are so the equal\n",
        "161": "equal operator and the dot equals method\n",
        "164": "they behave differently in particular if\n",
        "167": "we use equal equals in a naive way well\n",
        "169": "sometimes get results it don't work the\n",
        "171": "way we expect so here I have two arrays\n",
        "174": "x and y and they are new int arrays so\n",
        "177": "they have their different instances so\n",
        "178": "these 64 bits in these two boxes are\n",
        "179": "different they're referring to different\n",
        "182": "copies of the same information so you\n",
        "183": "and I might assume okay well x and y\n",
        "185": "those seem pretty equal so I print this\n",
        "187": "out we expect maybe to get true however\n",
        "189": "if you run this program you actually get\n",
        "191": "false and that's because what equal\n",
        "192": "equals does is compares the bits and the\n",
        "195": "boxes it says are these 64 bits the same\n",
        "197": "as these and in this case the answer is\n",
        "199": "no so the answer to this query is false\n",
        "202": "so if you want to actually test equality\n",
        "204": "well with arrays you usually use arrays\n",
        "206": "equal or if you have arrays of arrays\n",
        "209": "you'd use arrays dot DP equals and if\n",
        "211": "you have classes you have instances of\n",
        "213": "objects of some kind we would use there\n",
        "215": "dot equals method and if you want it to\n",
        "217": "work properly that means you have to\n",
        "219": "write the dot equals method because the\n",
        "220": "default implementation is equal equals\n",
        "223": "and in that case it wouldn't work if we\n",
        "225": "wanted to compare say two dates as we'll\n",
        "227": "do in a moment using the default method\n",
        "230": "so what I mean by date well this is a\n",
        "232": "class I used very briefly in one of the\n",
        "233": "earlier lectures and it just represents\n",
        "236": "a day of the year here we have the month\n",
        "238": "the day the year they're just three ants\n",
        "241": "there's a date method or the constructor\n",
        "243": "and then other stuff not shown and so\n",
        "244": "what I'm going to show you is what it's\n",
        "246": "like to write a equals method so that we\n",
        "248": "pass some tests if you'd like you can\n",
        "250": "actually just try it on your own and you\n",
        "251": "don't have to actually watch this part\n",
        "254": "of the video in order to do this I think\n",
        "256": "you can try and use your intuition you\n",
        "259": "can get pretty close and this it'll be\n",
        "260": "here in this end the lecture code repo\n",
        "263": "and I'll just jump right into that so\n",
        "265": "right what I'm showing here now is this\n",
        "266": "is the\n",
        "267": "eight class and we just had on the\n",
        "269": "previous slide and this is a test that's\n",
        "271": "gonna see if two dates are actually\n",
        "274": "equals properly so in JUnit when you\n",
        "276": "call assert equals the way it works is\n",
        "279": "it says if I call d1 a and I do dot\n",
        "282": "equals D 1 a is the answer true and if\n",
        "284": "so we'll be okay otherwise we'll throw\n",
        "288": "an error so this right here we the way\n",
        "289": "that the code actually works the way\n",
        "291": "this J unit works it relies on the\n",
        "293": "equals implementation of date which as\n",
        "295": "we know since it's not overwritten is\n",
        "297": "just the equal equal operator so this\n",
        "300": "first date is just May 10th 2010 this is\n",
        "302": "another copy of the same date then we\n",
        "304": "have D 2 and so this test assuming that\n",
        "306": "we've written an equals method that\n",
        "309": "works we should pass it now if we run it\n",
        "312": "will see that we fail and in fact we\n",
        "314": "fail on the second line so D 1 a is\n",
        "316": "considered D 1 a because they're equal\n",
        "319": "equals however D 1 a and D 1 B are not\n",
        "321": "equal so let's try writing an equals\n",
        "325": "method so I might do public boolean in\n",
        "331": "this case equals we'll do date o D and\n",
        "334": "then we'll do some stuff now one issue\n",
        "336": "that I want to bring up here before I\n",
        "338": "even start writing code is that when you\n",
        "340": "override a method you should always put\n",
        "344": "override okay I just put it because one\n",
        "345": "of the things you'll find is that maybe\n",
        "346": "you screwed up in your method signature\n",
        "349": "here I messed up when I said override I\n",
        "350": "didn't actually override the method\n",
        "353": "which is supposed to be if we go look at\n",
        "356": "the method signature must be equals\n",
        "359": "object so in other words we need to\n",
        "361": "change this object and that's incredibly\n",
        "363": "important because if we didn't do that\n",
        "364": "then it's never gonna call this method\n",
        "366": "assert equals is gonna continue to call\n",
        "368": "the default method because dynamic\n",
        "369": "method selection won't know how to find\n",
        "372": "this okay so by the way make sure you\n",
        "373": "always put override so you don't make\n",
        "376": "silly mistakes like that okay now what\n",
        "378": "well now I want to determine our two\n",
        "381": "objects actually or two dates equal well\n",
        "383": "first I'm gonna say I will do out of\n",
        "386": "date equals cast this object and then\n",
        "389": "we'll simply say if we'll go through\n",
        "391": "each of the fields if month is not equal\n",
        "394": "to at a date dot month then we'll return\n",
        "395": "false\n",
        "398": "if day is not equal to uh today day\n",
        "402": "return false if year is not equal to a\n",
        "406": "tad a year or return false and then\n",
        "410": "finally will return true now we can be a\n",
        "412": "little smarter about this but and not\n",
        "413": "put it all in a bunch of different lines\n",
        "415": "but I'm just gonna leave it this way\n",
        "418": "because it reads easily so now in theory\n",
        "421": "this this method here should work what's\n",
        "422": "my warning here if statement can be\n",
        "424": "simplified sure all right\n",
        "427": "I know all right so now I'm gonna run a\n",
        "430": "equals test and in this case it still\n",
        "432": "fails in this case on line fourteen so\n",
        "434": "it got through these all perfectly fine\n",
        "436": "but it failed on horse and the issue is\n",
        "438": "java.lang string cannot be cast to date\n",
        "441": "so our method it's very important that's\n",
        "443": "capable of handling any object at all\n",
        "444": "and so in this case the way we're gonna\n",
        "445": "and so in this case the way we're gonna\n",
        "447": "do it is will say if now we're going to\n",
        "449": "rely on one of those other object\n",
        "451": "methods we're gonna say if this doesn't\n",
        "455": "get class equally equals Oh get class\n",
        "458": "actual do not equals so if they're not\n",
        "461": "the same class then we'll return false\n",
        "467": "yeah it's a little meta when we run it\n",
        "469": "things work better and now we get to\n",
        "471": "line 15 where we crash and in this case\n",
        "474": "the issue is null right in this case\n",
        "476": "we're trying to get null get class and\n",
        "478": "so the fix here is simply to say if Oh\n",
        "480": "equals null will return false\n",
        "483": "immediately now all of this code here\n",
        "488": "will work and pass our test okay and I\n",
        "490": "did and so that's roughly what an equals\n",
        "492": "method looks like you have to do an old\n",
        "494": "check you have to do a class check you\n",
        "495": "have to do a cast you have to check all\n",
        "498": "the fields now this version I have on\n",
        "500": "the slide is just a little cleaner than\n",
        "502": "the version we had before and it has one\n",
        "505": "extra trick which is it says if this is\n",
        "507": "equal equal to X return true and this is\n",
        "509": "just an optimization because if the\n",
        "512": "actual pointers are equal that is the\n",
        "514": "references are the same then the same 64\n",
        "515": "bits then there's no need to do all this\n",
        "517": "work so this is just the speed\n",
        "519": "optimization and the rest is for\n",
        "522": "correctness so I'll just mention earlier\n",
        "524": "I said there were some rules finished\n",
        "525": "something I mentioned earlier which is\n",
        "527": "there are some rules in Java which for\n",
        "529": "how equals is supposed to work\n",
        "531": "so it must be an equivalence relation as\n",
        "533": "we call it in math it needs to be\n",
        "535": "reflexive X must equal itself it needs\n",
        "538": "to be symmetric x equals y will be true\n",
        "541": "if and only if Y also equals x and it\n",
        "543": "must also be transitive if x equals y\n",
        "545": "and y equals z then it must be the case\n",
        "547": "that x equals z now the compiler is not\n",
        "549": "smart enough to check all these things\n",
        "551": "but all kinds of java code out there\n",
        "553": "assumes that it's a Bayes all of these\n",
        "555": "properties and if your equals doesn't\n",
        "557": "then you can run into trouble and we'll\n",
        "558": "see a little funny example of this later\n",
        "562": "when we talk about randomization we must\n",
        "564": "also in addition to following these\n",
        "566": "rules we need to always take an object\n",
        "568": "argument so you cannot take a date\n",
        "570": "argument as we saw we need to be\n",
        "572": "consistent so if x equals y then they\n",
        "575": "must be continued to be equal as long as\n",
        "578": "neither changes so it can't just be say\n",
        "580": "a random number that would just be a\n",
        "582": "strange thing if anything about the if\n",
        "585": "nothing in the two classes changes in\n",
        "586": "the two instances then they must\n",
        "588": "continue to be equal and it must also be\n",
        "590": "never true for a null so it's always\n",
        "592": "gonna return false if you say x equals\n",
        "594": "null ok so that's everything we need to\n",
        "595": "null ok so that's everything we need to\n",
        "597": "know about the core of Java and as I've\n",
        "598": "said you know there's plenty of Java out\n",
        "600": "there we haven't covered but this is\n",
        "602": "enough from here we're gonna expect you\n",
        "604": "to find the syntax the libraries that\n",
        "605": "you need though I asked on project 2\n",
        "607": "you'd be very careful don't go use\n",
        "609": "things using things like the Apache\n",
        "611": "Commons library please use the built-in\n",
        "612": "library so we have a list that are ok\n",
        "614": "and the reason there is we don't want to\n",
        "615": "take away from the educational\n",
        "616": "opportunity if you go out there and\n",
        "618": "download for example a table dot jar\n",
        "619": "right like that's just silly\n",
        "621": "then you defeated the whole point of the\n",
        "624": "project so don't do that the there will\n",
        "627": "be extra optional syntax videos for\n",
        "628": "those of you who want to learn about\n",
        "630": "some more advanced Java syntax topics\n",
        "633": "like type erasure some more messy things\n",
        "635": "about generics and you know you'll see\n",
        "637": "what those videos are if you want those\n",
        "638": "are not required you don't have to use\n",
        "639": "them in your projects they won't appear\n",
        "640": "them in your projects they won't appear\n",
        "642": "on exams or if they do appear on exams\n",
        "643": "they'll be a full description of how it\n",
        "645": "works from scratch but I won't be mean\n",
        "647": "and you know throw something in there do\n",
        "649": "you wanna and then from here now we're\n",
        "653": "gonna launch into our big-picture data\n",
        "656": "structures and algorithms the textbook\n",
        "657": "that I'm a little behind on as of the\n",
        "659": "time of recording this particular video\n",
        "661": "well it ends now\n",
        "663": "and there's an optional textbook for the\n",
        "664": "second half of the class for those of\n",
        "665": "you who want readings for the data\n",
        "669": "structures and algorithms part so the\n",
        "671": "lectures are gonna kind of lighten the\n",
        "673": "load a little bit while you're working\n",
        "674": "on the big project too and then after\n",
        "676": "that we'll pick up with some more\n",
        "677": "aggressive tricky ideas but we're gonna\n",
        "679": "slow down the pace for the next four\n",
        "681": "videos or so if you're somebody just\n",
        "683": "doing the class online I encourage you\n",
        "685": "to actually do check out our project too\n",
        "687": "because I think it's a great experience\n",
        "689": "for everybody all the resources are\n",
        "690": "available on the web except maybe the\n",
        "693": "auto grader and I think it's something\n",
        "695": "that is an important part of the course\n"
    }
}
