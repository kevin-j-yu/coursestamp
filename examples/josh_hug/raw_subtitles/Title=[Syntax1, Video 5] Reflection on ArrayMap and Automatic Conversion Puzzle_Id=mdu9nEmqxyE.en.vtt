WEBVTT
Kind: captions
Language: en

00:00:00.050 --> 00:00:02.629 align:start position:0%
 
now<00:00:01.050><c> before</c><00:00:01.380><c> we</c><00:00:01.500><c> explore</c><00:00:01.860><c> exactly</c><00:00:02.399><c> why</c><00:00:02.580><c> this</c>

00:00:02.629 --> 00:00:02.639 align:start position:0%
now before we explore exactly why this
 

00:00:02.639 --> 00:00:05.059 align:start position:0%
now before we explore exactly why this
compiler<00:00:03.330><c> error</c><00:00:03.540><c> is</c><00:00:03.689><c> happening</c><00:00:04.080><c> let's</c><00:00:04.560><c> talk</c><00:00:05.040><c> a</c>

00:00:05.059 --> 00:00:05.069 align:start position:0%
compiler error is happening let's talk a
 

00:00:05.069 --> 00:00:07.789 align:start position:0%
compiler error is happening let's talk a
little<00:00:05.370><c> bit</c><00:00:05.549><c> about</c><00:00:05.580><c> our</c><00:00:05.970><c> a</c><00:00:06.000><c> math</c><00:00:06.330><c> class</c><00:00:06.710><c> so</c><00:00:07.710><c> the</c>

00:00:07.789 --> 00:00:07.799 align:start position:0%
little bit about our a math class so the
 

00:00:07.799 --> 00:00:09.680 align:start position:0%
little bit about our a math class so the
array<00:00:08.010><c> map</c><00:00:08.189><c> is</c><00:00:08.429><c> one</c><00:00:08.610><c> of</c><00:00:08.760><c> many</c><00:00:09.000><c> possible</c><00:00:09.630><c> ways</c>

00:00:09.680 --> 00:00:09.690 align:start position:0%
array map is one of many possible ways
 

00:00:09.690 --> 00:00:12.259 align:start position:0%
array map is one of many possible ways
to<00:00:09.840><c> implement</c><00:00:10.530><c> a</c><00:00:10.650><c> map</c><00:00:10.860><c> and</c><00:00:11.730><c> we'll</c><00:00:11.849><c> see</c><00:00:12.059><c> after</c>

00:00:12.259 --> 00:00:12.269 align:start position:0%
to implement a map and we'll see after
 

00:00:12.269 --> 00:00:14.629 align:start position:0%
to implement a map and we'll see after
project<00:00:12.719><c> two</c><00:00:13.080><c> other</c><00:00:13.380><c> better</c><00:00:13.769><c> ways</c><00:00:14.009><c> but</c><00:00:14.490><c> for</c>

00:00:14.629 --> 00:00:14.639 align:start position:0%
project two other better ways but for
 

00:00:14.639 --> 00:00:16.310 align:start position:0%
project two other better ways but for
now<00:00:14.730><c> we're</c><00:00:14.910><c> keeping</c><00:00:15.089><c> it</c><00:00:15.330><c> very</c><00:00:15.389><c> simple</c><00:00:15.599><c> with</c><00:00:16.199><c> an</c>

00:00:16.310 --> 00:00:16.320 align:start position:0%
now we're keeping it very simple with an
 

00:00:16.320 --> 00:00:18.830 align:start position:0%
now we're keeping it very simple with an
array<00:00:16.529><c> so</c><00:00:17.460><c> the</c><00:00:17.550><c> basic</c><00:00:17.820><c> idea</c><00:00:18.119><c> here</c><00:00:18.180><c> is</c><00:00:18.570><c> to</c><00:00:18.600><c> use</c>

00:00:18.830 --> 00:00:18.840 align:start position:0%
array so the basic idea here is to use
 

00:00:18.840 --> 00:00:20.900 align:start position:0%
array so the basic idea here is to use
an<00:00:19.260><c> array</c><00:00:19.470><c> as</c><00:00:19.710><c> the</c><00:00:19.859><c> core</c><00:00:20.039><c> data</c><00:00:20.220><c> structure</c><00:00:20.699><c> and</c>

00:00:20.900 --> 00:00:20.910 align:start position:0%
an array as the core data structure and
 

00:00:20.910 --> 00:00:23.210 align:start position:0%
an array as the core data structure and
to<00:00:21.480><c> anytime</c><00:00:22.230><c> we</c><00:00:22.350><c> need</c><00:00:22.380><c> to</c><00:00:22.619><c> add</c><00:00:22.740><c> a</c><00:00:22.769><c> new</c><00:00:23.010><c> key</c>

00:00:23.210 --> 00:00:23.220 align:start position:0%
to anytime we need to add a new key
 

00:00:23.220 --> 00:00:25.250 align:start position:0%
to anytime we need to add a new key
value<00:00:23.490><c> pair</c><00:00:23.730><c> put</c><00:00:24.119><c> them</c><00:00:24.300><c> both</c><00:00:24.539><c> at</c><00:00:24.810><c> the</c><00:00:24.930><c> end</c><00:00:25.080><c> of</c>

00:00:25.250 --> 00:00:25.260 align:start position:0%
value pair put them both at the end of
 

00:00:25.260 --> 00:00:27.410 align:start position:0%
value pair put them both at the end of
an<00:00:25.350><c> array</c><00:00:25.470><c> in</c><00:00:25.800><c> the</c><00:00:26.010><c> same</c><00:00:26.220><c> position</c><00:00:26.730><c> so</c><00:00:27.210><c> each</c>

00:00:27.410 --> 00:00:27.420 align:start position:0%
an array in the same position so each
 

00:00:27.420 --> 00:00:29.390 align:start position:0%
an array in the same position so each
key<00:00:27.750><c> always</c><00:00:28.260><c> goes</c><00:00:28.500><c> with</c><00:00:28.650><c> the</c><00:00:28.769><c> value</c><00:00:29.099><c> in</c><00:00:29.279><c> the</c>

00:00:29.390 --> 00:00:29.400 align:start position:0%
key always goes with the value in the
 

00:00:29.400 --> 00:00:31.009 align:start position:0%
key always goes with the value in the
corresponding<00:00:29.939><c> position</c><00:00:30.060><c> and</c><00:00:30.539><c> the</c><00:00:30.599><c> other</c><00:00:30.750><c> all</c>

00:00:31.009 --> 00:00:31.019 align:start position:0%
corresponding position and the other all
 

00:00:31.019 --> 00:00:33.889 align:start position:0%
corresponding position and the other all
right<00:00:31.369><c> so</c><00:00:32.369><c> whenever</c><00:00:32.579><c> we</c><00:00:32.790><c> do</c><00:00:32.910><c> put</c><00:00:33.180><c> K</c><00:00:33.450><c> V</c><00:00:33.660><c> for</c>

00:00:33.889 --> 00:00:33.899 align:start position:0%
right so whenever we do put K V for
 

00:00:33.899 --> 00:00:38.360 align:start position:0%
right so whenever we do put K V for
example<00:00:33.930><c> we</c><00:00:34.890><c> just</c><00:00:34.920><c> find</c><00:00:35.460><c> K</c><00:00:35.820><c> or</c><00:00:36.210><c> the</c><00:00:36.750><c> key</c><00:00:37.140><c> and</c><00:00:37.950><c> if</c>

00:00:38.360 --> 00:00:38.370 align:start position:0%
example we just find K or the key and if
 

00:00:38.370 --> 00:00:40.970 align:start position:0%
example we just find K or the key and if
that<00:00:38.610><c> key</c><00:00:39.059><c> is</c><00:00:39.329><c> not</c><00:00:40.050><c> in</c><00:00:40.230><c> the</c><00:00:40.320><c> list</c><00:00:40.500><c> we'll</c><00:00:40.800><c> put</c>

00:00:40.970 --> 00:00:40.980 align:start position:0%
that key is not in the list we'll put
 

00:00:40.980 --> 00:00:43.130 align:start position:0%
that key is not in the list we'll put
them<00:00:41.070><c> both</c><00:00:41.250><c> at</c><00:00:41.399><c> the</c><00:00:41.430><c> end</c><00:00:41.670><c> of</c><00:00:41.850><c> the</c><00:00:41.969><c> array</c>

00:00:43.130 --> 00:00:43.140 align:start position:0%
them both at the end of the array
 

00:00:43.140 --> 00:00:44.900 align:start position:0%
them both at the end of the array
and<00:00:43.500><c> if</c><00:00:43.890><c> they're</c><00:00:44.010><c> not</c><00:00:44.040><c> negative</c><00:00:44.520><c> then</c><00:00:44.760><c> what</c>

00:00:44.900 --> 00:00:44.910 align:start position:0%
and if they're not negative then what
 

00:00:44.910 --> 00:00:47.420 align:start position:0%
and if they're not negative then what
we'll<00:00:45.059><c> do</c><00:00:45.210><c> is</c><00:00:45.680><c> notice</c><00:00:46.680><c> that</c><00:00:46.710><c> the</c><00:00:46.829><c> index</c><00:00:47.010><c> is</c><00:00:47.280><c> not</c>

00:00:47.420 --> 00:00:47.430 align:start position:0%
we'll do is notice that the index is not
 

00:00:47.430 --> 00:00:49.220 align:start position:0%
we'll do is notice that the index is not
negative<00:00:47.610><c> that</c><00:00:48.000><c> means</c><00:00:48.180><c> the</c><00:00:48.300><c> key</c><00:00:48.480><c> is</c><00:00:48.600><c> there</c><00:00:48.840><c> and</c>

00:00:49.220 --> 00:00:49.230 align:start position:0%
negative that means the key is there and
 

00:00:49.230 --> 00:00:52.369 align:start position:0%
negative that means the key is there and
we<00:00:49.350><c> set</c><00:00:49.620><c> the</c><00:00:49.710><c> value</c><00:00:49.829><c> as</c><00:00:50.460><c> we</c><00:00:50.640><c> saw</c><00:00:51.050><c> so</c><00:00:52.050><c> we</c><00:00:52.079><c> add</c><00:00:52.260><c> the</c>

00:00:52.369 --> 00:00:52.379 align:start position:0%
we set the value as we saw so we add the
 

00:00:52.379 --> 00:00:54.709 align:start position:0%
we set the value as we saw so we add the
put<00:00:52.530><c> method</c><00:00:52.559><c> which</c><00:00:52.980><c> we</c><00:00:53.129><c> wrote</c><00:00:53.309><c> get</c><00:00:53.730><c> contains</c>

00:00:54.709 --> 00:00:54.719 align:start position:0%
put method which we wrote get contains
 

00:00:54.719 --> 00:00:56.930 align:start position:0%
put method which we wrote get contains
key<00:00:54.960><c> and</c><00:00:55.110><c> keys</c><00:00:55.370><c> not</c><00:00:56.370><c> gonna</c><00:00:56.489><c> go</c><00:00:56.640><c> over</c><00:00:56.820><c> those</c>

00:00:56.930 --> 00:00:56.940 align:start position:0%
key and keys not gonna go over those
 

00:00:56.940 --> 00:00:59.119 align:start position:0%
key and keys not gonna go over those
again<00:00:57.140><c> but</c><00:00:58.140><c> the</c><00:00:58.320><c> one</c><00:00:58.469><c> thing</c><00:00:58.590><c> I</c><00:00:58.680><c> do</c><00:00:58.739><c> want</c><00:00:58.980><c> to</c><00:00:59.010><c> say</c>

00:00:59.119 --> 00:00:59.129 align:start position:0%
again but the one thing I do want to say
 

00:00:59.129 --> 00:01:00.770 align:start position:0%
again but the one thing I do want to say
about<00:00:59.280><c> terminology</c><00:00:59.640><c> just</c><00:01:00.270><c> ever</c><00:01:00.420><c> so</c><00:01:00.629><c> briefly</c>

00:01:00.770 --> 00:01:00.780 align:start position:0%
about terminology just ever so briefly
 

00:01:00.780 --> 00:01:02.930 align:start position:0%
about terminology just ever so briefly
is<00:01:01.710><c> that</c><00:01:01.859><c> when</c><00:01:02.100><c> we</c><00:01:02.190><c> actually</c><00:01:02.340><c> create</c><00:01:02.789><c> our</c>

00:01:02.930 --> 00:01:02.940 align:start position:0%
is that when we actually create our
 

00:01:02.940 --> 00:01:04.340 align:start position:0%
is that when we actually create our
class<00:01:03.180><c> and</c><00:01:03.359><c> we</c><00:01:03.420><c> had</c><00:01:03.539><c> to</c><00:01:03.629><c> find</c><00:01:03.780><c> it</c>

00:01:04.340 --> 00:01:04.350 align:start position:0%
class and we had to find it
 

00:01:04.350 --> 00:01:05.660 align:start position:0%
class and we had to find it
we<00:01:04.650><c> have</c><00:01:04.830><c> appear</c><00:01:05.220><c> what</c><00:01:05.430><c> are</c><00:01:05.519><c> known</c><00:01:05.610><c> as</c>

00:01:05.660 --> 00:01:05.670 align:start position:0%
we have appear what are known as
 

00:01:05.670 --> 00:01:08.660 align:start position:0%
we have appear what are known as
sometimes<00:01:06.060><c> generic</c><00:01:06.869><c> type</c><00:01:07.140><c> variables</c><00:01:07.799><c> so</c><00:01:08.580><c> at</c>

00:01:08.660 --> 00:01:08.670 align:start position:0%
sometimes generic type variables so at
 

00:01:08.670 --> 00:01:09.890 align:start position:0%
sometimes generic type variables so at
the<00:01:08.760><c> time</c><00:01:08.970><c> that</c><00:01:09.119><c> you</c><00:01:09.270><c> and</c><00:01:09.420><c> I</c><00:01:09.510><c> were</c><00:01:09.689><c> writing</c>

00:01:09.890 --> 00:01:09.900 align:start position:0%
the time that you and I were writing
 

00:01:09.900 --> 00:01:11.570 align:start position:0%
the time that you and I were writing
this<00:01:10.140><c> code</c><00:01:10.409><c> we</c><00:01:10.830><c> don't</c><00:01:10.860><c> know</c><00:01:11.130><c> if</c><00:01:11.220><c> somebody's</c>

00:01:11.570 --> 00:01:11.580 align:start position:0%
this code we don't know if somebody's
 

00:01:11.580 --> 00:01:13.280 align:start position:0%
this code we don't know if somebody's
gonna<00:01:11.700><c> make</c><00:01:11.820><c> a</c><00:01:12.000><c> map</c><00:01:12.299><c> from</c><00:01:12.450><c> integers</c><00:01:12.869><c> to</c><00:01:13.020><c> string</c>

00:01:13.280 --> 00:01:13.290 align:start position:0%
gonna make a map from integers to string
 

00:01:13.290 --> 00:01:14.810 align:start position:0%
gonna make a map from integers to string
strings<00:01:13.680><c> to</c><00:01:13.860><c> strings</c><00:01:13.890><c> dogs</c><00:01:14.430><c> to</c><00:01:14.670><c> horses</c>

00:01:14.810 --> 00:01:14.820 align:start position:0%
strings to strings dogs to horses
 

00:01:14.820 --> 00:01:18.170 align:start position:0%
strings to strings dogs to horses
whatever<00:01:15.330><c> and</c><00:01:16.170><c> we</c><00:01:16.290><c> just</c><00:01:16.470><c> use</c><00:01:16.619><c> K</c><00:01:16.830><c> and</c><00:01:17.040><c> B</c><00:01:17.159><c> and</c><00:01:18.090><c> the</c>

00:01:18.170 --> 00:01:18.180 align:start position:0%
whatever and we just use K and B and the
 

00:01:18.180 --> 00:01:20.270 align:start position:0%
whatever and we just use K and B and the
special<00:01:18.509><c> notation</c><00:01:18.780><c> lets</c><00:01:19.530><c> us</c><00:01:19.680><c> treat</c><00:01:19.920><c> the</c><00:01:20.070><c> type</c>

00:01:20.270 --> 00:01:20.280 align:start position:0%
special notation lets us treat the type
 

00:01:20.280 --> 00:01:22.940 align:start position:0%
special notation lets us treat the type
itself<00:01:20.700><c> is</c><00:01:20.909><c> a</c><00:01:20.939><c> kind</c><00:01:21.210><c> of</c><00:01:21.330><c> variable</c><00:01:21.990><c> and</c><00:01:22.530><c> then</c>

00:01:22.940 --> 00:01:22.950 align:start position:0%
itself is a kind of variable and then
 

00:01:22.950 --> 00:01:24.590 align:start position:0%
itself is a kind of variable and then
when<00:01:23.070><c> we</c><00:01:23.159><c> instantiate</c><00:01:23.520><c> one</c><00:01:24.060><c> of</c><00:01:24.180><c> these</c><00:01:24.330><c> things</c>

00:01:24.590 --> 00:01:24.600 align:start position:0%
when we instantiate one of these things
 

00:01:24.600 --> 00:01:26.510 align:start position:0%
when we instantiate one of these things
we<00:01:24.990><c> provide</c><00:01:25.320><c> what</c><00:01:25.860><c> are</c><00:01:25.950><c> sometimes</c><00:01:26.310><c> called</c>

00:01:26.510 --> 00:01:26.520 align:start position:0%
we provide what are sometimes called
 

00:01:26.520 --> 00:01:28.789 align:start position:0%
we provide what are sometimes called
actual<00:01:27.060><c> type</c><00:01:27.330><c> arguments</c><00:01:28.080><c> so</c><00:01:28.590><c> that</c>

00:01:28.789 --> 00:01:28.799 align:start position:0%
actual type arguments so that
 

00:01:28.799 --> 00:01:31.039 align:start position:0%
actual type arguments so that
essentially<00:01:29.610><c> now</c><00:01:29.970><c> this</c><00:01:30.420><c> whole</c><00:01:30.570><c> thing</c><00:01:30.810><c> gets</c>

00:01:31.039 --> 00:01:31.049 align:start position:0%
essentially now this whole thing gets
 

00:01:31.049 --> 00:01:33.710 align:start position:0%
essentially now this whole thing gets
treated<00:01:31.290><c> like</c><00:01:31.560><c> and</c><00:01:31.799><c> this</c><00:01:32.640><c> that</c><00:01:32.880><c> K</c><00:01:33.090><c> was</c><00:01:33.299><c> integer</c>

00:01:33.710 --> 00:01:33.720 align:start position:0%
treated like and this that K was integer
 

00:01:33.720 --> 00:01:37.399 align:start position:0%
treated like and this that K was integer
and<00:01:34.320><c> B</c><00:01:34.380><c> was</c><00:01:34.770><c> string</c><00:01:35.040><c> all</c><00:01:35.250><c> along</c><00:01:35.670><c> okay</c><00:01:36.409><c> now</c>

00:01:37.399 --> 00:01:37.409 align:start position:0%
and B was string all along okay now
 

00:01:37.409 --> 00:01:38.870 align:start position:0%
and B was string all along okay now
again<00:01:37.650><c> I</c><00:01:37.890><c> guess</c><00:01:38.040><c> I</c><00:01:38.159><c> should</c><00:01:38.310><c> mention</c><00:01:38.430><c> a</c><00:01:38.610><c> briefly</c>

00:01:38.870 --> 00:01:38.880 align:start position:0%
again I guess I should mention a briefly
 

00:01:38.880 --> 00:01:41.960 align:start position:0%
again I guess I should mention a briefly
in<00:01:39.479><c> Java</c><00:01:39.810><c> 8</c><00:01:40.049><c> or</c><00:01:40.259><c> later</c><00:01:40.439><c> you</c><00:01:41.189><c> can</c><00:01:41.369><c> actually</c><00:01:41.490><c> omit</c>

00:01:41.960 --> 00:01:41.970 align:start position:0%
in Java 8 or later you can actually omit
 

00:01:41.970 --> 00:01:44.270 align:start position:0%
in Java 8 or later you can actually omit
this<00:01:42.390><c> bit</c><00:01:42.869><c> over</c><00:01:43.020><c> here</c><00:01:43.380><c> and</c><00:01:43.649><c> it</c><00:01:43.799><c> will</c><00:01:43.860><c> infer</c><00:01:44.159><c> it</c>

00:01:44.270 --> 00:01:44.280 align:start position:0%
this bit over here and it will infer it
 

00:01:44.280 --> 00:01:46.399 align:start position:0%
this bit over here and it will infer it
automatically<00:01:44.880><c> from</c><00:01:45.149><c> the</c><00:01:45.450><c> declaration</c><00:01:46.200><c> of</c><00:01:46.320><c> a</c>

00:01:46.399 --> 00:01:46.409 align:start position:0%
automatically from the declaration of a
 

00:01:46.409 --> 00:01:47.810 align:start position:0%
automatically from the declaration of a
variable<00:01:46.740><c> and</c><00:01:47.070><c> you</c><00:01:47.159><c> can</c><00:01:47.280><c> only</c><00:01:47.369><c> use</c><00:01:47.549><c> that</c><00:01:47.579><c> of</c>

00:01:47.810 --> 00:01:47.820 align:start position:0%
variable and you can only use that of
 

00:01:47.820 --> 00:01:49.600 align:start position:0%
variable and you can only use that of
course<00:01:48.030><c> when</c><00:01:48.240><c> you're</c><00:01:48.390><c> declaring</c><00:01:48.659><c> a</c><00:01:48.869><c> variable</c>

00:01:49.600 --> 00:01:49.610 align:start position:0%
course when you're declaring a variable
 

00:01:49.610 --> 00:01:52.520 align:start position:0%
course when you're declaring a variable
ok<00:01:50.610><c> so</c><00:01:51.180><c> this</c><00:01:51.299><c> brings</c><00:01:51.509><c> us</c><00:01:51.689><c> to</c><00:01:51.810><c> that</c><00:01:51.930><c> error</c><00:01:52.140><c> that</c>

00:01:52.520 --> 00:01:52.530 align:start position:0%
ok so this brings us to that error that
 

00:01:52.530 --> 00:01:55.520 align:start position:0%
ok so this brings us to that error that
we<00:01:52.619><c> were</c><00:01:52.710><c> interested</c><00:01:52.979><c> in</c><00:01:53.299><c> so</c><00:01:54.299><c> in</c><00:01:55.110><c> this</c><00:01:55.290><c> case</c>

00:01:55.520 --> 00:01:55.530 align:start position:0%
we were interested in so in this case
 

00:01:55.530 --> 00:01:58.520 align:start position:0%
we were interested in so in this case
this<00:01:56.460><c> is</c><00:01:56.670><c> the</c><00:01:56.790><c> command</c><00:01:57.780><c> line</c><00:01:57.960><c> version</c><00:01:57.990><c> of</c><00:01:58.439><c> the</c>

00:01:58.520 --> 00:01:58.530 align:start position:0%
this is the command line version of the
 

00:01:58.530 --> 00:02:00.350 align:start position:0%
this is the command line version of the
same<00:01:58.710><c> error</c><00:01:58.950><c> I</c><00:01:59.130><c> mean</c><00:01:59.280><c> it's</c><00:01:59.700><c> this</c><00:01:59.880><c> thing</c><00:02:00.119><c> here</c>

00:02:00.350 --> 00:02:00.360 align:start position:0%
same error I mean it's this thing here
 

00:02:00.360 --> 00:02:02.030 align:start position:0%
same error I mean it's this thing here
and<00:02:01.110><c> it's</c><00:02:01.259><c> that</c><00:02:01.409><c> there's</c><00:02:01.590><c> an</c><00:02:01.710><c> ambiguous</c>

00:02:02.030 --> 00:02:02.040 align:start position:0%
and it's that there's an ambiguous
 

00:02:02.040 --> 00:02:05.120 align:start position:0%
and it's that there's an ambiguous
method<00:02:02.820><c> call</c><00:02:03.060><c> so</c><00:02:04.020><c> what</c><00:02:04.140><c> Java</c><00:02:04.350><c> is</c><00:02:04.560><c> saying</c><00:02:04.770><c> is</c><00:02:04.950><c> I</c>

00:02:05.120 --> 00:02:05.130 align:start position:0%
method call so what Java is saying is I
 

00:02:05.130 --> 00:02:06.469 align:start position:0%
method call so what Java is saying is I
don't<00:02:05.490><c> know</c><00:02:05.640><c> if</c><00:02:05.729><c> you</c><00:02:05.850><c> meant</c><00:02:06.000><c> assert</c><00:02:06.299><c> equals</c>

00:02:06.469 --> 00:02:06.479 align:start position:0%
don't know if you meant assert equals
 

00:02:06.479 --> 00:02:09.050 align:start position:0%
don't know if you meant assert equals
long<00:02:06.810><c> long</c><00:02:07.140><c> or</c><00:02:07.590><c> assert</c><00:02:07.890><c> equals</c><00:02:08.069><c> object</c><00:02:08.640><c> object</c>

00:02:09.050 --> 00:02:09.060 align:start position:0%
long long or assert equals object object
 

00:02:09.060 --> 00:02:10.790 align:start position:0%
long long or assert equals object object
now<00:02:09.780><c> that</c><00:02:09.929><c> might</c><00:02:10.050><c> seem</c><00:02:10.229><c> a</c><00:02:10.289><c> little</c><00:02:10.440><c> strange</c>

00:02:10.790 --> 00:02:10.800 align:start position:0%
now that might seem a little strange
 

00:02:10.800 --> 00:02:13.250 align:start position:0%
now that might seem a little strange
because<00:02:11.129><c> if</c><00:02:11.340><c> you</c><00:02:11.430><c> look</c><00:02:11.580><c> it's</c><00:02:11.730><c> actually</c><00:02:12.120><c> in</c>

00:02:13.250 --> 00:02:13.260 align:start position:0%
because if you look it's actually in
 

00:02:13.260 --> 00:02:14.990 align:start position:0%
because if you look it's actually in
integer<00:02:13.830><c> so</c><00:02:14.220><c> it's</c><00:02:14.340><c> like</c><00:02:14.459><c> how</c><00:02:14.580><c> did</c><00:02:14.640><c> we</c><00:02:14.730><c> get</c><00:02:14.939><c> to</c>

00:02:14.990 --> 00:02:15.000 align:start position:0%
integer so it's like how did we get to
 

00:02:15.000 --> 00:02:17.630 align:start position:0%
integer so it's like how did we get to
long<00:02:15.239><c> our</c><00:02:15.390><c> object</c><00:02:15.810><c> but</c><00:02:16.560><c> fundamentally</c><00:02:17.099><c> the</c>

00:02:17.630 --> 00:02:17.640 align:start position:0%
long our object but fundamentally the
 

00:02:17.640 --> 00:02:19.880 align:start position:0%
long our object but fundamentally the
issue<00:02:17.790><c> is</c><00:02:18.150><c> if</c><00:02:18.510><c> we</c><00:02:18.629><c> look</c><00:02:18.750><c> at</c><00:02:18.930><c> the</c><00:02:19.079><c> j-unit</c><00:02:19.680><c> source</c>

00:02:19.880 --> 00:02:19.890 align:start position:0%
issue is if we look at the j-unit source
 

00:02:19.890 --> 00:02:22.720 align:start position:0%
issue is if we look at the j-unit source
code<00:02:20.099><c> which</c><00:02:20.549><c> I</c><00:02:21.090><c> can't</c><00:02:21.540><c> seem</c><00:02:21.720><c> to</c><00:02:21.780><c> get</c><00:02:21.930><c> another</c>

00:02:22.720 --> 00:02:22.730 align:start position:0%
code which I can't seem to get another
 

00:02:22.730 --> 00:02:26.119 align:start position:0%
code which I can't seem to get another
window<00:02:23.730><c> you</c><00:02:23.970><c> can</c><00:02:24.120><c> see</c><00:02:24.390><c> now</c><00:02:25.230><c> there</c><00:02:25.409><c> we</c><00:02:25.500><c> go</c>

00:02:26.119 --> 00:02:26.129 align:start position:0%
window you can see now there we go
 

00:02:26.129 --> 00:02:28.460 align:start position:0%
window you can see now there we go
so<00:02:26.430><c> we</c><00:02:26.549><c> do</c><00:02:26.670><c> grap</c><00:02:26.909><c> code</c><00:02:27.180><c> assert</c><00:02:27.720><c> equals</c><00:02:28.079><c> J</c><00:02:28.319><c> unit</c>

00:02:28.460 --> 00:02:28.470 align:start position:0%
so we do grap code assert equals J unit
 

00:02:28.470 --> 00:02:31.580 align:start position:0%
so we do grap code assert equals J unit
which<00:02:29.099><c> I've</c><00:02:29.280><c> done</c><00:02:29.430><c> earlier</c><00:02:30.049><c> then</c><00:02:31.049><c> you</c><00:02:31.349><c> can</c><00:02:31.470><c> see</c>

00:02:31.580 --> 00:02:31.590 align:start position:0%
which I've done earlier then you can see
 

00:02:31.590 --> 00:02:33.470 align:start position:0%
which I've done earlier then you can see
this<00:02:31.709><c> is</c><00:02:31.860><c> the</c><00:02:31.980><c> code</c><00:02:32.220><c> that</c><00:02:32.549><c> actually</c><00:02:32.700><c> is</c><00:02:33.030><c> J</c><00:02:33.329><c> unit</c>

00:02:33.470 --> 00:02:33.480 align:start position:0%
this is the code that actually is J unit
 

00:02:33.480 --> 00:02:35.210 align:start position:0%
this is the code that actually is J unit
itself<00:02:33.989><c> so</c><00:02:34.170><c> you</c><00:02:34.230><c> can</c><00:02:34.349><c> browse</c><00:02:34.650><c> it</c><00:02:34.680><c> if</c><00:02:34.950><c> you</c><00:02:35.040><c> want</c>

00:02:35.210 --> 00:02:35.220 align:start position:0%
itself so you can browse it if you want
 

00:02:35.220 --> 00:02:36.589 align:start position:0%
itself so you can browse it if you want
let<00:02:35.879><c> me</c><00:02:35.909><c> can</c><00:02:36.060><c> see</c><00:02:36.150><c> there's</c><00:02:36.329><c> a</c><00:02:36.360><c> bunch</c><00:02:36.510><c> of</c>

00:02:36.589 --> 00:02:36.599 align:start position:0%
let me can see there's a bunch of
 

00:02:36.599 --> 00:02:38.210 align:start position:0%
let me can see there's a bunch of
different<00:02:36.750><c> us</c><00:02:37.019><c> or</c><00:02:37.110><c> equals</c><00:02:37.440><c> methods</c><00:02:37.799><c> for</c>

00:02:38.210 --> 00:02:38.220 align:start position:0%
different us or equals methods for
 

00:02:38.220 --> 00:02:40.789 align:start position:0%
different us or equals methods for
example<00:02:38.549><c> assert</c><00:02:38.879><c> equals</c><00:02:39.000><c> object</c><00:02:39.510><c> object</c><00:02:39.870><c> we</c>

00:02:40.789 --> 00:02:40.799 align:start position:0%
example assert equals object object we
 

00:02:40.799 --> 00:02:42.949 align:start position:0%
example assert equals object object we
have<00:02:40.829><c> assert</c><00:02:41.519><c> equals</c><00:02:41.670><c> long</c><00:02:42.180><c> long</c><00:02:42.480><c> assert</c>

00:02:42.949 --> 00:02:42.959 align:start position:0%
have assert equals long long assert
 

00:02:42.959 --> 00:02:45.500 align:start position:0%
have assert equals long long assert
equals<00:02:43.109><c> double</c><00:02:43.620><c> double</c><00:02:43.890><c> and</c><00:02:44.069><c> so</c><00:02:44.340><c> forth</c><00:02:44.579><c> and</c><00:02:44.760><c> so</c>

00:02:45.500 --> 00:02:45.510 align:start position:0%
equals double double and so forth and so
 

00:02:45.510 --> 00:02:46.699 align:start position:0%
equals double double and so forth and so
with<00:02:45.599><c> the</c><00:02:45.720><c> cotton</c><00:02:45.930><c> Java</c><00:02:46.079><c> compiler</c><00:02:46.440><c> is</c>

00:02:46.699 --> 00:02:46.709 align:start position:0%
with the cotton Java compiler is
 

00:02:46.709 --> 00:02:48.110 align:start position:0%
with the cotton Java compiler is
complaining<00:02:47.069><c> about</c><00:02:47.190><c> here</c><00:02:47.609><c> is</c><00:02:47.730><c> that</c><00:02:48.030><c> it</c>

00:02:48.110 --> 00:02:48.120 align:start position:0%
complaining about here is that it
 

00:02:48.120 --> 00:02:50.270 align:start position:0%
complaining about here is that it
doesn't<00:02:48.420><c> know</c><00:02:48.569><c> it</c><00:02:49.200><c> does</c><00:02:49.349><c> not</c><00:02:49.500><c> know</c><00:02:49.739><c> which</c><00:02:50.099><c> one</c>

00:02:50.270 --> 00:02:50.280 align:start position:0%
doesn't know it does not know which one
 

00:02:50.280 --> 00:02:53.809 align:start position:0%
doesn't know it does not know which one
we<00:02:50.459><c> meet</c><00:02:50.840><c> so</c><00:02:51.840><c> how</c><00:02:51.959><c> is</c><00:02:52.019><c> that</c><00:02:52.079><c> possible</c><00:02:52.760><c> I'd</c><00:02:53.760><c> like</c>

00:02:53.809 --> 00:02:53.819 align:start position:0%
we meet so how is that possible I'd like
 

00:02:53.819 --> 00:02:55.099 align:start position:0%
we meet so how is that possible I'd like
you<00:02:54.000><c> to</c><00:02:54.090><c> think</c><00:02:54.150><c> about</c><00:02:54.329><c> this</c><00:02:54.569><c> a</c><00:02:54.629><c> little</c><00:02:54.750><c> on</c><00:02:54.989><c> your</c>

00:02:55.099 --> 00:02:55.109 align:start position:0%
you to think about this a little on your
 

00:02:55.109 --> 00:02:57.559 align:start position:0%
you to think about this a little on your
own<00:02:55.230><c> I</c><00:02:55.470><c> think</c><00:02:56.129><c> what</c><00:02:56.609><c> automatic</c><00:02:57.120><c> conversions</c>

00:02:57.559 --> 00:02:57.569 align:start position:0%
own I think what automatic conversions
 

00:02:57.569 --> 00:03:00.289 align:start position:0%
own I think what automatic conversions
do<00:02:57.720><c> we</c><00:02:57.810><c> need</c><00:02:57.989><c> to</c><00:02:58.409><c> get</c><00:02:58.620><c> from</c><00:02:58.859><c> int</c><00:02:59.459><c> integer</c>

00:03:00.289 --> 00:03:00.299 align:start position:0%
do we need to get from int integer
 

00:03:00.299 --> 00:03:01.910 align:start position:0%
do we need to get from int integer
that's<00:03:00.659><c> what</c><00:03:00.780><c> we</c><00:03:00.870><c> had</c><00:03:01.019><c> here</c><00:03:01.230><c> right</c><00:03:01.409><c> assert</c>

00:03:01.910 --> 00:03:01.920 align:start position:0%
that's what we had here right assert
 

00:03:01.920 --> 00:03:04.460 align:start position:0%
that's what we had here right assert
equals<00:03:02.069><c> expected</c><00:03:02.760><c> that's</c><00:03:02.940><c> an</c><00:03:03.090><c> int</c><00:03:03.239><c> and</c><00:03:03.480><c> am</c><00:03:03.959><c> get</c>

00:03:04.460 --> 00:03:04.470 align:start position:0%
equals expected that's an int and am get
 

00:03:04.470 --> 00:03:07.190 align:start position:0%
equals expected that's an int and am get
to<00:03:04.680><c> that</c><00:03:05.040><c> returns</c><00:03:05.340><c> a</c><00:03:05.459><c> capital</c><00:03:05.849><c> I</c><00:03:05.940><c> integer</c><00:03:06.420><c> so</c>

00:03:07.190 --> 00:03:07.200 align:start position:0%
to that returns a capital I integer so
 

00:03:07.200 --> 00:03:08.420 align:start position:0%
to that returns a capital I integer so
if<00:03:07.260><c> we</c><00:03:07.349><c> did</c><00:03:07.560><c> some</c><00:03:07.769><c> set</c><00:03:07.980><c> of</c><00:03:08.099><c> automatic</c>

00:03:08.420 --> 00:03:08.430 align:start position:0%
if we did some set of automatic
 

00:03:08.430 --> 00:03:10.399 align:start position:0%
if we did some set of automatic
conversions<00:03:09.030><c> what</c><00:03:09.450><c> would</c><00:03:09.569><c> we</c><00:03:09.750><c> need</c><00:03:09.780><c> to</c><00:03:10.049><c> get</c><00:03:10.170><c> to</c>

00:03:10.399 --> 00:03:10.409 align:start position:0%
conversions what would we need to get to
 

00:03:10.409 --> 00:03:12.470 align:start position:0%
conversions what would we need to get to
or<00:03:10.709><c> do</c><00:03:10.920><c> to</c><00:03:11.129><c> get</c><00:03:11.250><c> from</c><00:03:11.370><c> int</c><00:03:11.609><c> integer</c><00:03:12.060><c> to</c><00:03:12.329><c> long</c>

00:03:12.470 --> 00:03:12.480 align:start position:0%
or do to get from int integer to long
 

00:03:12.480 --> 00:03:14.030 align:start position:0%
or do to get from int integer to long
long<00:03:12.750><c> and</c><00:03:12.959><c> I'll</c><00:03:13.290><c> let</c><00:03:13.409><c> you</c><00:03:13.470><c> think</c><00:03:13.590><c> about</c><00:03:13.709><c> this</c>

00:03:14.030 --> 00:03:14.040 align:start position:0%
long and I'll let you think about this
 

00:03:14.040 --> 00:03:23.000 align:start position:0%
long and I'll let you think about this
for<00:03:14.340><c> a</c><00:03:14.400><c> few</c><00:03:14.549><c> seconds</c><00:03:21.169><c> okay</c><00:03:22.169><c> so</c><00:03:22.500><c> hopefully</c><00:03:22.889><c> you</c>

00:03:23.000 --> 00:03:23.010 align:start position:0%
for a few seconds okay so hopefully you
 

00:03:23.010 --> 00:03:27.259 align:start position:0%
for a few seconds okay so hopefully you
paused<00:03:23.220><c> and</c><00:03:23.519><c> thought</c><00:03:23.549><c> about</c><00:03:23.639><c> it</c><00:03:24.709><c> so</c><00:03:26.239><c> there's</c><00:03:27.239><c> a</c>

00:03:27.259 --> 00:03:27.269 align:start position:0%
paused and thought about it so there's a
 

00:03:27.269 --> 00:03:29.270 align:start position:0%
paused and thought about it so there's a
bunch<00:03:27.389><c> of</c><00:03:27.569><c> possibilities</c><00:03:27.989><c> here</c><00:03:28.470><c> and</c><00:03:29.190><c> the</c>

00:03:29.270 --> 00:03:29.280 align:start position:0%
bunch of possibilities here and the
 

00:03:29.280 --> 00:03:30.470 align:start position:0%
bunch of possibilities here and the
first<00:03:29.459><c> question</c><00:03:29.579><c> is</c><00:03:29.790><c> how</c><00:03:29.879><c> do</c><00:03:29.940><c> we</c><00:03:30.000><c> get</c><00:03:30.120><c> from</c><00:03:30.180><c> int</c>

00:03:30.470 --> 00:03:30.480 align:start position:0%
first question is how do we get from int
 

00:03:30.480 --> 00:03:32.750 align:start position:0%
first question is how do we get from int
to<00:03:30.780><c> long</c><00:03:30.810><c> well</c><00:03:31.769><c> in</c><00:03:31.829><c> this</c><00:03:31.919><c> case</c><00:03:32.099><c> all</c><00:03:32.400><c> we</c><00:03:32.519><c> need</c><00:03:32.669><c> to</c>

00:03:32.750 --> 00:03:32.760 align:start position:0%
to long well in this case all we need to
 

00:03:32.760 --> 00:03:34.220 align:start position:0%
to long well in this case all we need to
do<00:03:32.879><c> is</c><00:03:33.000><c> you</c><00:03:33.090><c> the</c><00:03:33.180><c> white</c><00:03:33.329><c> up</c><00:03:33.480><c> so</c><00:03:33.900><c> to</c><00:03:33.959><c> get</c><00:03:34.079><c> from</c>

00:03:34.220 --> 00:03:34.230 align:start position:0%
do is you the white up so to get from
 

00:03:34.230 --> 00:03:34.699 align:start position:0%
do is you the white up so to get from
int<00:03:34.379><c> to</c><00:03:34.440><c> long</c>

00:03:34.699 --> 00:03:34.709 align:start position:0%
int to long
 

00:03:34.709 --> 00:03:37.400 align:start position:0%
int to long
we<00:03:35.040><c> just</c><00:03:35.250><c> need</c><00:03:35.400><c> to</c><00:03:35.489><c> whiten</c><00:03:35.959><c> expected</c><00:03:36.959><c> in</c><00:03:37.169><c> this</c>

00:03:37.400 --> 00:03:37.410 align:start position:0%
we just need to whiten expected in this
 

00:03:37.410 --> 00:03:40.280 align:start position:0%
we just need to whiten expected in this
case<00:03:37.620><c> it's</c><00:03:37.829><c> a</c><00:03:37.889><c> long</c><00:03:38.569><c> down</c><00:03:39.569><c> here</c><00:03:39.780><c> to</c><00:03:39.989><c> get</c><00:03:40.109><c> from</c>

00:03:40.280 --> 00:03:40.290 align:start position:0%
case it's a long down here to get from
 

00:03:40.290 --> 00:03:43.369 align:start position:0%
case it's a long down here to get from
am<00:03:40.560><c> get</c><00:03:40.829><c> to</c><00:03:41.250><c> from</c><00:03:41.940><c> integer</c><00:03:42.299><c> to</c><00:03:42.540><c> long</c><00:03:42.690><c> in</c><00:03:43.290><c> this</c>

00:03:43.369 --> 00:03:43.379 align:start position:0%
am get to from integer to long in this
 

00:03:43.379 --> 00:03:44.990 align:start position:0%
am get to from integer to long in this
case<00:03:43.620><c> we</c><00:03:43.949><c> have</c><00:03:44.069><c> an</c><00:03:44.160><c> integer</c><00:03:44.430><c> that's</c><00:03:44.760><c> a</c><00:03:44.819><c> wrapped</c>

00:03:44.990 --> 00:03:45.000 align:start position:0%
case we have an integer that's a wrapped
 

00:03:45.000 --> 00:03:47.449 align:start position:0%
case we have an integer that's a wrapped
up<00:03:45.209><c> so</c><00:03:45.989><c> we</c><00:03:46.049><c> need</c><00:03:46.199><c> to</c><00:03:46.260><c> first</c><00:03:46.410><c> unwrap</c><00:03:47.069><c> it</c><00:03:47.099><c> and</c>

00:03:47.449 --> 00:03:47.459 align:start position:0%
up so we need to first unwrap it and
 

00:03:47.459 --> 00:03:49.819 align:start position:0%
up so we need to first unwrap it and
then<00:03:48.239><c> we</c><00:03:48.299><c> need</c><00:03:48.449><c> to</c><00:03:48.540><c> widen</c><00:03:48.750><c> it</c><00:03:49.019><c> to</c><00:03:49.349><c> make</c><00:03:49.500><c> it</c><00:03:49.620><c> into</c>

00:03:49.819 --> 00:03:49.829 align:start position:0%
then we need to widen it to make it into
 

00:03:49.829 --> 00:03:52.369 align:start position:0%
then we need to widen it to make it into
a<00:03:49.859><c> long</c><00:03:50.099><c> so</c><00:03:51.060><c> in</c><00:03:51.180><c> total</c><00:03:51.359><c> we</c><00:03:51.660><c> can</c><00:03:51.900><c> think</c><00:03:52.019><c> of</c><00:03:52.139><c> it</c><00:03:52.260><c> as</c>

00:03:52.369 --> 00:03:52.379 align:start position:0%
a long so in total we can think of it as
 

00:03:52.379 --> 00:03:53.720 align:start position:0%
a long so in total we can think of it as
there's<00:03:52.560><c> three</c><00:03:52.859><c> different</c><00:03:53.069><c> steps</c><00:03:53.579><c> that</c>

00:03:53.720 --> 00:03:53.730 align:start position:0%
there's three different steps that
 

00:03:53.730 --> 00:03:55.849 align:start position:0%
there's three different steps that
happen<00:03:54.030><c> yeah</c><00:03:54.540><c> that's</c><00:03:55.019><c> one</c><00:03:55.260><c> one</c><00:03:55.620><c> way</c><00:03:55.799><c> to</c>

00:03:55.849 --> 00:03:55.859 align:start position:0%
happen yeah that's one one way to
 

00:03:55.859 --> 00:03:58.610 align:start position:0%
happen yeah that's one one way to
imagine<00:03:56.129><c> it</c><00:03:56.400><c> so</c><00:03:57.060><c> we</c><00:03:57.239><c> know</c><00:03:57.449><c> the</c><00:03:57.870><c> given</c><00:03:58.199><c> Java's</c>

00:03:58.610 --> 00:03:58.620 align:start position:0%
imagine it so we know the given Java's
 

00:03:58.620 --> 00:04:02.330 align:start position:0%
imagine it so we know the given Java's
automatic<00:03:59.720><c> conversion</c><00:04:00.720><c> system</c><00:04:01.379><c> you</c><00:04:02.010><c> can</c><00:04:02.159><c> get</c>

00:04:02.330 --> 00:04:02.340 align:start position:0%
automatic conversion system you can get
 

00:04:02.340 --> 00:04:05.149 align:start position:0%
automatic conversion system you can get
from<00:04:02.489><c> integer</c><00:04:03.120><c> to</c><00:04:03.329><c> long</c><00:04:03.510><c> long</c><00:04:03.750><c> now</c><00:04:04.590><c> the</c><00:04:04.650><c> actual</c>

00:04:05.149 --> 00:04:05.159 align:start position:0%
from integer to long long now the actual
 

00:04:05.159 --> 00:04:07.159 align:start position:0%
from integer to long long now the actual
rules<00:04:05.459><c> about</c><00:04:05.909><c> how</c><00:04:06.120><c> many</c><00:04:06.329><c> conversions</c><00:04:06.870><c> you</c><00:04:07.019><c> can</c>

00:04:07.159 --> 00:04:07.169 align:start position:0%
rules about how many conversions you can
 

00:04:07.169 --> 00:04:08.689 align:start position:0%
rules about how many conversions you can
do<00:04:07.290><c> at</c><00:04:07.440><c> once</c><00:04:07.620><c> it's</c><00:04:07.980><c> a</c><00:04:08.069><c> little</c><00:04:08.310><c> complicated</c>

00:04:08.689 --> 00:04:08.699 align:start position:0%
do at once it's a little complicated
 

00:04:08.699 --> 00:04:10.610 align:start position:0%
do at once it's a little complicated
actually<00:04:09.180><c> and</c><00:04:09.780><c> it's</c><00:04:09.930><c> not</c><00:04:10.079><c> part</c><00:04:10.290><c> of</c><00:04:10.349><c> the</c><00:04:10.440><c> class</c>

00:04:10.610 --> 00:04:10.620 align:start position:0%
actually and it's not part of the class
 

00:04:10.620 --> 00:04:12.710 align:start position:0%
actually and it's not part of the class
so<00:04:11.519><c> you</c><00:04:11.579><c> can</c><00:04:11.669><c> try</c><00:04:11.819><c> experimenting</c><00:04:12.269><c> on</c><00:04:12.479><c> your</c><00:04:12.629><c> own</c>

00:04:12.710 --> 00:04:12.720 align:start position:0%
so you can try experimenting on your own
 

00:04:12.720 --> 00:04:14.360 align:start position:0%
so you can try experimenting on your own
later<00:04:12.870><c> if</c><00:04:13.079><c> you'd</c><00:04:13.199><c> like</c><00:04:13.349><c> but</c><00:04:14.010><c> that's</c><00:04:14.159><c> just</c><00:04:14.220><c> to</c>

00:04:14.360 --> 00:04:14.370 align:start position:0%
later if you'd like but that's just to
 

00:04:14.370 --> 00:04:15.860 align:start position:0%
later if you'd like but that's just to
let<00:04:14.489><c> you</c><00:04:14.579><c> know</c><00:04:14.609><c> there</c><00:04:14.970><c> wait</c><00:04:15.180><c> there</c><00:04:15.209><c> exists</c><00:04:15.750><c> in</c>

00:04:15.860 --> 00:04:15.870 align:start position:0%
let you know there wait there exists in
 

00:04:15.870 --> 00:04:17.569 align:start position:0%
let you know there wait there exists in
this<00:04:15.959><c> case</c><00:04:16.199><c> a</c><00:04:16.229><c> way</c><00:04:16.470><c> to</c><00:04:16.530><c> get</c><00:04:16.769><c> from</c><00:04:16.919><c> int</c><00:04:17.099><c> integer</c>

00:04:17.569 --> 00:04:17.579 align:start position:0%
this case a way to get from int integer
 

00:04:17.579 --> 00:04:21.830 align:start position:0%
this case a way to get from int integer
long<00:04:18.000><c> long</c><00:04:19.190><c> now</c><00:04:20.190><c> the</c><00:04:20.250><c> ambiguous</c><00:04:21.150><c> call</c><00:04:21.359><c> if</c><00:04:21.690><c> we</c>

00:04:21.830 --> 00:04:21.840 align:start position:0%
long long now the ambiguous call if we
 

00:04:21.840 --> 00:04:23.230 align:start position:0%
long long now the ambiguous call if we
look<00:04:21.989><c> at</c><00:04:22.139><c> what</c><00:04:22.320><c> the</c>

00:04:23.230 --> 00:04:23.240 align:start position:0%
look at what the
 

00:04:23.240 --> 00:04:25.370 align:start position:0%
look at what the
intelligent<00:04:24.240><c> compiler</c><00:04:24.600><c> was</c><00:04:24.720><c> telling</c><00:04:24.960><c> us</c><00:04:25.080><c> it</c>

00:04:25.370 --> 00:04:25.380 align:start position:0%
intelligent compiler was telling us it
 

00:04:25.380 --> 00:04:26.960 align:start position:0%
intelligent compiler was telling us it
said<00:04:25.590><c> it's</c><00:04:25.740><c> also</c><00:04:25.920><c> possible</c><00:04:26.250><c> apparently</c><00:04:26.850><c> to</c>

00:04:26.960 --> 00:04:26.970 align:start position:0%
said it's also possible apparently to
 

00:04:26.970 --> 00:04:29.330 align:start position:0%
said it's also possible apparently to
get<00:04:27.090><c> the</c><00:04:27.210><c> object</c><00:04:27.330><c> object</c><00:04:27.930><c> so</c><00:04:28.920><c> question</c><00:04:29.280><c> for</c>

00:04:29.330 --> 00:04:29.340 align:start position:0%
get the object object so question for
 

00:04:29.340 --> 00:04:31.280 align:start position:0%
get the object object so question for
you<00:04:29.520><c> here</c><00:04:29.760><c> is</c><00:04:30.150><c> to</c><00:04:30.270><c> consider</c><00:04:30.540><c> what</c><00:04:30.810><c> automatic</c>

00:04:31.280 --> 00:04:31.290 align:start position:0%
you here is to consider what automatic
 

00:04:31.290 --> 00:04:33.980 align:start position:0%
you here is to consider what automatic
conversions<00:04:31.770><c> do</c><00:04:31.920><c> we</c><00:04:32.010><c> need</c><00:04:32.160><c> to</c><00:04:32.280><c> get</c><00:04:32.460><c> to</c><00:04:33.330><c> do</c><00:04:33.510><c> to</c>

00:04:33.980 --> 00:04:33.990 align:start position:0%
conversions do we need to get to do to
 

00:04:33.990 --> 00:04:36.530 align:start position:0%
conversions do we need to get to do to
get<00:04:34.110><c> from</c><00:04:34.320><c> int</c><00:04:34.560><c> integer</c><00:04:35.190><c> to</c><00:04:35.400><c> object</c><00:04:35.820><c> object</c><00:04:36.210><c> so</c>

00:04:36.530 --> 00:04:36.540 align:start position:0%
get from int integer to object object so
 

00:04:36.540 --> 00:04:37.610 align:start position:0%
get from int integer to object object so
I'll<00:04:36.630><c> let</c><00:04:36.750><c> you</c><00:04:36.810><c> think</c><00:04:36.870><c> about</c><00:04:37.200><c> that</c><00:04:37.350><c> you</c><00:04:37.530><c> can</c>

00:04:37.610 --> 00:04:37.620 align:start position:0%
I'll let you think about that you can
 

00:04:37.620 --> 00:04:43.190 align:start position:0%
I'll let you think about that you can
pause<00:04:37.830><c> me</c><00:04:38.040><c> I'll</c><00:04:38.610><c> spoil</c><00:04:38.910><c> it</c><00:04:41.270><c> okay</c><00:04:42.270><c> so</c><00:04:42.930><c> what</c>

00:04:43.190 --> 00:04:43.200 align:start position:0%
pause me I'll spoil it okay so what
 

00:04:43.200 --> 00:04:45.830 align:start position:0%
pause me I'll spoil it okay so what
happens<00:04:43.500><c> in</c><00:04:43.620><c> this</c><00:04:43.710><c> case</c><00:04:43.920><c> is</c><00:04:44.160><c> to</c><00:04:44.910><c> get</c><00:04:45.060><c> from</c><00:04:45.420><c> int</c>

00:04:45.830 --> 00:04:45.840 align:start position:0%
happens in this case is to get from int
 

00:04:45.840 --> 00:04:49.720 align:start position:0%
happens in this case is to get from int
to<00:04:45.980><c> object</c><00:04:46.980><c> we</c><00:04:47.490><c> need</c><00:04:47.520><c> to</c><00:04:47.820><c> box</c><00:04:48.270><c> up</c><00:04:48.540><c> into</c><00:04:48.960><c> integer</c>

00:04:49.720 --> 00:04:49.730 align:start position:0%
to object we need to box up into integer
 

00:04:49.730 --> 00:04:52.670 align:start position:0%
to object we need to box up into integer
and<00:04:50.730><c> then</c><00:04:50.820><c> we</c><00:04:50.910><c> have</c><00:04:51.000><c> integer</c><00:04:51.480><c> integer</c><00:04:51.750><c> and</c><00:04:52.140><c> an</c>

00:04:52.670 --> 00:04:52.680 align:start position:0%
and then we have integer integer and an
 

00:04:52.680 --> 00:04:56.060 align:start position:0%
and then we have integer integer and an
integer<00:04:52.950><c> is</c><00:04:53.220><c> an</c><00:04:53.430><c> object</c><00:04:53.850><c> so</c><00:04:54.800><c> arguably</c><00:04:55.800><c> we're</c>

00:04:56.060 --> 00:04:56.070 align:start position:0%
integer is an object so arguably we're
 

00:04:56.070 --> 00:04:57.590 align:start position:0%
integer is an object so arguably we're
done<00:04:56.220><c> then</c><00:04:56.430><c> we</c><00:04:56.670><c> just</c><00:04:56.850><c> have</c><00:04:56.970><c> integer</c><00:04:57.360><c> integer</c>

00:04:57.590 --> 00:04:57.600 align:start position:0%
done then we just have integer integer
 

00:04:57.600 --> 00:05:00.170 align:start position:0%
done then we just have integer integer
and<00:04:57.990><c> an</c><00:04:58.200><c> integer</c><00:04:58.560><c> is</c><00:04:58.770><c> an</c><00:04:58.950><c> object</c><00:04:59.310><c> so</c><00:04:59.550><c> we're</c>

00:05:00.170 --> 00:05:00.180 align:start position:0%
and an integer is an object so we're
 

00:05:00.180 --> 00:05:02.440 align:start position:0%
and an integer is an object so we're
totally<00:05:00.330><c> done</c><00:05:00.660><c> so</c><00:05:01.590><c> it's</c><00:05:01.710><c> only</c><00:05:01.770><c> one</c><00:05:02.040><c> conversion</c>

00:05:02.440 --> 00:05:02.450 align:start position:0%
totally done so it's only one conversion
 

00:05:02.450 --> 00:05:04.520 align:start position:0%
totally done so it's only one conversion
now<00:05:03.450><c> it</c><00:05:03.570><c> kind</c><00:05:03.720><c> of</c><00:05:03.780><c> depends</c><00:05:04.080><c> on</c><00:05:04.230><c> whether</c><00:05:04.350><c> or</c><00:05:04.440><c> not</c>

00:05:04.520 --> 00:05:04.530 align:start position:0%
now it kind of depends on whether or not
 

00:05:04.530 --> 00:05:06.290 align:start position:0%
now it kind of depends on whether or not
you<00:05:04.740><c> count</c><00:05:04.980><c> the</c><00:05:05.100><c> conversion</c><00:05:05.580><c> from</c><00:05:05.760><c> integer</c><00:05:06.150><c> to</c>

00:05:06.290 --> 00:05:06.300 align:start position:0%
you count the conversion from integer to
 

00:05:06.300 --> 00:05:08.480 align:start position:0%
you count the conversion from integer to
object<00:05:06.690><c> if</c><00:05:07.020><c> we</c><00:05:07.080><c> actually</c><00:05:07.260><c> look</c><00:05:07.620><c> at</c><00:05:07.650><c> the</c><00:05:07.860><c> Java</c>

00:05:08.480 --> 00:05:08.490 align:start position:0%
object if we actually look at the Java
 

00:05:08.490 --> 00:05:10.820 align:start position:0%
object if we actually look at the Java
specification<00:05:09.420><c> they</c><00:05:09.900><c> consider</c><00:05:10.260><c> moving</c><00:05:10.560><c> from</c>

00:05:10.820 --> 00:05:10.830 align:start position:0%
specification they consider moving from
 

00:05:10.830 --> 00:05:13.310 align:start position:0%
specification they consider moving from
integer<00:05:11.190><c> to</c><00:05:11.310><c> object</c><00:05:11.760><c> a</c><00:05:11.940><c> conversion</c><00:05:12.720><c> but</c><00:05:13.080><c> I</c><00:05:13.140><c> I</c>

00:05:13.310 --> 00:05:13.320 align:start position:0%
integer to object a conversion but I I
 

00:05:13.320 --> 00:05:14.870 align:start position:0%
integer to object a conversion but I I
personally<00:05:13.440><c> find</c><00:05:14.130><c> that</c><00:05:14.370><c> term</c><00:05:14.610><c> a</c><00:05:14.670><c> little</c>

00:05:14.870 --> 00:05:14.880 align:start position:0%
personally find that term a little
 

00:05:14.880 --> 00:05:16.520 align:start position:0%
personally find that term a little
confusing<00:05:15.390><c> because</c><00:05:15.600><c> nothing</c><00:05:16.050><c> happens</c><00:05:16.410><c> at</c>

00:05:16.520 --> 00:05:16.530 align:start position:0%
confusing because nothing happens at
 

00:05:16.530 --> 00:05:18.860 align:start position:0%
confusing because nothing happens at
runtime<00:05:16.820><c> so</c><00:05:17.820><c> when</c><00:05:17.910><c> you</c><00:05:18.030><c> go</c><00:05:18.210><c> from</c><00:05:18.390><c> in</c><00:05:18.630><c> to</c>

00:05:18.860 --> 00:05:18.870 align:start position:0%
runtime so when you go from in to
 

00:05:18.870 --> 00:05:20.060 align:start position:0%
runtime so when you go from in to
integer<00:05:19.230><c> you</c><00:05:19.380><c> actually</c><00:05:19.710><c> get</c><00:05:19.830><c> a</c><00:05:19.860><c> runtime</c>

00:05:20.060 --> 00:05:20.070 align:start position:0%
integer you actually get a runtime
 

00:05:20.070 --> 00:05:22.550 align:start position:0%
integer you actually get a runtime
change<00:05:20.670><c> you</c><00:05:21.210><c> originally</c><00:05:21.570><c> just</c><00:05:21.720><c> have</c><00:05:21.870><c> 32</c><00:05:22.320><c> bits</c>

00:05:22.550 --> 00:05:22.560 align:start position:0%
change you originally just have 32 bits
 

00:05:22.560 --> 00:05:24.710 align:start position:0%
change you originally just have 32 bits
and<00:05:22.800><c> now</c><00:05:23.370><c> you</c><00:05:23.430><c> have</c><00:05:23.580><c> 96</c><00:05:24.120><c> bits</c><00:05:24.330><c> it's</c><00:05:24.570><c> like</c><00:05:24.660><c> a</c>

00:05:24.710 --> 00:05:24.720 align:start position:0%
and now you have 96 bits it's like a
 

00:05:24.720 --> 00:05:26.060 align:start position:0%
and now you have 96 bits it's like a
totally<00:05:25.080><c> different</c><00:05:25.110><c> arrangement</c><00:05:25.800><c> of</c><00:05:25.890><c> bits</c>

00:05:26.060 --> 00:05:26.070 align:start position:0%
totally different arrangement of bits
 

00:05:26.070 --> 00:05:27.920 align:start position:0%
totally different arrangement of bits
going<00:05:26.760><c> from</c><00:05:26.970><c> integer</c><00:05:27.270><c> to</c><00:05:27.390><c> object</c><00:05:27.780><c> though</c>

00:05:27.920 --> 00:05:27.930 align:start position:0%
going from integer to object though
 

00:05:27.930 --> 00:05:29.240 align:start position:0%
going from integer to object though
there's<00:05:28.200><c> nothing</c><00:05:28.380><c> that</c><00:05:28.710><c> happens</c><00:05:29.010><c> at</c><00:05:29.100><c> runtime</c>

00:05:29.240 --> 00:05:29.250 align:start position:0%
there's nothing that happens at runtime
 

00:05:29.250 --> 00:05:30.500 align:start position:0%
there's nothing that happens at runtime
so<00:05:29.430><c> I</c><00:05:29.700><c> don't</c><00:05:29.880><c> really</c><00:05:29.940><c> consider</c><00:05:30.180><c> it</c><00:05:30.480><c> a</c>

00:05:30.500 --> 00:05:30.510 align:start position:0%
so I don't really consider it a
 

00:05:30.510 --> 00:05:32.570 align:start position:0%
so I don't really consider it a
conversion<00:05:31.020><c> but</c><00:05:31.410><c> maybe</c><00:05:31.560><c> the</c><00:05:31.740><c> designers</c><00:05:32.550><c> of</c>

00:05:32.570 --> 00:05:32.580 align:start position:0%
conversion but maybe the designers of
 

00:05:32.580 --> 00:05:35.000 align:start position:0%
conversion but maybe the designers of
Java<00:05:32.910><c> disagree</c><00:05:33.470><c> so</c><00:05:34.470><c> what</c><00:05:34.590><c> I</c><00:05:34.620><c> would</c><00:05:34.710><c> say</c><00:05:34.920><c> is</c>

00:05:35.000 --> 00:05:35.010 align:start position:0%
Java disagree so what I would say is
 

00:05:35.010 --> 00:05:37.010 align:start position:0%
Java disagree so what I would say is
that<00:05:35.040><c> even</c><00:05:35.880><c> though</c><00:05:35.970><c> this</c><00:05:36.090><c> is</c><00:05:36.270><c> easier</c><00:05:36.720><c> than</c>

00:05:37.010 --> 00:05:37.020 align:start position:0%
that even though this is easier than
 

00:05:37.020 --> 00:05:39.200 align:start position:0%
that even though this is easier than
three-step<00:05:37.830><c> process</c><00:05:38.040><c> needed</c><00:05:38.700><c> to</c><00:05:38.790><c> get</c><00:05:39.030><c> to</c>

00:05:39.200 --> 00:05:39.210 align:start position:0%
three-step process needed to get to
 

00:05:39.210 --> 00:05:41.270 align:start position:0%
three-step process needed to get to
assert<00:05:39.660><c> equals</c><00:05:39.840><c> long-long</c><00:05:40.500><c> it's</c><00:05:41.070><c> still</c>

00:05:41.270 --> 00:05:41.280 align:start position:0%
assert equals long-long it's still
 

00:05:41.280 --> 00:05:43.640 align:start position:0%
assert equals long-long it's still
ambiguous<00:05:41.430><c> and</c><00:05:41.970><c> this</c><00:05:42.330><c> job</c><00:05:42.630><c> Jabba</c><00:05:43.140><c> won't</c><00:05:43.470><c> even</c>

00:05:43.640 --> 00:05:43.650 align:start position:0%
ambiguous and this job Jabba won't even
 

00:05:43.650 --> 00:05:45.680 align:start position:0%
ambiguous and this job Jabba won't even
let<00:05:43.800><c> this</c><00:05:44.070><c> code</c><00:05:44.400><c> compile</c><00:05:44.850><c> because</c><00:05:45.240><c> it</c><00:05:45.360><c> doesn't</c>

00:05:45.680 --> 00:05:45.690 align:start position:0%
let this code compile because it doesn't
 

00:05:45.690 --> 00:05:47.060 align:start position:0%
let this code compile because it doesn't
know<00:05:45.780><c> what</c><00:05:45.930><c> you</c><00:05:46.080><c> mean</c><00:05:46.260><c> because</c><00:05:46.620><c> there's</c><00:05:46.920><c> two</c>

00:05:47.060 --> 00:05:47.070 align:start position:0%
know what you mean because there's two
 

00:05:47.070 --> 00:05:48.470 align:start position:0%
know what you mean because there's two
different<00:05:47.250><c> conversions</c><00:05:47.940><c> that</c><00:05:48.210><c> are</c><00:05:48.270><c> about</c>

00:05:48.470 --> 00:05:48.480 align:start position:0%
different conversions that are about
 

00:05:48.480 --> 00:05:51.020 align:start position:0%
different conversions that are about
allowable<00:05:49.160><c> so</c><00:05:50.160><c> why</c><00:05:50.340><c> do</c><00:05:50.400><c> I</c><00:05:50.520><c> bring</c><00:05:50.700><c> this</c><00:05:50.760><c> up</c>

00:05:51.020 --> 00:05:51.030 align:start position:0%
allowable so why do I bring this up
 

00:05:51.030 --> 00:05:52.610 align:start position:0%
allowable so why do I bring this up
right<00:05:51.210><c> it</c><00:05:51.630><c> seems</c><00:05:51.840><c> like</c><00:05:51.960><c> I'm</c><00:05:52.110><c> alluding</c><00:05:52.350><c> to</c>

00:05:52.610 --> 00:05:52.620 align:start position:0%
right it seems like I'm alluding to
 

00:05:52.620 --> 00:05:54.020 align:start position:0%
right it seems like I'm alluding to
things<00:05:52.800><c> that</c><00:05:52.950><c> are</c><00:05:53.040><c> complicated</c><00:05:53.250><c> I'm</c><00:05:53.850><c> arguing</c>

00:05:54.020 --> 00:05:54.030 align:start position:0%
things that are complicated I'm arguing
 

00:05:54.030 --> 00:05:55.640 align:start position:0%
things that are complicated I'm arguing
with<00:05:54.270><c> the</c><00:05:54.480><c> Java</c><00:05:54.690><c> language</c><00:05:54.870><c> designers</c><00:05:55.530><c> about</c>

00:05:55.640 --> 00:05:55.650 align:start position:0%
with the Java language designers about
 

00:05:55.650 --> 00:05:57.140 align:start position:0%
with the Java language designers about
what<00:05:55.890><c> constitutes</c><00:05:56.340><c> a</c><00:05:56.400><c> conversion</c><00:05:56.880><c> and</c>

00:05:57.140 --> 00:05:57.150 align:start position:0%
what constitutes a conversion and
 

00:05:57.150 --> 00:05:58.430 align:start position:0%
what constitutes a conversion and
probably<00:05:57.690><c> you're</c><00:05:57.780><c> getting</c><00:05:57.990><c> a</c><00:05:58.050><c> little</c><00:05:58.170><c> nervous</c>

00:05:58.430 --> 00:05:58.440 align:start position:0%
probably you're getting a little nervous
 

00:05:58.440 --> 00:06:00.350 align:start position:0%
probably you're getting a little nervous
probably<00:05:59.100><c> you're</c><00:05:59.460><c> imagining</c><00:05:59.820><c> some</c><00:06:00.030><c> hellish</c>

00:06:00.350 --> 00:06:00.360 align:start position:0%
probably you're imagining some hellish
 

00:06:00.360 --> 00:06:02.180 align:start position:0%
probably you're imagining some hellish
mid-term<00:06:00.750><c> problem</c><00:06:01.110><c> or</c><00:06:01.230><c> something</c><00:06:01.410><c> but</c><00:06:01.830><c> I'm</c>

00:06:02.180 --> 00:06:02.190 align:start position:0%
mid-term problem or something but I'm
 

00:06:02.190 --> 00:06:03.740 align:start position:0%
mid-term problem or something but I'm
not<00:06:02.250><c> going</c><00:06:02.490><c> to</c><00:06:02.580><c> subject</c><00:06:02.700><c> you</c><00:06:03.030><c> to</c><00:06:03.060><c> that</c><00:06:03.300><c> I</c><00:06:03.480><c> just</c>

00:06:03.740 --> 00:06:03.750 align:start position:0%
not going to subject you to that I just
 

00:06:03.750 --> 00:06:05.900 align:start position:0%
not going to subject you to that I just
the<00:06:04.320><c> type</c><00:06:04.530><c> system</c><00:06:04.740><c> in</c><00:06:05.040><c> Java</c><00:06:05.250><c> I</c><00:06:05.490><c> want</c><00:06:05.790><c> us</c><00:06:05.880><c> to</c>

00:06:05.900 --> 00:06:05.910 align:start position:0%
the type system in Java I want us to
 

00:06:05.910 --> 00:06:07.880 align:start position:0%
the type system in Java I want us to
work<00:06:06.300><c> for</c><00:06:06.600><c> us</c><00:06:06.720><c> and</c><00:06:06.900><c> I</c><00:06:07.230><c> don't</c><00:06:07.290><c> want</c><00:06:07.560><c> to</c><00:06:07.620><c> suffer</c>

00:06:07.880 --> 00:06:07.890 align:start position:0%
work for us and I don't want to suffer
 

00:06:07.890 --> 00:06:10.160 align:start position:0%
work for us and I don't want to suffer
so<00:06:08.220><c> I</c><00:06:08.460><c> will</c><00:06:08.820><c> avoid</c><00:06:09.060><c> giving</c><00:06:09.330><c> you</c><00:06:09.630><c> totally</c>

00:06:10.160 --> 00:06:10.170 align:start position:0%
so I will avoid giving you totally
 

00:06:10.170 --> 00:06:12.410 align:start position:0%
so I will avoid giving you totally
obscure<00:06:10.590><c> typing</c><00:06:11.100><c> problems</c><00:06:11.910><c> in</c><00:06:12.060><c> the</c><00:06:12.120><c> future</c>

00:06:12.410 --> 00:06:12.420 align:start position:0%
obscure typing problems in the future
 

00:06:12.420 --> 00:06:13.940 align:start position:0%
obscure typing problems in the future
because<00:06:13.170><c> that's</c><00:06:13.350><c> something</c><00:06:13.500><c> you</c><00:06:13.680><c> can</c><00:06:13.830><c> always</c>

00:06:13.940 --> 00:06:13.950 align:start position:0%
because that's something you can always
 

00:06:13.950 --> 00:06:16.520 align:start position:0%
because that's something you can always
deal<00:06:14.190><c> with</c><00:06:14.250><c> with</c><00:06:14.490><c> a</c><00:06:14.520><c> compiler</c><00:06:15.260><c> however</c><00:06:16.260><c> I</c>

00:06:16.520 --> 00:06:16.530 align:start position:0%
deal with with a compiler however I
 

00:06:16.530 --> 00:06:18.020 align:start position:0%
deal with with a compiler however I
think<00:06:16.980><c> it's</c><00:06:17.070><c> important</c><00:06:17.430><c> that</c><00:06:17.460><c> we</c><00:06:17.610><c> see</c><00:06:17.850><c> this</c>

00:06:18.020 --> 00:06:18.030 align:start position:0%
think it's important that we see this
 

00:06:18.030 --> 00:06:19.910 align:start position:0%
think it's important that we see this
because<00:06:18.600><c> it</c><00:06:18.720><c> will</c><00:06:18.870><c> likely</c><00:06:19.080><c> come</c><00:06:19.380><c> up</c><00:06:19.500><c> with</c><00:06:19.680><c> your</c>

00:06:19.910 --> 00:06:19.920 align:start position:0%
because it will likely come up with your
 

00:06:19.920 --> 00:06:21.680 align:start position:0%
because it will likely come up with your
project<00:06:20.460><c> too</c><00:06:20.610><c> because</c><00:06:21.150><c> you're</c><00:06:21.270><c> gonna</c><00:06:21.360><c> try</c><00:06:21.660><c> and</c>

00:06:21.680 --> 00:06:21.690 align:start position:0%
project too because you're gonna try and
 

00:06:21.690 --> 00:06:23.570 align:start position:0%
project too because you're gonna try and
assert<00:06:22.020><c> equal</c><00:06:22.350><c> some</c><00:06:22.530><c> things</c><00:06:22.800><c> and</c><00:06:23.070><c> run</c><00:06:23.340><c> into</c>

00:06:23.570 --> 00:06:23.580 align:start position:0%
assert equal some things and run into
 

00:06:23.580 --> 00:06:25.790 align:start position:0%
assert equal some things and run into
weird<00:06:23.760><c> issues</c><00:06:24.060><c> so</c><00:06:24.870><c> how</c><00:06:25.290><c> do</c><00:06:25.350><c> we</c><00:06:25.410><c> actually</c><00:06:25.590><c> get</c>

00:06:25.790 --> 00:06:25.800 align:start position:0%
weird issues so how do we actually get
 

00:06:25.800 --> 00:06:28.040 align:start position:0%
weird issues so how do we actually get
this<00:06:25.980><c> code</c><00:06:26.220><c> to</c><00:06:26.340><c> compile</c><00:06:26.750><c> so</c><00:06:27.750><c> what</c><00:06:27.870><c> I'd</c><00:06:27.960><c> like</c>

00:06:28.040 --> 00:06:28.050 align:start position:0%
this code to compile so what I'd like
 

00:06:28.050 --> 00:06:30.620 align:start position:0%
this code to compile so what I'd like
you<00:06:28.200><c> to</c><00:06:28.260><c> do</c><00:06:28.440><c> now</c><00:06:28.470><c> is</c><00:06:28.620><c> come</c><00:06:28.950><c> up</c><00:06:29.070><c> with</c><00:06:29.190><c> a</c><00:06:29.280><c> cast</c><00:06:29.630><c> so</c>

00:06:30.620 --> 00:06:30.630 align:start position:0%
you to do now is come up with a cast so
 

00:06:30.630 --> 00:06:32.659 align:start position:0%
you to do now is come up with a cast so
that<00:06:30.780><c> there</c><00:06:30.930><c> are</c><00:06:31.080><c> there's</c><00:06:31.680><c> no</c><00:06:31.919><c> ambiguity</c><00:06:32.250><c> and</c>

00:06:32.659 --> 00:06:32.669 align:start position:0%
that there are there's no ambiguity and
 

00:06:32.669 --> 00:06:34.310 align:start position:0%
that there are there's no ambiguity and
the<00:06:32.760><c> way</c><00:06:32.850><c> it'll</c><00:06:33.000><c> work</c><00:06:33.180><c> is</c><00:06:33.390><c> you</c><00:06:33.810><c> want</c><00:06:34.020><c> it</c><00:06:34.110><c> so</c>

00:06:34.310 --> 00:06:34.320 align:start position:0%
the way it'll work is you want it so
 

00:06:34.320 --> 00:06:36.070 align:start position:0%
the way it'll work is you want it so
that<00:06:34.500><c> there's</c><00:06:34.740><c> an</c><00:06:34.890><c> automatic</c><00:06:35.400><c> exam</c>

00:06:36.070 --> 00:06:36.080 align:start position:0%
that there's an automatic exam
 

00:06:36.080 --> 00:06:38.529 align:start position:0%
that there's an automatic exam
to<00:06:36.229><c> match</c><00:06:36.580><c> and</c><00:06:37.580><c> there's</c><00:06:37.789><c> no</c><00:06:37.939><c> need</c><00:06:38.180><c> for</c><00:06:38.419><c> any</c>

00:06:38.529 --> 00:06:38.539 align:start position:0%
to match and there's no need for any
 

00:06:38.539 --> 00:06:40.179 align:start position:0%
to match and there's no need for any
runtime<00:06:38.870><c> conversions</c><00:06:39.650><c> and</c><00:06:39.770><c> then</c><00:06:39.889><c> need</c><00:06:40.009><c> for</c>

00:06:40.179 --> 00:06:40.189 align:start position:0%
runtime conversions and then need for
 

00:06:40.189 --> 00:06:43.029 align:start position:0%
runtime conversions and then need for
any<00:06:40.340><c> weird</c><00:06:40.669><c> changes</c><00:06:41.180><c> to</c><00:06:41.330><c> happen</c><00:06:41.979><c> it's</c><00:06:42.979><c> a</c>

00:06:43.029 --> 00:06:43.039 align:start position:0%
any weird changes to happen it's a
 

00:06:43.039 --> 00:06:44.740 align:start position:0%
any weird changes to happen it's a
tricky<00:06:43.400><c> question</c><00:06:43.430><c> but</c><00:06:43.909><c> really</c><00:06:44.300><c> try</c><00:06:44.479><c> to</c><00:06:44.539><c> think</c>

00:06:44.740 --> 00:06:44.750 align:start position:0%
tricky question but really try to think
 

00:06:44.750 --> 00:06:47.950 align:start position:0%
tricky question but really try to think
that<00:06:46.150><c> so</c><00:06:47.150><c> trying</c><00:06:47.360><c> to</c><00:06:47.389><c> figure</c><00:06:47.479><c> out</c><00:06:47.659><c> something</c>

00:06:47.950 --> 00:06:47.960 align:start position:0%
that so trying to figure out something
 

00:06:47.960 --> 00:06:51.879 align:start position:0%
that so trying to figure out something
with<00:06:48.080><c> is</c><00:06:48.169><c> a</c><00:06:48.199><c> zero</c><00:06:48.560><c> step</c><00:06:48.860><c> conversion</c><00:06:50.740><c> so</c><00:06:51.740><c> one</c>

00:06:51.879 --> 00:06:51.889 align:start position:0%
with is a zero step conversion so one
 

00:06:51.889 --> 00:06:53.200 align:start position:0%
with is a zero step conversion so one
possibility<00:06:52.340><c> is</c><00:06:52.610><c> I</c><00:06:52.699><c> want</c><00:06:52.849><c> it</c><00:06:52.939><c> to</c><00:06:53.030><c> go</c><00:06:53.150><c> straight</c>

00:06:53.200 --> 00:06:53.210 align:start position:0%
possibility is I want it to go straight
 

00:06:53.210 --> 00:06:55.629 align:start position:0%
possibility is I want it to go straight
to<00:06:53.449><c> object</c><00:06:53.990><c> object</c><00:06:54.409><c> and</c><00:06:54.620><c> so</c><00:06:55.129><c> I</c><00:06:55.189><c> could</c><00:06:55.340><c> do</c><00:06:55.490><c> that</c>

00:06:55.629 --> 00:06:55.639 align:start position:0%
to object object and so I could do that
 

00:06:55.639 --> 00:06:57.550 align:start position:0%
to object object and so I could do that
by<00:06:56.150><c> forcing</c><00:06:56.479><c> this</c><00:06:56.750><c> on</c><00:06:56.930><c> the</c><00:06:57.020><c> left</c><00:06:57.199><c> to</c><00:06:57.349><c> be</c><00:06:57.379><c> an</c>

00:06:57.550 --> 00:06:57.560 align:start position:0%
by forcing this on the left to be an
 

00:06:57.560 --> 00:07:00.010 align:start position:0%
by forcing this on the left to be an
object<00:06:57.710><c> so</c><00:06:58.550><c> by</c><00:06:58.729><c> casting</c><00:06:59.180><c> this</c><00:06:59.360><c> to</c><00:06:59.479><c> integer</c><00:06:59.840><c> I</c>

00:07:00.010 --> 00:07:00.020 align:start position:0%
object so by casting this to integer I
 

00:07:00.020 --> 00:07:03.520 align:start position:0%
object so by casting this to integer I
can<00:07:00.439><c> head</c><00:07:00.650><c> off</c><00:07:00.680><c> our</c><00:07:01.129><c> type</c><00:07:01.939><c> system</c><00:07:02.360><c> and</c><00:07:02.659><c> I</c><00:07:03.289><c> now</c>

00:07:03.520 --> 00:07:03.530 align:start position:0%
can head off our type system and I now
 

00:07:03.530 --> 00:07:05.320 align:start position:0%
can head off our type system and I now
have<00:07:03.770><c> a</c><00:07:03.979><c> perfectly</c><00:07:04.430><c> lovely</c><00:07:04.610><c> thing</c><00:07:05.000><c> and</c><00:07:05.240><c> it</c>

00:07:05.320 --> 00:07:05.330 align:start position:0%
have a perfectly lovely thing and it
 

00:07:05.330 --> 00:07:07.360 align:start position:0%
have a perfectly lovely thing and it
will<00:07:05.389><c> call</c><00:07:05.599><c> the</c><00:07:05.719><c> object</c><00:07:06.199><c> object</c><00:07:06.680><c> version</c><00:07:07.039><c> and</c>

00:07:07.360 --> 00:07:07.370 align:start position:0%
will call the object object version and
 

00:07:07.370 --> 00:07:09.040 align:start position:0%
will call the object object version and
then<00:07:07.729><c> when</c><00:07:07.849><c> we</c><00:07:07.939><c> run</c><00:07:08.090><c> this</c><00:07:08.270><c> hopefully</c><00:07:08.900><c> we'll</c>

00:07:09.040 --> 00:07:09.050 align:start position:0%
then when we run this hopefully we'll
 

00:07:09.050 --> 00:07:11.920 align:start position:0%
then when we run this hopefully we'll
find<00:07:09.319><c> that</c><00:07:09.650><c> it</c><00:07:10.150><c> correctly</c><00:07:11.150><c> runs</c><00:07:11.539><c> the</c><00:07:11.719><c> test</c>

00:07:11.920 --> 00:07:11.930 align:start position:0%
find that it correctly runs the test
 

00:07:11.930 --> 00:07:16.180 align:start position:0%
find that it correctly runs the test
actually<00:07:12.379><c> I</c><00:07:12.590><c> need</c><00:07:12.830><c> to</c><00:07:12.860><c> do</c><00:07:13.129><c> a</c><00:07:13.780><c> remap</c><00:07:15.069><c> run</c><00:07:16.069><c> the</c>

00:07:16.180 --> 00:07:16.190 align:start position:0%
actually I need to do a remap run the
 

00:07:16.190 --> 00:07:19.209 align:start position:0%
actually I need to do a remap run the
tests<00:07:16.550><c> and</c><00:07:16.729><c> r1</c><00:07:17.210><c> test</c><00:07:17.449><c> passes</c><00:07:17.719><c> okay</c><00:07:18.530><c> cuz</c><00:07:18.800><c> I</c><00:07:18.979><c> r1</c>

00:07:19.209 --> 00:07:19.219 align:start position:0%
tests and r1 test passes okay cuz I r1
 

00:07:19.219 --> 00:07:22.990 align:start position:0%
tests and r1 test passes okay cuz I r1
test<00:07:19.460><c> passes</c><00:07:19.699><c> great</c><00:07:21.009><c> and</c><00:07:22.009><c> so</c><00:07:22.250><c> there</c><00:07:22.819><c> are</c><00:07:22.849><c> other</c>

00:07:22.990 --> 00:07:23.000 align:start position:0%
test passes great and so there are other
 

00:07:23.000 --> 00:07:24.700 align:start position:0%
test passes great and so there are other
answers<00:07:23.389><c> you</c><00:07:23.569><c> could</c><00:07:23.690><c> try</c><00:07:23.870><c> and</c><00:07:23.930><c> do</c><00:07:24.169><c> you</c><00:07:24.500><c> can</c><00:07:24.620><c> do</c>

00:07:24.700 --> 00:07:24.710 align:start position:0%
answers you could try and do you can do
 

00:07:24.710 --> 00:07:26.290 align:start position:0%
answers you could try and do you can do
the<00:07:24.830><c> other</c><00:07:24.979><c> way</c><00:07:25.190><c> can</c><00:07:25.400><c> try</c><00:07:25.580><c> and</c><00:07:25.669><c> cast</c><00:07:25.879><c> it</c><00:07:26.090><c> so</c><00:07:26.210><c> you</c>

00:07:26.290 --> 00:07:26.300 align:start position:0%
the other way can try and cast it so you
 

00:07:26.300 --> 00:07:28.209 align:start position:0%
the other way can try and cast it so you
actually<00:07:26.569><c> call</c><00:07:26.719><c> the</c><00:07:26.840><c> long</c><00:07:27.020><c> long</c><00:07:27.319><c> version</c><00:07:27.529><c> and</c>

00:07:28.209 --> 00:07:28.219 align:start position:0%
actually call the long long version and
 

00:07:28.219 --> 00:07:31.150 align:start position:0%
actually call the long long version and
exercise<00:07:28.669><c> for</c><00:07:29.000><c> the</c><00:07:29.120><c> reader</c>

