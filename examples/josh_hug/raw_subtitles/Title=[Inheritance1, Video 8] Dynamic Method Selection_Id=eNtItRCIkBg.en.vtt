WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:02.510 align:start position:0%
 
understanding<00:00:01.380><c> exactly</c><00:00:01.829><c> how</c><00:00:01.949><c> this</c><00:00:02.100><c> works</c><00:00:02.280><c> is</c>

00:00:02.510 --> 00:00:02.520 align:start position:0%
understanding exactly how this works is
 

00:00:02.520 --> 00:00:04.519 align:start position:0%
understanding exactly how this works is
really<00:00:02.820><c> important</c><00:00:03.240><c> and</c><00:00:03.389><c> unfortunately</c><00:00:04.140><c> it's</c>

00:00:04.519 --> 00:00:04.529 align:start position:0%
really important and unfortunately it's
 

00:00:04.529 --> 00:00:06.170 align:start position:0%
really important and unfortunately it's
one<00:00:04.710><c> of</c><00:00:04.770><c> those</c><00:00:04.859><c> things</c><00:00:05.190><c> that</c><00:00:05.279><c> it's</c><00:00:05.580><c> easy</c><00:00:05.910><c> to</c>

00:00:06.170 --> 00:00:06.180 align:start position:0%
one of those things that it's easy to
 

00:00:06.180 --> 00:00:10.250 align:start position:0%
one of those things that it's easy to
learn<00:00:06.359><c> an</c><00:00:06.690><c> overly</c><00:00:07.350><c> complex</c><00:00:07.890><c> Byzantine</c><00:00:09.110><c> set</c><00:00:10.110><c> of</c>

00:00:10.250 --> 00:00:10.260 align:start position:0%
learn an overly complex Byzantine set of
 

00:00:10.260 --> 00:00:11.990 align:start position:0%
learn an overly complex Byzantine set of
rules<00:00:10.530><c> for</c><00:00:10.860><c> how</c><00:00:10.980><c> things</c><00:00:11.219><c> work</c><00:00:11.490><c> but</c><00:00:11.820><c> there's</c>

00:00:11.990 --> 00:00:12.000 align:start position:0%
rules for how things work but there's
 

00:00:12.000 --> 00:00:13.430 align:start position:0%
rules for how things work but there's
actually<00:00:12.210><c> a</c><00:00:12.269><c> simple</c><00:00:12.690><c> way</c><00:00:12.780><c> to</c><00:00:12.809><c> think</c><00:00:12.929><c> about</c><00:00:13.200><c> it</c>

00:00:13.430 --> 00:00:13.440 align:start position:0%
actually a simple way to think about it
 

00:00:13.440 --> 00:00:16.189 align:start position:0%
actually a simple way to think about it
so<00:00:14.309><c> the</c><00:00:14.429><c> way</c><00:00:14.549><c> to</c><00:00:14.610><c> think</c><00:00:14.849><c> about</c><00:00:15.000><c> this</c><00:00:15.299><c> is</c><00:00:15.570><c> this</c>

00:00:16.189 --> 00:00:16.199 align:start position:0%
so the way to think about this is this
 

00:00:16.199 --> 00:00:19.040 align:start position:0%
so the way to think about this is this
false<00:00:16.699><c> every</c><00:00:17.699><c> variable</c><00:00:18.150><c> in</c><00:00:18.270><c> Java</c><00:00:18.539><c> when</c><00:00:18.960><c> you</c>

00:00:19.040 --> 00:00:19.050 align:start position:0%
false every variable in Java when you
 

00:00:19.050 --> 00:00:23.390 align:start position:0%
false every variable in Java when you
declare<00:00:19.199><c> one</c><00:00:19.580><c> has</c><00:00:20.580><c> a</c><00:00:20.939><c> compile</c><00:00:21.630><c> time</c><00:00:21.660><c> type</c><00:00:22.170><c> or</c><00:00:22.980><c> I</c>

00:00:23.390 --> 00:00:23.400 align:start position:0%
declare one has a compile time type or I
 

00:00:23.400 --> 00:00:25.220 align:start position:0%
declare one has a compile time type or I
sometimes<00:00:23.640><c> call</c><00:00:23.910><c> it</c><00:00:24.060><c> a</c><00:00:24.119><c> static</c><00:00:24.390><c> type</c><00:00:24.539><c> and</c><00:00:24.840><c> that</c>

00:00:25.220 --> 00:00:25.230 align:start position:0%
sometimes call it a static type and that
 

00:00:25.230 --> 00:00:27.620 align:start position:0%
sometimes call it a static type and that
thing<00:00:25.439><c> never</c><00:00:25.650><c> ever</c><00:00:25.949><c> changes</c><00:00:26.400><c> so</c><00:00:27.150><c> for</c><00:00:27.269><c> example</c>

00:00:27.620 --> 00:00:27.630 align:start position:0%
thing never ever changes so for example
 

00:00:27.630 --> 00:00:31.279 align:start position:0%
thing never ever changes so for example
when<00:00:28.320><c> I</c><00:00:28.349><c> say</c><00:00:28.560><c> living</c><00:00:28.830><c> thing</c><00:00:29.160><c> lt1</c><00:00:29.820><c> I</c><00:00:30.080><c> get</c><00:00:31.080><c> a</c><00:00:31.109><c> box</c>

00:00:31.279 --> 00:00:31.289 align:start position:0%
when I say living thing lt1 I get a box
 

00:00:31.289 --> 00:00:33.860 align:start position:0%
when I say living thing lt1 I get a box
and<00:00:31.679><c> this</c><00:00:32.070><c> is</c><00:00:32.130><c> a</c><00:00:32.250><c> memory</c><00:00:32.550><c> box</c><00:00:32.700><c> at</c><00:00:32.969><c> 64</c><00:00:33.450><c> bits</c><00:00:33.660><c> and</c>

00:00:33.860 --> 00:00:33.870 align:start position:0%
and this is a memory box at 64 bits and
 

00:00:33.870 --> 00:00:36.549 align:start position:0%
and this is a memory box at 64 bits and
it<00:00:33.960><c> can</c><00:00:34.079><c> only</c><00:00:34.290><c> ever</c><00:00:34.649><c> point</c><00:00:35.100><c> at</c><00:00:35.280><c> a</c><00:00:35.550><c> living</c><00:00:35.850><c> thing</c>

00:00:36.549 --> 00:00:36.559 align:start position:0%
it can only ever point at a living thing
 

00:00:36.559 --> 00:00:39.200 align:start position:0%
it can only ever point at a living thing
now<00:00:37.559><c> every</c><00:00:37.829><c> variable</c><00:00:38.190><c> also</c><00:00:38.340><c> has</c><00:00:38.670><c> a</c><00:00:38.940><c> dynamic</c>

00:00:39.200 --> 00:00:39.210 align:start position:0%
now every variable also has a dynamic
 

00:00:39.210 --> 00:00:41.450 align:start position:0%
now every variable also has a dynamic
type<00:00:39.719><c> sometimes</c><00:00:40.170><c> called</c><00:00:40.410><c> a</c><00:00:40.500><c> runtime</c><00:00:40.920><c> type</c><00:00:41.190><c> and</c>

00:00:41.450 --> 00:00:41.460 align:start position:0%
type sometimes called a runtime type and
 

00:00:41.460 --> 00:00:43.130 align:start position:0%
type sometimes called a runtime type and
this<00:00:41.910><c> is</c><00:00:42.030><c> the</c><00:00:42.180><c> type</c><00:00:42.390><c> specified</c><00:00:43.020><c> at</c>

00:00:43.130 --> 00:00:43.140 align:start position:0%
this is the type specified at
 

00:00:43.140 --> 00:00:45.350 align:start position:0%
this is the type specified at
instantiation<00:00:43.860><c> that</c><00:00:44.460><c> is</c><00:00:44.610><c> when</c><00:00:44.760><c> you</c><00:00:44.850><c> say</c><00:00:45.030><c> new</c>

00:00:45.350 --> 00:00:45.360 align:start position:0%
instantiation that is when you say new
 

00:00:45.360 --> 00:00:47.660 align:start position:0%
instantiation that is when you say new
and<00:00:45.660><c> it's</c><00:00:46.410><c> equal</c><00:00:46.710><c> to</c><00:00:46.739><c> the</c><00:00:47.129><c> type</c><00:00:47.309><c> of</c><00:00:47.340><c> the</c><00:00:47.489><c> object</c>

00:00:47.660 --> 00:00:47.670 align:start position:0%
and it's equal to the type of the object
 

00:00:47.670 --> 00:00:49.279 align:start position:0%
and it's equal to the type of the object
being<00:00:48.149><c> pointed</c><00:00:48.450><c> at</c><00:00:48.539><c> that's</c><00:00:48.870><c> what</c><00:00:48.989><c> we</c><00:00:49.079><c> mean</c><00:00:49.230><c> by</c>

00:00:49.279 --> 00:00:49.289 align:start position:0%
being pointed at that's what we mean by
 

00:00:49.289 --> 00:00:51.830 align:start position:0%
being pointed at that's what we mean by
runtime<00:00:50.129><c> type</c><00:00:50.309><c> so</c><00:00:51.030><c> at</c><00:00:51.120><c> this</c><00:00:51.210><c> point</c><00:00:51.480><c> I</c><00:00:51.660><c> haven't</c>

00:00:51.830 --> 00:00:51.840 align:start position:0%
runtime type so at this point I haven't
 

00:00:51.840 --> 00:00:53.810 align:start position:0%
runtime type so at this point I haven't
instantiated<00:00:52.410><c> anything</c><00:00:52.890><c> so</c><00:00:53.219><c> the</c><00:00:53.460><c> note</c><00:00:53.610><c> the</c>

00:00:53.810 --> 00:00:53.820 align:start position:0%
instantiated anything so the note the
 

00:00:53.820 --> 00:00:56.290 align:start position:0%
instantiated anything so the note the
dynamic<00:00:54.210><c> type</c><00:00:54.360><c> will</c><00:00:54.570><c> just</c><00:00:54.750><c> note</c><00:00:54.870><c> as</c><00:00:55.020><c> null</c>

00:00:56.290 --> 00:00:56.300 align:start position:0%
dynamic type will just note as null
 

00:00:56.300 --> 00:00:58.670 align:start position:0%
dynamic type will just note as null
along<00:00:57.300><c> comes</c><00:00:57.570><c> this</c><00:00:57.780><c> next</c><00:00:58.050><c> line</c><00:00:58.170><c> of</c><00:00:58.350><c> code</c><00:00:58.379><c> we</c>

00:00:58.670 --> 00:00:58.680 align:start position:0%
along comes this next line of code we
 

00:00:58.680 --> 00:01:00.979 align:start position:0%
along comes this next line of code we
make<00:00:58.829><c> a</c><00:00:58.859><c> new</c><00:00:59.070><c> Fox</c><00:00:59.340><c> and</c><00:00:59.640><c> we</c><00:00:59.850><c> say</c><00:00:59.969><c> el</c><00:01:00.239><c> t1</c><00:01:00.629><c> equals</c>

00:01:00.979 --> 00:01:00.989 align:start position:0%
make a new Fox and we say el t1 equals
 

00:01:00.989 --> 00:01:03.439 align:start position:0%
make a new Fox and we say el t1 equals
that<00:01:01.140><c> so</c><00:01:01.680><c> new</c><00:01:01.829><c> fox</c><00:01:02.039><c> gets</c><00:01:02.309><c> created</c><00:01:02.760><c> we</c><00:01:03.030><c> copy</c><00:01:03.210><c> its</c>

00:01:03.439 --> 00:01:03.449 align:start position:0%
that so new fox gets created we copy its
 

00:01:03.449 --> 00:01:05.990 align:start position:0%
that so new fox gets created we copy its
address<00:01:03.870><c> and</c><00:01:04.080><c> lt1</c><00:01:04.650><c> here's</c><00:01:05.280><c> that</c><00:01:05.460><c> creature</c><00:01:05.729><c> and</c>

00:01:05.990 --> 00:01:06.000 align:start position:0%
address and lt1 here's that creature and
 

00:01:06.000 --> 00:01:08.870 align:start position:0%
address and lt1 here's that creature and
now<00:01:06.720><c> we</c><00:01:07.140><c> have</c><00:01:07.290><c> a</c><00:01:07.320><c> dynamic</c><00:01:07.830><c> type</c><00:01:07.979><c> its</c><00:01:08.189><c> Fox</c><00:01:08.460><c> it's</c>

00:01:08.870 --> 00:01:08.880 align:start position:0%
now we have a dynamic type its Fox it's
 

00:01:08.880 --> 00:01:10.660 align:start position:0%
now we have a dynamic type its Fox it's
the<00:01:09.090><c> type</c><00:01:09.270><c> of</c><00:01:09.299><c> the</c><00:01:09.479><c> object</c><00:01:09.600><c> being</c><00:01:10.020><c> pointed</c><00:01:10.320><c> at</c>

00:01:10.660 --> 00:01:10.670 align:start position:0%
the type of the object being pointed at
 

00:01:10.670 --> 00:01:14.300 align:start position:0%
the type of the object being pointed at
and<00:01:11.670><c> so</c><00:01:12.030><c> we'll</c><00:01:12.180><c> continue</c><00:01:12.740><c> so</c><00:01:13.740><c> next</c><00:01:13.860><c> comes</c>

00:01:14.300 --> 00:01:14.310 align:start position:0%
and so we'll continue so next comes
 

00:01:14.310 --> 00:01:17.240 align:start position:0%
and so we'll continue so next comes
animal<00:01:14.610><c> a1</c><00:01:14.880><c> equals</c><00:01:15.150><c> LT</c><00:01:15.390><c> 1</c><00:01:15.540><c> in</c><00:01:15.750><c> this</c><00:01:16.590><c> case</c><00:01:16.830><c> we</c>

00:01:17.240 --> 00:01:17.250 align:start position:0%
animal a1 equals LT 1 in this case we
 

00:01:17.250 --> 00:01:19.550 align:start position:0%
animal a1 equals LT 1 in this case we
get<00:01:17.400><c> a</c><00:01:17.430><c> new</c><00:01:17.640><c> box</c><00:01:17.880><c> that</c><00:01:18.659><c> holds</c><00:01:18.840><c> animal</c>

00:01:19.550 --> 00:01:19.560 align:start position:0%
get a new box that holds animal
 

00:01:19.560 --> 00:01:21.950 align:start position:0%
get a new box that holds animal
references<00:01:20.070><c> it's</c><00:01:20.880><c> static</c><00:01:21.210><c> type</c><00:01:21.390><c> is</c><00:01:21.570><c> animal</c>

00:01:21.950 --> 00:01:21.960 align:start position:0%
references it's static type is animal
 

00:01:21.960 --> 00:01:23.480 align:start position:0%
references it's static type is animal
and<00:01:22.110><c> it</c><00:01:22.200><c> never</c><00:01:22.350><c> changes</c><00:01:22.470><c> in</c><00:01:22.950><c> fact</c><00:01:23.159><c> look</c><00:01:23.369><c> at</c>

00:01:23.480 --> 00:01:23.490 align:start position:0%
and it never changes in fact look at
 

00:01:23.490 --> 00:01:24.980 align:start position:0%
and it never changes in fact look at
that<00:01:23.670><c> it's</c><00:01:23.880><c> like</c><00:01:24.000><c> inscribed</c><00:01:24.509><c> right</c><00:01:24.720><c> on</c><00:01:24.869><c> the</c>

00:01:24.980 --> 00:01:24.990 align:start position:0%
that it's like inscribed right on the
 

00:01:24.990 --> 00:01:27.590 align:start position:0%
that it's like inscribed right on the
box<00:01:25.170><c> can't</c><00:01:25.770><c> get</c><00:01:25.860><c> rid</c><00:01:25.979><c> of</c><00:01:26.040><c> that</c><00:01:26.390><c> and</c><00:01:27.390><c> it's</c>

00:01:27.590 --> 00:01:27.600 align:start position:0%
box can't get rid of that and it's
 

00:01:27.600 --> 00:01:30.319 align:start position:0%
box can't get rid of that and it's
dynamic<00:01:27.960><c> type</c><00:01:28.140><c> is</c><00:01:28.290><c> Fox</c><00:01:28.790><c> and</c><00:01:29.790><c> we</c><00:01:29.970><c> can</c><00:01:30.060><c> also</c><00:01:30.180><c> have</c>

00:01:30.319 --> 00:01:30.329 align:start position:0%
dynamic type is Fox and we can also have
 

00:01:30.329 --> 00:01:32.270 align:start position:0%
dynamic type is Fox and we can also have
variables<00:01:30.810><c> of</c><00:01:31.049><c> static</c><00:01:31.380><c> type</c><00:01:31.530><c> Fox</c><00:01:31.799><c> that's</c><00:01:32.070><c> fine</c>

00:01:32.270 --> 00:01:32.280 align:start position:0%
variables of static type Fox that's fine
 

00:01:32.280 --> 00:01:34.520 align:start position:0%
variables of static type Fox that's fine
so<00:01:32.850><c> I</c><00:01:32.880><c> make</c><00:01:33.090><c> a</c><00:01:33.119><c> variable</c><00:01:33.750><c> a</c><00:01:33.840><c> static</c><00:01:34.140><c> type</c><00:01:34.259><c> Fox</c>

00:01:34.520 --> 00:01:34.530 align:start position:0%
so I make a variable a static type Fox
 

00:01:34.530 --> 00:01:36.380 align:start position:0%
so I make a variable a static type Fox
it<00:01:34.799><c> also</c><00:01:34.950><c> points</c><00:01:35.280><c> a</c><00:01:35.340><c> fox</c><00:01:35.549><c> in</c><00:01:35.790><c> this</c><00:01:36.030><c> case</c><00:01:36.210><c> the</c>

00:01:36.380 --> 00:01:36.390 align:start position:0%
it also points a fox in this case the
 

00:01:36.390 --> 00:01:39.039 align:start position:0%
it also points a fox in this case the
static<00:01:36.689><c> and</c><00:01:36.869><c> the</c><00:01:36.990><c> dynamic</c><00:01:37.020><c> type</c><00:01:37.530><c> are</c><00:01:37.740><c> both</c><00:01:38.040><c> Fox</c>

00:01:39.039 --> 00:01:39.049 align:start position:0%
static and the dynamic type are both Fox
 

00:01:39.049 --> 00:01:42.200 align:start position:0%
static and the dynamic type are both Fox
lastly<00:01:40.049><c> we</c><00:01:40.619><c> decide</c><00:01:40.979><c> LT</c><00:01:41.490><c> 1</c><00:01:41.700><c> is</c><00:01:41.820><c> now</c><00:01:41.939><c> going</c><00:01:42.119><c> to</c>

00:01:42.200 --> 00:01:42.210 align:start position:0%
lastly we decide LT 1 is now going to
 

00:01:42.210 --> 00:01:43.760 align:start position:0%
lastly we decide LT 1 is now going to
point<00:01:42.390><c> at</c><00:01:42.540><c> a</c><00:01:42.600><c> new</c><00:01:42.689><c> object</c><00:01:42.840><c> which</c><00:01:43.259><c> is</c><00:01:43.409><c> a</c><00:01:43.439><c> squid</c>

00:01:43.760 --> 00:01:43.770 align:start position:0%
point at a new object which is a squid
 

00:01:43.770 --> 00:01:45.620 align:start position:0%
point at a new object which is a squid
so<00:01:44.399><c> the</c><00:01:44.520><c> static</c><00:01:44.759><c> type</c><00:01:44.909><c> of</c><00:01:45.090><c> course</c><00:01:45.299><c> does</c><00:01:45.600><c> not</c>

00:01:45.620 --> 00:01:45.630 align:start position:0%
so the static type of course does not
 

00:01:45.630 --> 00:01:47.270 align:start position:0%
so the static type of course does not
change<00:01:46.020><c> because</c><00:01:46.290><c> it</c><00:01:46.380><c> never</c><00:01:46.530><c> does</c><00:01:46.770><c> but</c><00:01:47.189><c> the</c>

00:01:47.270 --> 00:01:47.280 align:start position:0%
change because it never does but the
 

00:01:47.280 --> 00:01:50.240 align:start position:0%
change because it never does but the
dynamic<00:01:47.670><c> type</c><00:01:47.880><c> is</c><00:01:48.090><c> now</c><00:01:48.270><c> squid</c><00:01:48.720><c> ok</c><00:01:49.560><c> great</c>

00:01:50.240 --> 00:01:50.250 align:start position:0%
dynamic type is now squid ok great
 

00:01:50.250 --> 00:01:53.630 align:start position:0%
dynamic type is now squid ok great
so<00:01:50.460><c> what</c><00:01:50.640><c> well</c><00:01:51.390><c> this</c><00:01:51.720><c> is</c><00:01:51.869><c> the</c><00:01:51.990><c> rule</c><00:01:52.140><c> thing</c><00:01:52.640><c> if</c>

00:01:53.630 --> 00:01:53.640 align:start position:0%
so what well this is the rule thing if
 

00:01:53.640 --> 00:01:55.639 align:start position:0%
so what well this is the rule thing if
you<00:01:53.880><c> know</c><00:01:54.119><c> the</c><00:01:54.420><c> dynamic</c><00:01:54.899><c> type</c><00:01:55.079><c> of</c><00:01:55.290><c> something</c>

00:01:55.639 --> 00:01:55.649 align:start position:0%
you know the dynamic type of something
 

00:01:55.649 --> 00:01:57.530 align:start position:0%
you know the dynamic type of something
then<00:01:56.159><c> you</c><00:01:56.250><c> know</c><00:01:56.460><c> what</c><00:01:56.759><c> happens</c><00:01:57.060><c> with</c><00:01:57.180><c> an</c><00:01:57.299><c> over</c>

00:01:57.530 --> 00:01:57.540 align:start position:0%
then you know what happens with an over
 

00:01:57.540 --> 00:01:59.840 align:start position:0%
then you know what happens with an over
in<00:01:57.689><c> method</c><00:01:58.049><c> so</c><00:01:58.770><c> suppose</c><00:01:59.040><c> we</c><00:01:59.189><c> call</c><00:01:59.310><c> a</c><00:01:59.369><c> method</c><00:01:59.549><c> of</c>

00:01:59.840 --> 00:01:59.850 align:start position:0%
in method so suppose we call a method of
 

00:01:59.850 --> 00:02:03.230 align:start position:0%
in method so suppose we call a method of
an<00:01:59.939><c> object</c><00:02:00.560><c> using</c><00:02:01.560><c> a</c><00:02:02.040><c> variable</c><00:02:02.640><c> which</c><00:02:03.210><c> has</c>

00:02:03.230 --> 00:02:03.240 align:start position:0%
an object using a variable which has
 

00:02:03.240 --> 00:02:06.200 align:start position:0%
an object using a variable which has
compile<00:02:03.899><c> time</c><00:02:04.200><c> type</c><00:02:04.469><c> X</c><00:02:04.740><c> and</c><00:02:05.040><c> runtime</c><00:02:05.729><c> type</c><00:02:06.030><c> Y</c>

00:02:06.200 --> 00:02:06.210 align:start position:0%
compile time type X and runtime type Y
 

00:02:06.210 --> 00:02:08.660 align:start position:0%
compile time type X and runtime type Y
so<00:02:06.810><c> for</c><00:02:06.960><c> example</c><00:02:07.320><c> compile</c><00:02:07.710><c> time</c><00:02:07.979><c> type</c><00:02:08.220><c> list</c>

00:02:08.660 --> 00:02:08.670 align:start position:0%
so for example compile time type list
 

00:02:08.670 --> 00:02:11.750 align:start position:0%
so for example compile time type list
and<00:02:08.970><c> run</c><00:02:09.599><c> time</c><00:02:09.840><c> type</c><00:02:09.869><c> s</c><00:02:10.349><c> list</c><00:02:10.920><c> as</c><00:02:11.129><c> shown</c><00:02:11.190><c> here</c>

00:02:11.750 --> 00:02:11.760 align:start position:0%
and run time type s list as shown here
 

00:02:11.760 --> 00:02:13.940 align:start position:0%
and run time type s list as shown here
then<00:02:12.569><c> if</c><00:02:13.050><c> it</c><00:02:13.260><c> is</c><00:02:13.290><c> the</c><00:02:13.530><c> case</c>

00:02:13.940 --> 00:02:13.950 align:start position:0%
then if it is the case
 

00:02:13.950 --> 00:02:16.550 align:start position:0%
then if it is the case
that<00:02:14.400><c> the</c><00:02:14.670><c> dynamic</c><00:02:15.270><c> type</c><00:02:15.480><c> overrides</c><00:02:16.320><c> the</c>

00:02:16.550 --> 00:02:16.560 align:start position:0%
that the dynamic type overrides the
 

00:02:16.560 --> 00:02:18.740 align:start position:0%
that the dynamic type overrides the
method<00:02:16.890><c> then</c><00:02:17.550><c> the</c><00:02:17.670><c> dynamic</c><00:02:18.150><c> types</c><00:02:18.390><c> method</c>

00:02:18.740 --> 00:02:18.750 align:start position:0%
method then the dynamic types method
 

00:02:18.750 --> 00:02:19.760 align:start position:0%
method then the dynamic types method
will<00:02:18.840><c> be</c><00:02:18.870><c> used</c><00:02:18.990><c> instead</c>

00:02:19.760 --> 00:02:19.770 align:start position:0%
will be used instead
 

00:02:19.770 --> 00:02:21.500 align:start position:0%
will be used instead
and<00:02:19.860><c> that's</c><00:02:20.220><c> something</c><00:02:20.430><c> known</c><00:02:20.760><c> as</c><00:02:20.790><c> dynamic</c>

00:02:21.500 --> 00:02:21.510 align:start position:0%
and that's something known as dynamic
 

00:02:21.510 --> 00:02:23.900 align:start position:0%
and that's something known as dynamic
method<00:02:21.870><c> selection</c><00:02:22.230><c> this</c><00:02:23.220><c> term</c><00:02:23.400><c> is</c><00:02:23.520><c> a</c><00:02:23.550><c> little</c>

00:02:23.900 --> 00:02:23.910 align:start position:0%
method selection this term is a little
 

00:02:23.910 --> 00:02:25.910 align:start position:0%
method selection this term is a little
bit<00:02:24.060><c> obscure</c><00:02:24.570><c> and</c><00:02:24.870><c> it's</c><00:02:25.290><c> not</c><00:02:25.440><c> totally</c>

00:02:25.910 --> 00:02:25.920 align:start position:0%
bit obscure and it's not totally
 

00:02:25.920 --> 00:02:27.410 align:start position:0%
bit obscure and it's not totally
standard<00:02:26.280><c> but</c><00:02:26.520><c> I</c><00:02:26.640><c> don't</c><00:02:26.820><c> really</c><00:02:26.970><c> have</c><00:02:27.180><c> a</c><00:02:27.210><c> great</c>

00:02:27.410 --> 00:02:27.420 align:start position:0%
standard but I don't really have a great
 

00:02:27.420 --> 00:02:29.660 align:start position:0%
standard but I don't really have a great
term<00:02:27.630><c> so</c><00:02:27.900><c> we</c><00:02:27.990><c> use</c><00:02:28.140><c> it</c><00:02:28.290><c> in</c><00:02:28.380><c> our</c><00:02:28.470><c> course</c><00:02:28.710><c> so</c><00:02:29.550><c> in</c>

00:02:29.660 --> 00:02:29.670 align:start position:0%
term so we use it in our course so in
 

00:02:29.670 --> 00:02:31.310 align:start position:0%
term so we use it in our course so in
this<00:02:29.760><c> case</c><00:02:30.000><c> whenever</c><00:02:30.450><c> we</c><00:02:30.720><c> call</c><00:02:30.990><c> something</c>

00:02:31.310 --> 00:02:31.320 align:start position:0%
this case whenever we call something
 

00:02:31.320 --> 00:02:34.100 align:start position:0%
this case whenever we call something
even<00:02:31.830><c> though</c><00:02:31.980><c> we're</c><00:02:32.160><c> using</c><00:02:32.430><c> the</c><00:02:33.030><c> variable</c><00:02:33.570><c> s1</c>

00:02:34.100 --> 00:02:34.110 align:start position:0%
even though we're using the variable s1
 

00:02:34.110 --> 00:02:36.070 align:start position:0%
even though we're using the variable s1
which<00:02:34.560><c> is</c><00:02:34.740><c> this</c><00:02:35.040><c> variable</c><00:02:35.700><c> right</c><00:02:35.820><c> here</c>

00:02:36.070 --> 00:02:36.080 align:start position:0%
which is this variable right here
 

00:02:36.080 --> 00:02:38.690 align:start position:0%
which is this variable right here
because<00:02:37.080><c> of</c><00:02:37.230><c> the</c><00:02:37.320><c> fact</c><00:02:37.590><c> that</c><00:02:37.800><c> the</c><00:02:38.190><c> S</c><00:02:38.400><c> list</c>

00:02:38.690 --> 00:02:38.700 align:start position:0%
because of the fact that the S list
 

00:02:38.700 --> 00:02:40.520 align:start position:0%
because of the fact that the S list
class<00:02:38.910><c> overrides</c><00:02:39.390><c> it</c><00:02:39.540><c> we</c><00:02:39.750><c> use</c><00:02:39.870><c> the</c><00:02:40.050><c> dynamic</c>

00:02:40.520 --> 00:02:40.530 align:start position:0%
class overrides it we use the dynamic
 

00:02:40.530 --> 00:02:42.500 align:start position:0%
class overrides it we use the dynamic
types<00:02:40.800><c> method</c><00:02:41.310><c> instead</c><00:02:41.670><c> that's</c><00:02:42.150><c> what</c><00:02:42.420><c> you</c>

00:02:42.500 --> 00:02:42.510 align:start position:0%
types method instead that's what you
 

00:02:42.510 --> 00:02:44.959 align:start position:0%
types method instead that's what you
need<00:02:42.690><c> to</c><00:02:42.810><c> know</c>

