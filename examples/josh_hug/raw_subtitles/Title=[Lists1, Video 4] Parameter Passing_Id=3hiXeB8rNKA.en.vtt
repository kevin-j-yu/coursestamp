WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.060 align:start position:0%
 
now<00:00:00.780><c> let's</c><00:00:00.989><c> go</c><00:00:01.110><c> a</c><00:00:01.140><c> little</c><00:00:01.230><c> further</c><00:00:01.650><c> than</c><00:00:01.800><c> the</c>

00:00:02.060 --> 00:00:02.070 align:start position:0%
now let's go a little further than the
 

00:00:02.070 --> 00:00:03.470 align:start position:0%
now let's go a little further than the
mystery<00:00:02.340><c> of</c><00:00:02.490><c> the</c><00:00:02.550><c> walrus</c><00:00:02.760><c> and</c><00:00:03.060><c> talk</c><00:00:03.210><c> about</c>

00:00:03.470 --> 00:00:03.480 align:start position:0%
mystery of the walrus and talk about
 

00:00:03.480 --> 00:00:05.120 align:start position:0%
mystery of the walrus and talk about
what<00:00:03.629><c> happens</c><00:00:03.929><c> when</c><00:00:04.049><c> we</c><00:00:04.140><c> pass</c><00:00:04.410><c> parameters</c><00:00:04.740><c> to</c>

00:00:05.120 --> 00:00:05.130 align:start position:0%
what happens when we pass parameters to
 

00:00:05.130 --> 00:00:07.280 align:start position:0%
what happens when we pass parameters to
functions<00:00:05.640><c> so</c><00:00:06.480><c> it</c><00:00:06.569><c> turns</c><00:00:06.750><c> out</c><00:00:06.990><c> that</c><00:00:07.170><c> the</c>

00:00:07.280 --> 00:00:07.290 align:start position:0%
functions so it turns out that the
 

00:00:07.290 --> 00:00:09.290 align:start position:0%
functions so it turns out that the
golden<00:00:07.710><c> rule</c><00:00:07.919><c> of</c><00:00:07.950><c> equals</c><00:00:08.400><c> also</c><00:00:08.940><c> applies</c><00:00:09.269><c> to</c>

00:00:09.290 --> 00:00:09.300 align:start position:0%
golden rule of equals also applies to
 

00:00:09.300 --> 00:00:11.810 align:start position:0%
golden rule of equals also applies to
passing<00:00:10.019><c> of</c><00:00:10.200><c> parameters</c><00:00:10.679><c> in</c><00:00:10.860><c> Java</c><00:00:11.070><c> so</c><00:00:11.759><c> the</c>

00:00:11.810 --> 00:00:11.820 align:start position:0%
passing of parameters in Java so the
 

00:00:11.820 --> 00:00:13.160 align:start position:0%
passing of parameters in Java so the
golden<00:00:12.030><c> rule</c><00:00:12.179><c> of</c><00:00:12.210><c> equals</c><00:00:12.509><c> remember</c><00:00:12.840><c> is</c><00:00:12.929><c> just</c>

00:00:13.160 --> 00:00:13.170 align:start position:0%
golden rule of equals remember is just
 

00:00:13.170 --> 00:00:15.680 align:start position:0%
golden rule of equals remember is just
given<00:00:13.530><c> variables</c><00:00:13.950><c> BN</c><00:00:14.190><c> a</c><00:00:14.340><c> if</c><00:00:14.790><c> we</c><00:00:14.940><c> say</c><00:00:15.120><c> B</c><00:00:15.330><c> equals</c>

00:00:15.680 --> 00:00:15.690 align:start position:0%
given variables BN a if we say B equals
 

00:00:15.690 --> 00:00:19.460 align:start position:0%
given variables BN a if we say B equals
a<00:00:15.839><c> we</c><00:00:16.320><c> copy</c><00:00:16.560><c> all</c><00:00:16.830><c> the</c><00:00:17.010><c> bits</c><00:00:17.190><c> from</c><00:00:17.250><c> a</c><00:00:17.430><c> into</c><00:00:17.880><c> B</c><00:00:18.470><c> so</c>

00:00:19.460 --> 00:00:19.470 align:start position:0%
a we copy all the bits from a into B so
 

00:00:19.470 --> 00:00:20.750 align:start position:0%
a we copy all the bits from a into B so
the<00:00:19.650><c> same</c><00:00:19.859><c> thing</c><00:00:20.100><c> happens</c><00:00:20.400><c> when</c><00:00:20.490><c> you</c><00:00:20.580><c> pass</c>

00:00:20.750 --> 00:00:20.760 align:start position:0%
the same thing happens when you pass
 

00:00:20.760 --> 00:00:23.210 align:start position:0%
the same thing happens when you pass
parameters<00:00:21.060><c> to</c><00:00:21.390><c> a</c><00:00:21.539><c> function</c><00:00:22.100><c> what</c><00:00:23.100><c> you're</c>

00:00:23.210 --> 00:00:23.220 align:start position:0%
parameters to a function what you're
 

00:00:23.220 --> 00:00:26.420 align:start position:0%
parameters to a function what you're
gonna<00:00:23.310><c> do</c><00:00:23.550><c> is</c><00:00:23.789><c> whatever</c><00:00:24.330><c> bits</c><00:00:24.930><c> you</c><00:00:25.500><c> want</c><00:00:26.220><c> to</c>

00:00:26.420 --> 00:00:26.430 align:start position:0%
gonna do is whatever bits you want to
 

00:00:26.430 --> 00:00:28.130 align:start position:0%
gonna do is whatever bits you want to
give<00:00:26.609><c> to</c><00:00:26.730><c> the</c><00:00:26.820><c> function</c><00:00:27.150><c> are</c><00:00:27.330><c> gonna</c><00:00:27.539><c> be</c><00:00:27.720><c> copied</c>

00:00:28.130 --> 00:00:28.140 align:start position:0%
give to the function are gonna be copied
 

00:00:28.140 --> 00:00:30.290 align:start position:0%
give to the function are gonna be copied
to<00:00:28.380><c> the</c><00:00:28.500><c> new</c><00:00:28.529><c> scope</c><00:00:28.949><c> so</c><00:00:29.910><c> let's</c><00:00:30.029><c> see</c><00:00:30.119><c> an</c><00:00:30.210><c> example</c>

00:00:30.290 --> 00:00:30.300 align:start position:0%
to the new scope so let's see an example
 

00:00:30.300 --> 00:00:32.959 align:start position:0%
to the new scope so let's see an example
so<00:00:31.080><c> that</c><00:00:31.260><c> makes</c><00:00:32.009><c> it</c><00:00:32.130><c> clear</c><00:00:32.369><c> what's</c><00:00:32.610><c> going</c><00:00:32.759><c> on</c>

00:00:32.959 --> 00:00:32.969 align:start position:0%
so that makes it clear what's going on
 

00:00:32.969 --> 00:00:35.209 align:start position:0%
so that makes it clear what's going on
so<00:00:33.960><c> here's</c><00:00:34.079><c> a</c><00:00:34.140><c> function</c><00:00:34.230><c> called</c><00:00:34.530><c> average</c><00:00:34.890><c> it's</c>

00:00:35.209 --> 00:00:35.219 align:start position:0%
so here's a function called average it's
 

00:00:35.219 --> 00:00:36.799 align:start position:0%
so here's a function called average it's
not<00:00:35.370><c> very</c><00:00:35.550><c> glamorous</c><00:00:35.670><c> all</c><00:00:36.329><c> it</c><00:00:36.420><c> does</c><00:00:36.540><c> it</c><00:00:36.660><c> take</c><00:00:36.780><c> a</c>

00:00:36.799 --> 00:00:36.809 align:start position:0%
not very glamorous all it does it take a
 

00:00:36.809 --> 00:00:38.660 align:start position:0%
not very glamorous all it does it take a
couple<00:00:37.050><c> of</c><00:00:37.230><c> doubles</c><00:00:37.530><c> and</c><00:00:37.739><c> return</c><00:00:38.070><c> their</c>

00:00:38.660 --> 00:00:38.670 align:start position:0%
couple of doubles and return their
 

00:00:38.670 --> 00:00:41.840 align:start position:0%
couple of doubles and return their
average<00:00:38.969><c> but</c><00:00:39.629><c> we're</c><00:00:39.719><c> gonna</c><00:00:39.809><c> use</c><00:00:40.050><c> this</c><00:00:40.260><c> as</c><00:00:40.850><c> an</c>

00:00:41.840 --> 00:00:41.850 align:start position:0%
average but we're gonna use this as an
 

00:00:41.850 --> 00:00:44.240 align:start position:0%
average but we're gonna use this as an
example<00:00:42.239><c> of</c><00:00:42.329><c> this</c><00:00:42.480><c> rule</c><00:00:42.690><c> so</c><00:00:43.649><c> when</c><00:00:43.739><c> I</c><00:00:43.770><c> run</c><00:00:43.980><c> main</c>

00:00:44.240 --> 00:00:44.250 align:start position:0%
example of this rule so when I run main
 

00:00:44.250 --> 00:00:46.340 align:start position:0%
example of this rule so when I run main
what<00:00:44.640><c> it's</c><00:00:44.760><c> going</c><00:00:44.879><c> to</c><00:00:45.000><c> do</c><00:00:45.180><c> is</c><00:00:45.420><c> first</c><00:00:45.719><c> create</c><00:00:46.140><c> a</c>

00:00:46.340 --> 00:00:46.350 align:start position:0%
what it's going to do is first create a
 

00:00:46.350 --> 00:00:49.220 align:start position:0%
what it's going to do is first create a
double<00:00:46.920><c> variable</c><00:00:47.579><c> that's</c><00:00:47.730><c> 64</c><00:00:48.270><c> bits</c><00:00:48.480><c> and</c><00:00:48.719><c> fill</c>

00:00:49.220 --> 00:00:49.230 align:start position:0%
double variable that's 64 bits and fill
 

00:00:49.230 --> 00:00:52.819 align:start position:0%
double variable that's 64 bits and fill
in<00:00:49.379><c> this</c><00:00:49.500><c> box</c><00:00:49.710><c> here</c><00:00:49.980><c> with</c><00:00:50.160><c> 5.5</c><00:00:50.899><c> then</c><00:00:51.899><c> Y</c><00:00:52.379><c> will</c><00:00:52.440><c> be</c>

00:00:52.819 --> 00:00:52.829 align:start position:0%
in this box here with 5.5 then Y will be
 

00:00:52.829 --> 00:00:55.580 align:start position:0%
in this box here with 5.5 then Y will be
10.5<00:00:53.690><c> and</c><00:00:54.690><c> then</c><00:00:54.809><c> finally</c><00:00:55.140><c> we're</c><00:00:55.260><c> gonna</c><00:00:55.320><c> make</c><00:00:55.559><c> a</c>

00:00:55.580 --> 00:00:55.590 align:start position:0%
10.5 and then finally we're gonna make a
 

00:00:55.590 --> 00:00:57.860 align:start position:0%
10.5 and then finally we're gonna make a
call<00:00:55.920><c> to</c><00:00:56.129><c> the</c><00:00:56.219><c> average</c><00:00:56.489><c> function</c><00:00:56.750><c> so</c><00:00:57.750><c> what</c>

00:00:57.860 --> 00:00:57.870 align:start position:0%
call to the average function so what
 

00:00:57.870 --> 00:00:58.910 align:start position:0%
call to the average function so what
that<00:00:57.960><c> means</c><00:00:58.140><c> is</c><00:00:58.260><c> we're</c><00:00:58.350><c> gonna</c><00:00:58.440><c> take</c><00:00:58.710><c> these</c>

00:00:58.910 --> 00:00:58.920 align:start position:0%
that means is we're gonna take these
 

00:00:58.920 --> 00:01:01.069 align:start position:0%
that means is we're gonna take these
bits<00:00:59.250><c> and</c><00:00:59.430><c> hand</c><00:00:59.760><c> them</c><00:00:59.969><c> over</c><00:01:00.090><c> hand</c><00:01:00.480><c> copies</c><00:01:00.930><c> of</c>

00:01:01.069 --> 00:01:01.079 align:start position:0%
bits and hand them over hand copies of
 

00:01:01.079 --> 00:01:02.779 align:start position:0%
bits and hand them over hand copies of
them<00:01:01.260><c> over</c><00:01:01.680><c> to</c><00:01:01.800><c> the</c><00:01:01.890><c> average</c><00:01:02.219><c> function</c><00:01:02.609><c> and</c>

00:01:02.779 --> 00:01:02.789 align:start position:0%
them over to the average function and
 

00:01:02.789 --> 00:01:05.539 align:start position:0%
them over to the average function and
it's<00:01:03.300><c> going</c><00:01:03.510><c> to</c><00:01:03.600><c> store</c><00:01:03.870><c> them</c><00:01:04.049><c> in</c><00:01:04.199><c> it</c><00:01:04.320><c> it's</c><00:01:04.619><c> news</c>

00:01:05.539 --> 00:01:05.549 align:start position:0%
it's going to store them in it it's news
 

00:01:05.549 --> 00:01:07.820 align:start position:0%
it's going to store them in it it's news
in<00:01:06.119><c> its</c><00:01:06.299><c> own</c><00:01:06.479><c> scope</c><00:01:06.840><c> so</c><00:01:07.350><c> it's</c><00:01:07.500><c> gonna</c><00:01:07.650><c> have</c>

00:01:07.820 --> 00:01:07.830 align:start position:0%
in its own scope so it's gonna have
 

00:01:07.830 --> 00:01:10.609 align:start position:0%
in its own scope so it's gonna have
local<00:01:08.369><c> a</c><00:01:08.549><c> and</c><00:01:09.210><c> B</c><00:01:09.570><c> right</c><00:01:10.110><c> this</c><00:01:10.350><c> is</c><00:01:10.470><c> the</c>

00:01:10.609 --> 00:01:10.619 align:start position:0%
local a and B right this is the
 

00:01:10.619 --> 00:01:12.649 align:start position:0%
local a and B right this is the
parameter<00:01:11.400><c> these</c><00:01:11.790><c> variables</c><00:01:12.330><c> that</c><00:01:12.420><c> are</c>

00:01:12.649 --> 00:01:12.659 align:start position:0%
parameter these variables that are
 

00:01:12.659 --> 00:01:15.050 align:start position:0%
parameter these variables that are
usable<00:01:13.140><c> only</c><00:01:13.409><c> by</c><00:01:13.740><c> average</c><00:01:14.100><c> it's</c><00:01:14.640><c> gonna</c><00:01:14.729><c> copy</c>

00:01:15.050 --> 00:01:15.060 align:start position:0%
usable only by average it's gonna copy
 

00:01:15.060 --> 00:01:17.359 align:start position:0%
usable only by average it's gonna copy
those<00:01:15.360><c> bits</c><00:01:15.600><c> in</c><00:01:15.840><c> okay</c><00:01:16.259><c> so</c><00:01:16.680><c> that's</c><00:01:16.890><c> the</c><00:01:17.100><c> scoop</c>

00:01:17.359 --> 00:01:17.369 align:start position:0%
those bits in okay so that's the scoop
 

00:01:17.369 --> 00:01:19.249 align:start position:0%
those bits in okay so that's the scoop
and<00:01:17.640><c> it's</c><00:01:18.000><c> not</c><00:01:18.119><c> that</c><00:01:18.360><c> there's</c><00:01:18.509><c> some</c><00:01:18.570><c> arrows</c>

00:01:19.249 --> 00:01:19.259 align:start position:0%
and it's not that there's some arrows
 

00:01:19.259 --> 00:01:21.950 align:start position:0%
and it's not that there's some arrows
pointing<00:01:19.710><c> back</c><00:01:19.920><c> instead</c><00:01:20.909><c> what</c><00:01:21.450><c> is</c><00:01:21.570><c> happening</c>

00:01:21.950 --> 00:01:21.960 align:start position:0%
pointing back instead what is happening
 

00:01:21.960 --> 00:01:23.660 align:start position:0%
pointing back instead what is happening
is<00:01:22.049><c> the</c><00:01:22.200><c> actual</c><00:01:22.590><c> bits</c><00:01:22.799><c> are</c><00:01:22.979><c> copied</c><00:01:23.310><c> into</c><00:01:23.460><c> these</c>

00:01:23.660 --> 00:01:23.670 align:start position:0%
is the actual bits are copied into these
 

00:01:23.670 --> 00:01:25.490 align:start position:0%
is the actual bits are copied into these
boxes<00:01:24.150><c> I</c><00:01:24.420><c> know</c><00:01:24.540><c> this</c><00:01:24.689><c> there's</c><00:01:24.840><c> no</c><00:01:24.930><c> like</c><00:01:25.140><c> arrows</c>

00:01:25.490 --> 00:01:25.500 align:start position:0%
boxes I know this there's no like arrows
 

00:01:25.500 --> 00:01:29.060 align:start position:0%
boxes I know this there's no like arrows
pointing<00:01:25.890><c> back</c><00:01:26.360><c> this</c><00:01:27.360><c> idea</c><00:01:27.840><c> of</c><00:01:28.080><c> making</c><00:01:28.770><c> actual</c>

00:01:29.060 --> 00:01:29.070 align:start position:0%
pointing back this idea of making actual
 

00:01:29.070 --> 00:01:30.830 align:start position:0%
pointing back this idea of making actual
copies<00:01:29.520><c> of</c><00:01:29.549><c> the</c><00:01:29.759><c> bits</c><00:01:29.939><c> is</c><00:01:30.180><c> sometimes</c><00:01:30.630><c> called</c>

00:01:30.830 --> 00:01:30.840 align:start position:0%
copies of the bits is sometimes called
 

00:01:30.840 --> 00:01:33.530 align:start position:0%
copies of the bits is sometimes called
pass<00:01:31.200><c> by</c><00:01:31.619><c> value</c><00:01:31.670><c> now</c><00:01:32.670><c> we're</c><00:01:32.850><c> not</c><00:01:32.970><c> really</c><00:01:33.030><c> gonna</c>

00:01:33.530 --> 00:01:33.540 align:start position:0%
pass by value now we're not really gonna
 

00:01:33.540 --> 00:01:35.960 align:start position:0%
pass by value now we're not really gonna
use<00:01:33.780><c> that</c><00:01:34.020><c> term</c><00:01:34.229><c> so</c><00:01:34.470><c> much</c><00:01:34.530><c> in</c><00:01:34.829><c> our</c><00:01:34.920><c> class</c><00:01:35.189><c> but</c>

00:01:35.960 --> 00:01:35.970 align:start position:0%
use that term so much in our class but
 

00:01:35.970 --> 00:01:37.249 align:start position:0%
use that term so much in our class but
it<00:01:36.090><c> might</c><00:01:36.240><c> be</c><00:01:36.329><c> useful</c><00:01:36.479><c> to</c><00:01:36.720><c> you</c><00:01:36.810><c> at</c><00:01:36.900><c> some</c><00:01:37.079><c> job</c>

00:01:37.249 --> 00:01:37.259 align:start position:0%
it might be useful to you at some job
 

00:01:37.259 --> 00:01:39.830 align:start position:0%
it might be useful to you at some job
interview<00:01:37.680><c> but</c><00:01:38.130><c> basically</c><00:01:38.610><c> in</c><00:01:38.820><c> Java</c><00:01:39.090><c> you</c>

00:01:39.830 --> 00:01:39.840 align:start position:0%
interview but basically in Java you
 

00:01:39.840 --> 00:01:42.350 align:start position:0%
interview but basically in Java you
always<00:01:40.439><c> pass</c><00:01:40.829><c> by</c><00:01:41.130><c> value</c><00:01:41.520><c> in</c><00:01:41.729><c> other</c><00:01:41.909><c> words</c><00:01:42.150><c> you</c>

00:01:42.350 --> 00:01:42.360 align:start position:0%
always pass by value in other words you
 

00:01:42.360 --> 00:01:45.590 align:start position:0%
always pass by value in other words you
always<00:01:42.630><c> copy</c><00:01:43.530><c> the</c><00:01:43.979><c> bits</c><00:01:44.329><c> so</c><00:01:45.329><c> let's</c><00:01:45.479><c> see</c><00:01:45.570><c> a</c>

00:01:45.590 --> 00:01:45.600 align:start position:0%
always copy the bits so let's see a
 

00:01:45.600 --> 00:01:47.030 align:start position:0%
always copy the bits so let's see a
little<00:01:45.689><c> summary</c><00:01:46.170><c> of</c><00:01:46.320><c> what</c><00:01:46.439><c> we've</c><00:01:46.560><c> learned</c><00:01:46.770><c> so</c>

00:01:47.030 --> 00:01:47.040 align:start position:0%
little summary of what we've learned so
 

00:01:47.040 --> 00:01:47.300 align:start position:0%
little summary of what we've learned so
far

00:01:47.300 --> 00:01:47.310 align:start position:0%
far
 

00:01:47.310 --> 00:01:48.620 align:start position:0%
far
and<00:01:47.490><c> then</c><00:01:47.850><c> I'm</c><00:01:47.939><c> going</c><00:01:48.060><c> to</c><00:01:48.119><c> give</c><00:01:48.240><c> you</c><00:01:48.329><c> guys</c><00:01:48.479><c> the</c>

00:01:48.620 --> 00:01:48.630 align:start position:0%
and then I'm going to give you guys the
 

00:01:48.630 --> 00:01:50.030 align:start position:0%
and then I'm going to give you guys the
challenge<00:01:49.049><c> to</c><00:01:49.200><c> make</c><00:01:49.350><c> sure</c><00:01:49.500><c> this</c><00:01:49.680><c> all</c><00:01:49.799><c> makes</c>

00:01:50.030 --> 00:01:50.040 align:start position:0%
challenge to make sure this all makes
 

00:01:50.040 --> 00:01:50.560 align:start position:0%
challenge to make sure this all makes
sense

00:01:50.560 --> 00:01:50.570 align:start position:0%
sense
 

00:01:50.570 --> 00:01:53.420 align:start position:0%
sense
so<00:01:51.570><c> to</c><00:01:52.140><c> summarize</c><00:01:52.500><c> everything</c><00:01:52.770><c> we've</c><00:01:53.040><c> got</c><00:01:53.189><c> so</c>

00:01:53.420 --> 00:01:53.430 align:start position:0%
so to summarize everything we've got so
 

00:01:53.430 --> 00:01:53.660 align:start position:0%
so to summarize everything we've got so
far

00:01:53.660 --> 00:01:53.670 align:start position:0%
far
 

00:01:53.670 --> 00:01:55.639 align:start position:0%
far
there<00:01:54.360><c> are</c><00:01:54.450><c> nine</c><00:01:54.659><c> types</c><00:01:54.899><c> of</c><00:01:55.110><c> variables</c><00:01:55.530><c> in</c>

00:01:55.639 --> 00:01:55.649 align:start position:0%
there are nine types of variables in
 

00:01:55.649 --> 00:01:57.620 align:start position:0%
there are nine types of variables in
Java<00:01:56.159><c> first</c><00:01:56.460><c> there</c><00:01:56.759><c> are</c><00:01:56.790><c> eight</c><00:01:57.090><c> primitive</c>

00:01:57.620 --> 00:01:57.630 align:start position:0%
Java first there are eight primitive
 

00:01:57.630 --> 00:02:00.920 align:start position:0%
Java first there are eight primitive
types<00:01:58.009><c> and</c><00:01:59.009><c> then</c><00:01:59.130><c> we</c><00:01:59.219><c> have</c><00:01:59.340><c> a</c><00:01:59.369><c> ninth</c><00:01:59.700><c> type</c><00:02:00.570><c> or</c>

00:02:00.920 --> 00:02:00.930 align:start position:0%
types and then we have a ninth type or
 

00:02:00.930 --> 00:02:03.679 align:start position:0%
types and then we have a ninth type or
just<00:02:01.259><c> a</c><00:02:01.729><c> set</c><00:02:02.729><c> of</c><00:02:02.759><c> types</c><00:02:03.090><c> you</c><00:02:03.270><c> guess</c><00:02:03.420><c> you</c><00:02:03.570><c> can</c>

00:02:03.679 --> 00:02:03.689 align:start position:0%
just a set of types you guess you can
 

00:02:03.689 --> 00:02:06.859 align:start position:0%
just a set of types you guess you can
say<00:02:03.899><c> which</c><00:02:04.649><c> is</c><00:02:04.939><c> references</c><00:02:05.939><c> to</c><00:02:06.180><c> objects</c><00:02:06.600><c> which</c>

00:02:06.859 --> 00:02:06.869 align:start position:0%
say which is references to objects which
 

00:02:06.869 --> 00:02:08.449 align:start position:0%
say which is references to objects which
could<00:02:07.079><c> be</c><00:02:07.200><c> planets</c><00:02:07.649><c> arrays</c>

00:02:08.449 --> 00:02:08.459 align:start position:0%
could be planets arrays
 

00:02:08.459 --> 00:02:10.330 align:start position:0%
could be planets arrays
walruses<00:02:09.000><c> whatever</c>

00:02:10.330 --> 00:02:10.340 align:start position:0%
walruses whatever
 

00:02:10.340 --> 00:02:12.190 align:start position:0%
walruses whatever
and<00:02:10.640><c> those</c><00:02:10.970><c> references</c><00:02:11.570><c> we're</c><00:02:12.020><c> going</c><00:02:12.140><c> to</c>

00:02:12.190 --> 00:02:12.200 align:start position:0%
and those references we're going to
 

00:02:12.200 --> 00:02:13.810 align:start position:0%
and those references we're going to
think<00:02:12.410><c> of</c><00:02:12.500><c> them</c><00:02:12.620><c> as</c><00:02:12.740><c> arrows</c><00:02:13.100><c> but</c><00:02:13.550><c> they</c><00:02:13.700><c> may</c>

00:02:13.810 --> 00:02:13.820 align:start position:0%
think of them as arrows but they may
 

00:02:13.820 --> 00:02:17.350 align:start position:0%
think of them as arrows but they may
also<00:02:13.850><c> be</c><00:02:14.210><c> known</c><00:02:15.130><c> so</c><00:02:16.130><c> in</c><00:02:16.250><c> this</c><00:02:16.370><c> box</c><00:02:16.730><c> and</c><00:02:17.000><c> pointer</c>

00:02:17.350 --> 00:02:17.360 align:start position:0%
also be known so in this box and pointer
 

00:02:17.360 --> 00:02:18.880 align:start position:0%
also be known so in this box and pointer
notation<00:02:17.540><c> we're</c><00:02:18.020><c> going</c><00:02:18.140><c> to</c><00:02:18.200><c> use</c><00:02:18.410><c> for</c><00:02:18.740><c> the</c><00:02:18.830><c> rest</c>

00:02:18.880 --> 00:02:18.890 align:start position:0%
notation we're going to use for the rest
 

00:02:18.890 --> 00:02:20.500 align:start position:0%
notation we're going to use for the rest
of<00:02:19.250><c> the</c><00:02:19.370><c> class</c><00:02:19.580><c> and</c><00:02:19.610><c> especially</c><00:02:20.180><c> with</c>

00:02:20.500 --> 00:02:20.510 align:start position:0%
of the class and especially with
 

00:02:20.510 --> 00:02:22.630 align:start position:0%
of the class and especially with
understanding<00:02:21.050><c> our</c><00:02:21.200><c> data</c><00:02:21.380><c> structures</c><00:02:21.830><c> each</c>

00:02:22.630 --> 00:02:22.640 align:start position:0%
understanding our data structures each
 

00:02:22.640 --> 00:02:24.970 align:start position:0%
understanding our data structures each
variable<00:02:23.150><c> here</c><00:02:23.540><c> right</c><00:02:23.960><c> here</c><00:02:24.170><c> is</c><00:02:24.380><c> going</c><00:02:24.770><c> to</c><00:02:24.830><c> be</c>

00:02:24.970 --> 00:02:24.980 align:start position:0%
variable here right here is going to be
 

00:02:24.980 --> 00:02:26.890 align:start position:0%
variable here right here is going to be
drawn<00:02:25.190><c> as</c><00:02:25.340><c> a</c><00:02:25.370><c> box</c><00:02:25.640><c> so</c><00:02:26.090><c> and</c><00:02:26.450><c> it's</c><00:02:26.570><c> gonna</c><00:02:26.690><c> have</c><00:02:26.870><c> a</c>

00:02:26.890 --> 00:02:26.900 align:start position:0%
drawn as a box so and it's gonna have a
 

00:02:26.900 --> 00:02:28.870 align:start position:0%
drawn as a box so and it's gonna have a
label<00:02:27.110><c> so</c><00:02:27.410><c> here's</c><00:02:27.560><c> a</c><00:02:27.620><c> box</c><00:02:27.860><c> labeled</c><00:02:28.070><c> a</c><00:02:28.400><c> a</c><00:02:28.610><c> box</c>

00:02:28.870 --> 00:02:28.880 align:start position:0%
label so here's a box labeled a a box
 

00:02:28.880 --> 00:02:31.120 align:start position:0%
label so here's a box labeled a a box
labeled<00:02:29.060><c> B</c><00:02:29.390><c> a</c><00:02:29.570><c> box</c><00:02:30.050><c> labeled</c><00:02:30.230><c> X</c><00:02:30.530><c> and</c><00:02:30.770><c> so</c><00:02:30.860><c> forth</c>

00:02:31.120 --> 00:02:31.130 align:start position:0%
labeled B a box labeled X and so forth
 

00:02:31.130 --> 00:02:32.980 align:start position:0%
labeled B a box labeled X and so forth
so<00:02:31.520><c> every</c><00:02:31.880><c> variable</c><00:02:32.270><c> is</c><00:02:32.420><c> gonna</c><00:02:32.600><c> have</c><00:02:32.750><c> a</c><00:02:32.780><c> little</c>

00:02:32.980 --> 00:02:32.990 align:start position:0%
so every variable is gonna have a little
 

00:02:32.990 --> 00:02:35.830 align:start position:0%
so every variable is gonna have a little
box<00:02:33.290><c> and</c><00:02:33.590><c> we're</c><00:02:34.100><c> gonna</c><00:02:34.190><c> show</c><00:02:34.430><c> the</c><00:02:34.610><c> values</c><00:02:35.120><c> for</c>

00:02:35.830 --> 00:02:35.840 align:start position:0%
box and we're gonna show the values for
 

00:02:35.840 --> 00:02:38.770 align:start position:0%
box and we're gonna show the values for
that<00:02:35.930><c> variable</c><00:02:36.670><c> are</c><00:02:37.670><c> gonna</c><00:02:37.760><c> be</c><00:02:37.940><c> shown</c><00:02:38.150><c> in</c><00:02:38.420><c> that</c>

00:02:38.770 --> 00:02:38.780 align:start position:0%
that variable are gonna be shown in that
 

00:02:38.780 --> 00:02:41.230 align:start position:0%
that variable are gonna be shown in that
box<00:02:39.130><c> now</c><00:02:40.130><c> rather</c><00:02:40.340><c> than</c><00:02:40.580><c> show</c><00:02:40.820><c> a</c><00:02:40.850><c> bunch</c><00:02:41.060><c> of</c>

00:02:41.230 --> 00:02:41.240 align:start position:0%
box now rather than show a bunch of
 

00:02:41.240 --> 00:02:43.030 align:start position:0%
box now rather than show a bunch of
binary<00:02:41.420><c> digits</c><00:02:41.810><c> we're</c><00:02:42.380><c> gonna</c><00:02:42.500><c> write</c><00:02:42.740><c> them</c><00:02:42.920><c> in</c>

00:02:43.030 --> 00:02:43.040 align:start position:0%
binary digits we're gonna write them in
 

00:02:43.040 --> 00:02:44.800 align:start position:0%
binary digits we're gonna write them in
human<00:02:43.310><c> readable</c><00:02:43.640><c> format</c><00:02:43.970><c> for</c><00:02:44.630><c> primitive</c>

00:02:44.800 --> 00:02:44.810 align:start position:0%
human readable format for primitive
 

00:02:44.810 --> 00:02:46.600 align:start position:0%
human readable format for primitive
types<00:02:45.020><c> that</c><00:02:45.470><c> means</c><00:02:45.650><c> writing</c><00:02:45.950><c> things</c><00:02:46.130><c> like</c><00:02:46.220><c> 5</c>

00:02:46.600 --> 00:02:46.610 align:start position:0%
types that means writing things like 5
 

00:02:46.610 --> 00:02:49.840 align:start position:0%
types that means writing things like 5
or<00:02:46.940><c> 3.5</c><00:02:47.690><c> or</c><00:02:48.020><c> a</c><00:02:48.230><c> and</c><00:02:48.560><c> for</c><00:02:49.220><c> reference</c><00:02:49.370><c> types</c>

00:02:49.840 --> 00:02:49.850 align:start position:0%
or 3.5 or a and for reference types
 

00:02:49.850 --> 00:02:51.730 align:start position:0%
or 3.5 or a and for reference types
instead<00:02:50.390><c> of</c><00:02:50.480><c> writing</c><00:02:50.660><c> out</c><00:02:50.840><c> a</c><00:02:50.900><c> binary</c><00:02:51.140><c> address</c>

00:02:51.730 --> 00:02:51.740 align:start position:0%
instead of writing out a binary address
 

00:02:51.740 --> 00:02:53.950 align:start position:0%
instead of writing out a binary address
we're<00:02:52.010><c> gonna</c><00:02:52.100><c> represent</c><00:02:52.490><c> it</c><00:02:52.760><c> by</c><00:02:52.790><c> arrows</c><00:02:53.450><c> which</c>

00:02:53.950 --> 00:02:53.960 align:start position:0%
we're gonna represent it by arrows which
 

00:02:53.960 --> 00:02:55.930 align:start position:0%
we're gonna represent it by arrows which
are<00:02:54.110><c> going</c><00:02:54.230><c> to</c><00:02:54.350><c> point</c><00:02:54.530><c> at</c><00:02:54.770><c> specific</c><00:02:55.310><c> instances</c>

00:02:55.930 --> 00:02:55.940 align:start position:0%
are going to point at specific instances
 

00:02:55.940 --> 00:02:58.510 align:start position:0%
are going to point at specific instances
and<00:02:56.210><c> the</c><00:02:57.170><c> Golden</c><00:02:57.560><c> Rule</c><00:02:57.740><c> in</c><00:02:58.010><c> terms</c><00:02:58.370><c> of</c>

00:02:58.510 --> 00:02:58.520 align:start position:0%
and the Golden Rule in terms of
 

00:02:58.520 --> 00:03:01.440 align:start position:0%
and the Golden Rule in terms of
understanding<00:02:58.730><c> how</c><00:02:59.660><c> the</c><00:03:00.350><c> equals</c><00:03:00.830><c> operator</c>

00:03:01.440 --> 00:03:01.450 align:start position:0%
understanding how the equals operator
 

00:03:01.450 --> 00:03:04.170 align:start position:0%
understanding how the equals operator
works<00:03:02.450><c> in</c><00:03:02.630><c> Java</c><00:03:02.810><c> and</c><00:03:03.050><c> how</c><00:03:03.110><c> a</c><00:03:03.170><c> function</c>

00:03:04.170 --> 00:03:04.180 align:start position:0%
works in Java and how a function
 

00:03:04.180 --> 00:03:06.880 align:start position:0%
works in Java and how a function
parameters<00:03:05.180><c> are</c><00:03:05.300><c> passed</c><00:03:05.330><c> is</c><00:03:05.720><c> simple</c><00:03:06.290><c> when</c><00:03:06.770><c> you</c>

00:03:06.880 --> 00:03:06.890 align:start position:0%
parameters are passed is simple when you
 

00:03:06.890 --> 00:03:08.470 align:start position:0%
parameters are passed is simple when you
say<00:03:07.040><c> B</c><00:03:07.250><c> equals</c><00:03:07.550><c> a</c><00:03:07.640><c> you're</c><00:03:07.850><c> gonna</c><00:03:07.970><c> copy</c><00:03:08.270><c> the</c>

00:03:08.470 --> 00:03:08.480 align:start position:0%
say B equals a you're gonna copy the
 

00:03:08.480 --> 00:03:10.720 align:start position:0%
say B equals a you're gonna copy the
bits<00:03:08.690><c> whenever</c><00:03:09.650><c> you</c><00:03:09.740><c> pass</c><00:03:09.890><c> parameters</c><00:03:10.460><c> you're</c>

00:03:10.720 --> 00:03:10.730 align:start position:0%
bits whenever you pass parameters you're
 

00:03:10.730 --> 00:03:14.380 align:start position:0%
bits whenever you pass parameters you're
gonna<00:03:10.850><c> copy</c><00:03:11.120><c> the</c><00:03:11.360><c> bits</c><00:03:11.540><c> that's</c><00:03:12.110><c> it</c>

