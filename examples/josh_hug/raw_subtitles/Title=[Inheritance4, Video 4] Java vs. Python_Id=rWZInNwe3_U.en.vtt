WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.119 align:start position:0%
 
okay<00:00:00.359><c> so</c><00:00:00.960><c> the</c><00:00:01.079><c> Python</c><00:00:01.410><c> version</c><00:00:01.469><c> is</c><00:00:01.890><c> clearly</c>

00:00:02.119 --> 00:00:02.129 align:start position:0%
okay so the Python version is clearly
 

00:00:02.129 --> 00:00:03.470 align:start position:0%
okay so the Python version is clearly
more<00:00:02.370><c> concise</c><00:00:02.760><c> so</c><00:00:02.939><c> I</c><00:00:02.970><c> want</c><00:00:03.120><c> to</c><00:00:03.179><c> do</c><00:00:03.270><c> a</c><00:00:03.300><c> little</c>

00:00:03.470 --> 00:00:03.480 align:start position:0%
more concise so I want to do a little
 

00:00:03.480 --> 00:00:04.970 align:start position:0%
more concise so I want to do a little
compare<00:00:03.870><c> and</c><00:00:03.959><c> contrast</c><00:00:04.020><c> between</c><00:00:04.470><c> Java</c><00:00:04.859><c> on</c>

00:00:04.970 --> 00:00:04.980 align:start position:0%
compare and contrast between Java on
 

00:00:04.980 --> 00:00:07.190 align:start position:0%
compare and contrast between Java on
Python<00:00:05.370><c> here</c><00:00:05.549><c> yes</c><00:00:05.850><c> so</c><00:00:06.690><c> in</c><00:00:06.779><c> every</c><00:00:07.020><c> language</c>

00:00:07.190 --> 00:00:07.200 align:start position:0%
Python here yes so in every language
 

00:00:07.200 --> 00:00:08.600 align:start position:0%
Python here yes so in every language
there<00:00:07.620><c> are</c><00:00:07.649><c> always</c><00:00:07.980><c> going</c><00:00:08.160><c> to</c><00:00:08.220><c> be</c><00:00:08.280><c> some</c>

00:00:08.600 --> 00:00:08.610 align:start position:0%
there are always going to be some
 

00:00:08.610 --> 00:00:10.820 align:start position:0%
there are always going to be some
features<00:00:09.120><c> that</c><00:00:09.150><c> are</c><00:00:09.330><c> first-class</c><00:00:09.840><c> citizens</c>

00:00:10.820 --> 00:00:10.830 align:start position:0%
features that are first-class citizens
 

00:00:10.830 --> 00:00:12.620 align:start position:0%
features that are first-class citizens
things<00:00:11.040><c> that</c><00:00:11.219><c> are</c><00:00:11.340><c> considered</c><00:00:11.940><c> integral</c><00:00:12.300><c> to</c>

00:00:12.620 --> 00:00:12.630 align:start position:0%
things that are considered integral to
 

00:00:12.630 --> 00:00:13.850 align:start position:0%
things that are considered integral to
the<00:00:12.750><c> language</c><00:00:12.990><c> things</c><00:00:13.380><c> that</c><00:00:13.530><c> are</c><00:00:13.620><c> supposed</c><00:00:13.830><c> to</c>

00:00:13.850 --> 00:00:13.860 align:start position:0%
the language things that are supposed to
 

00:00:13.860 --> 00:00:15.289 align:start position:0%
the language things that are supposed to
really<00:00:14.099><c> shape</c><00:00:14.340><c> the</c><00:00:14.519><c> way</c><00:00:14.610><c> you</c><00:00:14.670><c> think</c><00:00:14.940><c> about</c><00:00:15.089><c> how</c>

00:00:15.289 --> 00:00:15.299 align:start position:0%
really shape the way you think about how
 

00:00:15.299 --> 00:00:17.269 align:start position:0%
really shape the way you think about how
to<00:00:15.330><c> solve</c><00:00:15.540><c> problems</c><00:00:16.020><c> in</c><00:00:16.139><c> that</c><00:00:16.199><c> language</c><00:00:16.440><c> and</c>

00:00:17.269 --> 00:00:17.279 align:start position:0%
to solve problems in that language and
 

00:00:17.279 --> 00:00:20.330 align:start position:0%
to solve problems in that language and
when<00:00:18.180><c> it</c><00:00:18.270><c> comes</c><00:00:18.330><c> to</c><00:00:18.539><c> data</c><00:00:18.720><c> structures</c><00:00:19.340><c> the</c>

00:00:20.330 --> 00:00:20.340 align:start position:0%
when it comes to data structures the
 

00:00:20.340 --> 00:00:22.220 align:start position:0%
when it comes to data structures the
language<00:00:20.699><c> features</c><00:00:21.330><c> that</c><00:00:21.570><c> are</c><00:00:21.779><c> first</c>

00:00:22.220 --> 00:00:22.230 align:start position:0%
language features that are first
 

00:00:22.230 --> 00:00:23.540 align:start position:0%
language features that are first
classify<00:00:22.650><c> the</c><00:00:22.710><c> data</c><00:00:22.980><c> structures</c><00:00:23.340><c> that</c><00:00:23.369><c> are</c>

00:00:23.540 --> 00:00:23.550 align:start position:0%
classify the data structures that are
 

00:00:23.550 --> 00:00:25.040 align:start position:0%
classify the data structures that are
first<00:00:23.760><c> class</c><00:00:23.850><c> there's</c><00:00:24.300><c> often</c><00:00:24.660><c> a</c><00:00:24.720><c> special</c>

00:00:25.040 --> 00:00:25.050 align:start position:0%
first class there's often a special
 

00:00:25.050 --> 00:00:27.589 align:start position:0%
first class there's often a special
syntax<00:00:25.260><c> for</c><00:00:25.650><c> creating</c><00:00:25.680><c> using</c><00:00:26.640><c> those</c><00:00:27.060><c> types</c><00:00:27.390><c> of</c>

00:00:27.589 --> 00:00:27.599 align:start position:0%
syntax for creating using those types of
 

00:00:27.599 --> 00:00:29.960 align:start position:0%
syntax for creating using those types of
objects<00:00:28.170><c> so</c><00:00:28.949><c> it</c><00:00:29.250><c> actually</c><00:00:29.400><c> gets</c><00:00:29.640><c> even</c><00:00:29.789><c> a</c>

00:00:29.960 --> 00:00:29.970 align:start position:0%
objects so it actually gets even a
 

00:00:29.970 --> 00:00:31.339 align:start position:0%
objects so it actually gets even a
little<00:00:30.090><c> more</c><00:00:30.210><c> messy</c><00:00:30.510><c> and</c><00:00:30.630><c> you</c><00:00:30.779><c> will</c><00:00:30.960><c> see</c><00:00:31.170><c> this</c>

00:00:31.339 --> 00:00:31.349 align:start position:0%
little more messy and you will see this
 

00:00:31.349 --> 00:00:33.530 align:start position:0%
little more messy and you will see this
definitely<00:00:31.830><c> on</c><00:00:32.009><c> your</c><00:00:32.040><c> project</c><00:00:32.550><c> which</c><00:00:33.360><c> is</c>

00:00:33.530 --> 00:00:33.540 align:start position:0%
definitely on your project which is
 

00:00:33.540 --> 00:00:35.720 align:start position:0%
definitely on your project which is
where<00:00:33.750><c> suppose</c><00:00:34.500><c> in</c><00:00:34.800><c> Python</c><00:00:35.190><c> you</c><00:00:35.340><c> want</c><00:00:35.489><c> to</c><00:00:35.579><c> make</c>

00:00:35.720 --> 00:00:35.730 align:start position:0%
where suppose in Python you want to make
 

00:00:35.730 --> 00:00:38.209 align:start position:0%
where suppose in Python you want to make
a<00:00:35.880><c> dictionary</c><00:00:36.480><c> that</c><00:00:36.899><c> tells</c><00:00:37.230><c> you</c><00:00:37.410><c> how</c><00:00:38.160><c> many</c>

00:00:38.209 --> 00:00:38.219 align:start position:0%
a dictionary that tells you how many
 

00:00:38.219 --> 00:00:40.340 align:start position:0%
a dictionary that tells you how many
legs<00:00:38.610><c> different</c><00:00:38.879><c> creatures</c><00:00:39.390><c> have</c><00:00:39.600><c> so</c><00:00:40.260><c> in</c>

00:00:40.340 --> 00:00:40.350 align:start position:0%
legs different creatures have so in
 

00:00:40.350 --> 00:00:41.840 align:start position:0%
legs different creatures have so in
Python<00:00:40.649><c> you</c><00:00:40.680><c> can</c><00:00:40.890><c> do</c><00:00:40.980><c> that</c><00:00:41.129><c> in</c><00:00:41.250><c> a</c><00:00:41.280><c> line</c><00:00:41.489><c> and</c><00:00:41.730><c> say</c>

00:00:41.840 --> 00:00:41.850 align:start position:0%
Python you can do that in a line and say
 

00:00:41.850 --> 00:00:43.580 align:start position:0%
Python you can do that in a line and say
num<00:00:42.059><c> legs</c><00:00:42.270><c> equals</c><00:00:42.510><c> well</c><00:00:42.899><c> horses</c><00:00:43.260><c> have</c><00:00:43.410><c> four</c>

00:00:43.580 --> 00:00:43.590 align:start position:0%
num legs equals well horses have four
 

00:00:43.590 --> 00:00:45.590 align:start position:0%
num legs equals well horses have four
legs<00:00:43.800><c> dog</c><00:00:44.070><c> stuff</c><00:00:44.340><c> for</c><00:00:44.550><c> humans</c><00:00:44.879><c> f2</c><00:00:45.180><c> fish</c><00:00:45.420><c> of</c>

00:00:45.590 --> 00:00:45.600 align:start position:0%
legs dog stuff for humans f2 fish of
 

00:00:45.600 --> 00:00:47.720 align:start position:0%
legs dog stuff for humans f2 fish of
zero<00:00:45.899><c> but</c><00:00:46.530><c> in</c><00:00:46.620><c> Java</c><00:00:46.860><c> if</c><00:00:47.070><c> you</c><00:00:47.160><c> wanted</c><00:00:47.370><c> to</c><00:00:47.460><c> create</c>

00:00:47.720 --> 00:00:47.730 align:start position:0%
zero but in Java if you wanted to create
 

00:00:47.730 --> 00:00:49.069 align:start position:0%
zero but in Java if you wanted to create
this<00:00:47.940><c> collection</c><00:00:48.300><c> you</c><00:00:48.629><c> would</c><00:00:48.750><c> need</c><00:00:48.840><c> to</c><00:00:48.960><c> do</c>

00:00:49.069 --> 00:00:49.079 align:start position:0%
this collection you would need to do
 

00:00:49.079 --> 00:00:51.110 align:start position:0%
this collection you would need to do
something<00:00:49.440><c> like</c><00:00:49.590><c> this</c><00:00:49.800><c> right</c><00:00:50.280><c> you</c><00:00:50.850><c> can</c><00:00:50.910><c> write</c>

00:00:51.110 --> 00:00:51.120 align:start position:0%
something like this right you can write
 

00:00:51.120 --> 00:00:52.430 align:start position:0%
something like this right you can write
a<00:00:51.149><c> helper</c><00:00:51.510><c> method</c><00:00:51.539><c> that</c><00:00:51.960><c> might</c><00:00:52.079><c> shorten</c>

00:00:52.430 --> 00:00:52.440 align:start position:0%
a helper method that might shorten
 

00:00:52.440 --> 00:00:54.500 align:start position:0%
a helper method that might shorten
things<00:00:52.649><c> but</c><00:00:53.129><c> the</c><00:00:53.250><c> default</c><00:00:53.399><c> way</c><00:00:53.760><c> is</c><00:00:53.940><c> you</c><00:00:54.390><c> would</c>

00:00:54.500 --> 00:00:54.510 align:start position:0%
things but the default way is you would
 

00:00:54.510 --> 00:00:57.410 align:start position:0%
things but the default way is you would
need<00:00:54.629><c> to</c><00:00:54.870><c> create</c><00:00:55.739><c> a</c><00:00:56.129><c> map</c><00:00:56.579><c> and</c><00:00:56.820><c> then</c><00:00:57.180><c> you</c><00:00:57.239><c> need</c>

00:00:57.410 --> 00:00:57.420 align:start position:0%
need to create a map and then you need
 

00:00:57.420 --> 00:00:59.959 align:start position:0%
need to create a map and then you need
to<00:00:57.449><c> put</c><00:00:57.690><c> each</c><00:00:57.899><c> thing</c><00:00:58.170><c> one</c><00:00:58.350><c> at</c><00:00:58.440><c> a</c><00:00:58.500><c> time</c><00:00:58.739><c> yes</c><00:00:59.100><c> so</c>

00:00:59.959 --> 00:00:59.969 align:start position:0%
to put each thing one at a time yes so
 

00:00:59.969 --> 00:01:01.580 align:start position:0%
to put each thing one at a time yes so
you<00:01:00.030><c> is</c><00:01:00.329><c> just</c><00:01:00.480><c> a</c><00:01:00.600><c> feature</c><00:01:00.780><c> of</c><00:01:00.989><c> Java</c><00:01:01.199><c> you</c><00:01:01.379><c> don't</c>

00:01:01.580 --> 00:01:01.590 align:start position:0%
you is just a feature of Java you don't
 

00:01:01.590 --> 00:01:03.439 align:start position:0%
you is just a feature of Java you don't
have<00:01:01.739><c> dictionaries</c><00:01:02.309><c> or</c><00:01:02.550><c> associative</c><00:01:03.180><c> arrays</c>

00:01:03.439 --> 00:01:03.449 align:start position:0%
have dictionaries or associative arrays
 

00:01:03.449 --> 00:01:04.850 align:start position:0%
have dictionaries or associative arrays
or<00:01:03.629><c> what</c><00:01:03.750><c> we</c><00:01:03.809><c> want</c><00:01:03.989><c> to</c><00:01:04.049><c> call</c><00:01:04.199><c> them</c><00:01:04.350><c> as</c><00:01:04.470><c> tip</c><00:01:04.710><c> your</c>

00:01:04.850 --> 00:01:04.860 align:start position:0%
or what we want to call them as tip your
 

00:01:04.860 --> 00:01:07.160 align:start position:0%
or what we want to call them as tip your
fingers<00:01:05.220><c> and</c><00:01:06.119><c> there</c><00:01:06.510><c> wasn't</c><00:01:06.750><c> actually</c><00:01:06.810><c> some</c>

00:01:07.160 --> 00:01:07.170 align:start position:0%
fingers and there wasn't actually some
 

00:01:07.170 --> 00:01:09.260 align:start position:0%
fingers and there wasn't actually some
debate<00:01:07.500><c> about</c><00:01:07.710><c> introducing</c><00:01:08.520><c> something</c><00:01:09.000><c> like</c>

00:01:09.260 --> 00:01:09.270 align:start position:0%
debate about introducing something like
 

00:01:09.270 --> 00:01:10.760 align:start position:0%
debate about introducing something like
this<00:01:09.420><c> into</c><00:01:09.720><c> Java</c><00:01:09.960><c> so</c><00:01:10.380><c> that</c><00:01:10.560><c> was</c><00:01:10.650><c> ultimately</c>

00:01:10.760 --> 00:01:10.770 align:start position:0%
this into Java so that was ultimately
 

00:01:10.770 --> 00:01:13.010 align:start position:0%
this into Java so that was ultimately
canceled<00:01:11.549><c> two</c><00:01:11.700><c> years</c><00:01:11.939><c> three</c><00:01:12.390><c> two</c><00:01:12.750><c> and</c><00:01:12.900><c> a</c><00:01:12.930><c> half</c>

00:01:13.010 --> 00:01:13.020 align:start position:0%
canceled two years three two and a half
 

00:01:13.020 --> 00:01:13.880 align:start position:0%
canceled two years three two and a half
years<00:01:13.260><c> ago</c>

00:01:13.880 --> 00:01:13.890 align:start position:0%
years ago
 

00:01:13.890 --> 00:01:15.980 align:start position:0%
years ago
maybe<00:01:14.340><c> it'll</c><00:01:14.549><c> return</c><00:01:14.850><c> someday</c><00:01:15.360><c> but</c><00:01:15.869><c> they</c>

00:01:15.980 --> 00:01:15.990 align:start position:0%
maybe it'll return someday but they
 

00:01:15.990 --> 00:01:17.960 align:start position:0%
maybe it'll return someday but they
found<00:01:16.200><c> it</c><00:01:16.320><c> was</c><00:01:16.409><c> too</c><00:01:16.590><c> messy</c><00:01:16.770><c> because</c><00:01:17.430><c> in</c><00:01:17.729><c> Java</c>

00:01:17.960 --> 00:01:17.970 align:start position:0%
found it was too messy because in Java
 

00:01:17.970 --> 00:01:19.940 align:start position:0%
found it was too messy because in Java
the<00:01:18.210><c> thing</c><00:01:18.390><c> was</c><00:01:18.570><c> it's</c><00:01:18.840><c> not</c><00:01:19.229><c> just</c><00:01:19.500><c> collections</c>

00:01:19.940 --> 00:01:19.950 align:start position:0%
the thing was it's not just collections
 

00:01:19.950 --> 00:01:22.580 align:start position:0%
the thing was it's not just collections
insects<00:01:20.430><c> it's</c><00:01:20.939><c> not</c><00:01:21.030><c> just</c><00:01:21.240><c> list</c><00:01:21.450><c> sets</c><00:01:21.840><c> and</c><00:01:22.110><c> maps</c>

00:01:22.580 --> 00:01:22.590 align:start position:0%
insects it's not just list sets and maps
 

00:01:22.590 --> 00:01:24.170 align:start position:0%
insects it's not just list sets and maps
there's<00:01:22.890><c> other</c><00:01:23.009><c> things</c><00:01:23.250><c> that</c><00:01:23.400><c> people</c><00:01:23.430><c> use</c><00:01:23.880><c> and</c>

00:01:24.170 --> 00:01:24.180 align:start position:0%
there's other things that people use and
 

00:01:24.180 --> 00:01:25.760 align:start position:0%
there's other things that people use and
so<00:01:24.479><c> they</c><00:01:24.570><c> wanted</c><00:01:24.780><c> to</c><00:01:24.840><c> forget</c><00:01:25.110><c> is</c><00:01:25.320><c> there</c><00:01:25.530><c> some</c>

00:01:25.760 --> 00:01:25.770 align:start position:0%
so they wanted to forget is there some
 

00:01:25.770 --> 00:01:28.219 align:start position:0%
so they wanted to forget is there some
general<00:01:26.100><c> syntax</c><00:01:26.610><c> that</c><00:01:27.030><c> makes</c><00:01:27.210><c> sense</c><00:01:27.479><c> for</c><00:01:27.960><c> any</c>

00:01:28.219 --> 00:01:28.229 align:start position:0%
general syntax that makes sense for any
 

00:01:28.229 --> 00:01:29.810 align:start position:0%
general syntax that makes sense for any
collection<00:01:28.590><c> anybody</c><00:01:29.070><c> might</c><00:01:29.280><c> ever</c><00:01:29.520><c> write</c>

00:01:29.810 --> 00:01:29.820 align:start position:0%
collection anybody might ever write
 

00:01:29.820 --> 00:01:32.270 align:start position:0%
collection anybody might ever write
whereas<00:01:30.509><c> in</c><00:01:30.659><c> Python</c><00:01:31.259><c> this</c><00:01:31.740><c> symbol</c><00:01:32.130><c> is</c><00:01:32.250><c> used</c>

00:01:32.270 --> 00:01:32.280 align:start position:0%
whereas in Python this symbol is used
 

00:01:32.280 --> 00:01:36.319 align:start position:0%
whereas in Python this symbol is used
for<00:01:33.350><c> dictionaries</c><00:01:34.350><c> for</c><00:01:34.680><c> maps</c><00:01:35.040><c> right</c><00:01:35.520><c> so</c><00:01:35.970><c> in</c>

00:01:36.319 --> 00:01:36.329 align:start position:0%
for dictionaries for maps right so in
 

00:01:36.329 --> 00:01:38.210 align:start position:0%
for dictionaries for maps right so in
Java<00:01:37.200><c> they</c><00:01:37.439><c> wanted</c><00:01:37.650><c> to</c><00:01:37.710><c> make</c><00:01:37.829><c> it</c><00:01:37.950><c> extensible</c>

00:01:38.210 --> 00:01:38.220 align:start position:0%
Java they wanted to make it extensible
 

00:01:38.220 --> 00:01:39.649 align:start position:0%
Java they wanted to make it extensible
and<00:01:38.610><c> they</c><00:01:38.670><c> didn't</c><00:01:38.909><c> find</c><00:01:39.060><c> the</c><00:01:39.180><c> right</c><00:01:39.329><c> set</c><00:01:39.509><c> of</c>

00:01:39.649 --> 00:01:39.659 align:start position:0%
and they didn't find the right set of
 

00:01:39.659 --> 00:01:42.230 align:start position:0%
and they didn't find the right set of
things<00:01:39.810><c> to</c><00:01:40.020><c> make</c><00:01:40.140><c> it</c><00:01:40.320><c> work</c><00:01:40.470><c> so</c><00:01:41.240><c> programming</c>

00:01:42.230 --> 00:01:42.240 align:start position:0%
things to make it work so programming
 

00:01:42.240 --> 00:01:43.639 align:start position:0%
things to make it work so programming
languages<00:01:42.600><c> are</c><00:01:42.720><c> made</c><00:01:42.840><c> by</c><00:01:42.990><c> people</c><00:01:43.170><c> maybe</c><00:01:43.470><c> as</c>

00:01:43.639 --> 00:01:43.649 align:start position:0%
languages are made by people maybe as
 

00:01:43.649 --> 00:01:45.740 align:start position:0%
languages are made by people maybe as
the<00:01:43.770><c> lesson</c><00:01:44.070><c> there</c><00:01:44.250><c> and</c><00:01:45.000><c> sometimes</c><00:01:45.509><c> is</c><00:01:45.659><c> really</c>

00:01:45.740 --> 00:01:45.750 align:start position:0%
the lesson there and sometimes is really
 

00:01:45.750 --> 00:01:48.530 align:start position:0%
the lesson there and sometimes is really
hard<00:01:45.990><c> challenges</c><00:01:46.439><c> okay</c><00:01:47.149><c> so</c><00:01:48.149><c> one</c><00:01:48.299><c> thing</c><00:01:48.329><c> that's</c>

00:01:48.530 --> 00:01:48.540 align:start position:0%
hard challenges okay so one thing that's
 

00:01:48.540 --> 00:01:50.210 align:start position:0%
hard challenges okay so one thing that's
interesting<00:01:48.720><c> about</c><00:01:48.930><c> Java</c><00:01:49.350><c> is</c><00:01:49.590><c> that</c><00:01:50.130><c> it</c>

00:01:50.210 --> 00:01:50.220 align:start position:0%
interesting about Java is that it
 

00:01:50.220 --> 00:01:51.469 align:start position:0%
interesting about Java is that it
actually<00:01:50.369><c> gives</c><00:01:50.610><c> you</c><00:01:50.790><c> the</c><00:01:51.030><c> control</c><00:01:51.450><c> to</c>

00:01:51.469 --> 00:01:51.479 align:start position:0%
actually gives you the control to
 

00:01:51.479 --> 00:01:53.569 align:start position:0%
actually gives you the control to
separate<00:01:52.229><c> implementation</c><00:01:53.040><c> from</c><00:01:53.280><c> data</c><00:01:53.490><c> to</c>

00:01:53.569 --> 00:01:53.579 align:start position:0%
separate implementation from data to
 

00:01:53.579 --> 00:01:56.330 align:start position:0%
separate implementation from data to
abstract<00:01:54.119><c> data</c><00:01:54.270><c> types</c><00:01:54.570><c> so</c><00:01:55.110><c> the</c><00:01:55.530><c> power</c><00:01:55.920><c> user</c>

00:01:56.330 --> 00:01:56.340 align:start position:0%
abstract data types so the power user
 

00:01:56.340 --> 00:01:58.639 align:start position:0%
abstract data types so the power user
can<00:01:56.520><c> decide</c><00:01:56.670><c> I</c><00:01:57.119><c> want</c><00:01:57.479><c> a</c><00:01:57.509><c> hash</c><00:01:57.689><c> map</c><00:01:57.960><c> or</c><00:01:58.200><c> a</c><00:01:58.259><c> tree</c>

00:01:58.639 --> 00:01:58.649 align:start position:0%
can decide I want a hash map or a tree
 

00:01:58.649 --> 00:02:00.590 align:start position:0%
can decide I want a hash map or a tree
map<00:01:58.799><c> in</c><00:01:59.009><c> both</c><00:01:59.310><c> cases</c><00:01:59.579><c> is</c><00:01:59.909><c> the</c><00:02:00.030><c> same</c><00:02:00.060><c> abstract</c>

00:02:00.590 --> 00:02:00.600 align:start position:0%
map in both cases is the same abstract
 

00:02:00.600 --> 00:02:02.630 align:start position:0%
map in both cases is the same abstract
data<00:02:00.719><c> type</c><00:02:00.960><c> the</c><00:02:01.200><c> dictionary</c><00:02:01.680><c> but</c><00:02:02.310><c> over</c><00:02:02.490><c> here</c>

00:02:02.630 --> 00:02:02.640 align:start position:0%
data type the dictionary but over here
 

00:02:02.640 --> 00:02:04.550 align:start position:0%
data type the dictionary but over here
it's<00:02:02.790><c> hash</c><00:02:03.180><c> table</c><00:02:03.600><c> base</c><00:02:03.750><c> and</c><00:02:03.990><c> here</c><00:02:04.409><c> it</c><00:02:04.530><c> is</c>

00:02:04.550 --> 00:02:04.560 align:start position:0%
it's hash table base and here it is
 

00:02:04.560 --> 00:02:07.340 align:start position:0%
it's hash table base and here it is
balanced<00:02:05.280><c> binary</c><00:02:05.549><c> search</c><00:02:05.759><c> tree</c><00:02:06.210><c> base</c><00:02:06.420><c> and</c><00:02:06.869><c> and</c>

00:02:07.340 --> 00:02:07.350 align:start position:0%
balanced binary search tree base and and
 

00:02:07.350 --> 00:02:09.469 align:start position:0%
balanced binary search tree base and and
so<00:02:07.799><c> in</c><00:02:07.920><c> effect</c><00:02:08.009><c> what</c><00:02:08.340><c> that</c><00:02:08.520><c> does</c><00:02:08.670><c> is</c><00:02:08.879><c> the</c><00:02:09.030><c> user</c>

00:02:09.469 --> 00:02:09.479 align:start position:0%
so in effect what that does is the user
 

00:02:09.479 --> 00:02:11.180 align:start position:0%
so in effect what that does is the user
who<00:02:09.720><c> really</c><00:02:10.110><c> really</c><00:02:10.289><c> needs</c><00:02:10.619><c> to</c><00:02:10.739><c> tune</c><00:02:11.009><c> their</c>

00:02:11.180 --> 00:02:11.190 align:start position:0%
who really really needs to tune their
 

00:02:11.190 --> 00:02:13.230 align:start position:0%
who really really needs to tune their
performance<00:02:11.670><c> can</c><00:02:12.120><c> make</c><00:02:12.270><c> choices</c>

00:02:13.230 --> 00:02:13.240 align:start position:0%
performance can make choices
 

00:02:13.240 --> 00:02:15.060 align:start position:0%
performance can make choices
whereas<00:02:13.960><c> in</c><00:02:14.080><c> Python</c><00:02:14.410><c> you</c><00:02:14.590><c> get</c><00:02:14.830><c> a</c><00:02:14.860><c> dictionary</c>

00:02:15.060 --> 00:02:15.070 align:start position:0%
whereas in Python you get a dictionary
 

00:02:15.070 --> 00:02:16.710 align:start position:0%
whereas in Python you get a dictionary
and<00:02:15.460><c> that's</c><00:02:15.610><c> the</c><00:02:15.730><c> dictionary</c><00:02:16.120><c> you</c><00:02:16.210><c> get</c><00:02:16.420><c> unless</c>

00:02:16.710 --> 00:02:16.720 align:start position:0%
and that's the dictionary you get unless
 

00:02:16.720 --> 00:02:18.230 align:start position:0%
and that's the dictionary you get unless
you<00:02:16.870><c> go</c><00:02:16.960><c> implement</c><00:02:17.110><c> something</c><00:02:17.560><c> from</c><00:02:17.830><c> scratch</c>

00:02:18.230 --> 00:02:18.240 align:start position:0%
you go implement something from scratch
 

00:02:18.240 --> 00:02:21.780 align:start position:0%
you go implement something from scratch
also<00:02:19.240><c> for</c><00:02:19.390><c> example</c><00:02:19.480><c> if</c><00:02:20.260><c> you've</c><00:02:20.500><c> iterated</c><00:02:21.130><c> ok</c>

00:02:21.780 --> 00:02:21.790 align:start position:0%
also for example if you've iterated ok
 

00:02:21.790 --> 00:02:23.130 align:start position:0%
also for example if you've iterated ok
that<00:02:22.090><c> is</c><00:02:22.210><c> you</c><00:02:22.330><c> just</c><00:02:22.510><c> go</c><00:02:22.630><c> through</c><00:02:22.660><c> each</c><00:02:22.930><c> of</c><00:02:23.050><c> the</c>

00:02:23.130 --> 00:02:23.140 align:start position:0%
that is you just go through each of the
 

00:02:23.140 --> 00:02:25.530 align:start position:0%
that is you just go through each of the
keys<00:02:23.380><c> in</c><00:02:23.740><c> this</c><00:02:24.190><c> tree</c><00:02:24.460><c> map</c><00:02:24.640><c> you'll</c><00:02:25.090><c> get</c><00:02:25.270><c> them</c><00:02:25.420><c> in</c>

00:02:25.530 --> 00:02:25.540 align:start position:0%
keys in this tree map you'll get them in
 

00:02:25.540 --> 00:02:27.810 align:start position:0%
keys in this tree map you'll get them in
alphabetical<00:02:26.050><c> order</c><00:02:26.110><c> but</c><00:02:26.920><c> in</c><00:02:27.070><c> hashmap</c><00:02:27.550><c> you</c>

00:02:27.810 --> 00:02:27.820 align:start position:0%
alphabetical order but in hashmap you
 

00:02:27.820 --> 00:02:29.250 align:start position:0%
alphabetical order but in hashmap you
don't<00:02:28.030><c> get</c><00:02:28.210><c> them</c><00:02:28.330><c> in</c><00:02:28.450><c> alphabetical</c><00:02:28.930><c> order</c><00:02:28.990><c> in</c>

00:02:29.250 --> 00:02:29.260 align:start position:0%
don't get them in alphabetical order in
 

00:02:29.260 --> 00:02:30.960 align:start position:0%
don't get them in alphabetical order in
fact<00:02:29.440><c> you</c><00:02:29.530><c> have</c><00:02:29.650><c> no</c><00:02:29.770><c> guaranteed</c><00:02:30.250><c> order</c><00:02:30.520><c> so</c>

00:02:30.960 --> 00:02:30.970 align:start position:0%
fact you have no guaranteed order so
 

00:02:30.970 --> 00:02:33.060 align:start position:0%
fact you have no guaranteed order so
hashmaps<00:02:31.390><c> probably</c><00:02:31.780><c> faster</c><00:02:32.170><c> but</c><00:02:32.710><c> in</c><00:02:32.860><c> most</c>

00:02:33.060 --> 00:02:33.070 align:start position:0%
hashmaps probably faster but in most
 

00:02:33.070 --> 00:02:34.620 align:start position:0%
hashmaps probably faster but in most
cases<00:02:33.190><c> but</c><00:02:33.700><c> a</c><00:02:33.730><c> tree</c><00:02:33.940><c> map</c><00:02:34.120><c> is</c><00:02:34.270><c> going</c><00:02:34.420><c> to</c><00:02:34.480><c> give</c>

00:02:34.620 --> 00:02:34.630 align:start position:0%
cases but a tree map is going to give
 

00:02:34.630 --> 00:02:36.510 align:start position:0%
cases but a tree map is going to give
you<00:02:34.720><c> back</c><00:02:34.840><c> keys</c><00:02:35.110><c> in</c><00:02:35.290><c> alphabetical</c><00:02:35.770><c> order</c><00:02:35.830><c> so</c>

00:02:36.510 --> 00:02:36.520 align:start position:0%
you back keys in alphabetical order so
 

00:02:36.520 --> 00:02:37.800 align:start position:0%
you back keys in alphabetical order so
that's<00:02:36.640><c> a</c><00:02:36.790><c> little</c><00:02:37.000><c> bit</c><00:02:37.210><c> you</c><00:02:37.390><c> get</c><00:02:37.510><c> a</c><00:02:37.570><c> little</c>

00:02:37.800 --> 00:02:37.810 align:start position:0%
that's a little bit you get a little
 

00:02:37.810 --> 00:02:40.320 align:start position:0%
that's a little bit you get a little
finer<00:02:38.050><c> grained</c><00:02:38.410><c> control</c><00:02:39.120><c> alright</c>

00:02:40.320 --> 00:02:40.330 align:start position:0%
finer grained control alright
 

00:02:40.330 --> 00:02:42.450 align:start position:0%
finer grained control alright
so<00:02:40.720><c> my</c><00:02:40.840><c> job</c><00:02:41.050><c> on</c><00:02:41.200><c> 61b</c><00:02:41.680><c> by</c><00:02:41.950><c> the</c><00:02:42.040><c> way</c><00:02:42.220><c> it</c><00:02:42.310><c> seems</c>

00:02:42.450 --> 00:02:42.460 align:start position:0%
so my job on 61b by the way it seems
 

00:02:42.460 --> 00:02:44.280 align:start position:0%
so my job on 61b by the way it seems
like<00:02:42.580><c> it's</c><00:02:42.850><c> more</c><00:02:42.910><c> verbose</c><00:02:43.360><c> ok</c><00:02:43.870><c> so</c><00:02:43.930><c> some</c><00:02:44.260><c> things</c>

00:02:44.280 --> 00:02:44.290 align:start position:0%
like it's more verbose ok so some things
 

00:02:44.290 --> 00:02:47.070 align:start position:0%
like it's more verbose ok so some things
is<00:02:44.710><c> that</c><00:02:44.830><c> so</c><00:02:45.580><c> I</c><00:02:45.760><c> would</c><00:02:45.940><c> argue</c><00:02:46.120><c> then</c><00:02:46.420><c> even</c>

00:02:47.070 --> 00:02:47.080 align:start position:0%
is that so I would argue then even
 

00:02:47.080 --> 00:02:48.690 align:start position:0%
is that so I would argue then even
though<00:02:47.230><c> Java</c><00:02:47.500><c> programs</c><00:02:47.950><c> are</c><00:02:48.130><c> certainly</c><00:02:48.490><c> more</c>

00:02:48.690 --> 00:02:48.700 align:start position:0%
though Java programs are certainly more
 

00:02:48.700 --> 00:02:50.640 align:start position:0%
though Java programs are certainly more
verbose<00:02:49.030><c> no</c><00:02:49.240><c> question</c><00:02:49.750><c> they</c><00:02:50.230><c> think</c><00:02:50.470><c> they</c>

00:02:50.640 --> 00:02:50.650 align:start position:0%
verbose no question they think they
 

00:02:50.650 --> 00:02:52.110 align:start position:0%
verbose no question they think they
can't<00:02:50.860><c> actually</c><00:02:50.980><c> faster</c><00:02:51.520><c> the</c><00:02:51.610><c> right</c><00:02:51.760><c> program</c>

00:02:52.110 --> 00:02:52.120 align:start position:0%
can't actually faster the right program
 

00:02:52.120 --> 00:02:53.970 align:start position:0%
can't actually faster the right program
one<00:02:52.840><c> of</c><00:02:52.870><c> the</c><00:02:52.960><c> reasons</c><00:02:53.290><c> is</c><00:02:53.410><c> you</c><00:02:53.440><c> get</c><00:02:53.620><c> static</c>

00:02:53.970 --> 00:02:53.980 align:start position:0%
one of the reasons is you get static
 

00:02:53.980 --> 00:02:56.010 align:start position:0%
one of the reasons is you get static
pipes<00:02:54.220><c> which</c><00:02:54.880><c> is</c><00:02:55.090><c> nice</c><00:02:55.270><c> because</c><00:02:55.540><c> you</c><00:02:55.720><c> get</c><00:02:55.810><c> type</c>

00:02:56.010 --> 00:02:56.020 align:start position:0%
pipes which is nice because you get type
 

00:02:56.020 --> 00:02:57.660 align:start position:0%
pipes which is nice because you get type
checking<00:02:56.260><c> but</c><00:02:56.500><c> also</c><00:02:56.710><c> one</c><00:02:57.220><c> of</c><00:02:57.310><c> the</c><00:02:57.370><c> things</c><00:02:57.550><c> that</c>

00:02:57.660 --> 00:02:57.670 align:start position:0%
checking but also one of the things that
 

00:02:57.670 --> 00:02:59.670 align:start position:0%
checking but also one of the things that
I<00:02:57.730><c> absolutely</c><00:02:57.910><c> love</c><00:02:58.510><c> about</c><00:02:58.540><c> Java</c><00:02:59.110><c> is</c><00:02:59.440><c> that</c>

00:02:59.670 --> 00:02:59.680 align:start position:0%
I absolutely love about Java is that
 

00:02:59.680 --> 00:03:00.840 align:start position:0%
I absolutely love about Java is that
when<00:02:59.770><c> you</c><00:02:59.830><c> look</c><00:02:59.980><c> at</c><00:03:00.040><c> a</c><00:03:00.100><c> program</c><00:03:00.340><c> and</c><00:03:00.670><c> you</c><00:03:00.730><c> have</c>

00:03:00.840 --> 00:03:00.850 align:start position:0%
when you look at a program and you have
 

00:03:00.850 --> 00:03:02.880 align:start position:0%
when you look at a program and you have
a<00:03:00.910><c> method</c><00:03:01.300><c> like</c><00:03:01.420><c> collect</c><00:03:01.750><c> word</c><00:03:01.960><c> count</c><00:03:02.260><c> as</c><00:03:02.440><c> long</c>

00:03:02.880 --> 00:03:02.890 align:start position:0%
a method like collect word count as long
 

00:03:02.890 --> 00:03:04.470 align:start position:0%
a method like collect word count as long
as<00:03:03.010><c> it's</c><00:03:03.130><c> not</c><00:03:03.280><c> too</c><00:03:03.340><c> complicated</c><00:03:03.820><c> what's</c><00:03:04.300><c> nice</c>

00:03:04.470 --> 00:03:04.480 align:start position:0%
as it's not too complicated what's nice
 

00:03:04.480 --> 00:03:06.270 align:start position:0%
as it's not too complicated what's nice
is<00:03:04.720><c> when</c><00:03:05.080><c> I</c><00:03:05.140><c> see</c><00:03:05.410><c> this</c><00:03:05.560><c> I</c><00:03:05.770><c> know</c><00:03:05.830><c> someone's</c>

00:03:06.270 --> 00:03:06.280 align:start position:0%
is when I see this I know someone's
 

00:03:06.280 --> 00:03:08.100 align:start position:0%
is when I see this I know someone's
giving<00:03:06.580><c> me</c><00:03:06.670><c> two</c><00:03:06.850><c> lists</c><00:03:07.180><c> and</c><00:03:07.330><c> I'm</c><00:03:07.630><c> giving</c><00:03:07.930><c> back</c>

00:03:08.100 --> 00:03:08.110 align:start position:0%
giving me two lists and I'm giving back
 

00:03:08.110 --> 00:03:10.050 align:start position:0%
giving me two lists and I'm giving back
a<00:03:08.140><c> map</c><00:03:08.440><c> that</c><00:03:08.680><c> is</c><00:03:08.920><c> not</c><00:03:09.190><c> the</c><00:03:09.340><c> case</c><00:03:09.490><c> in</c><00:03:09.670><c> Python</c>

00:03:10.050 --> 00:03:10.060 align:start position:0%
a map that is not the case in Python
 

00:03:10.060 --> 00:03:12.540 align:start position:0%
a map that is not the case in Python
unless<00:03:10.480><c> you</c><00:03:10.630><c> use</c><00:03:10.780><c> the</c><00:03:10.810><c> optional</c><00:03:11.550><c> type</c>

00:03:12.540 --> 00:03:12.550 align:start position:0%
unless you use the optional type
 

00:03:12.550 --> 00:03:14.400 align:start position:0%
unless you use the optional type
specifying<00:03:13.210><c> stuff</c><00:03:13.630><c> which</c><00:03:13.840><c> I've</c><00:03:13.990><c> never</c><00:03:14.140><c> really</c>

00:03:14.400 --> 00:03:14.410 align:start position:0%
specifying stuff which I've never really
 

00:03:14.410 --> 00:03:17.520 align:start position:0%
specifying stuff which I've never really
used<00:03:15.000><c> so</c><00:03:16.000><c> I</c><00:03:16.210><c> love</c><00:03:16.570><c> the</c><00:03:16.780><c> fact</c><00:03:17.020><c> that</c><00:03:17.140><c> static</c>

00:03:17.520 --> 00:03:17.530 align:start position:0%
used so I love the fact that static
 

00:03:17.530 --> 00:03:19.920 align:start position:0%
used so I love the fact that static
types<00:03:17.710><c> of</c><00:03:17.890><c> Java</c><00:03:18.100><c> exist</c><00:03:18.460><c> another</c><00:03:19.360><c> is</c><00:03:19.600><c> that</c><00:03:19.780><c> it</c>

00:03:19.920 --> 00:03:19.930 align:start position:0%
types of Java exist another is that it
 

00:03:19.930 --> 00:03:21.960 align:start position:0%
types of Java exist another is that it
tends<00:03:20.260><c> there's</c><00:03:20.770><c> a</c><00:03:20.830><c> bias</c><00:03:21.070><c> in</c><00:03:21.370><c> the</c><00:03:21.430><c> language</c><00:03:21.760><c> it</c>

00:03:21.960 --> 00:03:21.970 align:start position:0%
tends there's a bias in the language it
 

00:03:21.970 --> 00:03:23.880 align:start position:0%
tends there's a bias in the language it
has<00:03:22.150><c> special</c><00:03:22.480><c> features</c><00:03:22.960><c> that</c><00:03:23.170><c> force</c>

00:03:23.880 --> 00:03:23.890 align:start position:0%
has special features that force
 

00:03:23.890 --> 00:03:26.310 align:start position:0%
has special features that force
interface<00:03:24.460><c> inheritance</c><00:03:25.030><c> so</c><00:03:25.480><c> interfaces</c><00:03:26.110><c> I</c>

00:03:26.310 --> 00:03:26.320 align:start position:0%
interface inheritance so interfaces I
 

00:03:26.320 --> 00:03:27.680 align:start position:0%
interface inheritance so interfaces I
think<00:03:26.530><c> are</c><00:03:26.650><c> nicer</c><00:03:26.920><c> so</c><00:03:27.100><c> you</c><00:03:27.220><c> get</c><00:03:27.370><c> cleaner</c>

00:03:27.680 --> 00:03:27.690 align:start position:0%
think are nicer so you get cleaner
 

00:03:27.690 --> 00:03:30.090 align:start position:0%
think are nicer so you get cleaner
inheritance<00:03:28.690><c> another</c><00:03:29.380><c> issue</c><00:03:29.650><c> of</c><00:03:29.740><c> things</c><00:03:29.950><c> like</c>

00:03:30.090 --> 00:03:30.100 align:start position:0%
inheritance another issue of things like
 

00:03:30.100 --> 00:03:31.800 align:start position:0%
inheritance another issue of things like
the<00:03:30.220><c> private</c><00:03:30.580><c> keyword</c><00:03:30.970><c> which</c><00:03:31.450><c> make</c>

00:03:31.800 --> 00:03:31.810 align:start position:0%
the private keyword which make
 

00:03:31.810 --> 00:03:33.840 align:start position:0%
the private keyword which make
abstraction<00:03:32.380><c> barrier</c><00:03:32.680><c> solid</c><00:03:33.190><c> and</c><00:03:33.400><c> they</c><00:03:33.670><c> keep</c>

00:03:33.840 --> 00:03:33.850 align:start position:0%
abstraction barrier solid and they keep
 

00:03:33.850 --> 00:03:35.400 align:start position:0%
abstraction barrier solid and they keep
giant<00:03:34.180><c> projects</c><00:03:34.750><c> from</c><00:03:34.840><c> collapsing</c><00:03:35.290><c> under</c>

00:03:35.400 --> 00:03:35.410 align:start position:0%
giant projects from collapsing under
 

00:03:35.410 --> 00:03:36.960 align:start position:0%
giant projects from collapsing under
their<00:03:35.590><c> own</c><00:03:35.650><c> weight</c><00:03:35.890><c> because</c><00:03:36.370><c> if</c><00:03:36.610><c> you</c><00:03:36.730><c> can't</c>

00:03:36.960 --> 00:03:36.970 align:start position:0%
their own weight because if you can't
 

00:03:36.970 --> 00:03:38.130 align:start position:0%
their own weight because if you can't
edit<00:03:37.120><c> the</c><00:03:37.360><c> thing</c><00:03:37.540><c> if</c><00:03:37.660><c> you</c><00:03:37.750><c> can't</c><00:03:37.960><c> access</c>

00:03:38.130 --> 00:03:38.140 align:start position:0%
edit the thing if you can't access
 

00:03:38.140 --> 00:03:40.410 align:start position:0%
edit the thing if you can't access
variables<00:03:38.860><c> that</c><00:03:38.980><c> I</c><00:03:39.070><c> decide</c><00:03:39.430><c> or</c><00:03:39.580><c> private</c><00:03:39.940><c> then</c>

00:03:40.410 --> 00:03:40.420 align:start position:0%
variables that I decide or private then
 

00:03:40.420 --> 00:03:41.640 align:start position:0%
variables that I decide or private then
that<00:03:40.600><c> keeps</c><00:03:40.780><c> you</c><00:03:40.900><c> from</c><00:03:40.960><c> screwing</c><00:03:41.380><c> something</c>

00:03:41.640 --> 00:03:41.650 align:start position:0%
that keeps you from screwing something
 

00:03:41.650 --> 00:03:44.520 align:start position:0%
that keeps you from screwing something
up<00:03:42.270><c> it</c><00:03:43.270><c> also</c><00:03:43.420><c> makes</c><00:03:43.660><c> code</c><00:03:43.840><c> more</c><00:03:44.020><c> efficient</c><00:03:44.380><c> for</c>

00:03:44.520 --> 00:03:44.530 align:start position:0%
up it also makes code more efficient for
 

00:03:44.530 --> 00:03:46.890 align:start position:0%
up it also makes code more efficient for
example<00:03:44.950><c> you</c><00:03:45.430><c> can</c><00:03:45.670><c> decide</c><00:03:46.180><c> between</c><00:03:46.360><c> hash</c><00:03:46.690><c> map</c>

00:03:46.890 --> 00:03:46.900 align:start position:0%
example you can decide between hash map
 

00:03:46.900 --> 00:03:48.930 align:start position:0%
example you can decide between hash map
or<00:03:47.080><c> tree</c><00:03:47.200><c> maps</c><00:03:47.410><c> you</c><00:03:47.890><c> can't</c><00:03:48.250><c> you</c><00:03:48.430><c> have</c><00:03:48.550><c> single</c>

00:03:48.930 --> 00:03:48.940 align:start position:0%
or tree maps you can't you have single
 

00:03:48.940 --> 00:03:50.280 align:start position:0%
or tree maps you can't you have single
value<00:03:49.240><c> two</c><00:03:49.360><c> rays</c><00:03:49.540><c> which</c><00:03:49.810><c> make</c><00:03:49.960><c> them</c><00:03:50.110><c> a</c><00:03:50.200><c> little</c>

00:03:50.280 --> 00:03:50.290 align:start position:0%
value two rays which make them a little
 

00:03:50.290 --> 00:03:52.500 align:start position:0%
value two rays which make them a little
faster<00:03:50.740><c> than</c><00:03:50.920><c> say</c><00:03:51.100><c> Python</c><00:03:51.610><c> and</c><00:03:52.330><c> there's</c>

00:03:52.500 --> 00:03:52.510 align:start position:0%
faster than say Python and there's
 

00:03:52.510 --> 00:03:54.210 align:start position:0%
faster than say Python and there's
actually<00:03:52.750><c> another</c><00:03:52.930><c> interesting</c><00:03:53.590><c> topic</c><00:03:54.190><c> which</c>

00:03:54.210 --> 00:03:54.220 align:start position:0%
actually another interesting topic which
 

00:03:54.220 --> 00:03:56.400 align:start position:0%
actually another interesting topic which
is<00:03:54.400><c> that</c><00:03:54.730><c> basic</c><00:03:55.390><c> data</c><00:03:55.600><c> structures</c><00:03:56.050><c> in</c><00:03:56.200><c> Java</c>

00:03:56.400 --> 00:03:56.410 align:start position:0%
is that basic data structures in Java
 

00:03:56.410 --> 00:03:58.500 align:start position:0%
is that basic data structures in Java
they<00:03:56.860><c> more</c><00:03:57.100><c> closely</c><00:03:57.250><c> resemble</c><00:03:57.970><c> what's</c><00:03:58.120><c> inside</c>

00:03:58.500 --> 00:03:58.510 align:start position:0%
they more closely resemble what's inside
 

00:03:58.510 --> 00:04:00.600 align:start position:0%
they more closely resemble what's inside
the<00:03:58.690><c> actual</c><00:03:58.960><c> computer</c><00:03:59.380><c> so</c><00:03:59.980><c> if</c><00:04:00.250><c> we</c><00:04:00.430><c> did</c>

00:04:00.600 --> 00:04:00.610 align:start position:0%
the actual computer so if we did
 

00:04:00.610 --> 00:04:02.400 align:start position:0%
the actual computer so if we did
something<00:04:00.820><c> like</c><00:04:01.000><c> a</c><00:04:01.120><c> ray</c><00:04:01.330><c> deck</c><00:04:01.540><c> and</c><00:04:01.720><c> Python</c><00:04:02.140><c> for</c>

00:04:02.400 --> 00:04:02.410 align:start position:0%
something like a ray deck and Python for
 

00:04:02.410 --> 00:04:03.990 align:start position:0%
something like a ray deck and Python for
example<00:04:02.830><c> it</c><00:04:03.430><c> would</c><00:04:03.550><c> be</c><00:04:03.670><c> a</c><00:04:03.700><c> little</c><00:04:03.790><c> awkward</c>

00:04:03.990 --> 00:04:04.000 align:start position:0%
example it would be a little awkward
 

00:04:04.000 --> 00:04:06.540 align:start position:0%
example it would be a little awkward
because<00:04:04.450><c> there's</c><00:04:04.990><c> no</c><00:04:05.590><c> need</c><00:04:05.860><c> there's</c><00:04:06.280><c> no</c><00:04:06.370><c> need</c>

00:04:06.540 --> 00:04:06.550 align:start position:0%
because there's no need there's no need
 

00:04:06.550 --> 00:04:08.310 align:start position:0%
because there's no need there's no need
for<00:04:06.580><c> array</c><00:04:06.940><c> resizing</c><00:04:07.150><c> the</c><00:04:07.750><c> thing</c><00:04:07.930><c> that</c><00:04:08.110><c> feels</c>

00:04:08.310 --> 00:04:08.320 align:start position:0%
for array resizing the thing that feels
 

00:04:08.320 --> 00:04:10.470 align:start position:0%
for array resizing the thing that feels
most<00:04:08.560><c> like</c><00:04:08.800><c> an</c><00:04:08.950><c> array</c><00:04:09.190><c> and</c><00:04:09.460><c> python</c><00:04:10.060><c> is</c><00:04:10.180><c> a</c><00:04:10.210><c> list</c>

00:04:10.470 --> 00:04:10.480 align:start position:0%
most like an array and python is a list
 

00:04:10.480 --> 00:04:13.560 align:start position:0%
most like an array and python is a list
and<00:04:10.750><c> let's</c><00:04:11.410><c> actually</c><00:04:11.950><c> already</c><00:04:12.700><c> basically</c>

00:04:13.560 --> 00:04:13.570 align:start position:0%
and let's actually already basically
 

00:04:13.570 --> 00:04:16.050 align:start position:0%
and let's actually already basically
they<00:04:13.990><c> know</c><00:04:14.470><c> they</c><00:04:14.620><c> they</c><00:04:15.100><c> run</c><00:04:15.340><c> however</c><00:04:15.700><c> they</c>

00:04:16.050 --> 00:04:16.060 align:start position:0%
they know they they run however they
 

00:04:16.060 --> 00:04:17.960 align:start position:0%
they know they they run however they
want<00:04:16.239><c> right</c><00:04:16.420><c> if</c><00:04:16.660><c> they</c><00:04:16.780><c> extend</c><00:04:17.140><c> automatically</c>

00:04:17.960 --> 00:04:17.970 align:start position:0%
want right if they extend automatically
 

00:04:17.970 --> 00:04:19.950 align:start position:0%
want right if they extend automatically
actually<00:04:18.970><c> what's</c><00:04:19.090><c> interesting</c><00:04:19.299><c> is</c><00:04:19.630><c> this</c><00:04:19.750><c> the</c>

00:04:19.950 --> 00:04:19.960 align:start position:0%
actually what's interesting is this the
 

00:04:19.960 --> 00:04:22.680 align:start position:0%
actually what's interesting is this the
list<00:04:20.590><c> in</c><00:04:20.830><c> Python</c><00:04:21.010><c> is</c><00:04:21.400><c> actually</c><00:04:21.970><c> an</c><00:04:22.180><c> ArrayList</c>

00:04:22.680 --> 00:04:22.690 align:start position:0%
list in Python is actually an ArrayList
 

00:04:22.690 --> 00:04:24.780 align:start position:0%
list in Python is actually an ArrayList
like<00:04:23.169><c> we</c><00:04:23.350><c> did</c><00:04:23.530><c> in</c><00:04:23.740><c> our</c><00:04:23.860><c> class</c><00:04:24.160><c> but</c><00:04:24.700><c> you</c>

00:04:24.780 --> 00:04:24.790 align:start position:0%
like we did in our class but you
 

00:04:24.790 --> 00:04:25.910 align:start position:0%
like we did in our class but you
wouldn't<00:04:25.000><c> really</c><00:04:25.090><c> know</c><00:04:25.180><c> that</c><00:04:25.270><c> the</c><00:04:25.630><c> way</c><00:04:25.720><c> to</c>

00:04:25.910 --> 00:04:25.920 align:start position:0%
wouldn't really know that the way to
 

00:04:25.920 --> 00:04:29.150 align:start position:0%
wouldn't really know that the way to
good<00:04:26.100><c> semantic</c><00:04:26.490><c> work</c><00:04:27.020><c> cool</c><00:04:28.020><c> ok</c><00:04:28.950><c> so</c><00:04:29.010><c> any</c>

00:04:29.150 --> 00:04:29.160 align:start position:0%
good semantic work cool ok so any
 

00:04:29.160 --> 00:04:30.950 align:start position:0%
good semantic work cool ok so any
thoughts<00:04:29.400><c> about</c><00:04:29.520><c> that</c><00:04:29.670><c> for</c><00:04:30.150><c> a</c><00:04:30.180><c> cruise</c><00:04:30.480><c> on</c><00:04:30.660><c> a</c>

00:04:30.950 --> 00:04:30.960 align:start position:0%
thoughts about that for a cruise on a
 

00:04:30.960 --> 00:04:34.630 align:start position:0%
thoughts about that for a cruise on a
few<00:04:31.800><c> trivia</c><00:04:32.130><c> points</c><00:04:32.460><c> yeah</c>

00:04:34.630 --> 00:04:34.640 align:start position:0%
 
 

00:04:34.640 --> 00:04:38.320 align:start position:0%
 
Java<00:04:35.640><c> first-class</c><00:04:36.270><c> citizens</c><00:04:36.840><c> classes</c><00:04:37.440><c> yeah</c>

00:04:38.320 --> 00:04:38.330 align:start position:0%
Java first-class citizens classes yeah
 

00:04:38.330 --> 00:04:41.270 align:start position:0%
Java first-class citizens classes yeah
so<00:04:39.330><c> but</c><00:04:39.750><c> actually</c><00:04:40.050><c> let's</c><00:04:40.320><c> see</c><00:04:40.440><c> what</c><00:04:40.680><c> what</c><00:04:41.190><c> is</c>

00:04:41.270 --> 00:04:41.280 align:start position:0%
so but actually let's see what what is
 

00:04:41.280 --> 00:04:43.370 align:start position:0%
so but actually let's see what what is
really<00:04:41.550><c> really</c><00:04:41.970><c> easy</c><00:04:42.270><c> to</c><00:04:42.510><c> do</c><00:04:42.630><c> in</c><00:04:42.750><c> Java</c><00:04:43.020><c> types</c>

00:04:43.370 --> 00:04:43.380 align:start position:0%
really really easy to do in Java types
 

00:04:43.380 --> 00:04:46.370 align:start position:0%
really really easy to do in Java types
I'd<00:04:43.740><c> say</c><00:04:43.980><c> I</c><00:04:44.010><c> mean</c><00:04:44.340><c> you</c><00:04:44.700><c> know</c><00:04:44.870><c> types</c><00:04:45.870><c> is</c><00:04:46.110><c> the</c><00:04:46.230><c> big</c>

00:04:46.370 --> 00:04:46.380 align:start position:0%
I'd say I mean you know types is the big
 

00:04:46.380 --> 00:04:47.900 align:start position:0%
I'd say I mean you know types is the big
one<00:04:46.530><c> because</c><00:04:46.890><c> you</c><00:04:47.040><c> can</c><00:04:47.190><c> hack</c><00:04:47.370><c> type</c><00:04:47.640><c> checking</c>

00:04:47.900 --> 00:04:47.910 align:start position:0%
one because you can hack type checking
 

00:04:47.910 --> 00:04:50.330 align:start position:0%
one because you can hack type checking
into<00:04:48.180><c> pie</c>

