WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:01.850 align:start position:0%
 
in<00:00:00.390><c> this</c><00:00:00.599><c> video</c><00:00:00.960><c> I'd</c><00:00:01.230><c> like</c><00:00:01.350><c> to</c><00:00:01.410><c> tell</c><00:00:01.680><c> you</c><00:00:01.829><c> about</c>

00:00:01.850 --> 00:00:01.860 align:start position:0%
in this video I'd like to tell you about
 

00:00:01.860 --> 00:00:05.030 align:start position:0%
in this video I'd like to tell you about
the<00:00:02.250><c> idea</c><00:00:02.370><c> of</c><00:00:02.639><c> vectorization</c><00:00:03.650><c> so</c><00:00:04.650><c> whether</c>

00:00:05.030 --> 00:00:05.040 align:start position:0%
the idea of vectorization so whether
 

00:00:05.040 --> 00:00:06.980 align:start position:0%
the idea of vectorization so whether
you're<00:00:05.279><c> using</c><00:00:05.310><c> octave</c><00:00:06.240><c> or</c><00:00:06.540><c> a</c><00:00:06.629><c> similar</c>

00:00:06.980 --> 00:00:06.990 align:start position:0%
you're using octave or a similar
 

00:00:06.990 --> 00:00:08.870 align:start position:0%
you're using octave or a similar
language<00:00:07.140><c> like</c><00:00:07.589><c> MATLAB</c><00:00:08.010><c> or</c><00:00:08.309><c> whether</c><00:00:08.639><c> you're</c>

00:00:08.870 --> 00:00:08.880 align:start position:0%
language like MATLAB or whether you're
 

00:00:08.880 --> 00:00:11.990 align:start position:0%
language like MATLAB or whether you're
using<00:00:09.059><c> Python</c><00:00:09.660><c> numpy</c><00:00:09.990><c> are</c><00:00:10.320><c> Java</c><00:00:10.860><c> or</c><00:00:11.040><c> C</c><00:00:11.219><c> C++</c>

00:00:11.990 --> 00:00:12.000 align:start position:0%
using Python numpy are Java or C C++
 

00:00:12.000 --> 00:00:14.539 align:start position:0%
using Python numpy are Java or C C++
although<00:00:12.809><c> these</c><00:00:13.019><c> languages</c><00:00:13.740><c> have</c><00:00:13.980><c> either</c>

00:00:14.539 --> 00:00:14.549 align:start position:0%
although these languages have either
 

00:00:14.549 --> 00:00:17.359 align:start position:0%
although these languages have either
built<00:00:15.000><c> into</c><00:00:15.450><c> them</c><00:00:15.630><c> or</c><00:00:15.839><c> have</c><00:00:16.440><c> readily</c><00:00:17.070><c> and</c>

00:00:17.359 --> 00:00:17.369 align:start position:0%
built into them or have readily and
 

00:00:17.369 --> 00:00:20.120 align:start position:0%
built into them or have readily and
easily<00:00:17.550><c> accessible</c><00:00:18.410><c> different</c><00:00:19.410><c> to</c><00:00:19.529><c> numerical</c>

00:00:20.120 --> 00:00:20.130 align:start position:0%
easily accessible different to numerical
 

00:00:20.130 --> 00:00:21.980 align:start position:0%
easily accessible different to numerical
linear<00:00:20.369><c> algebra</c><00:00:20.580><c> libraries</c><00:00:21.449><c> that</c><00:00:21.930><c> are</c>

00:00:21.980 --> 00:00:21.990 align:start position:0%
linear algebra libraries that are
 

00:00:21.990 --> 00:00:23.660 align:start position:0%
linear algebra libraries that are
usually<00:00:22.199><c> very</c><00:00:22.680><c> well</c><00:00:22.949><c> written</c><00:00:23.070><c> highly</c>

00:00:23.660 --> 00:00:23.670 align:start position:0%
usually very well written highly
 

00:00:23.670 --> 00:00:25.640 align:start position:0%
usually very well written highly
optimized<00:00:24.090><c> often</c><00:00:24.660><c> sort</c><00:00:24.930><c> of</c><00:00:25.019><c> developed</c><00:00:25.529><c> by</c>

00:00:25.640 --> 00:00:25.650 align:start position:0%
optimized often sort of developed by
 

00:00:25.650 --> 00:00:28.009 align:start position:0%
optimized often sort of developed by
people<00:00:26.070><c> that</c><00:00:26.250><c> you</c><00:00:26.760><c> know</c><00:00:26.880><c> have</c><00:00:27.119><c> PhDs</c><00:00:27.660><c> in</c>

00:00:28.009 --> 00:00:28.019 align:start position:0%
people that you know have PhDs in
 

00:00:28.019 --> 00:00:29.660 align:start position:0%
people that you know have PhDs in
numerical<00:00:28.590><c> computing</c><00:00:29.070><c> or</c><00:00:29.279><c> they're</c><00:00:29.400><c> really</c>

00:00:29.660 --> 00:00:29.670 align:start position:0%
numerical computing or they're really
 

00:00:29.670 --> 00:00:31.780 align:start position:0%
numerical computing or they're really
specialized<00:00:30.179><c> in</c><00:00:30.359><c> numerical</c><00:00:30.750><c> computing</c><00:00:31.230><c> and</c>

00:00:31.780 --> 00:00:31.790 align:start position:0%
specialized in numerical computing and
 

00:00:31.790 --> 00:00:33.950 align:start position:0%
specialized in numerical computing and
when<00:00:32.790><c> you're</c><00:00:32.940><c> implementing</c><00:00:33.420><c> machine</c>

00:00:33.950 --> 00:00:33.960 align:start position:0%
when you're implementing machine
 

00:00:33.960 --> 00:00:35.930 align:start position:0%
when you're implementing machine
learning<00:00:34.290><c> algorithms</c><00:00:34.770><c> if</c><00:00:35.250><c> you're</c><00:00:35.460><c> able</c><00:00:35.700><c> to</c>

00:00:35.930 --> 00:00:35.940 align:start position:0%
learning algorithms if you're able to
 

00:00:35.940 --> 00:00:38.540 align:start position:0%
learning algorithms if you're able to
take<00:00:36.390><c> advantage</c><00:00:36.989><c> of</c><00:00:37.170><c> these</c><00:00:37.440><c> linear</c><00:00:38.100><c> algebra</c>

00:00:38.540 --> 00:00:38.550 align:start position:0%
take advantage of these linear algebra
 

00:00:38.550 --> 00:00:39.979 align:start position:0%
take advantage of these linear algebra
libraries<00:00:38.940><c> or</c><00:00:39.120><c> these</c><00:00:39.270><c> numerical</c><00:00:39.840><c> linear</c>

00:00:39.979 --> 00:00:39.989 align:start position:0%
libraries or these numerical linear
 

00:00:39.989 --> 00:00:42.440 align:start position:0%
libraries or these numerical linear
algebra<00:00:40.170><c> libraries</c><00:00:40.860><c> and</c><00:00:41.100><c> make</c><00:00:41.820><c> subroutine</c>

00:00:42.440 --> 00:00:42.450 align:start position:0%
algebra libraries and make subroutine
 

00:00:42.450 --> 00:00:44.750 align:start position:0%
algebra libraries and make subroutine
calls<00:00:42.750><c> to</c><00:00:42.989><c> them</c><00:00:43.230><c> rather</c><00:00:43.500><c> than</c><00:00:43.829><c> sort</c><00:00:44.129><c> of</c><00:00:44.219><c> write</c>

00:00:44.750 --> 00:00:44.760 align:start position:0%
calls to them rather than sort of write
 

00:00:44.760 --> 00:00:46.700 align:start position:0%
calls to them rather than sort of write
code<00:00:45.210><c> yourself</c><00:00:45.329><c> to</c><00:00:45.899><c> do</c><00:00:46.050><c> things</c><00:00:46.320><c> that</c><00:00:46.500><c> these</c>

00:00:46.700 --> 00:00:46.710 align:start position:0%
code yourself to do things that these
 

00:00:46.710 --> 00:00:48.950 align:start position:0%
code yourself to do things that these
libraries<00:00:47.190><c> could</c><00:00:47.399><c> be</c><00:00:47.520><c> doing</c><00:00:47.820><c> if</c><00:00:48.480><c> you</c><00:00:48.660><c> do</c><00:00:48.809><c> that</c>

00:00:48.950 --> 00:00:48.960 align:start position:0%
libraries could be doing if you do that
 

00:00:48.960 --> 00:00:51.139 align:start position:0%
libraries could be doing if you do that
then<00:00:49.289><c> often</c><00:00:49.680><c> you</c><00:00:49.829><c> get</c><00:00:50.010><c> code</c><00:00:50.370><c> that</c><00:00:50.610><c> first</c><00:00:50.910><c> is</c>

00:00:51.139 --> 00:00:51.149 align:start position:0%
then often you get code that first is
 

00:00:51.149 --> 00:00:52.819 align:start position:0%
then often you get code that first is
more<00:00:51.360><c> efficient</c><00:00:51.870><c> so</c><00:00:51.989><c> just</c><00:00:52.230><c> run</c><00:00:52.440><c> more</c><00:00:52.620><c> quickly</c>

00:00:52.819 --> 00:00:52.829 align:start position:0%
more efficient so just run more quickly
 

00:00:52.829 --> 00:00:55.160 align:start position:0%
more efficient so just run more quickly
and<00:00:53.129><c> take</c><00:00:53.370><c> better</c><00:00:53.520><c> advantage</c><00:00:53.670><c> of</c><00:00:54.420><c> and</c><00:00:54.629><c> your</c>

00:00:55.160 --> 00:00:55.170 align:start position:0%
and take better advantage of and your
 

00:00:55.170 --> 00:00:56.990 align:start position:0%
and take better advantage of and your
parallel<00:00:55.649><c> hardware</c><00:00:56.100><c> your</c><00:00:56.250><c> computer</c><00:00:56.670><c> may</c><00:00:56.820><c> have</c>

00:00:56.990 --> 00:00:57.000 align:start position:0%
parallel hardware your computer may have
 

00:00:57.000 --> 00:01:00.319 align:start position:0%
parallel hardware your computer may have
and<00:00:57.210><c> so</c><00:00:57.329><c> on</c><00:00:57.360><c> and</c><00:00:57.770><c> second</c><00:00:58.770><c> it</c><00:00:59.370><c> also</c><00:00:59.399><c> means</c><00:01:00.090><c> that</c>

00:01:00.319 --> 00:01:00.329 align:start position:0%
and so on and second it also means that
 

00:01:00.329 --> 00:01:02.720 align:start position:0%
and so on and second it also means that
you<00:01:01.020><c> end</c><00:01:01.199><c> up</c><00:01:01.289><c> with</c><00:01:01.500><c> less</c><00:01:01.949><c> code</c><00:01:02.250><c> that</c><00:01:02.460><c> you</c><00:01:02.550><c> need</c>

00:01:02.720 --> 00:01:02.730 align:start position:0%
you end up with less code that you need
 

00:01:02.730 --> 00:01:04.579 align:start position:0%
you end up with less code that you need
to<00:01:02.850><c> run</c><00:01:03.000><c> sort</c><00:01:03.239><c> of</c><00:01:03.300><c> a</c><00:01:03.359><c> simpler</c><00:01:03.750><c> implementation</c>

00:01:04.579 --> 00:01:04.589 align:start position:0%
to run sort of a simpler implementation
 

00:01:04.589 --> 00:01:06.620 align:start position:0%
to run sort of a simpler implementation
that<00:01:05.070><c> is</c><00:01:05.129><c> therefore</c><00:01:05.610><c> maybe</c><00:01:05.850><c> also</c><00:01:06.090><c> more</c><00:01:06.600><c> likely</c>

00:01:06.620 --> 00:01:06.630 align:start position:0%
that is therefore maybe also more likely
 

00:01:06.630 --> 00:01:10.780 align:start position:0%
that is therefore maybe also more likely
to<00:01:06.990><c> be</c><00:01:07.200><c> bug</c><00:01:07.470><c> free</c><00:01:07.770><c> and</c><00:01:08.150><c> as</c><00:01:09.150><c> a</c><00:01:09.210><c> concrete</c><00:01:09.570><c> example</c>

00:01:10.780 --> 00:01:10.790 align:start position:0%
to be bug free and as a concrete example
 

00:01:10.790 --> 00:01:13.340 align:start position:0%
to be bug free and as a concrete example
rather<00:01:11.790><c> than</c><00:01:12.060><c> writing</c><00:01:12.390><c> code</c><00:01:12.720><c> yourself</c><00:01:12.869><c> to</c>

00:01:13.340 --> 00:01:13.350 align:start position:0%
rather than writing code yourself to
 

00:01:13.350 --> 00:01:15.890 align:start position:0%
rather than writing code yourself to
multiply<00:01:13.890><c> matrices</c><00:01:14.100><c> if</c><00:01:14.640><c> you</c><00:01:15.060><c> let</c><00:01:15.270><c> octave</c><00:01:15.750><c> do</c>

00:01:15.890 --> 00:01:15.900 align:start position:0%
multiply matrices if you let octave do
 

00:01:15.900 --> 00:01:18.800 align:start position:0%
multiply matrices if you let octave do
it<00:01:16.049><c> by</c><00:01:16.229><c> typing</c><00:01:16.680><c> a</c><00:01:16.950><c> times</c><00:01:17.369><c> B</c><00:01:17.729><c> that</c><00:01:18.000><c> will</c><00:01:18.540><c> use</c><00:01:18.780><c> a</c>

00:01:18.800 --> 00:01:18.810 align:start position:0%
it by typing a times B that will use a
 

00:01:18.810 --> 00:01:20.899 align:start position:0%
it by typing a times B that will use a
very<00:01:19.229><c> efficient</c><00:01:19.830><c> routine</c><00:01:20.189><c> to</c><00:01:20.430><c> multiply</c><00:01:20.850><c> the</c>

00:01:20.899 --> 00:01:20.909 align:start position:0%
very efficient routine to multiply the
 

00:01:20.909 --> 00:01:22.880 align:start position:0%
very efficient routine to multiply the
two<00:01:21.150><c> matrices</c><00:01:21.180><c> and</c><00:01:21.869><c> there's</c><00:01:22.590><c> a</c><00:01:22.650><c> bunch</c><00:01:22.830><c> of</c>

00:01:22.880 --> 00:01:22.890 align:start position:0%
two matrices and there's a bunch of
 

00:01:22.890 --> 00:01:25.130 align:start position:0%
two matrices and there's a bunch of
examples<00:01:23.369><c> like</c><00:01:23.490><c> these</c><00:01:23.700><c> where</c><00:01:24.540><c> if</c><00:01:24.750><c> you</c><00:01:24.900><c> use</c>

00:01:25.130 --> 00:01:25.140 align:start position:0%
examples like these where if you use
 

00:01:25.140 --> 00:01:27.170 align:start position:0%
examples like these where if you use
appropriate<00:01:26.009><c> vectorized</c><00:01:26.430><c> implementations</c>

00:01:27.170 --> 00:01:27.180 align:start position:0%
appropriate vectorized implementations
 

00:01:27.180 --> 00:01:28.940 align:start position:0%
appropriate vectorized implementations
you<00:01:27.330><c> get</c><00:01:27.479><c> much</c><00:01:27.659><c> simpler</c><00:01:28.020><c> code</c><00:01:28.259><c> and</c><00:01:28.470><c> much</c><00:01:28.799><c> more</c>

00:01:28.940 --> 00:01:28.950 align:start position:0%
you get much simpler code and much more
 

00:01:28.950 --> 00:01:30.859 align:start position:0%
you get much simpler code and much more
efficient<00:01:29.400><c> code</c><00:01:29.640><c> let's</c><00:01:30.479><c> look</c><00:01:30.600><c> at</c><00:01:30.720><c> some</c>

00:01:30.859 --> 00:01:30.869 align:start position:0%
efficient code let's look at some
 

00:01:30.869 --> 00:01:34.819 align:start position:0%
efficient code let's look at some
examples<00:01:32.240><c> here's</c><00:01:33.240><c> our</c><00:01:33.420><c> usual</c><00:01:33.630><c> hypothesis</c><00:01:34.590><c> for</c>

00:01:34.819 --> 00:01:34.829 align:start position:0%
examples here's our usual hypothesis for
 

00:01:34.829 --> 00:01:36.649 align:start position:0%
examples here's our usual hypothesis for
linear<00:01:34.950><c> regression</c><00:01:35.130><c> and</c><00:01:35.820><c> if</c><00:01:36.240><c> you</c><00:01:36.360><c> want</c><00:01:36.570><c> to</c>

00:01:36.649 --> 00:01:36.659 align:start position:0%
linear regression and if you want to
 

00:01:36.659 --> 00:01:38.810 align:start position:0%
linear regression and if you want to
compute<00:01:37.079><c> a</c><00:01:37.200><c> key</c><00:01:37.259><c> of</c><00:01:37.380><c> X</c><00:01:37.530><c> notice</c><00:01:38.369><c> that</c><00:01:38.520><c> there's</c><00:01:38.729><c> a</c>

00:01:38.810 --> 00:01:38.820 align:start position:0%
compute a key of X notice that there's a
 

00:01:38.820 --> 00:01:40.969 align:start position:0%
compute a key of X notice that there's a
sum<00:01:39.119><c> on</c><00:01:39.360><c> the</c><00:01:39.450><c> right</c><00:01:39.750><c> and</c><00:01:40.049><c> so</c><00:01:40.409><c> one</c><00:01:40.650><c> thing</c><00:01:40.860><c> you</c>

00:01:40.969 --> 00:01:40.979 align:start position:0%
sum on the right and so one thing you
 

00:01:40.979 --> 00:01:43.190 align:start position:0%
sum on the right and so one thing you
could<00:01:41.100><c> do</c><00:01:41.280><c> is</c><00:01:41.610><c> compute</c><00:01:42.420><c> the</c><00:01:42.450><c> sum</c><00:01:42.720><c> from</c><00:01:42.960><c> J</c>

00:01:43.190 --> 00:01:43.200 align:start position:0%
could do is compute the sum from J
 

00:01:43.200 --> 00:01:46.850 align:start position:0%
could do is compute the sum from J
equals<00:01:43.229><c> 0</c><00:01:43.890><c> to</c><00:01:44.159><c> J</c><00:01:44.189><c> equals</c><00:01:44.369><c> n</c><00:01:44.729><c> yourself</c><00:01:45.860><c> another</c>

00:01:46.850 --> 00:01:46.860 align:start position:0%
equals 0 to J equals n yourself another
 

00:01:46.860 --> 00:01:49.340 align:start position:0%
equals 0 to J equals n yourself another
way<00:01:47.100><c> to</c><00:01:47.159><c> think</c><00:01:47.490><c> of</c><00:01:47.610><c> this</c><00:01:47.820><c> is</c><00:01:48.119><c> to</c><00:01:48.479><c> think</c><00:01:48.810><c> of</c><00:01:48.899><c> H</c><00:01:49.170><c> of</c>

00:01:49.340 --> 00:01:49.350 align:start position:0%
way to think of this is to think of H of
 

00:01:49.350 --> 00:01:52.730 align:start position:0%
way to think of this is to think of H of
X<00:01:49.470><c> as</c><00:01:49.799><c> theta</c><00:01:50.280><c> transpose</c><00:01:51.030><c> X</c><00:01:51.479><c> and</c><00:01:51.840><c> what</c><00:01:52.530><c> you</c><00:01:52.590><c> can</c>

00:01:52.730 --> 00:01:52.740 align:start position:0%
X as theta transpose X and what you can
 

00:01:52.740 --> 00:01:54.560 align:start position:0%
X as theta transpose X and what you can
do<00:01:52.890><c> is</c><00:01:53.189><c> think</c><00:01:53.460><c> of</c><00:01:53.640><c> this</c><00:01:53.850><c> as</c><00:01:54.090><c> you</c><00:01:54.540><c> know</c>

00:01:54.560 --> 00:01:54.570 align:start position:0%
do is think of this as you know
 

00:01:54.570 --> 00:01:56.840 align:start position:0%
do is think of this as you know
computing<00:01:55.200><c> this</c><00:01:55.439><c> inner</c><00:01:55.890><c> product</c><00:01:56.280><c> between</c><00:01:56.369><c> two</c>

00:01:56.840 --> 00:01:56.850 align:start position:0%
computing this inner product between two
 

00:01:56.850 --> 00:02:00.139 align:start position:0%
computing this inner product between two
vectors<00:01:57.049><c> where</c><00:01:58.049><c> theta</c><00:01:58.680><c> is</c><00:01:59.219><c> you</c><00:01:59.850><c> know</c><00:01:59.969><c> your</c>

00:02:00.139 --> 00:02:00.149 align:start position:0%
vectors where theta is you know your
 

00:02:00.149 --> 00:02:03.469 align:start position:0%
vectors where theta is you know your
vector<00:02:00.509><c> say</c><00:02:00.810><c> theta</c><00:02:01.049><c> 0</c><00:02:01.530><c> theta</c><00:02:01.829><c> 1</c><00:02:02.159><c> theta</c><00:02:02.430><c> 2</c><00:02:02.579><c> if</c>

00:02:03.469 --> 00:02:03.479 align:start position:0%
vector say theta 0 theta 1 theta 2 if
 

00:02:03.479 --> 00:02:05.600 align:start position:0%
vector say theta 0 theta 1 theta 2 if
you<00:02:03.719><c> have</c><00:02:03.899><c> two</c><00:02:04.320><c> features</c><00:02:04.710><c> if</c><00:02:04.920><c> N</c><00:02:05.100><c> equals</c><00:02:05.189><c> two</c>

00:02:05.600 --> 00:02:05.610 align:start position:0%
you have two features if N equals two
 

00:02:05.610 --> 00:02:08.820 align:start position:0%
you have two features if N equals two
and<00:02:05.790><c> if</c><00:02:06.450><c> you</c><00:02:06.540><c> think</c><00:02:06.750><c> of</c><00:02:06.869><c> X</c><00:02:07.079><c> as</c><00:02:07.320><c> this</c><00:02:07.530><c> vector</c><00:02:07.770><c> X</c><00:02:08.129><c> 0</c>

00:02:08.820 --> 00:02:08.830 align:start position:0%
and if you think of X as this vector X 0
 

00:02:08.830 --> 00:02:14.910 align:start position:0%
and if you think of X as this vector X 0
x1<00:02:09.490><c> x2</c><00:02:10.390><c> and</c><00:02:12.270><c> these</c><00:02:13.270><c> two</c><00:02:13.630><c> views</c><00:02:13.990><c> can</c><00:02:14.500><c> give</c><00:02:14.710><c> you</c>

00:02:14.910 --> 00:02:14.920 align:start position:0%
x1 x2 and these two views can give you
 

00:02:14.920 --> 00:02:17.760 align:start position:0%
x1 x2 and these two views can give you
two<00:02:15.400><c> different</c><00:02:15.670><c> implementations</c><00:02:16.770><c> here's</c>

00:02:17.760 --> 00:02:17.770 align:start position:0%
two different implementations here's
 

00:02:17.770 --> 00:02:19.620 align:start position:0%
two different implementations here's
what<00:02:17.950><c> I</c><00:02:17.980><c> mean</c><00:02:18.280><c> here's</c><00:02:18.970><c> an</c><00:02:19.150><c> unvectorized</c>

00:02:19.620 --> 00:02:19.630 align:start position:0%
what I mean here's an unvectorized
 

00:02:19.630 --> 00:02:22.590 align:start position:0%
what I mean here's an unvectorized
implementation<00:02:20.130><c> for</c><00:02:21.130><c> how</c><00:02:21.310><c> to</c><00:02:21.370><c> compute</c><00:02:21.880><c> H</c><00:02:22.180><c> of</c><00:02:22.420><c> X</c>

00:02:22.590 --> 00:02:22.600 align:start position:0%
implementation for how to compute H of X
 

00:02:22.600 --> 00:02:24.510 align:start position:0%
implementation for how to compute H of X
and<00:02:22.780><c> by</c><00:02:23.020><c> unvectorized</c><00:02:23.470><c> I</c><00:02:23.860><c> mean</c><00:02:24.070><c> without</c>

00:02:24.510 --> 00:02:24.520 align:start position:0%
and by unvectorized I mean without
 

00:02:24.520 --> 00:02:27.180 align:start position:0%
and by unvectorized I mean without
vectorization<00:02:25.260><c> we</c><00:02:26.260><c> might</c><00:02:26.440><c> first</c><00:02:26.620><c> initialize</c>

00:02:27.180 --> 00:02:27.190 align:start position:0%
vectorization we might first initialize
 

00:02:27.190 --> 00:02:29.760 align:start position:0%
vectorization we might first initialize
your<00:02:27.760><c> prediction</c><00:02:28.300><c> this</c><00:02:28.600><c> to</c><00:02:29.170><c> be</c><00:02:29.260><c> zero</c><00:02:29.560><c> point</c>

00:02:29.760 --> 00:02:29.770 align:start position:0%
your prediction this to be zero point
 

00:02:29.770 --> 00:02:32.220 align:start position:0%
your prediction this to be zero point
zero<00:02:29.800><c> this</c><00:02:30.310><c> is</c><00:02:30.490><c> going</c><00:02:30.550><c> to</c><00:02:30.880><c> eventually</c><00:02:31.480><c> be</c><00:02:32.200><c> on</c>

00:02:32.220 --> 00:02:32.230 align:start position:0%
zero this is going to eventually be on
 

00:02:32.230 --> 00:02:34.440 align:start position:0%
zero this is going to eventually be on
predictions<00:02:32.740><c> going</c><00:02:33.130><c> to</c><00:02:33.190><c> eventually</c><00:02:33.430><c> be</c><00:02:34.150><c> H</c><00:02:34.420><c> of</c>

00:02:34.440 --> 00:02:34.450 align:start position:0%
predictions going to eventually be H of
 

00:02:34.450 --> 00:02:37.050 align:start position:0%
predictions going to eventually be H of
X<00:02:34.750><c> and</c><00:02:35.040><c> then</c><00:02:36.040><c> I'm</c><00:02:36.190><c> going</c><00:02:36.370><c> to</c><00:02:36.490><c> have</c><00:02:36.610><c> a</c><00:02:36.640><c> for</c><00:02:36.910><c> loop</c>

00:02:37.050 --> 00:02:37.060 align:start position:0%
X and then I'm going to have a for loop
 

00:02:37.060 --> 00:02:38.730 align:start position:0%
X and then I'm going to have a for loop
for<00:02:37.270><c> J</c><00:02:37.390><c> equals</c><00:02:37.840><c> 1</c><00:02:37.900><c> through</c><00:02:38.200><c> n</c><00:02:38.350><c> plus</c><00:02:38.560><c> one</c>

00:02:38.730 --> 00:02:38.740 align:start position:0%
for J equals 1 through n plus one
 

00:02:38.740 --> 00:02:41.250 align:start position:0%
for J equals 1 through n plus one
prediction<00:02:39.100><c> gets</c><00:02:39.460><c> incremented</c><00:02:39.730><c> by</c><00:02:40.270><c> theta</c><00:02:40.960><c> J</c>

00:02:41.250 --> 00:02:41.260 align:start position:0%
prediction gets incremented by theta J
 

00:02:41.260 --> 00:02:43.320 align:start position:0%
prediction gets incremented by theta J
times<00:02:41.680><c> XJ</c><00:02:42.250><c> so</c><00:02:42.310><c> it's</c><00:02:42.610><c> kind</c><00:02:42.820><c> of</c><00:02:42.850><c> this</c><00:02:43.060><c> expression</c>

00:02:43.320 --> 00:02:43.330 align:start position:0%
times XJ so it's kind of this expression
 

00:02:43.330 --> 00:02:46.320 align:start position:0%
times XJ so it's kind of this expression
over<00:02:43.630><c> here</c><00:02:43.960><c> by</c><00:02:44.830><c> the</c><00:02:44.890><c> way</c><00:02:45.040><c> I</c><00:02:45.070><c> should</c><00:02:45.160><c> mention</c><00:02:45.430><c> in</c>

00:02:46.320 --> 00:02:46.330 align:start position:0%
over here by the way I should mention in
 

00:02:46.330 --> 00:02:48.750 align:start position:0%
over here by the way I should mention in
these<00:02:47.110><c> vectors</c><00:02:47.590><c> I've</c><00:02:47.830><c> rolled</c><00:02:48.040><c> over</c><00:02:48.220><c> here</c><00:02:48.610><c> I</c>

00:02:48.750 --> 00:02:48.760 align:start position:0%
these vectors I've rolled over here I
 

00:02:48.760 --> 00:02:51.330 align:start position:0%
these vectors I've rolled over here I
had<00:02:49.180><c> these</c><00:02:49.330><c> vectors</c><00:02:49.810><c> being</c><00:02:50.080><c> 0</c><00:02:50.500><c> index</c><00:02:51.010><c> so</c><00:02:51.190><c> has</c>

00:02:51.330 --> 00:02:51.340 align:start position:0%
had these vectors being 0 index so has
 

00:02:51.340 --> 00:02:53.940 align:start position:0%
had these vectors being 0 index so has
theta<00:02:51.610><c> 0</c><00:02:51.940><c> theta</c><00:02:52.120><c> 1</c><00:02:52.270><c> theta</c><00:02:52.570><c> 2</c><00:02:52.870><c> but</c><00:02:53.620><c> because</c>

00:02:53.940 --> 00:02:53.950 align:start position:0%
theta 0 theta 1 theta 2 but because
 

00:02:53.950 --> 00:02:57.840 align:start position:0%
theta 0 theta 1 theta 2 but because
MATLAB<00:02:54.460><c> is</c><00:02:54.700><c> one</c><00:02:54.940><c> index</c><00:02:55.390><c> theta</c><00:02:56.020><c> 0</c><00:02:56.440><c> in</c><00:02:56.740><c> MATLAB</c><00:02:57.250><c> we</c>

00:02:57.840 --> 00:02:57.850 align:start position:0%
MATLAB is one index theta 0 in MATLAB we
 

00:02:57.850 --> 00:03:00.690 align:start position:0%
MATLAB is one index theta 0 in MATLAB we
might<00:02:58.030><c> end</c><00:02:58.150><c> up</c><00:02:58.360><c> representing</c><00:02:58.900><c> as</c><00:02:59.320><c> theta</c><00:03:00.010><c> 1</c><00:03:00.430><c> and</c>

00:03:00.690 --> 00:03:00.700 align:start position:0%
might end up representing as theta 1 and
 

00:03:00.700 --> 00:03:04.260 align:start position:0%
might end up representing as theta 1 and
the<00:03:01.570><c> second</c><00:03:01.930><c> element</c><00:03:02.080><c> ends</c><00:03:02.860><c> up</c><00:03:02.950><c> as</c><00:03:03.130><c> theta</c><00:03:03.880><c> 2</c>

00:03:04.260 --> 00:03:04.270 align:start position:0%
the second element ends up as theta 2
 

00:03:04.270 --> 00:03:06.600 align:start position:0%
the second element ends up as theta 2
and<00:03:04.540><c> this</c><00:03:05.110><c> third</c><00:03:05.410><c> element</c><00:03:05.590><c> might</c><00:03:06.100><c> end</c><00:03:06.280><c> up</c><00:03:06.400><c> as</c>

00:03:06.600 --> 00:03:06.610 align:start position:0%
and this third element might end up as
 

00:03:06.610 --> 00:03:08.100 align:start position:0%
and this third element might end up as
theta<00:03:07.360><c> 3</c>

00:03:08.100 --> 00:03:08.110 align:start position:0%
theta 3
 

00:03:08.110 --> 00:03:10.650 align:start position:0%
theta 3
just<00:03:08.770><c> because</c><00:03:09.100><c> vectors</c><00:03:09.790><c> in</c><00:03:09.970><c> MATLAB</c><00:03:10.390><c> are</c>

00:03:10.650 --> 00:03:10.660 align:start position:0%
just because vectors in MATLAB are
 

00:03:10.660 --> 00:03:12.750 align:start position:0%
just because vectors in MATLAB are
indexed<00:03:11.320><c> starting</c><00:03:11.380><c> from</c><00:03:11.830><c> one</c><00:03:12.100><c> even</c><00:03:12.580><c> though</c>

00:03:12.750 --> 00:03:12.760 align:start position:0%
indexed starting from one even though
 

00:03:12.760 --> 00:03:14.430 align:start position:0%
indexed starting from one even though
you<00:03:13.030><c> know</c><00:03:13.120><c> I</c><00:03:13.150><c> wrote</c><00:03:13.480><c> theta</c><00:03:13.780><c> and</c><00:03:14.020><c> X</c><00:03:14.200><c> here</c>

00:03:14.430 --> 00:03:14.440 align:start position:0%
you know I wrote theta and X here
 

00:03:14.440 --> 00:03:17.250 align:start position:0%
you know I wrote theta and X here
stopping<00:03:15.220><c> indexing</c><00:03:15.970><c> from</c><00:03:16.060><c> 0</c><00:03:16.420><c> which</c><00:03:16.989><c> is</c><00:03:17.140><c> why</c>

00:03:17.250 --> 00:03:17.260 align:start position:0%
stopping indexing from 0 which is why
 

00:03:17.260 --> 00:03:19.410 align:start position:0%
stopping indexing from 0 which is why
here<00:03:17.530><c> I</c><00:03:17.560><c> have</c><00:03:17.770><c> a</c><00:03:17.800><c> for</c><00:03:18.130><c> loop</c><00:03:18.340><c> J</c><00:03:18.940><c> goes</c><00:03:19.150><c> from</c><00:03:19.180><c> 1</c>

00:03:19.410 --> 00:03:19.420 align:start position:0%
here I have a for loop J goes from 1
 

00:03:19.420 --> 00:03:21.840 align:start position:0%
here I have a for loop J goes from 1
through<00:03:19.870><c> n</c><00:03:20.080><c> plus</c><00:03:20.350><c> 1</c><00:03:20.620><c> rather</c><00:03:21.070><c> than</c><00:03:21.370><c> J</c><00:03:21.610><c> goes</c>

00:03:21.840 --> 00:03:21.850 align:start position:0%
through n plus 1 rather than J goes
 

00:03:21.850 --> 00:03:27.360 align:start position:0%
through n plus 1 rather than J goes
through<00:03:22.120><c> 0</c><00:03:22.840><c> up</c><00:03:23.170><c> to</c><00:03:23.340><c> n</c><00:03:24.510><c> right</c><00:03:25.510><c> but</c><00:03:26.290><c> so</c><00:03:26.500><c> this</c><00:03:27.220><c> is</c>

00:03:27.360 --> 00:03:27.370 align:start position:0%
through 0 up to n right but so this is
 

00:03:27.370 --> 00:03:29.310 align:start position:0%
through 0 up to n right but so this is
an<00:03:27.489><c> unvectorized</c><00:03:27.880><c> implementation</c><00:03:28.140><c> in</c><00:03:29.140><c> that</c>

00:03:29.310 --> 00:03:29.320 align:start position:0%
an unvectorized implementation in that
 

00:03:29.320 --> 00:03:31.050 align:start position:0%
an unvectorized implementation in that
we<00:03:29.440><c> have</c><00:03:29.590><c> a</c><00:03:29.620><c> for</c><00:03:29.890><c> loop</c><00:03:30.070><c> that</c><00:03:30.130><c> you</c><00:03:30.489><c> know</c><00:03:30.610><c> summing</c>

00:03:31.050 --> 00:03:31.060 align:start position:0%
we have a for loop that you know summing
 

00:03:31.060 --> 00:03:34.740 align:start position:0%
we have a for loop that you know summing
up<00:03:31.239><c> the</c><00:03:31.480><c> n</c><00:03:31.660><c> elements</c><00:03:32.320><c> of</c><00:03:32.470><c> the</c><00:03:32.590><c> sum</c><00:03:33.120><c> in</c><00:03:34.120><c> contrast</c>

00:03:34.740 --> 00:03:34.750 align:start position:0%
up the n elements of the sum in contrast
 

00:03:34.750 --> 00:03:36.540 align:start position:0%
up the n elements of the sum in contrast
here's<00:03:35.140><c> how</c><00:03:35.380><c> you</c><00:03:35.440><c> write</c><00:03:35.890><c> a</c><00:03:36.130><c> vectorized</c>

00:03:36.540 --> 00:03:36.550 align:start position:0%
here's how you write a vectorized
 

00:03:36.550 --> 00:03:39.600 align:start position:0%
here's how you write a vectorized
implementation<00:03:37.540><c> which</c><00:03:38.350><c> is</c><00:03:38.500><c> that</c><00:03:38.709><c> you</c><00:03:39.400><c> would</c>

00:03:39.600 --> 00:03:39.610 align:start position:0%
implementation which is that you would
 

00:03:39.610 --> 00:03:43.470 align:start position:0%
implementation which is that you would
think<00:03:39.850><c> of</c><00:03:40.090><c> X</c><00:03:41.050><c> and</c><00:03:41.410><c> theta</c><00:03:42.130><c> as</c><00:03:42.580><c> vectors</c><00:03:43.180><c> and</c><00:03:43.390><c> you</c>

00:03:43.470 --> 00:03:43.480 align:start position:0%
think of X and theta as vectors and you
 

00:03:43.480 --> 00:03:45.210 align:start position:0%
think of X and theta as vectors and you
just<00:03:43.720><c> set</c><00:03:43.930><c> prediction</c><00:03:44.500><c> equals</c><00:03:44.860><c> theta</c>

00:03:45.210 --> 00:03:45.220 align:start position:0%
just set prediction equals theta
 

00:03:45.220 --> 00:03:47.280 align:start position:0%
just set prediction equals theta
transpose<00:03:45.730><c> times</c><00:03:46.270><c> X</c><00:03:46.450><c> and</c><00:03:46.690><c> just</c><00:03:46.780><c> computing</c>

00:03:47.280 --> 00:03:47.290 align:start position:0%
transpose times X and just computing
 

00:03:47.290 --> 00:03:50.040 align:start position:0%
transpose times X and just computing
like<00:03:47.410><c> so</c><00:03:47.680><c> so</c><00:03:48.459><c> you</c><00:03:48.489><c> instead</c><00:03:49.030><c> of</c><00:03:49.090><c> writing</c><00:03:49.510><c> you</c>

00:03:50.040 --> 00:03:50.050 align:start position:0%
like so so you instead of writing you
 

00:03:50.050 --> 00:03:52.350 align:start position:0%
like so so you instead of writing you
know<00:03:50.170><c> all</c><00:03:50.620><c> these</c><00:03:50.950><c> lines</c><00:03:51.190><c> of</c><00:03:51.370><c> code</c><00:03:51.670><c> with</c><00:03:51.970><c> a</c><00:03:52.000><c> for</c>

00:03:52.350 --> 00:03:52.360 align:start position:0%
know all these lines of code with a for
 

00:03:52.360 --> 00:03:54.360 align:start position:0%
know all these lines of code with a for
loop<00:03:52.540><c> use</c><00:03:53.080><c> they're</c><00:03:53.350><c> just</c><00:03:53.620><c> at</c><00:03:53.739><c> one</c><00:03:53.980><c> line</c><00:03:54.190><c> of</c>

00:03:54.360 --> 00:03:54.370 align:start position:0%
loop use they're just at one line of
 

00:03:54.370 --> 00:03:56.790 align:start position:0%
loop use they're just at one line of
code<00:03:54.580><c> and</c><00:03:54.820><c> what</c><00:03:55.300><c> this</c><00:03:55.480><c> what</c><00:03:55.810><c> what</c><00:03:56.140><c> this</c><00:03:56.290><c> line</c>

00:03:56.790 --> 00:03:56.800 align:start position:0%
code and what this what what this line
 

00:03:56.800 --> 00:03:58.500 align:start position:0%
code and what this what what this line
of<00:03:56.950><c> code</c><00:03:57.130><c> on</c><00:03:57.280><c> the</c><00:03:57.370><c> right</c><00:03:57.520><c> will</c><00:03:57.580><c> do</c><00:03:57.880><c> is</c><00:03:58.180><c> it</c><00:03:58.390><c> will</c>

00:03:58.500 --> 00:03:58.510 align:start position:0%
of code on the right will do is it will
 

00:03:58.510 --> 00:04:01.220 align:start position:0%
of code on the right will do is it will
use<00:03:58.780><c> octaves</c><00:03:59.650><c> highly</c><00:04:00.340><c> optimized</c><00:04:00.850><c> numerical</c>

00:04:01.220 --> 00:04:01.230 align:start position:0%
use octaves highly optimized numerical
 

00:04:01.230 --> 00:04:03.930 align:start position:0%
use octaves highly optimized numerical
linear<00:04:02.230><c> algebra</c><00:04:02.380><c> routines</c><00:04:03.100><c> to</c><00:04:03.340><c> compute</c><00:04:03.790><c> this</c>

00:04:03.930 --> 00:04:03.940 align:start position:0%
linear algebra routines to compute this
 

00:04:03.940 --> 00:04:05.960 align:start position:0%
linear algebra routines to compute this
inner<00:04:04.239><c> product</c><00:04:04.510><c> between</c><00:04:04.720><c> the</c><00:04:05.560><c> two</c><00:04:05.590><c> vectors</c>

00:04:05.960 --> 00:04:05.970 align:start position:0%
inner product between the two vectors
 

00:04:05.970 --> 00:04:08.759 align:start position:0%
inner product between the two vectors
theta<00:04:06.970><c> and</c><00:04:07.180><c> X</c><00:04:07.300><c> and</c><00:04:07.540><c> not</c><00:04:08.019><c> only</c><00:04:08.350><c> is</c><00:04:08.590><c> the</c>

00:04:08.759 --> 00:04:08.769 align:start position:0%
theta and X and not only is the
 

00:04:08.769 --> 00:04:11.430 align:start position:0%
theta and X and not only is the
vectorized<00:04:09.310><c> implementation</c><00:04:10.180><c> simpler</c><00:04:10.989><c> it</c>

00:04:11.430 --> 00:04:11.440 align:start position:0%
vectorized implementation simpler it
 

00:04:11.440 --> 00:04:15.320 align:start position:0%
vectorized implementation simpler it
will<00:04:11.470><c> also</c><00:04:11.769><c> run</c><00:04:12.220><c> much</c><00:04:12.459><c> more</c><00:04:12.640><c> efficiently</c><00:04:12.700><c> so</c>

00:04:15.320 --> 00:04:15.330 align:start position:0%
will also run much more efficiently so
 

00:04:15.330 --> 00:04:18.360 align:start position:0%
will also run much more efficiently so
that<00:04:16.330><c> was</c><00:04:16.510><c> octave</c><00:04:17.109><c> but</c><00:04:17.500><c> the</c><00:04:17.739><c> issue</c><00:04:17.950><c> of</c>

00:04:18.360 --> 00:04:18.370 align:start position:0%
that was octave but the issue of
 

00:04:18.370 --> 00:04:20.039 align:start position:0%
that was octave but the issue of
vectorization<00:04:18.729><c> applies</c><00:04:19.600><c> to</c><00:04:19.810><c> other</c>

00:04:20.039 --> 00:04:20.049 align:start position:0%
vectorization applies to other
 

00:04:20.049 --> 00:04:22.140 align:start position:0%
vectorization applies to other
programming<00:04:20.530><c> languages</c><00:04:20.979><c> as</c><00:04:21.160><c> well</c>

00:04:22.140 --> 00:04:22.150 align:start position:0%
programming languages as well
 

00:04:22.150 --> 00:04:25.140 align:start position:0%
programming languages as well
let's<00:04:22.270><c> look</c><00:04:22.389><c> at</c><00:04:22.509><c> an</c><00:04:22.660><c> example</c><00:04:22.750><c> in</c><00:04:23.199><c> C++</c><00:04:24.150><c> here's</c>

00:04:25.140 --> 00:04:25.150 align:start position:0%
let's look at an example in C++ here's
 

00:04:25.150 --> 00:04:26.360 align:start position:0%
let's look at an example in C++ here's
what<00:04:25.389><c> an</c><00:04:25.509><c> unvectorized</c><00:04:25.990><c> implementation</c>

00:04:26.360 --> 00:04:26.370 align:start position:0%
what an unvectorized implementation
 

00:04:26.370 --> 00:04:29.969 align:start position:0%
what an unvectorized implementation
might<00:04:27.370><c> look</c><00:04:27.520><c> like</c><00:04:27.580><c> we</c><00:04:28.030><c> again</c><00:04:28.360><c> initialize</c><00:04:28.979><c> you</c>

00:04:29.969 --> 00:04:29.979 align:start position:0%
might look like we again initialize you
 

00:04:29.979 --> 00:04:31.920 align:start position:0%
might look like we again initialize you
know<00:04:30.040><c> prediction</c><00:04:30.580><c> 20.0</c><00:04:31.180><c> and</c><00:04:31.509><c> then</c><00:04:31.630><c> we</c><00:04:31.750><c> now</c>

00:04:31.920 --> 00:04:31.930 align:start position:0%
know prediction 20.0 and then we now
 

00:04:31.930 --> 00:04:35.060 align:start position:0%
know prediction 20.0 and then we now
have<00:04:32.139><c> a</c><00:04:32.169><c> for</c><00:04:32.470><c> loop</c><00:04:32.500><c> for</c><00:04:32.710><c> J</c><00:04:32.949><c> equals</c><00:04:33.370><c> 0</c><00:04:33.669><c> up</c><00:04:33.940><c> to</c><00:04:34.300><c> n</c>

00:04:35.060 --> 00:04:35.070 align:start position:0%
have a for loop for J equals 0 up to n
 

00:04:35.070 --> 00:04:38.249 align:start position:0%
have a for loop for J equals 0 up to n
prediction<00:04:36.070><c> plus</c><00:04:36.340><c> equals</c><00:04:36.759><c> theta</c><00:04:37.030><c> J</c><00:04:37.360><c> times</c><00:04:37.690><c> XJ</c>

00:04:38.249 --> 00:04:38.259 align:start position:0%
prediction plus equals theta J times XJ
 

00:04:38.259 --> 00:04:40.590 align:start position:0%
prediction plus equals theta J times XJ
where<00:04:38.560><c> again</c><00:04:38.860><c> you</c><00:04:39.009><c> have</c><00:04:39.190><c> this</c><00:04:39.400><c> explicit</c><00:04:40.389><c> for</c>

00:04:40.590 --> 00:04:40.600 align:start position:0%
where again you have this explicit for
 

00:04:40.600 --> 00:04:43.439 align:start position:0%
where again you have this explicit for
loop<00:04:40.780><c> that</c><00:04:40.990><c> you</c><00:04:41.080><c> write</c><00:04:41.289><c> yourself</c><00:04:41.850><c> in</c><00:04:42.850><c> contrast</c>

00:04:43.439 --> 00:04:43.449 align:start position:0%
loop that you write yourself in contrast
 

00:04:43.449 --> 00:04:45.719 align:start position:0%
loop that you write yourself in contrast
using<00:04:43.930><c> a</c><00:04:44.110><c> good</c><00:04:44.380><c> numerical</c><00:04:44.740><c> linear</c><00:04:45.550><c> algebra</c>

00:04:45.719 --> 00:04:45.729 align:start position:0%
using a good numerical linear algebra
 

00:04:45.729 --> 00:04:49.260 align:start position:0%
using a good numerical linear algebra
library<00:04:46.360><c> in</c><00:04:46.449><c> C++</c><00:04:46.710><c> you</c><00:04:47.710><c> could</c><00:04:48.070><c> use</c><00:04:48.669><c> write</c><00:04:49.150><c> the</c>

00:04:49.260 --> 00:04:49.270 align:start position:0%
library in C++ you could use write the
 

00:04:49.270 --> 00:04:55.200 align:start position:0%
library in C++ you could use write the
function<00:04:49.660><c> like</c><00:04:50.020><c> or</c><00:04:50.410><c> rather</c><00:04:53.610><c> in</c><00:04:54.610><c> contrast</c>

00:04:55.200 --> 00:04:55.210 align:start position:0%
function like or rather in contrast
 

00:04:55.210 --> 00:04:57.270 align:start position:0%
function like or rather in contrast
using<00:04:55.840><c> a</c><00:04:56.050><c> good</c><00:04:56.289><c> numerical</c><00:04:56.350><c> linear</c><00:04:57.130><c> algebra</c>

00:04:57.270 --> 00:04:57.280 align:start position:0%
using a good numerical linear algebra
 

00:04:57.280 --> 00:05:00.450 align:start position:0%
using a good numerical linear algebra
library<00:04:58.090><c> in</c><00:04:58.180><c> C++</c><00:04:58.780><c> you</c><00:04:59.050><c> can</c><00:04:59.680><c> instead</c><00:05:00.100><c> write</c>

00:05:00.450 --> 00:05:00.460 align:start position:0%
library in C++ you can instead write
 

00:05:00.460 --> 00:05:02.610 align:start position:0%
library in C++ you can instead write
code<00:05:01.270><c> that</c><00:05:01.300><c> might</c><00:05:01.690><c> look</c><00:05:01.810><c> like</c><00:05:01.870><c> this</c><00:05:02.229><c> so</c>

00:05:02.610 --> 00:05:02.620 align:start position:0%
code that might look like this so
 

00:05:02.620 --> 00:05:04.080 align:start position:0%
code that might look like this so
depending<00:05:03.160><c> on</c><00:05:03.280><c> the</c><00:05:03.430><c> details</c><00:05:03.460><c> of</c><00:05:04.030><c> your</c>

00:05:04.080 --> 00:05:04.090 align:start position:0%
depending on the details of your
 

00:05:04.090 --> 00:05:06.600 align:start position:0%
depending on the details of your
numerical<00:05:04.660><c> linear</c><00:05:05.110><c> algebra</c><00:05:05.289><c> library</c><00:05:05.949><c> you</c>

00:05:06.600 --> 00:05:06.610 align:start position:0%
numerical linear algebra library you
 

00:05:06.610 --> 00:05:08.490 align:start position:0%
numerical linear algebra library you
might<00:05:06.789><c> really</c><00:05:06.970><c> have</c><00:05:07.510><c> an</c><00:05:07.630><c> object</c><00:05:08.139><c> this</c><00:05:08.320><c> is</c><00:05:08.380><c> a</c>

00:05:08.490 --> 00:05:08.500 align:start position:0%
might really have an object this is a
 

00:05:08.500 --> 00:05:10.980 align:start position:0%
might really have an object this is a
c++<00:05:08.530><c> object</c><00:05:09.250><c> which</c><00:05:09.789><c> is</c><00:05:09.910><c> vector</c><00:05:10.120><c> theta</c><00:05:10.479><c> and</c><00:05:10.690><c> the</c>

00:05:10.980 --> 00:05:10.990 align:start position:0%
c++ object which is vector theta and the
 

00:05:10.990 --> 00:05:13.650 align:start position:0%
c++ object which is vector theta and the
c++<00:05:11.530><c> object</c><00:05:11.979><c> which</c><00:05:12.220><c> is</c><00:05:12.340><c> a</c><00:05:12.370><c> vector</c><00:05:12.610><c> X</c><00:05:12.880><c> and</c><00:05:13.150><c> you</c>

00:05:13.650 --> 00:05:13.660 align:start position:0%
c++ object which is a vector X and you
 

00:05:13.660 --> 00:05:16.710 align:start position:0%
c++ object which is a vector X and you
just<00:05:13.960><c> take</c><00:05:14.320><c> theta</c><00:05:14.949><c> dot</c><00:05:15.490><c> transpose</c><00:05:15.789><c> times</c><00:05:16.449><c> X</c>

00:05:16.710 --> 00:05:16.720 align:start position:0%
just take theta dot transpose times X
 

00:05:16.720 --> 00:05:20.580 align:start position:0%
just take theta dot transpose times X
where<00:05:17.680><c> this</c><00:05:18.280><c> x</c><00:05:18.699><c> becomes</c><00:05:19.030><c> a</c><00:05:19.419><c> C++</c><00:05:20.229><c> sort</c><00:05:20.500><c> of</c>

00:05:20.580 --> 00:05:20.590 align:start position:0%
where this x becomes a C++ sort of
 

00:05:20.590 --> 00:05:22.529 align:start position:0%
where this x becomes a C++ sort of
overload<00:05:20.979><c> the</c><00:05:21.130><c> operator</c><00:05:21.240><c> so</c><00:05:22.240><c> that</c><00:05:22.330><c> you</c><00:05:22.389><c> can</c>

00:05:22.529 --> 00:05:22.539 align:start position:0%
overload the operator so that you can
 

00:05:22.539 --> 00:05:25.950 align:start position:0%
overload the operator so that you can
just<00:05:22.720><c> multiply</c><00:05:23.430><c> these</c><00:05:24.430><c> two</c><00:05:24.669><c> vectors</c><00:05:25.120><c> in</c><00:05:25.330><c> C++</c>

00:05:25.950 --> 00:05:25.960 align:start position:0%
just multiply these two vectors in C++
 

00:05:25.960 --> 00:05:28.200 align:start position:0%
just multiply these two vectors in C++
and<00:05:26.139><c> depending</c><00:05:26.949><c> on</c><00:05:27.099><c> you</c><00:05:27.370><c> know</c><00:05:27.400><c> the</c><00:05:27.520><c> details</c><00:05:27.789><c> of</c>

00:05:28.200 --> 00:05:28.210 align:start position:0%
and depending on you know the details of
 

00:05:28.210 --> 00:05:29.879 align:start position:0%
and depending on you know the details of
your<00:05:28.270><c> numerical</c><00:05:28.660><c> linear</c><00:05:29.050><c> algebra</c><00:05:29.260><c> library</c>

00:05:29.879 --> 00:05:29.889 align:start position:0%
your numerical linear algebra library
 

00:05:29.889 --> 00:05:31.529 align:start position:0%
your numerical linear algebra library
you<00:05:30.460><c> might</c><00:05:30.639><c> end</c><00:05:30.789><c> up</c><00:05:30.910><c> using</c><00:05:31.150><c> a</c><00:05:31.300><c> slightly</c>

00:05:31.529 --> 00:05:31.539 align:start position:0%
you might end up using a slightly
 

00:05:31.539 --> 00:05:33.930 align:start position:0%
you might end up using a slightly
different<00:05:31.870><c> syntax</c><00:05:32.050><c> but</c><00:05:32.800><c> by</c><00:05:33.010><c> relying</c><00:05:33.430><c> on</c><00:05:33.760><c> the</c>

00:05:33.930 --> 00:05:33.940 align:start position:0%
different syntax but by relying on the
 

00:05:33.940 --> 00:05:35.670 align:start position:0%
different syntax but by relying on the
library<00:05:34.360><c> to</c><00:05:34.510><c> do</c><00:05:34.660><c> this</c><00:05:34.810><c> in</c><00:05:34.990><c> the</c><00:05:35.080><c> product</c><00:05:35.500><c> you</c>

00:05:35.670 --> 00:05:35.680 align:start position:0%
library to do this in the product you
 

00:05:35.680 --> 00:05:37.620 align:start position:0%
library to do this in the product you
can<00:05:36.039><c> get</c><00:05:36.190><c> a</c><00:05:36.220><c> much</c><00:05:36.430><c> simpler</c><00:05:36.760><c> piece</c><00:05:36.940><c> of</c><00:05:37.090><c> code</c><00:05:37.360><c> and</c>

00:05:37.620 --> 00:05:37.630 align:start position:0%
can get a much simpler piece of code and
 

00:05:37.630 --> 00:05:41.250 align:start position:0%
can get a much simpler piece of code and
a<00:05:38.080><c> much</c><00:05:38.349><c> more</c><00:05:38.530><c> efficient</c><00:05:39.070><c> one</c><00:05:39.810><c> let's</c><00:05:40.810><c> now</c><00:05:41.020><c> look</c>

00:05:41.250 --> 00:05:41.260 align:start position:0%
a much more efficient one let's now look
 

00:05:41.260 --> 00:05:43.890 align:start position:0%
a much more efficient one let's now look
at<00:05:41.470><c> a</c><00:05:41.560><c> more</c><00:05:41.590><c> sophisticated</c><00:05:42.090><c> example</c><00:05:43.090><c> just</c><00:05:43.810><c> to</c>

00:05:43.890 --> 00:05:43.900 align:start position:0%
at a more sophisticated example just to
 

00:05:43.900 --> 00:05:45.600 align:start position:0%
at a more sophisticated example just to
remind<00:05:44.110><c> you</c><00:05:44.380><c> here's</c><00:05:44.409><c> our</c><00:05:44.949><c> update</c><00:05:45.340><c> rule</c><00:05:45.580><c> for</c>

00:05:45.600 --> 00:05:45.610 align:start position:0%
remind you here's our update rule for
 

00:05:45.610 --> 00:05:47.189 align:start position:0%
remind you here's our update rule for
gradient<00:05:46.240><c> descent</c><00:05:46.659><c> for</c><00:05:46.870><c> linear</c><00:05:47.020><c> regression</c>

00:05:47.189 --> 00:05:47.199 align:start position:0%
gradient descent for linear regression
 

00:05:47.199 --> 00:05:50.610 align:start position:0%
gradient descent for linear regression
and<00:05:47.849><c> so</c><00:05:48.849><c> we</c><00:05:48.970><c> update</c><00:05:49.240><c> theta</c><00:05:49.449><c> J</c><00:05:49.780><c> using</c><00:05:50.199><c> this</c><00:05:50.349><c> rule</c>

00:05:50.610 --> 00:05:50.620 align:start position:0%
and so we update theta J using this rule
 

00:05:50.620 --> 00:05:54.270 align:start position:0%
and so we update theta J using this rule
for<00:05:50.889><c> all</c><00:05:50.919><c> values</c><00:05:51.490><c> of</c><00:05:51.520><c> J</c><00:05:51.880><c> equals</c><00:05:51.909><c> 0</c><00:05:52.659><c> 1</c><00:05:53.020><c> 2</c><00:05:53.740><c> and</c><00:05:54.099><c> so</c>

00:05:54.270 --> 00:05:54.280 align:start position:0%
for all values of J equals 0 1 2 and so
 

00:05:54.280 --> 00:05:57.390 align:start position:0%
for all values of J equals 0 1 2 and so
on<00:05:54.460><c> and</c><00:05:54.750><c> if</c><00:05:55.750><c> I</c><00:05:55.840><c> just</c><00:05:55.870><c> write</c><00:05:56.229><c> out</c><00:05:56.409><c> these</c>

00:05:57.390 --> 00:05:57.400 align:start position:0%
on and if I just write out these
 

00:05:57.400 --> 00:05:59.610 align:start position:0%
on and if I just write out these
equations<00:05:57.909><c> for</c><00:05:58.180><c> theta</c><00:05:58.389><c> 0</c><00:05:58.510><c> theta</c><00:05:58.990><c> 1</c><00:05:59.289><c> theta</c><00:05:59.470><c> 2</c>

00:05:59.610 --> 00:05:59.620 align:start position:0%
equations for theta 0 theta 1 theta 2
 

00:05:59.620 --> 00:06:02.460 align:start position:0%
equations for theta 0 theta 1 theta 2
assuming<00:06:00.159><c> we</c><00:06:00.460><c> have</c><00:06:00.599><c> two</c><00:06:01.599><c> features</c><00:06:02.050><c> so</c><00:06:02.289><c> N</c>

00:06:02.460 --> 00:06:02.470 align:start position:0%
assuming we have two features so N
 

00:06:02.470 --> 00:06:04.620 align:start position:0%
assuming we have two features so N
equals<00:06:02.560><c> 2</c><00:06:03.010><c> then</c><00:06:03.669><c> these</c><00:06:03.880><c> are</c><00:06:03.940><c> the</c><00:06:04.120><c> updates</c><00:06:04.210><c> we</c>

00:06:04.620 --> 00:06:04.630 align:start position:0%
equals 2 then these are the updates we
 

00:06:04.630 --> 00:06:07.589 align:start position:0%
equals 2 then these are the updates we
perform<00:06:05.020><c> to</c><00:06:05.199><c> theta</c><00:06:05.409><c> 0</c><00:06:05.530><c> theta</c><00:06:05.949><c> 1</c><00:06:06.220><c> theta</c><00:06:06.370><c> 2</c><00:06:06.599><c> where</c>

00:06:07.589 --> 00:06:07.599 align:start position:0%
perform to theta 0 theta 1 theta 2 where
 

00:06:07.599 --> 00:06:09.689 align:start position:0%
perform to theta 0 theta 1 theta 2 where
you<00:06:07.870><c> might</c><00:06:08.260><c> remember</c><00:06:08.409><c> am</c><00:06:08.830><c> i</c><00:06:08.949><c> saying</c><00:06:09.280><c> in</c><00:06:09.520><c> an</c>

00:06:09.689 --> 00:06:09.699 align:start position:0%
you might remember am i saying in an
 

00:06:09.699 --> 00:06:11.490 align:start position:0%
you might remember am i saying in an
earlier<00:06:10.030><c> video</c><00:06:10.180><c> that</c><00:06:10.930><c> these</c><00:06:11.139><c> should</c><00:06:11.440><c> be</c>

00:06:11.490 --> 00:06:11.500 align:start position:0%
earlier video that these should be
 

00:06:11.500 --> 00:06:16.230 align:start position:0%
earlier video that these should be
simultaneous<00:06:12.000><c> updates</c><00:06:14.039><c> so</c><00:06:15.039><c> next</c><00:06:15.909><c> thing</c><00:06:16.030><c> we</c>

00:06:16.230 --> 00:06:16.240 align:start position:0%
simultaneous updates so next thing we
 

00:06:16.240 --> 00:06:17.839 align:start position:0%
simultaneous updates so next thing we
can<00:06:16.389><c> come</c><00:06:16.630><c> up</c><00:06:16.659><c> with</c><00:06:16.810><c> a</c><00:06:17.199><c> vectorized</c>

00:06:17.839 --> 00:06:17.849 align:start position:0%
can come up with a vectorized
 

00:06:17.849 --> 00:06:21.360 align:start position:0%
can come up with a vectorized
implementation<00:06:18.849><c> of</c><00:06:19.090><c> this</c><00:06:19.889><c> here</c><00:06:20.889><c> are</c><00:06:21.010><c> my</c><00:06:21.099><c> same</c>

00:06:21.360 --> 00:06:21.370 align:start position:0%
implementation of this here are my same
 

00:06:21.370 --> 00:06:22.950 align:start position:0%
implementation of this here are my same
three<00:06:21.669><c> equations</c><00:06:22.180><c> written</c><00:06:22.570><c> in</c><00:06:22.659><c> a</c><00:06:22.720><c> slightly</c>

00:06:22.950 --> 00:06:22.960 align:start position:0%
three equations written in a slightly
 

00:06:22.960 --> 00:06:24.990 align:start position:0%
three equations written in a slightly
smaller<00:06:23.320><c> font</c><00:06:23.409><c> and</c><00:06:23.889><c> you</c><00:06:24.220><c> can</c><00:06:24.340><c> imagine</c><00:06:24.520><c> that</c>

00:06:24.990 --> 00:06:25.000 align:start position:0%
smaller font and you can imagine that
 

00:06:25.000 --> 00:06:26.640 align:start position:0%
smaller font and you can imagine that
one<00:06:25.210><c> way</c><00:06:25.389><c> to</c><00:06:25.449><c> implement</c><00:06:25.840><c> these</c><00:06:26.199><c> three</c><00:06:26.470><c> lines</c>

00:06:26.640 --> 00:06:26.650 align:start position:0%
one way to implement these three lines
 

00:06:26.650 --> 00:06:28.560 align:start position:0%
one way to implement these three lines
of<00:06:26.830><c> code</c><00:06:26.889><c> is</c><00:06:27.370><c> to</c><00:06:27.580><c> have</c><00:06:27.699><c> a</c><00:06:27.729><c> for</c><00:06:28.090><c> loop</c><00:06:28.270><c> that</c><00:06:28.330><c> says</c>

00:06:28.560 --> 00:06:28.570 align:start position:0%
of code is to have a for loop that says
 

00:06:28.570 --> 00:06:32.670 align:start position:0%
of code is to have a for loop that says
you<00:06:28.960><c> know</c><00:06:29.110><c> for</c><00:06:29.800><c> J</c><00:06:30.010><c> equals</c><00:06:30.520><c> 0</c><00:06:31.000><c> 1</c><00:06:31.389><c> through</c><00:06:31.779><c> 2</c><00:06:32.020><c> to</c>

00:06:32.670 --> 00:06:32.680 align:start position:0%
you know for J equals 0 1 through 2 to
 

00:06:32.680 --> 00:06:34.350 align:start position:0%
you know for J equals 0 1 through 2 to
update<00:06:33.250><c> theta</c><00:06:33.580><c> J</c>

00:06:34.350 --> 00:06:34.360 align:start position:0%
update theta J
 

00:06:34.360 --> 00:06:36.719 align:start position:0%
update theta J
like<00:06:34.539><c> that</c><00:06:34.719><c> but</c><00:06:35.620><c> instead</c><00:06:35.770><c> let's</c><00:06:36.340><c> come</c><00:06:36.580><c> up</c><00:06:36.610><c> with</c>

00:06:36.719 --> 00:06:36.729 align:start position:0%
like that but instead let's come up with
 

00:06:36.729 --> 00:06:39.360 align:start position:0%
like that but instead let's come up with
a<00:06:37.090><c> vectorized</c><00:06:37.650><c> implementation</c><00:06:38.650><c> and</c><00:06:38.919><c> see</c><00:06:39.250><c> if</c>

00:06:39.360 --> 00:06:39.370 align:start position:0%
a vectorized implementation and see if
 

00:06:39.370 --> 00:06:41.459 align:start position:0%
a vectorized implementation and see if
we<00:06:39.729><c> can</c><00:06:39.879><c> have</c><00:06:40.030><c> a</c><00:06:40.060><c> simpler</c><00:06:40.419><c> way</c><00:06:40.569><c> to</c><00:06:40.780><c> basically</c>

00:06:41.459 --> 00:06:41.469 align:start position:0%
we can have a simpler way to basically
 

00:06:41.469 --> 00:06:43.589 align:start position:0%
we can have a simpler way to basically
compress<00:06:42.099><c> these</c><00:06:42.400><c> three</c><00:06:42.729><c> lines</c><00:06:42.969><c> of</c><00:06:43.150><c> code</c><00:06:43.210><c> or</c>

00:06:43.589 --> 00:06:43.599 align:start position:0%
compress these three lines of code or
 

00:06:43.599 --> 00:06:46.260 align:start position:0%
compress these three lines of code or
for<00:06:44.229><c> loop</c><00:06:44.409><c> they</c><00:06:44.710><c> you</c><00:06:45.099><c> know</c><00:06:45.189><c> effectively</c><00:06:45.759><c> does</c>

00:06:46.260 --> 00:06:46.270 align:start position:0%
for loop they you know effectively does
 

00:06:46.270 --> 00:06:48.659 align:start position:0%
for loop they you know effectively does
these<00:06:46.509><c> three</c><00:06:46.719><c> sets</c><00:06:47.020><c> one</c><00:06:47.259><c> set</c><00:06:47.289><c> at</c><00:06:47.590><c> a</c><00:06:47.650><c> time</c><00:06:47.860><c> let's</c>

00:06:48.659 --> 00:06:48.669 align:start position:0%
these three sets one set at a time let's
 

00:06:48.669 --> 00:06:50.100 align:start position:0%
these three sets one set at a time let's
say<00:06:48.789><c> you</c><00:06:48.849><c> can</c><00:06:49.030><c> take</c><00:06:49.210><c> these</c><00:06:49.330><c> three</c><00:06:49.509><c> steps</c><00:06:49.840><c> and</c>

00:06:50.100 --> 00:06:50.110 align:start position:0%
say you can take these three steps and
 

00:06:50.110 --> 00:06:52.320 align:start position:0%
say you can take these three steps and
compress<00:06:50.469><c> them</c><00:06:50.770><c> into</c><00:06:50.800><c> one</c><00:06:51.580><c> line</c><00:06:51.849><c> of</c><00:06:52.150><c> a</c>

00:06:52.320 --> 00:06:52.330 align:start position:0%
compress them into one line of a
 

00:06:52.330 --> 00:06:55.740 align:start position:0%
compress them into one line of a
vectorized<00:06:52.719><c> code</c><00:06:53.370><c> here's</c><00:06:54.370><c> the</c><00:06:54.520><c> idea</c><00:06:54.819><c> what</c><00:06:55.629><c> I'm</c>

00:06:55.740 --> 00:06:55.750 align:start position:0%
vectorized code here's the idea what I'm
 

00:06:55.750 --> 00:06:57.499 align:start position:0%
vectorized code here's the idea what I'm
going<00:06:55.960><c> to</c><00:06:56.050><c> do</c><00:06:56.199><c> is</c><00:06:56.409><c> I'm</c><00:06:56.620><c> going</c><00:06:56.680><c> to</c><00:06:56.889><c> think</c><00:06:57.250><c> of</c>

00:06:57.499 --> 00:06:57.509 align:start position:0%
going to do is I'm going to think of
 

00:06:57.509 --> 00:07:00.869 align:start position:0%
going to do is I'm going to think of
theta<00:06:58.509><c> as</c><00:06:58.960><c> a</c><00:06:59.020><c> vector</c><00:06:59.409><c> and</c><00:07:00.099><c> I'm</c><00:07:00.639><c> going</c><00:07:00.819><c> to</c>

00:07:00.869 --> 00:07:00.879 align:start position:0%
theta as a vector and I'm going to
 

00:07:00.879 --> 00:07:06.379 align:start position:0%
theta as a vector and I'm going to
update<00:07:01.090><c> theta</c><00:07:01.629><c> as</c><00:07:02.020><c> theta</c><00:07:03.750><c> minus</c><00:07:04.750><c> alpha</c><00:07:05.409><c> times</c>

00:07:06.379 --> 00:07:06.389 align:start position:0%
update theta as theta minus alpha times
 

00:07:06.389 --> 00:07:13.230 align:start position:0%
update theta as theta minus alpha times
some<00:07:07.389><c> other</c><00:07:07.569><c> vector</c><00:07:08.879><c> Delta</c><00:07:10.500><c> where</c><00:07:11.500><c> Delta</c><00:07:12.240><c> is</c>

00:07:13.230 --> 00:07:13.240 align:start position:0%
some other vector Delta where Delta is
 

00:07:13.240 --> 00:07:17.580 align:start position:0%
some other vector Delta where Delta is
going<00:07:13.389><c> to</c><00:07:13.569><c> be</c><00:07:13.659><c> equal</c><00:07:13.900><c> to</c><00:07:14.490><c> one</c><00:07:15.490><c> over</c><00:07:15.520><c> m</c><00:07:16.319><c> sum</c><00:07:17.319><c> from</c>

00:07:17.580 --> 00:07:17.590 align:start position:0%
going to be equal to one over m sum from
 

00:07:17.590 --> 00:07:23.779 align:start position:0%
going to be equal to one over m sum from
I<00:07:17.860><c> equals</c><00:07:18.279><c> 1</c><00:07:18.370><c> through</c><00:07:18.550><c> m</c><00:07:19.090><c> and</c><00:07:21.180><c> then</c><00:07:22.180><c> this</c><00:07:22.360><c> term</c>

00:07:23.779 --> 00:07:23.789 align:start position:0%
I equals 1 through m and then this term
 

00:07:23.789 --> 00:07:28.980 align:start position:0%
I equals 1 through m and then this term
over<00:07:24.789><c> on</c><00:07:25.509><c> the</c><00:07:25.719><c> right</c><00:07:26.400><c> okay</c><00:07:27.400><c> so</c><00:07:28.210><c> let</c><00:07:28.599><c> me</c><00:07:28.629><c> explain</c>

00:07:28.980 --> 00:07:28.990 align:start position:0%
over on the right okay so let me explain
 

00:07:28.990 --> 00:07:32.219 align:start position:0%
over on the right okay so let me explain
what's<00:07:29.229><c> going</c><00:07:29.259><c> on</c><00:07:29.529><c> here</c><00:07:30.629><c> here</c><00:07:31.629><c> I'm</c><00:07:31.870><c> going</c><00:07:32.080><c> to</c>

00:07:32.219 --> 00:07:32.229 align:start position:0%
what's going on here here I'm going to
 

00:07:32.229 --> 00:07:36.119 align:start position:0%
what's going on here here I'm going to
treat<00:07:32.529><c> theta</c><00:07:32.979><c> as</c><00:07:33.460><c> a</c><00:07:34.240><c> vector</c><00:07:34.409><c> so</c><00:07:35.409><c> there's</c><00:07:35.590><c> an</c><00:07:35.710><c> n</c>

00:07:36.119 --> 00:07:36.129 align:start position:0%
treat theta as a vector so there's an n
 

00:07:36.129 --> 00:07:38.519 align:start position:0%
treat theta as a vector so there's an n
plus<00:07:36.400><c> 1</c><00:07:36.610><c> dimensional</c><00:07:37.060><c> vector</c><00:07:37.229><c> I'm</c><00:07:38.229><c> singing</c>

00:07:38.519 --> 00:07:38.529 align:start position:0%
plus 1 dimensional vector I'm singing
 

00:07:38.529 --> 00:07:40.890 align:start position:0%
plus 1 dimensional vector I'm singing
that<00:07:38.710><c> theta</c><00:07:38.889><c> gets</c><00:07:39.460><c> your</c><00:07:39.729><c> updated</c><00:07:40.180><c> as</c><00:07:40.449><c> that's</c><00:07:40.779><c> a</c>

00:07:40.890 --> 00:07:40.900 align:start position:0%
that theta gets your updated as that's a
 

00:07:40.900 --> 00:07:45.180 align:start position:0%
that theta gets your updated as that's a
vector<00:07:41.080><c> or</c><00:07:41.500><c> n</c><00:07:42.430><c> plus</c><00:07:42.460><c> 1</c><00:07:43.020><c> alpha</c><00:07:44.020><c> is</c><00:07:44.620><c> a</c><00:07:44.680><c> real</c>

00:07:45.180 --> 00:07:45.190 align:start position:0%
vector or n plus 1 alpha is a real
 

00:07:45.190 --> 00:07:50.219 align:start position:0%
vector or n plus 1 alpha is a real
number<00:07:45.250><c> and</c><00:07:46.440><c> Delta</c><00:07:47.440><c> here</c><00:07:48.300><c> is</c><00:07:49.300><c> a</c><00:07:49.539><c> vector</c><00:07:49.900><c> so</c>

00:07:50.219 --> 00:07:50.229 align:start position:0%
number and Delta here is a vector so
 

00:07:50.229 --> 00:07:53.249 align:start position:0%
number and Delta here is a vector so
this<00:07:50.560><c> subtraction</c><00:07:51.509><c> operation</c><00:07:52.509><c> that's</c><00:07:53.080><c> a</c>

00:07:53.249 --> 00:07:53.259 align:start position:0%
this subtraction operation that's a
 

00:07:53.259 --> 00:07:55.980 align:start position:0%
this subtraction operation that's a
vector<00:07:53.500><c> subtraction</c><00:07:53.969><c> because</c><00:07:54.969><c> uh</c><00:07:55.000><c> alpha</c>

00:07:55.980 --> 00:07:55.990 align:start position:0%
vector subtraction because uh alpha
 

00:07:55.990 --> 00:07:58.439 align:start position:0%
vector subtraction because uh alpha
times<00:07:56.229><c> Delta</c><00:07:56.469><c> is</c><00:07:56.979><c> a</c><00:07:57.039><c> vector</c><00:07:57.639><c> and</c><00:07:57.819><c> so</c><00:07:58.389><c> I'm</c>

00:07:58.439 --> 00:07:58.449 align:start position:0%
times Delta is a vector and so I'm
 

00:07:58.449 --> 00:08:00.719 align:start position:0%
times Delta is a vector and so I'm
saying<00:07:58.690><c> theta</c><00:07:59.080><c> gets</c><00:07:59.740><c> you</c><00:08:00.009><c> know</c><00:08:00.129><c> this</c><00:08:00.370><c> vector</c>

00:08:00.719 --> 00:08:00.729 align:start position:0%
saying theta gets you know this vector
 

00:08:00.729 --> 00:08:04.550 align:start position:0%
saying theta gets you know this vector
alpha<00:08:01.000><c> times</c><00:08:01.389><c> Delta</c><00:08:01.599><c> subtracted</c><00:08:02.379><c> from</c><00:08:02.500><c> it</c><00:08:03.419><c> so</c>

00:08:04.550 --> 00:08:04.560 align:start position:0%
alpha times Delta subtracted from it so
 

00:08:04.560 --> 00:08:07.260 align:start position:0%
alpha times Delta subtracted from it so
what<00:08:05.560><c> is</c><00:08:05.680><c> the</c><00:08:05.800><c> vector</c><00:08:05.949><c> Delta</c><00:08:06.460><c> well</c><00:08:06.849><c> this</c>

00:08:07.260 --> 00:08:07.270 align:start position:0%
what is the vector Delta well this
 

00:08:07.270 --> 00:08:11.790 align:start position:0%
what is the vector Delta well this
vector<00:08:07.689><c> Delta</c><00:08:09.029><c> looks</c><00:08:10.029><c> like</c><00:08:10.210><c> this</c><00:08:10.419><c> and</c><00:08:10.680><c> what</c><00:08:11.680><c> is</c>

00:08:11.790 --> 00:08:11.800 align:start position:0%
vector Delta looks like this and what is
 

00:08:11.800 --> 00:08:14.850 align:start position:0%
vector Delta looks like this and what is
meant<00:08:12.009><c> to</c><00:08:12.129><c> be</c><00:08:12.250><c> is</c><00:08:12.400><c> really</c><00:08:12.759><c> meant</c><00:08:13.089><c> to</c><00:08:13.180><c> be</c><00:08:13.860><c> this</c>

00:08:14.850 --> 00:08:14.860 align:start position:0%
meant to be is really meant to be this
 

00:08:14.860 --> 00:08:16.610 align:start position:0%
meant to be is really meant to be this
thing<00:08:15.129><c> over</c><00:08:15.370><c> here</c>

00:08:16.610 --> 00:08:16.620 align:start position:0%
thing over here
 

00:08:16.620 --> 00:08:20.129 align:start position:0%
thing over here
concretely<00:08:17.699><c> Delta</c><00:08:18.699><c> will</c><00:08:19.029><c> be</c><00:08:19.060><c> a</c><00:08:19.210><c> n</c><00:08:19.569><c> plus</c><00:08:19.900><c> 1</c>

00:08:20.129 --> 00:08:20.139 align:start position:0%
concretely Delta will be a n plus 1
 

00:08:20.139 --> 00:08:22.950 align:start position:0%
concretely Delta will be a n plus 1
dimensional<00:08:20.620><c> vector</c><00:08:20.979><c> and</c><00:08:21.240><c> the</c><00:08:22.240><c> very</c><00:08:22.629><c> first</c>

00:08:22.950 --> 00:08:22.960 align:start position:0%
dimensional vector and the very first
 

00:08:22.960 --> 00:08:26.100 align:start position:0%
dimensional vector and the very first
element<00:08:23.500><c> of</c><00:08:23.710><c> the</c><00:08:24.039><c> vector</c><00:08:24.189><c> Delta</c><00:08:24.819><c> is</c><00:08:25.719><c> going</c><00:08:25.960><c> to</c>

00:08:26.100 --> 00:08:26.110 align:start position:0%
element of the vector Delta is going to
 

00:08:26.110 --> 00:08:29.670 align:start position:0%
element of the vector Delta is going to
be<00:08:26.199><c> equal</c><00:08:26.409><c> to</c><00:08:26.439><c> that</c><00:08:26.969><c> so</c><00:08:27.969><c> if</c><00:08:28.750><c> we</c><00:08:29.199><c> have</c><00:08:29.439><c> that</c>

00:08:29.670 --> 00:08:29.680 align:start position:0%
be equal to that so if we have that
 

00:08:29.680 --> 00:08:31.679 align:start position:0%
be equal to that so if we have that
Delta<00:08:29.889><c> you</c><00:08:30.550><c> know</c><00:08:30.639><c> if</c><00:08:30.699><c> we</c><00:08:30.789><c> index</c><00:08:31.120><c> it</c><00:08:31.270><c> from</c><00:08:31.389><c> zero</c>

00:08:31.679 --> 00:08:31.689 align:start position:0%
Delta you know if we index it from zero
 

00:08:31.689 --> 00:08:35.279 align:start position:0%
Delta you know if we index it from zero
as<00:08:31.960><c> Delta</c><00:08:32.289><c> 0</c><00:08:32.560><c> Delta</c><00:08:33.010><c> 1</c><00:08:33.190><c> Delta</c><00:08:33.219><c> 2</c><00:08:33.930><c> what</c><00:08:34.930><c> I</c><00:08:34.959><c> want</c>

00:08:35.279 --> 00:08:35.289 align:start position:0%
as Delta 0 Delta 1 Delta 2 what I want
 

00:08:35.289 --> 00:08:40.469 align:start position:0%
as Delta 0 Delta 1 Delta 2 what I want
is<00:08:35.529><c> that</c><00:08:35.940><c> Delta</c><00:08:36.940><c> 0</c><00:08:37.620><c> is</c><00:08:38.620><c> equal</c><00:08:39.070><c> to</c><00:08:39.449><c> you</c><00:08:40.449><c> know</c>

00:08:40.469 --> 00:08:40.479 align:start position:0%
is that Delta 0 is equal to you know
 

00:08:40.479 --> 00:08:42.899 align:start position:0%
is that Delta 0 is equal to you know
this<00:08:41.169><c> first</c><00:08:41.409><c> boxing</c><00:08:41.949><c> green</c><00:08:42.190><c> up</c><00:08:42.370><c> above</c><00:08:42.640><c> and</c>

00:08:42.899 --> 00:08:42.909 align:start position:0%
this first boxing green up above and
 

00:08:42.909 --> 00:08:45.930 align:start position:0%
this first boxing green up above and
indeed<00:08:43.890><c> you</c><00:08:44.890><c> might</c><00:08:45.100><c> be</c><00:08:45.459><c> able</c><00:08:45.520><c> to</c><00:08:45.670><c> convince</c>

00:08:45.930 --> 00:08:45.940 align:start position:0%
indeed you might be able to convince
 

00:08:45.940 --> 00:08:48.210 align:start position:0%
indeed you might be able to convince
yourself<00:08:46.029><c> that</c><00:08:46.300><c> Delta</c><00:08:46.720><c> 0</c><00:08:46.990><c> is</c><00:08:47.319><c> this</c><00:08:47.529><c> 1</c><00:08:47.800><c> over</c><00:08:48.010><c> m</c>

00:08:48.210 --> 00:08:48.220 align:start position:0%
yourself that Delta 0 is this 1 over m
 

00:08:48.220 --> 00:08:54.380 align:start position:0%
yourself that Delta 0 is this 1 over m
sum<00:08:48.940><c> of</c><00:08:49.209><c> you</c><00:08:49.569><c> know</c><00:08:49.690><c> H</c><00:08:49.930><c> of</c><00:08:50.110><c> X</c><00:08:51.420><c> X</c><00:08:52.420><c> I</c><00:08:52.720><c> minus</c><00:08:53.319><c> y</c><00:08:53.529><c> I</c>

00:08:54.380 --> 00:08:54.390 align:start position:0%
sum of you know H of X X I minus y I
 

00:08:54.390 --> 00:08:59.939 align:start position:0%
sum of you know H of X X I minus y I
times<00:08:55.390><c> X</c><00:08:56.350><c> I</c><00:08:57.029><c> 0</c><00:08:58.029><c> so</c><00:08:58.930><c> let's</c><00:08:59.410><c> just</c><00:08:59.620><c> make</c><00:08:59.740><c> sure</c><00:08:59.770><c> that</c>

00:08:59.939 --> 00:08:59.949 align:start position:0%
times X I 0 so let's just make sure that
 

00:08:59.949 --> 00:09:02.280 align:start position:0%
times X I 0 so let's just make sure that
we're<00:09:00.850><c> on</c><00:09:00.880><c> the</c><00:09:00.940><c> same</c><00:09:01.180><c> page</c><00:09:01.449><c> about</c><00:09:01.480><c> how</c><00:09:01.810><c> Delta</c>

00:09:02.280 --> 00:09:02.290 align:start position:0%
we're on the same page about how Delta
 

00:09:02.290 --> 00:09:05.010 align:start position:0%
we're on the same page about how Delta
really<00:09:02.770><c> is</c><00:09:02.949><c> computed</c><00:09:03.520><c> Delta</c><00:09:04.390><c> is</c><00:09:04.510><c> 1</c><00:09:04.690><c> over</c><00:09:04.870><c> m</c>

00:09:05.010 --> 00:09:05.020 align:start position:0%
really is computed Delta is 1 over m
 

00:09:05.020 --> 00:09:08.490 align:start position:0%
really is computed Delta is 1 over m
times<00:09:05.680><c> this</c><00:09:05.980><c> sum</c><00:09:06.370><c> over</c><00:09:06.670><c> here</c><00:09:07.360><c> and</c><00:09:07.569><c> you</c><00:09:08.350><c> know</c>

00:09:08.490 --> 00:09:08.500 align:start position:0%
times this sum over here and you know
 

00:09:08.500 --> 00:09:11.340 align:start position:0%
times this sum over here and you know
what<00:09:09.339><c> is</c><00:09:09.459><c> this</c><00:09:09.640><c> sum</c><00:09:09.850><c> well</c><00:09:10.120><c> this</c><00:09:10.779><c> term</c><00:09:11.140><c> over</c>

00:09:11.340 --> 00:09:11.350 align:start position:0%
what is this sum well this term over
 

00:09:11.350 --> 00:09:18.720 align:start position:0%
what is this sum well this term over
here<00:09:13.440><c> that's</c><00:09:14.440><c> a</c><00:09:14.680><c> real</c><00:09:14.920><c> number</c><00:09:15.069><c> and</c><00:09:17.250><c> the</c><00:09:18.250><c> second</c>

00:09:18.720 --> 00:09:18.730 align:start position:0%
here that's a real number and the second
 

00:09:18.730 --> 00:09:22.139 align:start position:0%
here that's a real number and the second
term<00:09:19.000><c> over</c><00:09:19.120><c> here</c><00:09:19.270><c> X</c><00:09:19.779><c> I</c><00:09:20.339><c> this</c><00:09:21.339><c> term</c><00:09:21.610><c> over</c><00:09:21.819><c> there</c>

00:09:22.139 --> 00:09:22.149 align:start position:0%
term over here X I this term over there
 

00:09:22.149 --> 00:09:26.160 align:start position:0%
term over here X I this term over there
is<00:09:22.390><c> a</c><00:09:23.380><c> vector</c><00:09:24.130><c> right</c><00:09:24.670><c> because</c><00:09:24.910><c> X</c><00:09:25.120><c> I</c><00:09:25.360><c> you</c><00:09:26.050><c> know</c>

00:09:26.160 --> 00:09:26.170 align:start position:0%
is a vector right because X I you know
 

00:09:26.170 --> 00:09:29.160 align:start position:0%
is a vector right because X I you know
may<00:09:26.500><c> be</c><00:09:26.529><c> a</c><00:09:26.709><c> vector</c><00:09:27.630><c> that</c><00:09:28.630><c> would</c><00:09:28.750><c> be</c><00:09:28.899><c> you</c><00:09:28.990><c> say</c>

00:09:29.160 --> 00:09:29.170 align:start position:0%
may be a vector that would be you say
 

00:09:29.170 --> 00:09:37.590 align:start position:0%
may be a vector that would be you say
xi0<00:09:30.810><c> xi1</c><00:09:31.810><c> xi2</c><00:09:35.279><c> right</c><00:09:36.279><c> and</c><00:09:36.579><c> what</c><00:09:37.360><c> is</c><00:09:37.510><c> the</c>

00:09:37.590 --> 00:09:37.600 align:start position:0%
xi0 xi1 xi2 right and what is the
 

00:09:37.600 --> 00:09:39.780 align:start position:0%
xi0 xi1 xi2 right and what is the
summation<00:09:37.959><c> well</c><00:09:38.470><c> what</c><00:09:39.010><c> the</c><00:09:39.130><c> summation</c><00:09:39.670><c> is</c>

00:09:39.780 --> 00:09:39.790 align:start position:0%
summation well what the summation is
 

00:09:39.790 --> 00:09:45.389 align:start position:0%
summation well what the summation is
saying<00:09:40.060><c> is</c><00:09:40.300><c> that</c><00:09:40.890><c> this</c><00:09:41.890><c> term</c><00:09:42.370><c> that</c><00:09:44.040><c> is</c><00:09:45.040><c> this</c>

00:09:45.389 --> 00:09:45.399 align:start position:0%
saying is that this term that is this
 

00:09:45.399 --> 00:09:51.030 align:start position:0%
saying is that this term that is this
term<00:09:45.459><c> over</c><00:09:45.910><c> here</c><00:09:46.440><c> this</c><00:09:47.440><c> is</c><00:09:47.649><c> equal</c><00:09:48.069><c> to</c><00:09:48.420><c> H</c><00:09:49.420><c> of</c><00:09:50.040><c> x1</c>

00:09:51.030 --> 00:09:51.040 align:start position:0%
term over here this is equal to H of x1
 

00:09:51.040 --> 00:10:01.309 align:start position:0%
term over here this is equal to H of x1
minus<00:09:52.260><c> y1</c><00:09:53.490><c> times</c><00:09:54.490><c> x1</c><00:09:55.300><c> plus</c><00:09:56.250><c> h</c><00:09:57.250><c> of</c><00:09:58.050><c> x2</c><00:09:59.050><c> minus</c><00:09:59.550><c> y</c><00:10:00.550><c> 2</c>

00:10:01.309 --> 00:10:01.319 align:start position:0%
minus y1 times x1 plus h of x2 minus y 2
 

00:10:01.319 --> 00:10:06.000 align:start position:0%
minus y1 times x1 plus h of x2 minus y 2
times<00:10:02.319><c> x2</c><00:10:02.800><c> plus</c><00:10:03.810><c> you</c><00:10:04.810><c> know</c><00:10:04.899><c> and</c><00:10:05.140><c> so</c><00:10:05.319><c> on</c><00:10:05.500><c> okay</c>

00:10:06.000 --> 00:10:06.010 align:start position:0%
times x2 plus you know and so on okay
 

00:10:06.010 --> 00:10:08.579 align:start position:0%
times x2 plus you know and so on okay
because<00:10:06.279><c> this</c><00:10:06.550><c> is</c><00:10:06.640><c> a</c><00:10:06.670><c> summation</c><00:10:07.209><c> over</c><00:10:07.360><c> I</c><00:10:07.660><c> so</c><00:10:08.380><c> as</c>

00:10:08.579 --> 00:10:08.589 align:start position:0%
because this is a summation over I so as
 

00:10:08.589 --> 00:10:11.160 align:start position:0%
because this is a summation over I so as
I<00:10:08.829><c> ranges</c><00:10:09.399><c> from</c><00:10:09.579><c> I</c><00:10:09.790><c> equals</c><00:10:10.120><c> 1</c><00:10:10.180><c> through</c><00:10:10.390><c> m</c><00:10:10.899><c> you</c>

00:10:11.160 --> 00:10:11.170 align:start position:0%
I ranges from I equals 1 through m you
 

00:10:11.170 --> 00:10:12.870 align:start position:0%
I ranges from I equals 1 through m you
get<00:10:11.649><c> these</c><00:10:11.829><c> different</c><00:10:12.040><c> terms</c><00:10:12.279><c> and</c><00:10:12.790><c> you're</c>

00:10:12.870 --> 00:10:12.880 align:start position:0%
get these different terms and you're
 

00:10:12.880 --> 00:10:15.329 align:start position:0%
get these different terms and you're
summing<00:10:13.240><c> up</c><00:10:13.360><c> these</c><00:10:13.540><c> terms</c><00:10:13.899><c> here</c><00:10:14.319><c> and</c><00:10:14.470><c> the</c>

00:10:15.329 --> 00:10:15.339 align:start position:0%
summing up these terms here and the
 

00:10:15.339 --> 00:10:16.889 align:start position:0%
summing up these terms here and the
meaning<00:10:15.670><c> of</c><00:10:15.790><c> each</c><00:10:15.910><c> of</c><00:10:16.029><c> these</c><00:10:16.120><c> terms</c><00:10:16.449><c> you</c><00:10:16.839><c> know</c>

00:10:16.889 --> 00:10:16.899 align:start position:0%
meaning of each of these terms you know
 

00:10:16.899 --> 00:10:18.780 align:start position:0%
meaning of each of these terms you know
this<00:10:17.079><c> is</c><00:10:17.230><c> a</c><00:10:17.260><c> lot</c><00:10:17.560><c> like</c><00:10:17.800><c> if</c><00:10:18.459><c> you</c><00:10:18.699><c> remember</c>

00:10:18.780 --> 00:10:18.790 align:start position:0%
this is a lot like if you remember
 

00:10:18.790 --> 00:10:20.880 align:start position:0%
this is a lot like if you remember
actually<00:10:19.420><c> from</c><00:10:19.750><c> the</c><00:10:19.930><c> from</c><00:10:20.199><c> the</c><00:10:20.319><c> earlier</c><00:10:20.649><c> quiz</c>

00:10:20.880 --> 00:10:20.890 align:start position:0%
actually from the from the earlier quiz
 

00:10:20.890 --> 00:10:22.439 align:start position:0%
actually from the from the earlier quiz
in<00:10:21.130><c> this</c><00:10:21.279><c> right</c><00:10:21.579><c> you</c><00:10:21.880><c> you</c><00:10:22.120><c> solve</c><00:10:22.329><c> this</c>

00:10:22.439 --> 00:10:22.449 align:start position:0%
in this right you you solve this
 

00:10:22.449 --> 00:10:25.439 align:start position:0%
in this right you you solve this
equation<00:10:23.250><c> we</c><00:10:24.250><c> said</c><00:10:24.459><c> that</c><00:10:24.760><c> in</c><00:10:25.089><c> order</c><00:10:25.300><c> to</c>

00:10:25.439 --> 00:10:25.449 align:start position:0%
equation we said that in order to
 

00:10:25.449 --> 00:10:27.960 align:start position:0%
equation we said that in order to
vectorize<00:10:25.899><c> this</c><00:10:26.260><c> code</c><00:10:26.529><c> we</c><00:10:27.160><c> will</c><00:10:27.339><c> instead</c><00:10:27.699><c> set</c>

00:10:27.960 --> 00:10:27.970 align:start position:0%
vectorize this code we will instead set
 

00:10:27.970 --> 00:10:31.139 align:start position:0%
vectorize this code we will instead set
u<00:10:28.180><c> equals</c><00:10:28.630><c> to</c><00:10:28.839><c> V</c><00:10:29.019><c> plus</c><00:10:29.290><c> 5w</c><00:10:29.760><c> so</c><00:10:30.760><c> we're</c><00:10:30.940><c> saying</c>

00:10:31.139 --> 00:10:31.149 align:start position:0%
u equals to V plus 5w so we're saying
 

00:10:31.149 --> 00:10:33.569 align:start position:0%
u equals to V plus 5w so we're saying
that<00:10:31.300><c> the</c><00:10:31.600><c> vector</c><00:10:31.630><c> u</c><00:10:32.260><c> is</c><00:10:32.560><c> equal</c><00:10:32.680><c> to</c><00:10:32.860><c> 2</c><00:10:33.220><c> times</c>

00:10:33.569 --> 00:10:33.579 align:start position:0%
that the vector u is equal to 2 times
 

00:10:33.579 --> 00:10:36.240 align:start position:0%
that the vector u is equal to 2 times
the<00:10:33.760><c> vector</c><00:10:33.790><c> V</c><00:10:34.089><c> plus</c><00:10:34.990><c> 5</c><00:10:35.290><c> times</c><00:10:35.589><c> the</c><00:10:35.769><c> vector</c><00:10:35.949><c> W</c>

00:10:36.240 --> 00:10:36.250 align:start position:0%
the vector V plus 5 times the vector W
 

00:10:36.250 --> 00:10:39.000 align:start position:0%
the vector V plus 5 times the vector W
so<00:10:36.670><c> this</c><00:10:36.760><c> is</c><00:10:36.819><c> an</c><00:10:36.940><c> example</c><00:10:37.240><c> of</c><00:10:37.680><c> how</c><00:10:38.680><c> to</c><00:10:38.709><c> add</c>

00:10:39.000 --> 00:10:39.010 align:start position:0%
so this is an example of how to add
 

00:10:39.010 --> 00:10:42.300 align:start position:0%
so this is an example of how to add
different<00:10:39.519><c> vectors</c><00:10:40.089><c> and</c><00:10:40.620><c> this</c><00:10:41.620><c> summation</c><00:10:41.980><c> is</c>

00:10:42.300 --> 00:10:42.310 align:start position:0%
different vectors and this summation is
 

00:10:42.310 --> 00:10:44.490 align:start position:0%
different vectors and this summation is
the<00:10:42.339><c> same</c><00:10:42.610><c> thing</c><00:10:42.850><c> this</c><00:10:43.120><c> is</c><00:10:43.269><c> saying</c><00:10:43.449><c> that</c><00:10:43.569><c> the</c>

00:10:44.490 --> 00:10:44.500 align:start position:0%
the same thing this is saying that the
 

00:10:44.500 --> 00:10:48.329 align:start position:0%
the same thing this is saying that the
summation<00:10:45.399><c> over</c><00:10:45.519><c> here</c><00:10:45.819><c> is</c><00:10:46.750><c> just</c><00:10:47.350><c> some</c><00:10:48.130><c> real</c>

00:10:48.329 --> 00:10:48.339 align:start position:0%
summation over here is just some real
 

00:10:48.339 --> 00:10:50.790 align:start position:0%
summation over here is just some real
number<00:10:48.750><c> right</c><00:10:49.750><c> that's</c><00:10:50.050><c> kind</c><00:10:50.290><c> of</c><00:10:50.350><c> like</c><00:10:50.500><c> the</c>

00:10:50.790 --> 00:10:50.800 align:start position:0%
number right that's kind of like the
 

00:10:50.800 --> 00:10:53.309 align:start position:0%
number right that's kind of like the
number<00:10:51.069><c> 2</c><00:10:51.279><c> or</c><00:10:51.610><c> some</c><00:10:51.819><c> other</c><00:10:52.000><c> number</c><00:10:52.390><c> times</c><00:10:53.079><c> it</c>

00:10:53.309 --> 00:10:53.319 align:start position:0%
number 2 or some other number times it
 

00:10:53.319 --> 00:10:54.720 align:start position:0%
number 2 or some other number times it
back<00:10:53.439><c> to</c><00:10:53.559><c> x1</c>

00:10:54.720 --> 00:10:54.730 align:start position:0%
back to x1
 

00:10:54.730 --> 00:10:56.879 align:start position:0%
back to x1
you<00:10:55.089><c> know</c><00:10:55.180><c> two</c><00:10:55.240><c> times</c><00:10:55.930><c> V</c><00:10:56.230><c> and</c><00:10:56.440><c> staying</c><00:10:56.680><c> with</c>

00:10:56.879 --> 00:10:56.889 align:start position:0%
you know two times V and staying with
 

00:10:56.889 --> 00:10:59.519 align:start position:0%
you know two times V and staying with
some<00:10:57.070><c> other</c><00:10:57.250><c> number</c><00:10:57.579><c> at</c><00:10:57.670><c> times</c><00:10:57.910><c> x1</c><00:10:58.300><c> and</c><00:10:58.570><c> then</c>

00:10:59.519 --> 00:10:59.529 align:start position:0%
some other number at times x1 and then
 

00:10:59.529 --> 00:11:02.340 align:start position:0%
some other number at times x1 and then
plus<00:10:59.949><c> you</c><00:11:00.730><c> know</c><00:11:00.850><c> instead</c><00:11:01.149><c> of</c><00:11:01.300><c> five</c><00:11:01.510><c> times</c><00:11:01.779><c> W</c><00:11:02.170><c> we</c>

00:11:02.340 --> 00:11:02.350 align:start position:0%
plus you know instead of five times W we
 

00:11:02.350 --> 00:11:04.439 align:start position:0%
plus you know instead of five times W we
instead<00:11:02.649><c> have</c><00:11:02.949><c> some</c><00:11:03.430><c> other</c><00:11:03.610><c> real</c><00:11:03.850><c> number</c><00:11:03.880><c> plus</c>

00:11:04.439 --> 00:11:04.449 align:start position:0%
instead have some other real number plus
 

00:11:04.449 --> 00:11:07.050 align:start position:0%
instead have some other real number plus
some<00:11:05.170><c> other</c><00:11:05.320><c> vector</c><00:11:05.560><c> and</c><00:11:06.010><c> then</c><00:11:06.639><c> you</c><00:11:06.790><c> add</c><00:11:07.029><c> on</c>

00:11:07.050 --> 00:11:07.060 align:start position:0%
some other vector and then you add on
 

00:11:07.060 --> 00:11:09.150 align:start position:0%
some other vector and then you add on
other<00:11:07.480><c> vectors</c><00:11:07.990><c> you</c><00:11:08.350><c> know</c><00:11:08.410><c> plus</c><00:11:08.649><c> dot</c><00:11:08.920><c> dot</c><00:11:08.949><c> dot</c>

00:11:09.150 --> 00:11:09.160 align:start position:0%
other vectors you know plus dot dot dot
 

00:11:09.160 --> 00:11:12.030 align:start position:0%
other vectors you know plus dot dot dot
plus<00:11:09.940><c> the</c><00:11:10.420><c> other</c><00:11:10.570><c> vectors</c><00:11:10.990><c> which</c><00:11:11.709><c> is</c><00:11:11.860><c> why</c>

00:11:12.030 --> 00:11:12.040 align:start position:0%
plus the other vectors which is why
 

00:11:12.040 --> 00:11:16.980 align:start position:0%
plus the other vectors which is why
overall<00:11:13.889><c> this</c><00:11:14.889><c> thing</c><00:11:15.130><c> over</c><00:11:15.339><c> here</c><00:11:15.720><c> that</c><00:11:16.720><c> whole</c>

00:11:16.980 --> 00:11:16.990 align:start position:0%
overall this thing over here that whole
 

00:11:16.990 --> 00:11:20.189 align:start position:0%
overall this thing over here that whole
quantity<00:11:17.250><c> that</c><00:11:18.250><c> doubter</c><00:11:18.850><c> is</c><00:11:19.510><c> just</c><00:11:20.019><c> some</c>

00:11:20.189 --> 00:11:20.199 align:start position:0%
quantity that doubter is just some
 

00:11:20.199 --> 00:11:24.509 align:start position:0%
quantity that doubter is just some
vector<00:11:20.620><c> and</c><00:11:22.199><c> concretely</c><00:11:23.199><c> the</c><00:11:23.709><c> three</c><00:11:23.980><c> elements</c>

00:11:24.509 --> 00:11:24.519 align:start position:0%
vector and concretely the three elements
 

00:11:24.519 --> 00:11:28.170 align:start position:0%
vector and concretely the three elements
of<00:11:24.610><c> delta</c><00:11:25.060><c> correspond</c><00:11:26.019><c> if</c><00:11:26.529><c> N</c><00:11:26.709><c> equals</c><00:11:26.800><c> two</c><00:11:27.220><c> the</c>

00:11:28.170 --> 00:11:28.180 align:start position:0%
of delta correspond if N equals two the
 

00:11:28.180 --> 00:11:29.939 align:start position:0%
of delta correspond if N equals two the
three<00:11:28.420><c> elements</c><00:11:28.630><c> of</c><00:11:28.930><c> delta</c><00:11:29.320><c> correspond</c>

00:11:29.939 --> 00:11:29.949 align:start position:0%
three elements of delta correspond
 

00:11:29.949 --> 00:11:33.480 align:start position:0%
three elements of delta correspond
exactly<00:11:30.040><c> to</c><00:11:30.660><c> this</c><00:11:31.660><c> thing</c><00:11:31.959><c> to</c><00:11:32.860><c> the</c><00:11:33.040><c> second</c>

00:11:33.480 --> 00:11:33.490 align:start position:0%
exactly to this thing to the second
 

00:11:33.490 --> 00:11:36.329 align:start position:0%
exactly to this thing to the second
thing<00:11:33.670><c> and</c><00:11:33.940><c> this</c><00:11:34.570><c> third</c><00:11:34.899><c> thing</c><00:11:35.010><c> which</c><00:11:36.010><c> is</c><00:11:36.160><c> why</c>

00:11:36.329 --> 00:11:36.339 align:start position:0%
thing and this third thing which is why
 

00:11:36.339 --> 00:11:38.610 align:start position:0%
thing and this third thing which is why
when<00:11:36.639><c> you</c><00:11:36.760><c> update</c><00:11:36.970><c> theta</c><00:11:37.420><c> according</c><00:11:38.170><c> to</c><00:11:38.320><c> theta</c>

00:11:38.610 --> 00:11:38.620 align:start position:0%
when you update theta according to theta
 

00:11:38.620 --> 00:11:41.879 align:start position:0%
when you update theta according to theta
minus<00:11:39.490><c> Alpha</c><00:11:39.880><c> Delta</c><00:11:40.300><c> we</c><00:11:41.230><c> end</c><00:11:41.380><c> up</c><00:11:41.589><c> having</c>

00:11:41.879 --> 00:11:41.889 align:start position:0%
minus Alpha Delta we end up having
 

00:11:41.889 --> 00:11:44.490 align:start position:0%
minus Alpha Delta we end up having
exactly<00:11:42.519><c> the</c><00:11:42.790><c> same</c><00:11:42.940><c> simultaneous</c><00:11:43.839><c> updates</c><00:11:44.260><c> as</c>

00:11:44.490 --> 00:11:44.500 align:start position:0%
exactly the same simultaneous updates as
 

00:11:44.500 --> 00:11:47.060 align:start position:0%
exactly the same simultaneous updates as
as<00:11:44.949><c> the</c><00:11:45.190><c> update</c><00:11:45.490><c> rules</c><00:11:45.699><c> that</c><00:11:45.940><c> we</c><00:11:46.060><c> had</c><00:11:46.269><c> on</c><00:11:46.420><c> top</c>

00:11:47.060 --> 00:11:47.070 align:start position:0%
as the update rules that we had on top
 

00:11:47.070 --> 00:11:49.410 align:start position:0%
as the update rules that we had on top
so<00:11:48.070><c> I</c><00:11:48.370><c> know</c><00:11:48.430><c> that</c><00:11:48.550><c> there</c><00:11:48.850><c> was</c><00:11:49.000><c> a</c><00:11:49.029><c> lot</c><00:11:49.389><c> that</c>

00:11:49.410 --> 00:11:49.420 align:start position:0%
so I know that there was a lot that
 

00:11:49.420 --> 00:11:52.560 align:start position:0%
so I know that there was a lot that
happens<00:11:50.079><c> on</c><00:11:50.380><c> the</c><00:11:50.680><c> slides</c><00:11:51.010><c> but</c><00:11:51.339><c> again</c><00:11:52.240><c> feel</c>

00:11:52.560 --> 00:11:52.570 align:start position:0%
happens on the slides but again feel
 

00:11:52.570 --> 00:11:54.710 align:start position:0%
happens on the slides but again feel
free<00:11:52.630><c> to</c><00:11:52.810><c> pause</c><00:11:53.260><c> the</c><00:11:53.500><c> video</c><00:11:53.769><c> and</c><00:11:53.949><c> data</c>

00:11:54.710 --> 00:11:54.720 align:start position:0%
free to pause the video and data
 

00:11:54.720 --> 00:11:57.389 align:start position:0%
free to pause the video and data
encourage<00:11:55.720><c> you</c><00:11:55.899><c> to</c><00:11:56.139><c> sort</c><00:11:56.740><c> of</c><00:11:56.800><c> step</c><00:11:57.160><c> through</c>

00:11:57.389 --> 00:11:57.399 align:start position:0%
encourage you to sort of step through
 

00:11:57.399 --> 00:11:58.889 align:start position:0%
encourage you to sort of step through
the<00:11:57.579><c> differences</c><00:11:57.910><c> if</c><00:11:58.149><c> you</c><00:11:58.420><c> aren't</c><00:11:58.600><c> sure</c><00:11:58.630><c> what</c>

00:11:58.889 --> 00:11:58.899 align:start position:0%
the differences if you aren't sure what
 

00:11:58.899 --> 00:12:01.470 align:start position:0%
the differences if you aren't sure what
just<00:11:59.079><c> happened</c><00:11:59.440><c> I'll</c><00:11:59.500><c> encourage</c><00:11:59.800><c> you</c><00:12:00.010><c> to</c><00:12:00.480><c> step</c>

00:12:01.470 --> 00:12:01.480 align:start position:0%
just happened I'll encourage you to step
 

00:12:01.480 --> 00:12:02.879 align:start position:0%
just happened I'll encourage you to step
through<00:12:01.720><c> this</c><00:12:01.899><c> line</c><00:12:02.170><c> to</c><00:12:02.440><c> make</c><00:12:02.589><c> sure</c><00:12:02.740><c> you</c>

00:12:02.879 --> 00:12:02.889 align:start position:0%
through this line to make sure you
 

00:12:02.889 --> 00:12:05.610 align:start position:0%
through this line to make sure you
understand<00:12:03.399><c> why</c><00:12:04.060><c> is</c><00:12:04.120><c> it</c><00:12:04.269><c> that</c><00:12:04.750><c> this</c><00:12:05.319><c> update</c>

00:12:05.610 --> 00:12:05.620 align:start position:0%
understand why is it that this update
 

00:12:05.620 --> 00:12:09.480 align:start position:0%
understand why is it that this update
here<00:12:06.130><c> with</c><00:12:06.670><c> this</c><00:12:07.240><c> definition</c><00:12:07.870><c> of</c><00:12:07.990><c> Delta</c><00:12:08.490><c> right</c>

00:12:09.480 --> 00:12:09.490 align:start position:0%
here with this definition of Delta right
 

00:12:09.490 --> 00:12:11.189 align:start position:0%
here with this definition of Delta right
why<00:12:09.910><c> is</c><00:12:09.970><c> it</c><00:12:10.240><c> that</c><00:12:10.420><c> that's</c><00:12:10.540><c> equal</c><00:12:10.959><c> to</c><00:12:11.079><c> this</c>

00:12:11.189 --> 00:12:11.199 align:start position:0%
why is it that that's equal to this
 

00:12:11.199 --> 00:12:13.620 align:start position:0%
why is it that that's equal to this
update<00:12:11.470><c> on</c><00:12:11.800><c> top</c><00:12:12.069><c> and</c><00:12:12.760><c> it's</c><00:12:13.149><c> still</c><00:12:13.329><c> not</c><00:12:13.449><c> clear</c>

00:12:13.620 --> 00:12:13.630 align:start position:0%
update on top and it's still not clear
 

00:12:13.630 --> 00:12:15.930 align:start position:0%
update on top and it's still not clear
one<00:12:13.959><c> one</c><00:12:14.199><c> one</c><00:12:14.410><c> insight</c><00:12:14.829><c> is</c><00:12:15.069><c> that</c><00:12:15.100><c> you</c><00:12:15.790><c> know</c>

00:12:15.930 --> 00:12:15.940 align:start position:0%
one one one insight is that you know
 

00:12:15.940 --> 00:12:20.129 align:start position:0%
one one one insight is that you know
this<00:12:16.380><c> thing</c><00:12:17.380><c> over</c><00:12:17.529><c> here</c><00:12:17.889><c> that's</c><00:12:18.610><c> exactly</c><00:12:19.360><c> the</c>

00:12:20.129 --> 00:12:20.139 align:start position:0%
this thing over here that's exactly the
 

00:12:20.139 --> 00:12:22.829 align:start position:0%
this thing over here that's exactly the
vector<00:12:20.500><c> X</c><00:12:20.740><c> and</c><00:12:21.100><c> so</c><00:12:21.970><c> we're</c><00:12:22.149><c> just</c><00:12:22.300><c> taking</c><00:12:22.449><c> you</c>

00:12:22.829 --> 00:12:22.839 align:start position:0%
vector X and so we're just taking you
 

00:12:22.839 --> 00:12:24.840 align:start position:0%
vector X and so we're just taking you
know<00:12:23.019><c> all</c><00:12:23.230><c> three</c><00:12:23.529><c> of</c><00:12:23.589><c> these</c><00:12:23.769><c> computations</c><00:12:24.160><c> and</c>

00:12:24.840 --> 00:12:24.850 align:start position:0%
know all three of these computations and
 

00:12:24.850 --> 00:12:27.420 align:start position:0%
know all three of these computations and
compressing<00:12:25.480><c> them</c><00:12:25.720><c> into</c><00:12:26.440><c> one</c><00:12:26.620><c> step</c><00:12:26.920><c> with</c><00:12:27.220><c> this</c>

00:12:27.420 --> 00:12:27.430 align:start position:0%
compressing them into one step with this
 

00:12:27.430 --> 00:12:31.259 align:start position:0%
compressing them into one step with this
vector<00:12:28.360><c> Delta</c><00:12:29.319><c> which</c><00:12:29.920><c> is</c><00:12:30.100><c> why</c><00:12:30.250><c> we</c><00:12:30.490><c> can</c><00:12:30.670><c> come</c><00:12:31.240><c> up</c>

00:12:31.259 --> 00:12:31.269 align:start position:0%
vector Delta which is why we can come up
 

00:12:31.269 --> 00:12:33.689 align:start position:0%
vector Delta which is why we can come up
with<00:12:31.540><c> a</c><00:12:31.569><c> vectorized</c><00:12:32.069><c> implementation</c><00:12:33.069><c> of</c><00:12:33.279><c> this</c>

00:12:33.689 --> 00:12:33.699 align:start position:0%
with a vectorized implementation of this
 

00:12:33.699 --> 00:12:35.790 align:start position:0%
with a vectorized implementation of this
of<00:12:34.329><c> the</c><00:12:34.540><c> step</c><00:12:34.810><c> of</c><00:12:34.990><c> linear</c><00:12:35.290><c> regression</c><00:12:35.380><c> this</c>

00:12:35.790 --> 00:12:35.800 align:start position:0%
of the step of linear regression this
 

00:12:35.800 --> 00:12:39.990 align:start position:0%
of the step of linear regression this
way<00:12:36.120><c> so</c><00:12:37.120><c> I</c><00:12:37.420><c> hope</c><00:12:38.410><c> this</c><00:12:38.589><c> step</c><00:12:39.279><c> makes</c><00:12:39.519><c> sense</c><00:12:39.730><c> and</c>

00:12:39.990 --> 00:12:40.000 align:start position:0%
way so I hope this step makes sense and
 

00:12:40.000 --> 00:12:41.699 align:start position:0%
way so I hope this step makes sense and
do<00:12:40.510><c> do</c><00:12:40.839><c> look</c><00:12:41.019><c> at</c><00:12:41.110><c> the</c><00:12:41.170><c> video</c><00:12:41.410><c> and</c><00:12:41.560><c> make</c><00:12:41.680><c> sure</c>

00:12:41.699 --> 00:12:41.709 align:start position:0%
do do look at the video and make sure
 

00:12:41.709 --> 00:12:44.340 align:start position:0%
do do look at the video and make sure
and<00:12:42.069><c> see</c><00:12:42.279><c> if</c><00:12:42.370><c> you</c><00:12:42.459><c> can</c><00:12:42.579><c> understand</c><00:12:43.029><c> it</c><00:12:43.209><c> in</c><00:12:44.110><c> case</c>

00:12:44.340 --> 00:12:44.350 align:start position:0%
and see if you can understand it in case
 

00:12:44.350 --> 00:12:46.139 align:start position:0%
and see if you can understand it in case
you<00:12:44.500><c> don't</c><00:12:44.680><c> understand</c><00:12:45.160><c> quite</c><00:12:45.880><c> the</c>

00:12:46.139 --> 00:12:46.149 align:start position:0%
you don't understand quite the
 

00:12:46.149 --> 00:12:48.000 align:start position:0%
you don't understand quite the
equivalence<00:12:46.660><c> of</c><00:12:46.810><c> this</c><00:12:46.990><c> math</c><00:12:47.260><c> if</c><00:12:47.680><c> you</c>

00:12:48.000 --> 00:12:48.010 align:start position:0%
equivalence of this math if you
 

00:12:48.010 --> 00:12:49.769 align:start position:0%
equivalence of this math if you
implement<00:12:48.519><c> this</c><00:12:48.850><c> this</c><00:12:48.910><c> turns</c><00:12:49.389><c> out</c><00:12:49.540><c> that</c><00:12:49.720><c> the</c>

00:12:49.769 --> 00:12:49.779 align:start position:0%
implement this this turns out that the
 

00:12:49.779 --> 00:12:51.900 align:start position:0%
implement this this turns out that the
right<00:12:49.959><c> answer</c><00:12:50.380><c> anyway</c><00:12:50.769><c> so</c><00:12:50.829><c> even</c><00:12:51.040><c> if</c><00:12:51.819><c> you</c>

00:12:51.900 --> 00:12:51.910 align:start position:0%
right answer anyway so even if you
 

00:12:51.910 --> 00:12:53.970 align:start position:0%
right answer anyway so even if you
didn't<00:12:52.269><c> quite</c><00:12:52.420><c> understand</c><00:12:52.899><c> the</c><00:12:53.440><c> equivalence</c>

00:12:53.970 --> 00:12:53.980 align:start position:0%
didn't quite understand the equivalence
 

00:12:53.980 --> 00:12:56.790 align:start position:0%
didn't quite understand the equivalence
if<00:12:54.819><c> you</c><00:12:54.910><c> just</c><00:12:55.089><c> implemented</c><00:12:55.660><c> this</c><00:12:55.810><c> way</c><00:12:55.990><c> you</c><00:12:56.260><c> you</c>

00:12:56.790 --> 00:12:56.800 align:start position:0%
if you just implemented this way you you
 

00:12:56.800 --> 00:12:59.009 align:start position:0%
if you just implemented this way you you
really<00:12:56.980><c> get</c><00:12:57.339><c> linear</c><00:12:57.579><c> regression</c><00:12:58.089><c> to</c><00:12:58.120><c> work</c><00:12:58.209><c> but</c>

00:12:59.009 --> 00:12:59.019 align:start position:0%
really get linear regression to work but
 

00:12:59.019 --> 00:13:01.079 align:start position:0%
really get linear regression to work but
if<00:12:59.560><c> you</c><00:12:59.769><c> are</c><00:12:59.920><c> if</c><00:13:00.130><c> you're</c><00:13:00.250><c> able</c><00:13:00.370><c> to</c><00:13:00.579><c> figure</c><00:13:00.880><c> out</c>

00:13:01.079 --> 00:13:01.089 align:start position:0%
if you are if you're able to figure out
 

00:13:01.089 --> 00:13:03.300 align:start position:0%
if you are if you're able to figure out
why<00:13:01.269><c> these</c><00:13:01.329><c> two</c><00:13:01.660><c> steps</c><00:13:01.930><c> are</c><00:13:02.139><c> equivalent</c><00:13:03.010><c> then</c>

00:13:03.300 --> 00:13:03.310 align:start position:0%
why these two steps are equivalent then
 

00:13:03.310 --> 00:13:04.559 align:start position:0%
why these two steps are equivalent then
hopefully<00:13:03.760><c> that</c><00:13:04.029><c> will</c><00:13:04.089><c> give</c><00:13:04.269><c> you</c><00:13:04.360><c> a</c><00:13:04.390><c> better</c>

00:13:04.559 --> 00:13:04.569 align:start position:0%
hopefully that will give you a better
 

00:13:04.569 --> 00:13:05.220 align:start position:0%
hopefully that will give you a better
understand

00:13:05.220 --> 00:13:05.230 align:start position:0%
understand
 

00:13:05.230 --> 00:13:07.960 align:start position:0%
understand
vectorization<00:13:05.830><c> as</c><00:13:06.250><c> well</c>

00:13:07.960 --> 00:13:07.970 align:start position:0%
vectorization as well
 

00:13:07.970 --> 00:13:11.920 align:start position:0%
vectorization as well
and<00:13:08.680><c> finally</c><00:13:09.680><c> if</c><00:13:09.910><c> you</c><00:13:10.910><c> are</c><00:13:11.420><c> implementing</c>

00:13:11.920 --> 00:13:11.930 align:start position:0%
and finally if you are implementing
 

00:13:11.930 --> 00:13:14.230 align:start position:0%
and finally if you are implementing
linear<00:13:12.259><c> regression</c><00:13:12.920><c> using</c><00:13:13.189><c> more</c><00:13:13.639><c> than</c><00:13:13.850><c> one</c><00:13:14.089><c> or</c>

00:13:14.230 --> 00:13:14.240 align:start position:0%
linear regression using more than one or
 

00:13:14.240 --> 00:13:15.879 align:start position:0%
linear regression using more than one or
two<00:13:14.269><c> features</c><00:13:14.810><c> so</c><00:13:15.019><c> sometimes</c><00:13:15.470><c> we'll</c><00:13:15.709><c> use</c>

00:13:15.879 --> 00:13:15.889 align:start position:0%
two features so sometimes we'll use
 

00:13:15.889 --> 00:13:18.069 align:start position:0%
two features so sometimes we'll use
linear<00:13:16.519><c> regression</c><00:13:16.550><c> with</c><00:13:17.209><c> tens</c><00:13:17.480><c> or</c><00:13:17.689><c> hundreds</c>

00:13:18.069 --> 00:13:18.079 align:start position:0%
linear regression with tens or hundreds
 

00:13:18.079 --> 00:13:20.350 align:start position:0%
linear regression with tens or hundreds
or<00:13:18.230><c> thousands</c><00:13:18.620><c> of</c><00:13:18.709><c> features</c><00:13:18.889><c> but</c><00:13:19.759><c> if</c><00:13:20.000><c> you</c><00:13:20.120><c> use</c>

00:13:20.350 --> 00:13:20.360 align:start position:0%
or thousands of features but if you use
 

00:13:20.360 --> 00:13:22.240 align:start position:0%
or thousands of features but if you use
the<00:13:20.569><c> vectorized</c><00:13:21.110><c> implementation</c><00:13:21.860><c> of</c><00:13:21.980><c> linear</c>

00:13:22.240 --> 00:13:22.250 align:start position:0%
the vectorized implementation of linear
 

00:13:22.250 --> 00:13:24.309 align:start position:0%
the vectorized implementation of linear
regression<00:13:22.480><c> usually</c><00:13:23.480><c> that</c><00:13:23.689><c> will</c><00:13:23.839><c> run</c><00:13:24.079><c> much</c>

00:13:24.309 --> 00:13:24.319 align:start position:0%
regression usually that will run much
 

00:13:24.319 --> 00:13:26.800 align:start position:0%
regression usually that will run much
faster<00:13:24.350><c> than</c><00:13:25.339><c> if</c><00:13:25.610><c> you</c><00:13:25.759><c> had</c><00:13:26.180><c> say</c><00:13:26.449><c> your</c><00:13:26.660><c> own</c>

00:13:26.800 --> 00:13:26.810 align:start position:0%
faster than if you had say your own
 

00:13:26.810 --> 00:13:28.960 align:start position:0%
faster than if you had say your own
volume<00:13:27.170><c> there</c><00:13:27.829><c> was</c><00:13:27.980><c> you</c><00:13:28.129><c> know</c><00:13:28.220><c> updating</c><00:13:28.730><c> theta</c>

00:13:28.960 --> 00:13:28.970 align:start position:0%
volume there was you know updating theta
 

00:13:28.970 --> 00:13:31.569 align:start position:0%
volume there was you know updating theta
0<00:13:29.329><c> then</c><00:13:29.540><c> theta</c><00:13:29.689><c> 1</c><00:13:29.990><c> and</c><00:13:30.230><c> theta</c><00:13:30.259><c> 2</c><00:13:30.500><c> yourself</c><00:13:31.009><c> so</c>

00:13:31.569 --> 00:13:31.579 align:start position:0%
0 then theta 1 and theta 2 yourself so
 

00:13:31.579 --> 00:13:33.160 align:start position:0%
0 then theta 1 and theta 2 yourself so
using<00:13:32.000><c> a</c><00:13:32.060><c> vectorized</c><00:13:32.360><c> implementation</c>

00:13:33.160 --> 00:13:33.170 align:start position:0%
using a vectorized implementation
 

00:13:33.170 --> 00:13:34.990 align:start position:0%
using a vectorized implementation
usually<00:13:33.769><c> people</c><00:13:34.279><c> are</c><00:13:34.370><c> getting</c><00:13:34.610><c> a</c><00:13:34.670><c> much</c><00:13:34.819><c> more</c>

00:13:34.990 --> 00:13:35.000 align:start position:0%
usually people are getting a much more
 

00:13:35.000 --> 00:13:36.639 align:start position:0%
usually people are getting a much more
efficient<00:13:35.480><c> implementation</c><00:13:36.259><c> of</c><00:13:36.470><c> linear</c>

00:13:36.639 --> 00:13:36.649 align:start position:0%
efficient implementation of linear
 

00:13:36.649 --> 00:13:39.280 align:start position:0%
efficient implementation of linear
regression<00:13:36.920><c> and</c><00:13:37.430><c> when</c><00:13:38.360><c> you</c><00:13:38.480><c> vectorize</c><00:13:38.959><c> later</c>

00:13:39.280 --> 00:13:39.290 align:start position:0%
regression and when you vectorize later
 

00:13:39.290 --> 00:13:40.629 align:start position:0%
regression and when you vectorize later
algorithms<00:13:39.829><c> that</c><00:13:39.920><c> we'll</c><00:13:40.100><c> see</c><00:13:40.220><c> in</c><00:13:40.310><c> this</c><00:13:40.399><c> class</c>

00:13:40.629 --> 00:13:40.639 align:start position:0%
algorithms that we'll see in this class
 

00:13:40.639 --> 00:13:43.449 align:start position:0%
algorithms that we'll see in this class
is<00:13:41.120><c> a</c><00:13:41.180><c> good</c><00:13:41.509><c> trick</c><00:13:41.810><c> whether</c><00:13:42.620><c> in</c><00:13:42.860><c> octave</c><00:13:43.279><c> or</c>

00:13:43.449 --> 00:13:43.459 align:start position:0%
is a good trick whether in octave or
 

00:13:43.459 --> 00:13:44.829 align:start position:0%
is a good trick whether in octave or
some<00:13:43.670><c> of</c><00:13:43.730><c> the</c><00:13:43.819><c> language</c><00:13:43.939><c> they</c><00:13:44.329><c> see</c><00:13:44.509><c> pluses</c>

00:13:44.829 --> 00:13:44.839 align:start position:0%
some of the language they see pluses
 

00:13:44.839 --> 00:13:47.110 align:start position:0%
some of the language they see pluses
Java<00:13:45.139><c> for</c><00:13:45.800><c> getting</c><00:13:46.100><c> your</c><00:13:46.189><c> code</c><00:13:46.490><c> to</c><00:13:46.730><c> run</c><00:13:46.879><c> more</c>

00:13:47.110 --> 00:13:47.120 align:start position:0%
Java for getting your code to run more
 

00:13:47.120 --> 00:13:49.360 align:start position:0%
Java for getting your code to run more
efficiently

