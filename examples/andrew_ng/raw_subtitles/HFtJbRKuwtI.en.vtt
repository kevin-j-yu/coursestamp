WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:01.850 align:start position:0%
 
in<00:00:00.269><c> this</c><00:00:00.480><c> video</c><00:00:00.780><c> I'd</c><00:00:00.900><c> like</c><00:00:01.020><c> to</c><00:00:01.079><c> tell</c><00:00:01.350><c> you</c><00:00:01.410><c> how</c>

00:00:01.850 --> 00:00:01.860 align:start position:0%
in this video I'd like to tell you how
 

00:00:01.860 --> 00:00:03.889 align:start position:0%
in this video I'd like to tell you how
to<00:00:01.920><c> write</c><00:00:02.490><c> control</c><00:00:03.000><c> statements</c><00:00:03.120><c> for</c><00:00:03.810><c> your</c>

00:00:03.889 --> 00:00:03.899 align:start position:0%
to write control statements for your
 

00:00:03.899 --> 00:00:06.499 align:start position:0%
to write control statements for your
octave<00:00:04.259><c> programs</c><00:00:04.740><c> so</c><00:00:05.400><c> things</c><00:00:05.670><c> like</c><00:00:05.819><c> for</c><00:00:06.150><c> while</c>

00:00:06.499 --> 00:00:06.509 align:start position:0%
octave programs so things like for while
 

00:00:06.509 --> 00:00:09.799 align:start position:0%
octave programs so things like for while
and<00:00:06.870><c> if</c><00:00:07.140><c> statements</c><00:00:07.740><c> and</c><00:00:08.030><c> also</c><00:00:09.030><c> how</c><00:00:09.269><c> to</c><00:00:09.330><c> define</c>

00:00:09.799 --> 00:00:09.809 align:start position:0%
and if statements and also how to define
 

00:00:09.809 --> 00:00:12.950 align:start position:0%
and if statements and also how to define
and<00:00:10.110><c> use</c><00:00:10.139><c> functions</c><00:00:11.690><c> here's</c><00:00:12.690><c> my</c><00:00:12.809><c> octave</c>

00:00:12.950 --> 00:00:12.960 align:start position:0%
and use functions here's my octave
 

00:00:12.960 --> 00:00:15.440 align:start position:0%
and use functions here's my octave
window<00:00:13.200><c> let</c><00:00:14.040><c> me</c><00:00:14.130><c> first</c><00:00:14.309><c> show</c><00:00:14.490><c> you</c><00:00:14.670><c> how</c><00:00:15.120><c> to</c><00:00:15.179><c> use</c>

00:00:15.440 --> 00:00:15.450 align:start position:0%
window let me first show you how to use
 

00:00:15.450 --> 00:00:17.120 align:start position:0%
window let me first show you how to use
a<00:00:15.480><c> for</c><00:00:16.020><c> loop</c><00:00:16.170><c> I'm</c><00:00:16.500><c> going</c><00:00:16.560><c> to</c><00:00:16.680><c> start</c><00:00:16.920><c> by</c><00:00:17.070><c> setting</c>

00:00:17.120 --> 00:00:17.130 align:start position:0%
a for loop I'm going to start by setting
 

00:00:17.130 --> 00:00:19.849 align:start position:0%
a for loop I'm going to start by setting
V<00:00:17.760><c> to</c><00:00:18.029><c> be</c><00:00:18.150><c> a</c><00:00:18.180><c> ten</c><00:00:18.779><c> by</c><00:00:18.900><c> one</c><00:00:19.080><c> vector</c><00:00:19.260><c> of</c><00:00:19.470><c> Syrian</c>

00:00:19.849 --> 00:00:19.859 align:start position:0%
V to be a ten by one vector of Syrian
 

00:00:19.859 --> 00:00:22.670 align:start position:0%
V to be a ten by one vector of Syrian
zeros<00:00:20.250><c> now</c><00:00:21.210><c> here's</c><00:00:21.630><c> how</c><00:00:21.990><c> I</c><00:00:22.020><c> write</c><00:00:22.260><c> a</c><00:00:22.289><c> for</c><00:00:22.560><c> loop</c>

00:00:22.670 --> 00:00:22.680 align:start position:0%
zeros now here's how I write a for loop
 

00:00:22.680 --> 00:00:24.500 align:start position:0%
zeros now here's how I write a for loop
for<00:00:22.740><c> I</c><00:00:22.920><c> equals</c><00:00:23.519><c> one</c><00:00:23.760><c> to</c><00:00:23.789><c> ten</c>

00:00:24.500 --> 00:00:24.510 align:start position:0%
for I equals one to ten
 

00:00:24.510 --> 00:00:28.000 align:start position:0%
for I equals one to ten
that's<00:00:25.289><c> a</c><00:00:25.470><c> for</c><00:00:25.680><c> I</c><00:00:25.710><c> equals</c><00:00:26.099><c> one</c><00:00:26.279><c> colon</c><00:00:26.550><c> ten</c><00:00:26.970><c> and</c>

00:00:28.000 --> 00:00:28.010 align:start position:0%
that's a for I equals one colon ten and
 

00:00:28.010 --> 00:00:31.269 align:start position:0%
that's a for I equals one colon ten and
let's<00:00:29.010><c> see</c><00:00:29.189><c> I'm</c><00:00:29.789><c> going</c><00:00:30.090><c> to</c><00:00:30.210><c> set</c><00:00:30.420><c> V</c><00:00:30.689><c> of</c><00:00:30.929><c> I</c><00:00:31.199><c> equals</c>

00:00:31.269 --> 00:00:31.279 align:start position:0%
let's see I'm going to set V of I equals
 

00:00:31.279 --> 00:00:36.819 align:start position:0%
let's see I'm going to set V of I equals
two<00:00:32.279><c> to</c><00:00:33.059><c> the</c><00:00:33.120><c> power</c><00:00:33.180><c> of</c><00:00:33.450><c> I</c><00:00:33.750><c> and</c><00:00:34.430><c> finally</c><00:00:35.430><c> and</c>

00:00:36.819 --> 00:00:36.829 align:start position:0%
two to the power of I and finally and
 

00:00:36.829 --> 00:00:39.440 align:start position:0%
two to the power of I and finally and
the<00:00:37.829><c> white</c><00:00:37.980><c> space</c><00:00:38.250><c> doesn't</c><00:00:38.520><c> matter</c><00:00:38.790><c> so</c><00:00:39.270><c> I'm</c>

00:00:39.440 --> 00:00:39.450 align:start position:0%
the white space doesn't matter so I'm
 

00:00:39.450 --> 00:00:41.299 align:start position:0%
the white space doesn't matter so I'm
putting<00:00:39.899><c> the</c><00:00:40.020><c> spaces</c><00:00:40.410><c> just</c><00:00:40.739><c> to</c><00:00:40.860><c> make</c><00:00:41.129><c> it</c><00:00:41.160><c> look</c>

00:00:41.299 --> 00:00:41.309 align:start position:0%
putting the spaces just to make it look
 

00:00:41.309 --> 00:00:43.369 align:start position:0%
putting the spaces just to make it look
nicely<00:00:41.850><c> indented</c><00:00:42.180><c> but</c><00:00:42.660><c> you</c><00:00:42.809><c> know</c><00:00:42.899><c> the</c><00:00:43.020><c> spacing</c>

00:00:43.369 --> 00:00:43.379 align:start position:0%
nicely indented but you know the spacing
 

00:00:43.379 --> 00:00:46.160 align:start position:0%
nicely indented but you know the spacing
doesn't<00:00:43.680><c> matter</c><00:00:43.829><c> but</c><00:00:44.579><c> if</c><00:00:44.670><c> I</c><00:00:44.760><c> do</c><00:00:44.820><c> this</c><00:00:45.090><c> then</c><00:00:45.719><c> the</c>

00:00:46.160 --> 00:00:46.170 align:start position:0%
doesn't matter but if I do this then the
 

00:00:46.170 --> 00:00:49.490 align:start position:0%
doesn't matter but if I do this then the
result<00:00:46.350><c> is</c><00:00:46.739><c> that</c><00:00:46.890><c> we</c><00:00:47.610><c> get</c><00:00:48.570><c> set</c><00:00:48.809><c> to</c><00:00:48.840><c> you</c><00:00:49.200><c> know</c><00:00:49.260><c> to</c>

00:00:49.490 --> 00:00:49.500 align:start position:0%
result is that we get set to you know to
 

00:00:49.500 --> 00:00:51.650 align:start position:0%
result is that we get set to you know to
about<00:00:49.710><c> 1</c><00:00:49.950><c> to</c><00:00:50.129><c> the</c><00:00:50.219><c> power</c><00:00:50.370><c> 2</c><00:00:50.579><c> and</c><00:00:50.610><c> so</c><00:00:50.940><c> on</c><00:00:50.969><c> so</c><00:00:51.480><c> this</c>

00:00:51.650 --> 00:00:51.660 align:start position:0%
about 1 to the power 2 and so on so this
 

00:00:51.660 --> 00:00:54.740 align:start position:0%
about 1 to the power 2 and so on so this
is<00:00:51.719><c> syntax</c><00:00:52.199><c> well</c><00:00:52.440><c> I</c><00:00:52.559><c> equals</c><00:00:53.010><c> 1</c><00:00:53.280><c> colon</c><00:00:53.760><c> 10</c><00:00:54.030><c> that</c>

00:00:54.740 --> 00:00:54.750 align:start position:0%
is syntax well I equals 1 colon 10 that
 

00:00:54.750 --> 00:00:58.130 align:start position:0%
is syntax well I equals 1 colon 10 that
makes<00:00:55.590><c> I</c><00:00:55.920><c> loop</c><00:00:56.250><c> through</c><00:00:56.579><c> the</c><00:00:56.879><c> the</c><00:00:57.510><c> values</c><00:00:57.899><c> 1</c>

00:00:58.130 --> 00:00:58.140 align:start position:0%
makes I loop through the the values 1
 

00:00:58.140 --> 00:01:00.470 align:start position:0%
makes I loop through the the values 1
through<00:00:58.469><c> 10</c><00:00:58.680><c> and</c><00:00:58.949><c> by</c><00:00:59.789><c> the</c><00:00:59.850><c> way</c><00:01:00.000><c> you</c><00:01:00.059><c> can</c><00:01:00.329><c> also</c>

00:01:00.470 --> 00:01:00.480 align:start position:0%
through 10 and by the way you can also
 

00:01:00.480 --> 00:01:04.549 align:start position:0%
through 10 and by the way you can also
do<00:01:00.809><c> this</c><00:01:00.960><c> by</c><00:01:01.469><c> setting</c><00:01:02.070><c> your</c><00:01:02.399><c> indices</c><00:01:03.000><c> equals</c><00:01:03.780><c> 1</c>

00:01:04.549 --> 00:01:04.559 align:start position:0%
do this by setting your indices equals 1
 

00:01:04.559 --> 00:01:08.359 align:start position:0%
do this by setting your indices equals 1
to<00:01:04.769><c> 10</c><00:01:05.010><c> and</c><00:01:05.510><c> so</c><00:01:06.510><c> the</c><00:01:07.200><c> indices</c><00:01:07.560><c> this</c><00:01:08.189><c> is</c><00:01:08.280><c> an</c>

00:01:08.359 --> 00:01:08.369 align:start position:0%
to 10 and so the indices this is an
 

00:01:08.369 --> 00:01:09.859 align:start position:0%
to 10 and so the indices this is an
array<00:01:08.580><c> from</c><00:01:08.640><c> 1</c><00:01:08.970><c> to</c><00:01:09.090><c> 10</c><00:01:09.240><c> you</c><00:01:09.360><c> can</c><00:01:09.450><c> also</c><00:01:09.600><c> write</c>

00:01:09.859 --> 00:01:09.869 align:start position:0%
array from 1 to 10 you can also write
 

00:01:09.869 --> 00:01:15.710 align:start position:0%
array from 1 to 10 you can also write
for<00:01:10.080><c> I</c><00:01:10.110><c> equals</c><00:01:11.030><c> indices</c><00:01:13.939><c> and</c><00:01:14.939><c> this</c><00:01:15.390><c> is</c>

00:01:15.710 --> 00:01:15.720 align:start position:0%
for I equals indices and this is
 

00:01:15.720 --> 00:01:17.480 align:start position:0%
for I equals indices and this is
actually<00:01:16.080><c> the</c><00:01:16.200><c> same</c><00:01:16.409><c> as</c><00:01:16.439><c> a</c><00:01:16.619><c> for</c><00:01:16.890><c> I</c><00:01:17.009><c> equals</c><00:01:17.310><c> 1</c>

00:01:17.480 --> 00:01:17.490 align:start position:0%
actually the same as a for I equals 1
 

00:01:17.490 --> 00:01:20.899 align:start position:0%
actually the same as a for I equals 1
pretending<00:01:18.030><c> do</c><00:01:18.150><c> you</c><00:01:18.570><c> know</c><00:01:18.659><c> display</c><00:01:19.110><c> I</c><00:01:19.140><c> and</c><00:01:19.909><c> and</c>

00:01:20.899 --> 00:01:20.909 align:start position:0%
pretending do you know display I and and
 

00:01:20.909 --> 00:01:23.810 align:start position:0%
pretending do you know display I and and
this<00:01:21.689><c> will</c><00:01:21.869><c> do</c><00:01:21.990><c> the</c><00:01:22.110><c> same</c><00:01:22.259><c> thing</c><00:01:22.560><c> so</c><00:01:22.799><c> that</c><00:01:23.700><c> was</c>

00:01:23.810 --> 00:01:23.820 align:start position:0%
this will do the same thing so that was
 

00:01:23.820 --> 00:01:25.870 align:start position:0%
this will do the same thing so that was
the<00:01:23.939><c> for</c><00:01:24.240><c> loop</c><00:01:24.420><c> if</c><00:01:24.750><c> you're</c><00:01:25.049><c> familiar</c><00:01:25.350><c> with</c>

00:01:25.870 --> 00:01:25.880 align:start position:0%
the for loop if you're familiar with
 

00:01:25.880 --> 00:01:29.210 align:start position:0%
the for loop if you're familiar with
break<00:01:26.880><c> and</c><00:01:27.180><c> continue</c><00:01:28.049><c> that's</c><00:01:28.560><c> break</c><00:01:28.890><c> and</c>

00:01:29.210 --> 00:01:29.220 align:start position:0%
break and continue that's break and
 

00:01:29.220 --> 00:01:31.370 align:start position:0%
break and continue that's break and
continue<00:01:29.430><c> statements</c><00:01:29.729><c> you</c><00:01:30.659><c> can</c><00:01:30.689><c> also</c><00:01:30.990><c> use</c>

00:01:31.370 --> 00:01:31.380 align:start position:0%
continue statements you can also use
 

00:01:31.380 --> 00:01:33.770 align:start position:0%
continue statements you can also use
those<00:01:31.619><c> inside</c><00:01:32.070><c> loops</c><00:01:32.310><c> in</c><00:01:32.460><c> octave</c><00:01:32.820><c> but</c><00:01:33.540><c> first</c>

00:01:33.770 --> 00:01:33.780 align:start position:0%
those inside loops in octave but first
 

00:01:33.780 --> 00:01:35.800 align:start position:0%
those inside loops in octave but first
let<00:01:33.960><c> me</c><00:01:33.990><c> show</c><00:01:34.079><c> you</c><00:01:34.259><c> how</c><00:01:34.619><c> a</c><00:01:34.650><c> while</c><00:01:35.009><c> loop</c><00:01:35.400><c> works</c>

00:01:35.800 --> 00:01:35.810 align:start position:0%
let me show you how a while loop works
 

00:01:35.810 --> 00:01:40.399 align:start position:0%
let me show you how a while loop works
so<00:01:36.810><c> here's</c><00:01:37.290><c> a</c><00:01:37.759><c> my</c><00:01:38.759><c> vector</c><00:01:39.150><c> V</c><00:01:39.360><c> let's</c><00:01:39.659><c> write</c><00:01:40.380><c> a</c>

00:01:40.399 --> 00:01:40.409 align:start position:0%
so here's a my vector V let's write a
 

00:01:40.409 --> 00:01:44.240 align:start position:0%
so here's a my vector V let's write a
while<00:01:40.619><c> loop</c><00:01:40.829><c> I</c><00:01:40.979><c> equals</c><00:01:41.369><c> 1</c><00:01:42.049><c> while</c><00:01:43.049><c> I</c><00:01:43.500><c> is</c><00:01:43.920><c> less</c>

00:01:44.240 --> 00:01:44.250 align:start position:0%
while loop I equals 1 while I is less
 

00:01:44.250 --> 00:01:49.490 align:start position:0%
while loop I equals 1 while I is less
than<00:01:44.640><c> or</c><00:01:44.759><c> equal</c><00:01:44.820><c> to</c><00:01:45.270><c> 5</c><00:01:46.009><c> let's</c><00:01:47.009><c> set</c><00:01:47.340><c> V</c><00:01:48.299><c> I</c><00:01:48.630><c> equals</c>

00:01:49.490 --> 00:01:49.500 align:start position:0%
than or equal to 5 let's set V I equals
 

00:01:49.500 --> 00:01:56.810 align:start position:0%
than or equal to 5 let's set V I equals
one<00:01:49.829><c> hundred</c><00:01:50.040><c> and</c><00:01:51.380><c> increment</c><00:01:52.380><c> I</c><00:01:53.189><c> by</c><00:01:54.090><c> 1</c><00:01:55.340><c> and</c><00:01:56.340><c> so</c>

00:01:56.810 --> 00:01:56.820 align:start position:0%
one hundred and increment I by 1 and so
 

00:01:56.820 --> 00:02:00.499 align:start position:0%
one hundred and increment I by 1 and so
this<00:01:57.060><c> is</c><00:01:57.240><c> what</c><00:01:57.719><c> I</c><00:01:57.990><c> start</c><00:01:58.619><c> off</c><00:01:58.829><c> equal</c><00:01:59.670><c> to</c><00:01:59.880><c> 1</c><00:02:00.180><c> and</c>

00:02:00.499 --> 00:02:00.509 align:start position:0%
this is what I start off equal to 1 and
 

00:02:00.509 --> 00:02:02.630 align:start position:0%
this is what I start off equal to 1 and
then<00:02:00.750><c> I'm</c><00:02:01.170><c> going</c><00:02:01.439><c> to</c><00:02:01.500><c> set</c><00:02:01.829><c> VI</c><00:02:02.040><c> equals</c><00:02:02.189><c> one</c>

00:02:02.630 --> 00:02:02.640 align:start position:0%
then I'm going to set VI equals one
 

00:02:02.640 --> 00:02:04.770 align:start position:0%
then I'm going to set VI equals one
hundred<00:02:02.790><c> and</c><00:02:03.119><c> increment</c><00:02:03.299><c> by</c><00:02:04.020><c> one</c>

00:02:04.770 --> 00:02:04.780 align:start position:0%
hundred and increment by one
 

00:02:04.780 --> 00:02:07.350 align:start position:0%
hundred and increment by one
two<00:02:04.930><c> eyes</c><00:02:05.140><c> you</c><00:02:05.799><c> know</c><00:02:05.860><c> greater</c><00:02:06.610><c> than</c><00:02:06.850><c> five</c><00:02:07.090><c> and</c>

00:02:07.350 --> 00:02:07.360 align:start position:0%
two eyes you know greater than five and
 

00:02:07.360 --> 00:02:10.590 align:start position:0%
two eyes you know greater than five and
as<00:02:07.990><c> a</c><00:02:08.020><c> result</c><00:02:08.440><c> of</c><00:02:08.530><c> that</c><00:02:08.679><c> whereas</c><00:02:09.610><c> previously</c><00:02:10.090><c> V</c>

00:02:10.590 --> 00:02:10.600 align:start position:0%
as a result of that whereas previously V
 

00:02:10.600 --> 00:02:13.410 align:start position:0%
as a result of that whereas previously V
was<00:02:10.929><c> this</c><00:02:11.080><c> powers</c><00:02:11.620><c> of</c><00:02:11.770><c> two</c><00:02:11.950><c> vector</c><00:02:12.400><c> I've</c><00:02:13.120><c> now</c>

00:02:13.410 --> 00:02:13.420 align:start position:0%
was this powers of two vector I've now
 

00:02:13.420 --> 00:02:16.860 align:start position:0%
was this powers of two vector I've now
taken<00:02:13.480><c> the</c><00:02:14.110><c> first</c><00:02:14.440><c> five</c><00:02:14.800><c> elements</c><00:02:15.069><c> of</c><00:02:15.870><c> my</c>

00:02:16.860 --> 00:02:16.870 align:start position:0%
taken the first five elements of my
 

00:02:16.870 --> 00:02:18.630 align:start position:0%
taken the first five elements of my
vector<00:02:17.050><c> and</c><00:02:17.470><c> overwritten</c><00:02:17.980><c> them</c><00:02:18.310><c> with</c><00:02:18.490><c> this</c>

00:02:18.630 --> 00:02:18.640 align:start position:0%
vector and overwritten them with this
 

00:02:18.640 --> 00:02:20.730 align:start position:0%
vector and overwritten them with this
value<00:02:18.850><c> 100</c><00:02:19.540><c> so</c><00:02:19.720><c> that's</c><00:02:19.930><c> the</c><00:02:20.020><c> syntax</c><00:02:20.440><c> for</c><00:02:20.590><c> a</c>

00:02:20.730 --> 00:02:20.740 align:start position:0%
value 100 so that's the syntax for a
 

00:02:20.740 --> 00:02:24.710 align:start position:0%
value 100 so that's the syntax for a
wire<00:02:20.950><c> loop</c><00:02:22.350><c> let's</c><00:02:23.350><c> do</c><00:02:23.530><c> another</c><00:02:23.650><c> example</c><00:02:23.890><c> I</c>

00:02:24.710 --> 00:02:24.720 align:start position:0%
wire loop let's do another example I
 

00:02:24.720 --> 00:02:29.190 align:start position:0%
wire loop let's do another example I
equals<00:02:25.720><c> 1</c><00:02:25.930><c> yr</c><00:02:26.380><c> true</c><00:02:27.010><c> and</c><00:02:27.540><c> here</c><00:02:28.540><c> I</c><00:02:28.569><c> want</c><00:02:28.840><c> to</c><00:02:28.900><c> show</c>

00:02:29.190 --> 00:02:29.200 align:start position:0%
equals 1 yr true and here I want to show
 

00:02:29.200 --> 00:02:32.070 align:start position:0%
equals 1 yr true and here I want to show
you<00:02:29.260><c> how</c><00:02:30.010><c> to</c><00:02:30.069><c> use</c><00:02:30.430><c> a</c><00:02:30.459><c> break</c><00:02:31.120><c> statement</c><00:02:31.150><c> the</c><00:02:31.870><c> set</c>

00:02:32.070 --> 00:02:32.080 align:start position:0%
you how to use a break statement the set
 

00:02:32.080 --> 00:02:38.930 align:start position:0%
you how to use a break statement the set
VI<00:02:32.260><c> equals</c><00:02:32.580><c> 999</c><00:02:33.580><c> and</c><00:02:34.290><c> I</c><00:02:35.290><c> equals</c><00:02:35.920><c> I</c><00:02:36.040><c> plus</c><00:02:36.069><c> 1</c><00:02:36.780><c> if</c><00:02:37.780><c> I</c>

00:02:38.930 --> 00:02:38.940 align:start position:0%
VI equals 999 and I equals I plus 1 if I
 

00:02:38.940 --> 00:02:48.660 align:start position:0%
VI equals 999 and I equals I plus 1 if I
equals<00:02:39.940><c> 6</c><00:02:42.420><c> break</c><00:02:44.310><c> and</c><00:02:46.590><c> and</c><00:02:47.590><c> this</c><00:02:48.190><c> is</c><00:02:48.310><c> also</c><00:02:48.489><c> our</c>

00:02:48.660 --> 00:02:48.670 align:start position:0%
equals 6 break and and this is also our
 

00:02:48.670 --> 00:02:52.110 align:start position:0%
equals 6 break and and this is also our
first<00:02:49.150><c> use</c><00:02:49.390><c> of</c><00:02:49.420><c> an</c><00:02:49.720><c> if</c><00:02:49.930><c> statement</c><00:02:50.170><c> so</c><00:02:51.160><c> I</c><00:02:51.430><c> hope</c>

00:02:52.110 --> 00:02:52.120 align:start position:0%
first use of an if statement so I hope
 

00:02:52.120 --> 00:02:53.759 align:start position:0%
first use of an if statement so I hope
the<00:02:52.269><c> logic</c><00:02:52.600><c> of</c><00:02:52.660><c> this</c><00:02:52.780><c> makes</c><00:02:53.019><c> any</c><00:02:53.140><c> sense</c><00:02:53.350><c> for</c><00:02:53.620><c> I</c>

00:02:53.759 --> 00:02:53.769 align:start position:0%
the logic of this makes any sense for I
 

00:02:53.769 --> 00:02:56.220 align:start position:0%
the logic of this makes any sense for I
equals<00:02:54.040><c> I</c><00:02:54.640><c> equals</c><00:02:54.910><c> 1</c><00:02:55.090><c> and</c><00:02:55.330><c> you</c><00:02:55.720><c> know</c><00:02:55.780><c> infinite</c>

00:02:56.220 --> 00:02:56.230 align:start position:0%
equals I equals 1 and you know infinite
 

00:02:56.230 --> 00:03:00.090 align:start position:0%
equals I equals 1 and you know infinite
loop<00:02:56.519><c> while</c><00:02:57.900><c> repeatedly</c><00:02:58.900><c> said</c><00:02:59.260><c> VI</c><00:02:59.470><c> equals</c><00:02:59.920><c> 1</c>

00:03:00.090 --> 00:03:00.100 align:start position:0%
loop while repeatedly said VI equals 1
 

00:03:00.100 --> 00:03:03.120 align:start position:0%
loop while repeatedly said VI equals 1
in<00:03:00.250><c> increment</c><00:03:00.760><c> I</c><00:03:00.910><c> by</c><00:03:01.060><c> 1</c><00:03:01.540><c> and</c><00:03:01.780><c> then</c><00:03:02.260><c> once</c><00:03:02.500><c> I</c><00:03:02.739><c> gets</c>

00:03:03.120 --> 00:03:03.130 align:start position:0%
in increment I by 1 and then once I gets
 

00:03:03.130 --> 00:03:05.430 align:start position:0%
in increment I by 1 and then once I gets
up<00:03:03.280><c> to</c><00:03:03.400><c> 6</c><00:03:03.610><c> do</c><00:03:04.150><c> a</c><00:03:04.180><c> break</c><00:03:04.540><c> which</c><00:03:04.840><c> breaks</c><00:03:05.170><c> you</c><00:03:05.410><c> out</c>

00:03:05.430 --> 00:03:05.440 align:start position:0%
up to 6 do a break which breaks you out
 

00:03:05.440 --> 00:03:07.380 align:start position:0%
up to 6 do a break which breaks you out
of<00:03:05.769><c> the</c><00:03:05.860><c> while</c><00:03:06.040><c> loop</c><00:03:06.069><c> and</c><00:03:06.610><c> so</c><00:03:06.910><c> the</c><00:03:07.090><c> effect</c><00:03:07.300><c> of</c>

00:03:07.380 --> 00:03:07.390 align:start position:0%
of the while loop and so the effect of
 

00:03:07.390 --> 00:03:09.120 align:start position:0%
of the while loop and so the effect of
this<00:03:07.540><c> should</c><00:03:07.810><c> be</c><00:03:07.900><c> to</c><00:03:08.019><c> take</c><00:03:08.230><c> the</c><00:03:08.680><c> first</c><00:03:08.920><c> five</c>

00:03:09.120 --> 00:03:09.130 align:start position:0%
this should be to take the first five
 

00:03:09.130 --> 00:03:11.430 align:start position:0%
this should be to take the first five
elements<00:03:09.370><c> of</c><00:03:09.760><c> this</c><00:03:09.910><c> vector</c><00:03:10.120><c> V</c><00:03:10.450><c> and</c><00:03:10.690><c> set</c><00:03:11.230><c> them</c>

00:03:11.430 --> 00:03:11.440 align:start position:0%
elements of this vector V and set them
 

00:03:11.440 --> 00:03:15.120 align:start position:0%
elements of this vector V and set them
to<00:03:11.680><c> 999</c><00:03:12.430><c> and</c><00:03:12.930><c> yes</c><00:03:13.930><c> V</c><00:03:14.200><c> we've</c><00:03:14.440><c> taken</c><00:03:14.650><c> B</c><00:03:14.920><c> and</c>

00:03:15.120 --> 00:03:15.130 align:start position:0%
to 999 and yes V we've taken B and
 

00:03:15.130 --> 00:03:17.180 align:start position:0%
to 999 and yes V we've taken B and
overwritten<00:03:15.670><c> the</c><00:03:16.000><c> first</c><00:03:16.209><c> five</c><00:03:16.450><c> elements</c><00:03:16.660><c> with</c>

00:03:17.180 --> 00:03:17.190 align:start position:0%
overwritten the first five elements with
 

00:03:17.190 --> 00:03:21.180 align:start position:0%
overwritten the first five elements with
999<00:03:18.360><c> so</c><00:03:19.360><c> this</c><00:03:19.750><c> is</c><00:03:19.930><c> the</c><00:03:20.079><c> syntax</c><00:03:20.350><c> for</c><00:03:20.920><c> if</c>

00:03:21.180 --> 00:03:21.190 align:start position:0%
999 so this is the syntax for if
 

00:03:21.190 --> 00:03:23.130 align:start position:0%
999 so this is the syntax for if
statement<00:03:21.220><c> and</c><00:03:21.940><c> for</c><00:03:22.150><c> a</c><00:03:22.180><c> while</c><00:03:22.360><c> statement</c><00:03:22.660><c> and</c>

00:03:23.130 --> 00:03:23.140 align:start position:0%
statement and for a while statement and
 

00:03:23.140 --> 00:03:26.970 align:start position:0%
statement and for a while statement and
notice<00:03:23.530><c> via</c><00:03:23.829><c> and</c><00:03:24.190><c> the</c><00:03:25.180><c> we</c><00:03:25.810><c> have</c><00:03:25.840><c> two</c><00:03:26.200><c> ends</c><00:03:26.620><c> here</c>

00:03:26.970 --> 00:03:26.980 align:start position:0%
notice via and the we have two ends here
 

00:03:26.980 --> 00:03:29.789 align:start position:0%
notice via and the we have two ends here
this<00:03:27.340><c> end</c><00:03:27.640><c> here</c><00:03:28.000><c> ends</c><00:03:28.209><c> the</c><00:03:28.810><c> F</c><00:03:28.989><c> statement</c><00:03:29.200><c> and</c>

00:03:29.789 --> 00:03:29.799 align:start position:0%
this end here ends the F statement and
 

00:03:29.799 --> 00:03:31.890 align:start position:0%
this end here ends the F statement and
the<00:03:29.950><c> second</c><00:03:30.340><c> end</c><00:03:30.489><c> here</c><00:03:30.760><c> ends</c><00:03:30.970><c> the</c><00:03:31.510><c> while</c>

00:03:31.890 --> 00:03:31.900 align:start position:0%
the second end here ends the while
 

00:03:31.900 --> 00:03:34.170 align:start position:0%
the second end here ends the while
statement<00:03:32.400><c> now</c><00:03:33.400><c> let</c><00:03:33.640><c> me</c><00:03:33.700><c> show</c><00:03:33.820><c> you</c><00:03:33.850><c> the</c><00:03:34.030><c> more</c>

00:03:34.170 --> 00:03:34.180 align:start position:0%
statement now let me show you the more
 

00:03:34.180 --> 00:03:36.650 align:start position:0%
statement now let me show you the more
general<00:03:34.630><c> syntax</c><00:03:34.870><c> for</c><00:03:35.320><c> how</c><00:03:35.410><c> the</c><00:03:35.470><c> user</c><00:03:35.709><c> if-else</c>

00:03:36.650 --> 00:03:36.660 align:start position:0%
general syntax for how the user if-else
 

00:03:36.660 --> 00:03:40.830 align:start position:0%
general syntax for how the user if-else
statement<00:03:37.660><c> so</c><00:03:38.070><c> let's</c><00:03:39.070><c> see</c><00:03:39.220><c> v1</c><00:03:40.120><c> is</c><00:03:40.420><c> equal</c><00:03:40.600><c> to</c>

00:03:40.830 --> 00:03:40.840 align:start position:0%
statement so let's see v1 is equal to
 

00:03:40.840 --> 00:03:45.360 align:start position:0%
statement so let's see v1 is equal to
999<00:03:42.060><c> let's</c><00:03:43.060><c> say</c><00:03:43.209><c> v1</c><00:03:43.420><c> equals</c><00:03:44.200><c> to</c><00:03:44.500><c> 2</c><00:03:44.920><c> for</c><00:03:45.250><c> this</c>

00:03:45.360 --> 00:03:45.370 align:start position:0%
999 let's say v1 equals to 2 for this
 

00:03:45.370 --> 00:03:52.460 align:start position:0%
999 let's say v1 equals to 2 for this
example<00:03:46.230><c> so</c><00:03:47.400><c> let</c><00:03:48.400><c> me</c><00:03:48.489><c> type</c><00:03:48.670><c> if</c><00:03:48.989><c> v1</c><00:03:50.040><c> equals</c><00:03:51.040><c> 1</c>

00:03:52.460 --> 00:03:52.470 align:start position:0%
example so let me type if v1 equals 1
 

00:03:52.470 --> 00:03:57.870 align:start position:0%
example so let me type if v1 equals 1
display<00:03:53.470><c> the</c><00:03:54.220><c> value</c><00:03:54.700><c> is</c><00:03:54.940><c> 1</c><00:03:56.700><c> here's</c><00:03:57.700><c> how</c><00:03:57.820><c> you</c>

00:03:57.870 --> 00:03:57.880 align:start position:0%
display the value is 1 here's how you
 

00:03:57.880 --> 00:03:59.520 align:start position:0%
display the value is 1 here's how you
write<00:03:58.060><c> in</c><00:03:58.239><c> else</c><00:03:58.480><c> statements</c><00:03:59.049><c> or</c><00:03:59.200><c> rather</c>

00:03:59.520 --> 00:03:59.530 align:start position:0%
write in else statements or rather
 

00:03:59.530 --> 00:04:05.130 align:start position:0%
write in else statements or rather
here's<00:03:59.829><c> an</c><00:03:59.980><c> LC</c><00:04:00.370><c> if</c><00:04:00.459><c> v1</c><00:04:02.700><c> equals</c><00:04:03.700><c> 2</c><00:04:04.060><c> this</c><00:04:04.989><c> is</c>

00:04:05.130 --> 00:04:05.140 align:start position:0%
here's an LC if v1 equals 2 this is
 

00:04:05.140 --> 00:04:06.660 align:start position:0%
here's an LC if v1 equals 2 this is
going<00:04:05.290><c> to</c><00:04:05.350><c> be</c><00:04:05.410><c> the</c><00:04:05.500><c> case</c><00:04:05.980><c> that's</c><00:04:06.160><c> true</c><00:04:06.400><c> in</c><00:04:06.519><c> our</c>

00:04:06.660 --> 00:04:06.670 align:start position:0%
going to be the case that's true in our
 

00:04:06.670 --> 00:04:13.160 align:start position:0%
going to be the case that's true in our
example<00:04:07.120><c> display</c><00:04:07.600><c> the</c><00:04:08.170><c> value</c><00:04:08.530><c> is</c><00:04:08.709><c> 2</c><00:04:10.590><c> else</c>

00:04:13.160 --> 00:04:13.170 align:start position:0%
example display the value is 2 else
 

00:04:13.170 --> 00:04:18.240 align:start position:0%
example display the value is 2 else
display<00:04:14.170><c> the</c><00:04:15.160><c> value</c><00:04:15.580><c> is</c><00:04:15.790><c> not</c><00:04:16.060><c> one</c><00:04:16.480><c> or</c><00:04:16.810><c> two</c><00:04:17.250><c> okay</c>

00:04:18.240 --> 00:04:18.250 align:start position:0%
display the value is not one or two okay
 

00:04:18.250 --> 00:04:22.950 align:start position:0%
display the value is not one or two okay
so<00:04:18.310><c> that's</c><00:04:18.730><c> a</c><00:04:20.100><c> if-else</c><00:04:21.100><c> if-else</c><00:04:21.960><c> statement</c>

00:04:22.950 --> 00:04:22.960 align:start position:0%
so that's a if-else if-else statement
 

00:04:22.960 --> 00:04:25.110 align:start position:0%
so that's a if-else if-else statement
that<00:04:23.110><c> end</c><00:04:23.350><c> and</c><00:04:23.680><c> of</c><00:04:24.070><c> course</c><00:04:24.100><c> here</c><00:04:24.730><c> we've</c><00:04:25.090><c> just</c>

00:04:25.110 --> 00:04:25.120 align:start position:0%
that end and of course here we've just
 

00:04:25.120 --> 00:04:27.420 align:start position:0%
that end and of course here we've just
said<00:04:25.480><c> you</c><00:04:25.690><c> want</c><00:04:25.900><c> equal</c><00:04:26.110><c> to</c><00:04:26.410><c> so</c><00:04:26.740><c> hopefully</c><00:04:27.130><c> yep</c>

00:04:27.420 --> 00:04:27.430 align:start position:0%
said you want equal to so hopefully yep
 

00:04:27.430 --> 00:04:30.900 align:start position:0%
said you want equal to so hopefully yep
displays<00:04:27.940><c> that</c><00:04:28.150><c> the</c><00:04:28.270><c> value</c><00:04:28.600><c> is</c><00:04:28.750><c> two</c><00:04:29.910><c> and</c>

00:04:30.900 --> 00:04:30.910 align:start position:0%
displays that the value is two and
 

00:04:30.910 --> 00:04:33.390 align:start position:0%
displays that the value is two and
finally<00:04:31.810><c> I</c><00:04:32.260><c> don't</c><00:04:32.890><c> think</c><00:04:33.070><c> I</c><00:04:33.130><c> talked</c><00:04:33.340><c> about</c>

00:04:33.390 --> 00:04:33.400 align:start position:0%
finally I don't think I talked about
 

00:04:33.400 --> 00:04:34.740 align:start position:0%
finally I don't think I talked about
this<00:04:33.610><c> earlier</c><00:04:33.940><c> but</c><00:04:34.000><c> if</c><00:04:34.270><c> you</c><00:04:34.330><c> ever</c><00:04:34.420><c> need</c><00:04:34.630><c> to</c>

00:04:34.740 --> 00:04:34.750 align:start position:0%
this earlier but if you ever need to
 

00:04:34.750 --> 00:04:36.930 align:start position:0%
this earlier but if you ever need to
exit<00:04:35.170><c> octave</c><00:04:35.560><c> can</c><00:04:35.770><c> type</c><00:04:35.980><c> the</c><00:04:36.130><c> exit</c><00:04:36.490><c> command</c><00:04:36.610><c> if</c>

00:04:36.930 --> 00:04:36.940 align:start position:0%
exit octave can type the exit command if
 

00:04:36.940 --> 00:04:38.550 align:start position:0%
exit octave can type the exit command if
you<00:04:37.000><c> hit</c><00:04:37.180><c> enter</c><00:04:37.480><c> that</c><00:04:37.510><c> will</c><00:04:37.810><c> cause</c><00:04:38.020><c> octave</c><00:04:38.410><c> to</c>

00:04:38.550 --> 00:04:38.560 align:start position:0%
you hit enter that will cause octave to
 

00:04:38.560 --> 00:04:42.020 align:start position:0%
you hit enter that will cause octave to
quit<00:04:38.770><c> or</c><00:04:39.040><c> the</c><00:04:39.400><c> to</c><00:04:39.760><c> quit</c><00:04:40.090><c> command</c><00:04:40.450><c> also</c><00:04:40.750><c> works</c>

00:04:42.020 --> 00:04:42.030 align:start position:0%
quit or the to quit command also works
 

00:04:42.030 --> 00:04:44.580 align:start position:0%
quit or the to quit command also works
finally<00:04:43.030><c> let's</c><00:04:43.390><c> talk</c><00:04:43.540><c> about</c><00:04:43.600><c> functions</c><00:04:44.380><c> and</c>

00:04:44.580 --> 00:04:44.590 align:start position:0%
finally let's talk about functions and
 

00:04:44.590 --> 00:04:47.810 align:start position:0%
finally let's talk about functions and
how<00:04:44.710><c> to</c><00:04:44.740><c> define</c><00:04:45.250><c> them</c><00:04:45.490><c> and</c><00:04:45.760><c> how</c><00:04:46.090><c> to</c><00:04:46.120><c> use</c><00:04:46.360><c> them</c>

00:04:47.810 --> 00:04:47.820 align:start position:0%
how to define them and how to use them
 

00:04:47.820 --> 00:04:50.700 align:start position:0%
how to define them and how to use them
here's<00:04:48.820><c> my</c><00:04:48.970><c> desktop</c><00:04:49.330><c> and</c><00:04:49.660><c> i</c><00:04:49.780><c> have</c><00:04:49.810><c> predefined</c>

00:04:50.700 --> 00:04:50.710 align:start position:0%
here's my desktop and i have predefined
 

00:04:50.710 --> 00:04:54.270 align:start position:0%
here's my desktop and i have predefined
a<00:04:51.040><c> file</c><00:04:51.850><c> or</c><00:04:52.180><c> pre</c><00:04:52.390><c> saved</c><00:04:52.630><c> on</c><00:04:53.260><c> my</c><00:04:53.290><c> desktop</c><00:04:53.410><c> a</c><00:04:54.010><c> file</c>

00:04:54.270 --> 00:04:54.280 align:start position:0%
a file or pre saved on my desktop a file
 

00:04:54.280 --> 00:04:57.330 align:start position:0%
a file or pre saved on my desktop a file
called<00:04:54.640><c> square</c><00:04:55.030><c> this</c><00:04:55.180><c> number</c><00:04:55.390><c> m</c><00:04:56.110><c> this</c><00:04:56.980><c> is</c><00:04:57.040><c> how</c>

00:04:57.330 --> 00:04:57.340 align:start position:0%
called square this number m this is how
 

00:04:57.340 --> 00:04:59.670 align:start position:0%
called square this number m this is how
you<00:04:57.400><c> define</c><00:04:57.970><c> functions</c><00:04:58.570><c> in</c><00:04:58.750><c> octave</c><00:04:59.260><c> you</c>

00:04:59.670 --> 00:04:59.680 align:start position:0%
you define functions in octave you
 

00:04:59.680 --> 00:05:02.010 align:start position:0%
you define functions in octave you
create<00:04:59.980><c> a</c><00:05:00.010><c> file</c><00:05:00.580><c> called</c><00:05:00.940><c> you</c><00:05:01.600><c> know</c><00:05:01.690><c> with</c><00:05:01.900><c> your</c>

00:05:02.010 --> 00:05:02.020 align:start position:0%
create a file called you know with your
 

00:05:02.020 --> 00:05:04.170 align:start position:0%
create a file called you know with your
function<00:05:02.440><c> name</c><00:05:02.620><c> and</c><00:05:02.800><c> then</c><00:05:02.980><c> ending</c><00:05:03.430><c> in</c><00:05:03.640><c> dot</c><00:05:03.880><c> m</c>

00:05:04.170 --> 00:05:04.180 align:start position:0%
function name and then ending in dot m
 

00:05:04.180 --> 00:05:06.570 align:start position:0%
function name and then ending in dot m
and<00:05:04.450><c> when</c><00:05:04.960><c> octave</c><00:05:05.350><c> finds</c><00:05:05.620><c> inspire</c><00:05:06.040><c> it</c><00:05:06.370><c> knows</c>

00:05:06.570 --> 00:05:06.580 align:start position:0%
and when octave finds inspire it knows
 

00:05:06.580 --> 00:05:08.909 align:start position:0%
and when octave finds inspire it knows
that<00:05:06.910><c> this</c><00:05:07.480><c> is</c><00:05:07.660><c> where</c><00:05:07.870><c> it</c><00:05:07.900><c> should</c><00:05:08.140><c> look</c><00:05:08.290><c> for</c>

00:05:08.909 --> 00:05:08.919 align:start position:0%
that this is where it should look for
 

00:05:08.919 --> 00:05:10.409 align:start position:0%
that this is where it should look for
the<00:05:09.010><c> definition</c><00:05:09.160><c> of</c><00:05:09.700><c> the</c><00:05:09.850><c> function</c><00:05:10.000><c> square</c>

00:05:10.409 --> 00:05:10.419 align:start position:0%
the definition of the function square
 

00:05:10.419 --> 00:05:12.990 align:start position:0%
the definition of the function square
this<00:05:10.780><c> number</c><00:05:10.990><c> dot</c><00:05:11.500><c> m</c><00:05:11.680><c> let's</c><00:05:12.520><c> open</c><00:05:12.640><c> it</c><00:05:12.880><c> this</c>

00:05:12.990 --> 00:05:13.000 align:start position:0%
this number dot m let's open it this
 

00:05:13.000 --> 00:05:15.630 align:start position:0%
this number dot m let's open it this
file<00:05:13.320><c> notice</c><00:05:14.320><c> that</c><00:05:14.470><c> dumb</c><00:05:14.710><c> I'm</c><00:05:14.950><c> using</c><00:05:15.220><c> the</c>

00:05:15.630 --> 00:05:15.640 align:start position:0%
file notice that dumb I'm using the
 

00:05:15.640 --> 00:05:18.270 align:start position:0%
file notice that dumb I'm using the
Microsoft<00:05:16.300><c> program</c><00:05:16.450><c> word</c><00:05:17.020><c> pad</c><00:05:17.470><c> to</c><00:05:17.860><c> open</c><00:05:18.190><c> up</c>

00:05:18.270 --> 00:05:18.280 align:start position:0%
Microsoft program word pad to open up
 

00:05:18.280 --> 00:05:20.070 align:start position:0%
Microsoft program word pad to open up
this<00:05:18.430><c> file</c><00:05:18.700><c> but</c><00:05:19.330><c> you</c><00:05:19.390><c> I</c><00:05:19.479><c> encourage</c><00:05:19.900><c> you</c><00:05:20.020><c> if</c>

00:05:20.070 --> 00:05:20.080 align:start position:0%
this file but you I encourage you if
 

00:05:20.080 --> 00:05:22.620 align:start position:0%
this file but you I encourage you if
you're<00:05:20.320><c> using</c><00:05:20.500><c> Microsoft</c><00:05:20.770><c> to</c><00:05:21.729><c> Microsoft's</c>

00:05:22.620 --> 00:05:22.630 align:start position:0%
you're using Microsoft to Microsoft's
 

00:05:22.630 --> 00:05:25.080 align:start position:0%
you're using Microsoft to Microsoft's
Windows<00:05:22.870><c> to</c><00:05:23.410><c> use</c><00:05:23.440><c> WordPad</c><00:05:24.160><c> rather</c><00:05:24.820><c> than</c>

00:05:25.080 --> 00:05:25.090 align:start position:0%
Windows to use WordPad rather than
 

00:05:25.090 --> 00:05:28.409 align:start position:0%
Windows to use WordPad rather than
notepad<00:05:25.570><c> to</c><00:05:25.840><c> open</c><00:05:25.870><c> up</c><00:05:26.440><c> these</c><00:05:27.400><c> files</c><00:05:27.729><c> if</c><00:05:28.090><c> you</c>

00:05:28.409 --> 00:05:28.419 align:start position:0%
notepad to open up these files if you
 

00:05:28.419 --> 00:05:29.880 align:start position:0%
notepad to open up these files if you
have<00:05:28.510><c> a</c><00:05:28.570><c> different</c><00:05:28.900><c> text</c><00:05:28.990><c> editor</c><00:05:29.440><c> that's</c><00:05:29.680><c> fine</c>

00:05:29.880 --> 00:05:29.890 align:start position:0%
have a different text editor that's fine
 

00:05:29.890 --> 00:05:32.159 align:start position:0%
have a different text editor that's fine
too<00:05:30.100><c> but</c><00:05:30.310><c> notepad</c><00:05:31.060><c> sometimes</c><00:05:31.540><c> messes</c><00:05:31.810><c> up</c><00:05:31.960><c> the</c>

00:05:32.159 --> 00:05:32.169 align:start position:0%
too but notepad sometimes messes up the
 

00:05:32.169 --> 00:05:34.380 align:start position:0%
too but notepad sometimes messes up the
spacing<00:05:32.620><c> if</c><00:05:33.460><c> you</c><00:05:33.610><c> only</c><00:05:33.760><c> have</c><00:05:33.970><c> notepad</c><00:05:34.360><c> that</c>

00:05:34.380 --> 00:05:34.390 align:start position:0%
spacing if you only have notepad that
 

00:05:34.390 --> 00:05:37.050 align:start position:0%
spacing if you only have notepad that
should<00:05:34.840><c> work</c><00:05:35.020><c> too</c><00:05:35.320><c> that</c><00:05:35.800><c> could</c><00:05:36.070><c> work</c><00:05:36.220><c> too</c><00:05:36.490><c> but</c>

00:05:37.050 --> 00:05:37.060 align:start position:0%
should work too that could work too but
 

00:05:37.060 --> 00:05:39.060 align:start position:0%
should work too that could work too but
if<00:05:37.479><c> you</c><00:05:37.630><c> have</c><00:05:37.780><c> WordPad</c><00:05:38.260><c> as</c><00:05:38.410><c> well</c><00:05:38.590><c> I</c><00:05:38.620><c> will</c><00:05:38.919><c> you</c><00:05:39.040><c> I</c>

00:05:39.060 --> 00:05:39.070 align:start position:0%
if you have WordPad as well I will you I
 

00:05:39.070 --> 00:05:40.800 align:start position:0%
if you have WordPad as well I will you I
would<00:05:39.520><c> rather</c><00:05:39.700><c> use</c><00:05:39.970><c> that</c><00:05:40.180><c> or</c><00:05:40.419><c> some</c><00:05:40.600><c> other</c><00:05:40.630><c> text</c>

00:05:40.800 --> 00:05:40.810 align:start position:0%
would rather use that or some other text
 

00:05:40.810 --> 00:05:42.060 align:start position:0%
would rather use that or some other text
set<00:05:41.140><c> so</c><00:05:41.350><c> if</c><00:05:41.440><c> you</c><00:05:41.530><c> have</c><00:05:41.620><c> a</c><00:05:41.680><c> different</c><00:05:41.979><c> text</c>

00:05:42.060 --> 00:05:42.070 align:start position:0%
set so if you have a different text
 

00:05:42.070 --> 00:05:45.180 align:start position:0%
set so if you have a different text
editor<00:05:42.550><c> for</c><00:05:43.060><c> editing</c><00:05:43.150><c> your</c><00:05:43.450><c> functions</c><00:05:44.190><c> so</c>

00:05:45.180 --> 00:05:45.190 align:start position:0%
editor for editing your functions so
 

00:05:45.190 --> 00:05:46.770 align:start position:0%
editor for editing your functions so
here's<00:05:45.580><c> how</c><00:05:45.700><c> you</c><00:05:45.729><c> define</c><00:05:46.150><c> the</c><00:05:46.180><c> function</c><00:05:46.660><c> in</c>

00:05:46.770 --> 00:05:46.780 align:start position:0%
here's how you define the function in
 

00:05:46.780 --> 00:05:48.690 align:start position:0%
here's how you define the function in
octave<00:05:47.200><c> then</c><00:05:47.350><c> just</c><00:05:47.590><c> zoom</c><00:05:48.220><c> in</c><00:05:48.370><c> a</c><00:05:48.460><c> little</c><00:05:48.580><c> bit</c>

00:05:48.690 --> 00:05:48.700 align:start position:0%
octave then just zoom in a little bit
 

00:05:48.700 --> 00:05:52.409 align:start position:0%
octave then just zoom in a little bit
and<00:05:49.680><c> this</c><00:05:50.680><c> fire</c><00:05:50.979><c> has</c><00:05:51.340><c> just</c><00:05:51.550><c> three</c><00:05:51.820><c> lines</c><00:05:52.060><c> in</c><00:05:52.240><c> it</c>

00:05:52.409 --> 00:05:52.419 align:start position:0%
and this fire has just three lines in it
 

00:05:52.419 --> 00:05:54.330 align:start position:0%
and this fire has just three lines in it
the<00:05:52.600><c> first</c><00:05:52.840><c> line</c><00:05:53.020><c> says</c><00:05:53.410><c> function</c><00:05:53.860><c> y</c><00:05:54.010><c> equals</c>

00:05:54.330 --> 00:05:54.340 align:start position:0%
the first line says function y equals
 

00:05:54.340 --> 00:05:56.520 align:start position:0%
the first line says function y equals
square<00:05:54.400><c> this</c><00:05:54.669><c> number</c><00:05:54.970><c> X</c><00:05:55.090><c> this</c><00:05:55.900><c> tells</c><00:05:56.200><c> octave</c>

00:05:56.520 --> 00:05:56.530 align:start position:0%
square this number X this tells octave
 

00:05:56.530 --> 00:05:59.550 align:start position:0%
square this number X this tells octave
that<00:05:56.860><c> I'm</c><00:05:57.160><c> going</c><00:05:57.310><c> to</c><00:05:57.370><c> return</c><00:05:57.669><c> the</c><00:05:57.729><c> value</c><00:05:57.880><c> Y</c><00:05:58.560><c> and</c>

00:05:59.550 --> 00:05:59.560 align:start position:0%
that I'm going to return the value Y and
 

00:05:59.560 --> 00:06:01.260 align:start position:0%
that I'm going to return the value Y and
I'm<00:05:59.710><c> going</c><00:06:00.010><c> to</c><00:06:00.040><c> return</c><00:06:00.280><c> one</c><00:06:00.520><c> value</c><00:06:00.550><c> and</c><00:06:01.150><c> if</c>

00:06:01.260 --> 00:06:01.270 align:start position:0%
I'm going to return one value and if
 

00:06:01.270 --> 00:06:02.969 align:start position:0%
I'm going to return one value and if
that<00:06:01.390><c> values</c><00:06:01.810><c> must</c><00:06:02.050><c> be</c><00:06:02.169><c> safe</c><00:06:02.710><c> than</c><00:06:02.950><c> the</c>

00:06:02.969 --> 00:06:02.979 align:start position:0%
that values must be safe than the
 

00:06:02.979 --> 00:06:05.640 align:start position:0%
that values must be safe than the
variable<00:06:03.370><c> Y</c><00:06:03.580><c> and</c><00:06:04.080><c> moreover</c><00:06:05.080><c> it</c><00:06:05.229><c> tells</c><00:06:05.470><c> octave</c>

00:06:05.640 --> 00:06:05.650 align:start position:0%
variable Y and moreover it tells octave
 

00:06:05.650 --> 00:06:07.380 align:start position:0%
variable Y and moreover it tells octave
that<00:06:06.130><c> this</c><00:06:06.370><c> function</c><00:06:06.760><c> has</c><00:06:06.940><c> one</c><00:06:07.180><c> argument</c>

00:06:07.380 --> 00:06:07.390 align:start position:0%
that this function has one argument
 

00:06:07.390 --> 00:06:11.370 align:start position:0%
that this function has one argument
which<00:06:07.870><c> is</c><00:06:07.990><c> the</c><00:06:08.020><c> argument</c><00:06:08.110><c> X</c><00:06:08.770><c> and</c><00:06:09.930><c> the</c><00:06:10.930><c> way</c><00:06:11.080><c> the</c>

00:06:11.370 --> 00:06:11.380 align:start position:0%
which is the argument X and the way the
 

00:06:11.380 --> 00:06:13.680 align:start position:0%
which is the argument X and the way the
function<00:06:11.650><c> body</c><00:06:12.040><c> is</c><00:06:12.250><c> defined</c><00:06:12.400><c> is</c><00:06:12.790><c> y</c><00:06:13.060><c> equals</c><00:06:13.510><c> x</c>

00:06:13.680 --> 00:06:13.690 align:start position:0%
function body is defined is y equals x
 

00:06:13.690 --> 00:06:16.620 align:start position:0%
function body is defined is y equals x
squared<00:06:14.340><c> so</c><00:06:15.340><c> let's</c><00:06:15.880><c> try</c><00:06:16.150><c> to</c><00:06:16.210><c> call</c><00:06:16.479><c> this</c>

00:06:16.620 --> 00:06:16.630 align:start position:0%
squared so let's try to call this
 

00:06:16.630 --> 00:06:20.550 align:start position:0%
squared so let's try to call this
function<00:06:16.870><c> square</c><00:06:17.530><c> this</c><00:06:18.340><c> number</c><00:06:19.260><c> five</c><00:06:20.260><c> and</c>

00:06:20.550 --> 00:06:20.560 align:start position:0%
function square this number five and
 

00:06:20.560 --> 00:06:22.860 align:start position:0%
function square this number five and
this<00:06:21.520><c> actually</c><00:06:21.849><c> isn't</c><00:06:22.030><c> going</c><00:06:22.360><c> to</c><00:06:22.450><c> work</c><00:06:22.599><c> an</c>

00:06:22.860 --> 00:06:22.870 align:start position:0%
this actually isn't going to work an
 

00:06:22.870 --> 00:06:25.380 align:start position:0%
this actually isn't going to work an
octave<00:06:23.470><c> says</c><00:06:23.710><c> square</c><00:06:24.669><c> those</c><00:06:24.849><c> numbers</c><00:06:25.150><c> on</c><00:06:25.300><c> the</c>

00:06:25.380 --> 00:06:25.390 align:start position:0%
octave says square those numbers on the
 

00:06:25.390 --> 00:06:27.020 align:start position:0%
octave says square those numbers on the
fine<00:06:25.599><c> that's</c><00:06:25.870><c> because</c><00:06:26.110><c> octave</c><00:06:26.349><c> doesn't</c>

00:06:27.020 --> 00:06:27.030 align:start position:0%
fine that's because octave doesn't
 

00:06:27.030 --> 00:06:29.090 align:start position:0%
fine that's because octave doesn't
where<00:06:27.210><c> to</c><00:06:27.390><c> find</c><00:06:27.570><c> a</c><00:06:27.780><c> find</c><00:06:28.260><c> this</c><00:06:28.410><c> file</c><00:06:28.650><c> so</c><00:06:29.010><c> as</c>

00:06:29.090 --> 00:06:29.100 align:start position:0%
where to find a find this file so as
 

00:06:29.100 --> 00:06:31.730 align:start position:0%
where to find a find this file so as
usual<00:06:29.490><c> let's</c><00:06:29.760><c> use</c><00:06:29.910><c> PWD</c><00:06:30.510><c> or</c><00:06:31.050><c> not</c><00:06:31.410><c> in</c><00:06:31.560><c> the</c><00:06:31.620><c> right</c>

00:06:31.730 --> 00:06:31.740 align:start position:0%
usual let's use PWD or not in the right
 

00:06:31.740 --> 00:06:35.210 align:start position:0%
usual let's use PWD or not in the right
directory<00:06:32.160><c> so</c><00:06:32.760><c> let's</c><00:06:33.030><c> CD</c><00:06:33.900><c> users</c><00:06:34.410><c> ang</c><00:06:34.620><c> slash</c>

00:06:35.210 --> 00:06:35.220 align:start position:0%
directory so let's CD users ang slash
 

00:06:35.220 --> 00:06:40.040 align:start position:0%
directory so let's CD users ang slash
desktop<00:06:35.520><c> that's</c><00:06:36.330><c> where</c><00:06:36.540><c> my</c><00:06:36.690><c> desktop</c><00:06:37.140><c> is</c><00:06:39.050><c> oops</c>

00:06:40.040 --> 00:06:40.050 align:start position:0%
desktop that's where my desktop is oops
 

00:06:40.050 --> 00:06:42.560 align:start position:0%
desktop that's where my desktop is oops
a<00:06:40.350><c> little</c><00:06:40.530><c> typo</c><00:06:41.040><c> there</c><00:06:41.070><c> uses</c><00:06:41.640><c> ang</c><00:06:41.940><c> desktop</c><00:06:42.090><c> and</c>

00:06:42.560 --> 00:06:42.570 align:start position:0%
a little typo there uses ang desktop and
 

00:06:42.570 --> 00:06:44.990 align:start position:0%
a little typo there uses ang desktop and
if<00:06:43.110><c> I</c><00:06:43.200><c> now</c><00:06:43.230><c> type</c><00:06:43.440><c> square</c><00:06:44.010><c> this</c><00:06:44.130><c> number</c><00:06:44.280><c> 5a</c>

00:06:44.990 --> 00:06:45.000 align:start position:0%
if I now type square this number 5a
 

00:06:45.000 --> 00:06:48.770 align:start position:0%
if I now type square this number 5a
returns<00:06:45.630><c> the</c><00:06:45.870><c> answer</c><00:06:45.990><c> 25</c><00:06:47.270><c> it's</c><00:06:48.270><c> kind</c><00:06:48.540><c> of</c><00:06:48.660><c> an</c>

00:06:48.770 --> 00:06:48.780 align:start position:0%
returns the answer 25 it's kind of an
 

00:06:48.780 --> 00:06:51.140 align:start position:0%
returns the answer 25 it's kind of an
advanced<00:06:49.380><c> speaker</c><00:06:49.740><c> this</c><00:06:50.190><c> is</c><00:06:50.250><c> only</c><00:06:50.700><c> for</c><00:06:51.030><c> those</c>

00:06:51.140 --> 00:06:51.150 align:start position:0%
advanced speaker this is only for those
 

00:06:51.150 --> 00:06:53.660 align:start position:0%
advanced speaker this is only for those
of<00:06:51.360><c> you</c><00:06:51.480><c> that</c><00:06:51.690><c> know</c><00:06:51.990><c> what</c><00:06:52.500><c> the</c><00:06:52.620><c> terms</c><00:06:52.860><c> search</c>

00:06:53.660 --> 00:06:53.670 align:start position:0%
of you that know what the terms search
 

00:06:53.670 --> 00:06:56.150 align:start position:0%
of you that know what the terms search
path<00:06:54.030><c> means</c><00:06:54.390><c> but</c><00:06:54.720><c> um</c><00:06:54.960><c> so</c><00:06:55.470><c> if</c><00:06:55.800><c> you</c><00:06:55.890><c> want</c><00:06:56.040><c> to</c>

00:06:56.150 --> 00:06:56.160 align:start position:0%
path means but um so if you want to
 

00:06:56.160 --> 00:06:58.820 align:start position:0%
path means but um so if you want to
modify<00:06:56.460><c> the</c><00:06:56.640><c> octave</c><00:06:56.790><c> search</c><00:06:57.510><c> path</c><00:06:57.570><c> and</c><00:06:58.290><c> you</c>

00:06:58.820 --> 00:06:58.830 align:start position:0%
modify the octave search path and you
 

00:06:58.830 --> 00:07:00.710 align:start position:0%
modify the octave search path and you
could<00:06:59.010><c> just</c><00:06:59.430><c> think</c><00:06:59.550><c> of</c><00:06:59.730><c> this</c><00:06:59.910><c> next</c><00:07:00.210><c> part</c><00:07:00.450><c> as</c><00:07:00.690><c> a</c>

00:07:00.710 --> 00:07:00.720 align:start position:0%
could just think of this next part as a
 

00:07:00.720 --> 00:07:03.800 align:start position:0%
could just think of this next part as a
advanced<00:07:01.530><c> or</c><00:07:01.830><c> optional</c><00:07:02.360><c> material</c><00:07:03.360><c> only</c><00:07:03.660><c> for</c>

00:07:03.800 --> 00:07:03.810 align:start position:0%
advanced or optional material only for
 

00:07:03.810 --> 00:07:05.270 align:start position:0%
advanced or optional material only for
those<00:07:03.930><c> either</c><00:07:04.080><c> familiar</c><00:07:04.620><c> with</c><00:07:04.770><c> the</c><00:07:04.860><c> concept</c>

00:07:05.270 --> 00:07:05.280 align:start position:0%
those either familiar with the concept
 

00:07:05.280 --> 00:07:06.920 align:start position:0%
those either familiar with the concept
of<00:07:05.460><c> search</c><00:07:05.790><c> paths</c><00:07:06.150><c> in</c><00:07:06.360><c> programming</c><00:07:06.660><c> languages</c>

00:07:06.920 --> 00:07:06.930 align:start position:0%
of search paths in programming languages
 

00:07:06.930 --> 00:07:10.670 align:start position:0%
of search paths in programming languages
but<00:07:07.800><c> you</c><00:07:08.100><c> can</c><00:07:08.460><c> use</c><00:07:08.670><c> the</c><00:07:08.850><c> term</c><00:07:09.030><c> add</c><00:07:09.300><c> path</c><00:07:09.680><c> safety</c>

00:07:10.670 --> 00:07:10.680 align:start position:0%
but you can use the term add path safety
 

00:07:10.680 --> 00:07:15.280 align:start position:0%
but you can use the term add path safety
colon<00:07:11.070><c> slash</c><00:07:12.000><c> users</c><00:07:12.660><c> slash</c><00:07:13.280><c> ng</c><00:07:14.280><c> slash</c><00:07:14.610><c> desktop</c>

00:07:15.280 --> 00:07:15.290 align:start position:0%
colon slash users slash ng slash desktop
 

00:07:15.290 --> 00:07:18.260 align:start position:0%
colon slash users slash ng slash desktop
to<00:07:16.290><c> add</c><00:07:16.500><c> that</c><00:07:16.830><c> directory</c><00:07:17.370><c> to</c><00:07:17.640><c> the</c><00:07:17.820><c> octave</c>

00:07:18.260 --> 00:07:18.270 align:start position:0%
to add that directory to the octave
 

00:07:18.270 --> 00:07:21.200 align:start position:0%
to add that directory to the octave
search<00:07:18.420><c> path</c><00:07:18.480><c> so</c><00:07:19.350><c> that</c><00:07:19.590><c> even</c><00:07:19.860><c> if</c><00:07:20.070><c> I</c><00:07:20.220><c> go</c><00:07:20.880><c> to</c><00:07:20.940><c> some</c>

00:07:21.200 --> 00:07:21.210 align:start position:0%
search path so that even if I go to some
 

00:07:21.210 --> 00:07:24.140 align:start position:0%
search path so that even if I go to some
other<00:07:21.360><c> directory</c><00:07:21.750><c> I</c><00:07:22.140><c> can</c><00:07:22.590><c> store</c><00:07:22.890><c> octave</c><00:07:23.880><c> still</c>

00:07:24.140 --> 00:07:24.150 align:start position:0%
other directory I can store octave still
 

00:07:24.150 --> 00:07:26.240 align:start position:0%
other directory I can store octave still
knows<00:07:24.360><c> to</c><00:07:24.690><c> look</c><00:07:24.720><c> in</c><00:07:25.080><c> the</c><00:07:25.320><c> users</c><00:07:25.770><c> and</c><00:07:26.010><c> Ji</c>

00:07:26.240 --> 00:07:26.250 align:start position:0%
knows to look in the users and Ji
 

00:07:26.250 --> 00:07:29.780 align:start position:0%
knows to look in the users and Ji
desktop<00:07:26.670><c> directory</c><00:07:27.080><c> for</c><00:07:28.160><c> functions</c><00:07:29.160><c> so</c><00:07:29.640><c> that</c>

00:07:29.780 --> 00:07:29.790 align:start position:0%
desktop directory for functions so that
 

00:07:29.790 --> 00:07:30.830 align:start position:0%
desktop directory for functions so that
even<00:07:30.000><c> though</c><00:07:30.180><c> i'm</c><00:07:30.300><c> in</c><00:07:30.420><c> a</c><00:07:30.510><c> different</c><00:07:30.630><c> directory</c>

00:07:30.830 --> 00:07:30.840 align:start position:0%
even though i'm in a different directory
 

00:07:30.840 --> 00:07:32.750 align:start position:0%
even though i'm in a different directory
now<00:07:31.320><c> it</c><00:07:31.560><c> still</c><00:07:31.770><c> knows</c><00:07:32.010><c> where</c><00:07:32.220><c> to</c><00:07:32.250><c> find</c><00:07:32.400><c> the</c>

00:07:32.750 --> 00:07:32.760 align:start position:0%
now it still knows where to find the
 

00:07:32.760 --> 00:07:35.930 align:start position:0%
now it still knows where to find the
square<00:07:33.420><c> this</c><00:07:33.660><c> number</c><00:07:33.870><c> function</c><00:07:34.620><c> okay</c><00:07:35.340><c> but</c><00:07:35.610><c> if</c>

00:07:35.930 --> 00:07:35.940 align:start position:0%
square this number function okay but if
 

00:07:35.940 --> 00:07:38.120 align:start position:0%
square this number function okay but if
you're<00:07:36.570><c> not</c><00:07:36.900><c> familiar</c><00:07:37.140><c> with</c><00:07:37.440><c> the</c><00:07:37.650><c> concept</c><00:07:38.070><c> of</c>

00:07:38.120 --> 00:07:38.130 align:start position:0%
you're not familiar with the concept of
 

00:07:38.130 --> 00:07:40.160 align:start position:0%
you're not familiar with the concept of
search<00:07:38.340><c> path</c><00:07:38.640><c> don't</c><00:07:39.390><c> worry</c><00:07:39.540><c> about</c><00:07:39.630><c> it</c><00:07:39.930><c> just</c>

00:07:40.160 --> 00:07:40.170 align:start position:0%
search path don't worry about it just
 

00:07:40.170 --> 00:07:41.990 align:start position:0%
search path don't worry about it just
make<00:07:40.320><c> sure</c><00:07:40.350><c> to</c><00:07:40.620><c> use</c><00:07:40.770><c> the</c><00:07:40.920><c> CD</c><00:07:41.190><c> command</c><00:07:41.580><c> to</c><00:07:41.820><c> go</c><00:07:41.940><c> to</c>

00:07:41.990 --> 00:07:42.000 align:start position:0%
make sure to use the CD command to go to
 

00:07:42.000 --> 00:07:44.000 align:start position:0%
make sure to use the CD command to go to
the<00:07:42.210><c> directory</c><00:07:42.360><c> of</c><00:07:42.840><c> your</c><00:07:42.960><c> function</c><00:07:43.380><c> before</c>

00:07:44.000 --> 00:07:44.010 align:start position:0%
the directory of your function before
 

00:07:44.010 --> 00:07:45.230 align:start position:0%
the directory of your function before
you<00:07:44.100><c> run</c><00:07:44.280><c> it</c><00:07:44.430><c> and</c><00:07:44.460><c> that</c><00:07:44.940><c> should</c><00:07:45.090><c> work</c><00:07:45.120><c> just</c>

00:07:45.230 --> 00:07:45.240 align:start position:0%
you run it and that should work just
 

00:07:45.240 --> 00:07:46.990 align:start position:0%
you run it and that should work just
fine

00:07:46.990 --> 00:07:47.000 align:start position:0%
fine
 

00:07:47.000 --> 00:07:50.540 align:start position:0%
fine
one<00:07:48.000><c> concept</c><00:07:48.540><c> that</c><00:07:48.690><c> octave</c><00:07:49.110><c> has</c><00:07:49.320><c> that</c><00:07:49.800><c> many</c>

00:07:50.540 --> 00:07:50.550 align:start position:0%
one concept that octave has that many
 

00:07:50.550 --> 00:07:52.550 align:start position:0%
one concept that octave has that many
other<00:07:50.730><c> program</c><00:07:51.000><c> languages</c><00:07:51.360><c> don't</c><00:07:51.570><c> is</c><00:07:51.990><c> that</c><00:07:52.260><c> it</c>

00:07:52.550 --> 00:07:52.560 align:start position:0%
other program languages don't is that it
 

00:07:52.560 --> 00:07:55.340 align:start position:0%
other program languages don't is that it
can<00:07:52.680><c> also</c><00:07:53.060><c> define</c><00:07:54.060><c> let</c><00:07:54.450><c> you</c><00:07:54.570><c> define</c><00:07:54.720><c> functions</c>

00:07:55.340 --> 00:07:55.350 align:start position:0%
can also define let you define functions
 

00:07:55.350 --> 00:07:58.010 align:start position:0%
can also define let you define functions
that<00:07:55.530><c> return</c><00:07:55.730><c> multiple</c><00:07:56.730><c> values</c><00:07:56.790><c> or</c><00:07:57.750><c> multiple</c>

00:07:58.010 --> 00:07:58.020 align:start position:0%
that return multiple values or multiple
 

00:07:58.020 --> 00:07:59.780 align:start position:0%
that return multiple values or multiple
arguments<00:07:58.290><c> so</c><00:07:59.010><c> here's</c><00:07:59.220><c> an</c><00:07:59.310><c> example</c><00:07:59.400><c> of</c><00:07:59.730><c> that</c>

00:07:59.780 --> 00:07:59.790 align:start position:0%
arguments so here's an example of that
 

00:07:59.790 --> 00:08:02.750 align:start position:0%
arguments so here's an example of that
I've<00:08:00.570><c> defined</c><00:08:00.990><c> a</c><00:08:01.140><c> function</c><00:08:01.290><c> called</c><00:08:01.980><c> square</c>

00:08:02.750 --> 00:08:02.760 align:start position:0%
I've defined a function called square
 

00:08:02.760 --> 00:08:05.450 align:start position:0%
I've defined a function called square
and<00:08:03.000><c> cube</c><00:08:03.480><c> this</c><00:08:03.690><c> number</c><00:08:03.750><c> X</c><00:08:04.350><c> and</c><00:08:04.590><c> what</c><00:08:05.310><c> this</c>

00:08:05.450 --> 00:08:05.460 align:start position:0%
and cube this number X and what this
 

00:08:05.460 --> 00:08:07.700 align:start position:0%
and cube this number X and what this
says<00:08:05.700><c> is</c><00:08:05.760><c> this</c><00:08:06.330><c> dysfunction</c><00:08:07.050><c> returns</c><00:08:07.440><c> two</c>

00:08:07.700 --> 00:08:07.710 align:start position:0%
says is this dysfunction returns two
 

00:08:07.710 --> 00:08:09.950 align:start position:0%
says is this dysfunction returns two
values<00:08:08.130><c> y1</c><00:08:08.370><c> and</c><00:08:08.760><c> y2</c><00:08:08.880><c> when</c><00:08:09.330><c> I</c><00:08:09.360><c> set</c><00:08:09.630><c> them</c><00:08:09.810><c> as</c>

00:08:09.950 --> 00:08:09.960 align:start position:0%
values y1 and y2 when I set them as
 

00:08:09.960 --> 00:08:12.260 align:start position:0%
values y1 and y2 when I set them as
follows<00:08:10.260><c> why</c><00:08:10.410><c> would</c><00:08:10.620><c> they</c><00:08:10.710><c> sweat</c><00:08:11.100><c> y2</c><00:08:11.730><c> is</c><00:08:12.060><c> X</c>

00:08:12.260 --> 00:08:12.270 align:start position:0%
follows why would they sweat y2 is X
 

00:08:12.270 --> 00:08:14.840 align:start position:0%
follows why would they sweat y2 is X
cubed<00:08:12.720><c> and</c><00:08:12.930><c> what</c><00:08:13.770><c> this</c><00:08:13.920><c> does</c><00:08:14.130><c> is</c><00:08:14.340><c> this</c><00:08:14.460><c> really</c>

00:08:14.840 --> 00:08:14.850 align:start position:0%
cubed and what this does is this really
 

00:08:14.850 --> 00:08:17.390 align:start position:0%
cubed and what this does is this really
returns<00:08:15.330><c> you</c><00:08:15.720><c> know</c><00:08:15.840><c> two</c><00:08:16.260><c> numbers</c><00:08:16.680><c> though</c><00:08:17.130><c> so</c>

00:08:17.390 --> 00:08:17.400 align:start position:0%
returns you know two numbers though so
 

00:08:17.400 --> 00:08:18.980 align:start position:0%
returns you know two numbers though so
some<00:08:18.210><c> of</c><00:08:18.240><c> you</c><00:08:18.450><c> depending</c><00:08:18.660><c> on</c><00:08:18.900><c> what</c>

00:08:18.980 --> 00:08:18.990 align:start position:0%
some of you depending on what
 

00:08:18.990 --> 00:08:20.270 align:start position:0%
some of you depending on what
programming<00:08:19.410><c> languages</c><00:08:19.710><c> you've</c><00:08:19.890><c> used</c><00:08:20.100><c> if</c>

00:08:20.270 --> 00:08:20.280 align:start position:0%
programming languages you've used if
 

00:08:20.280 --> 00:08:21.800 align:start position:0%
programming languages you've used if
you're<00:08:20.370><c> familiar</c><00:08:20.610><c> with</c><00:08:20.850><c> if</c><00:08:21.060><c> you</c><00:08:21.150><c> know</c><00:08:21.270><c> C</c><00:08:21.540><c> C++</c>

00:08:21.800 --> 00:08:21.810 align:start position:0%
you're familiar with if you know C C++
 

00:08:21.810 --> 00:08:24.290 align:start position:0%
you're familiar with if you know C C++
Java<00:08:22.250><c> often</c><00:08:23.250><c> we</c><00:08:23.370><c> think</c><00:08:23.400><c> of</c><00:08:23.700><c> a</c><00:08:23.850><c> function</c><00:08:23.880><c> as</c>

00:08:24.290 --> 00:08:24.300 align:start position:0%
Java often we think of a function as
 

00:08:24.300 --> 00:08:26.510 align:start position:0%
Java often we think of a function as
returning<00:08:24.810><c> just</c><00:08:24.990><c> one</c><00:08:25.170><c> value</c><00:08:25.410><c> but</c><00:08:26.190><c> this</c><00:08:26.370><c> all</c>

00:08:26.510 --> 00:08:26.520 align:start position:0%
returning just one value but this all
 

00:08:26.520 --> 00:08:28.490 align:start position:0%
returning just one value but this all
the<00:08:26.610><c> syntax</c><00:08:27.030><c> in</c><00:08:27.210><c> octave</c><00:08:27.540><c> that's</c><00:08:28.050><c> a</c><00:08:28.170><c> return</c>

00:08:28.490 --> 00:08:28.500 align:start position:0%
the syntax in octave that's a return
 

00:08:28.500 --> 00:08:31.960 align:start position:0%
the syntax in octave that's a return
multiple<00:08:29.070><c> values</c>

00:08:31.960 --> 00:08:31.970 align:start position:0%
 
 

00:08:31.970 --> 00:08:34.800 align:start position:0%
 
now<00:08:32.570><c> back</c><00:08:32.780><c> in</c><00:08:32.900><c> the</c><00:08:32.960><c> octave</c><00:08:33.320><c> window</c><00:08:33.530><c> if</c><00:08:33.979><c> I</c><00:08:34.190><c> type</c>

00:08:34.800 --> 00:08:34.810 align:start position:0%
now back in the octave window if I type
 

00:08:34.810 --> 00:08:40.330 align:start position:0%
now back in the octave window if I type
you<00:08:35.810><c> know</c><00:08:35.960><c> a</c><00:08:36.169><c> B</c><00:08:37.099><c> equals</c><00:08:37.820><c> square</c><00:08:38.360><c> and</c><00:08:38.860><c> cube</c><00:08:39.860><c> this</c>

00:08:40.330 --> 00:08:40.340 align:start position:0%
you know a B equals square and cube this
 

00:08:40.340 --> 00:08:46.210 align:start position:0%
you know a B equals square and cube this
number<00:08:42.190><c> five</c><00:08:43.390><c> then</c><00:08:44.390><c> a</c><00:08:44.630><c> is</c><00:08:44.990><c> not</c><00:08:45.200><c> equal</c><00:08:45.230><c> to</c><00:08:45.530><c> 25</c>

00:08:46.210 --> 00:08:46.220 align:start position:0%
number five then a is not equal to 25
 

00:08:46.220 --> 00:08:48.730 align:start position:0%
number five then a is not equal to 25
and<00:08:46.520><c> B</c><00:08:46.820><c> is</c><00:08:47.090><c> equal</c><00:08:47.480><c> to</c><00:08:47.510><c> the</c><00:08:47.690><c> cube</c><00:08:48.230><c> of</c><00:08:48.320><c> five</c><00:08:48.560><c> is</c>

00:08:48.730 --> 00:08:48.740 align:start position:0%
and B is equal to the cube of five is
 

00:08:48.740 --> 00:08:51.400 align:start position:0%
and B is equal to the cube of five is
equal<00:08:48.950><c> to</c><00:08:49.040><c> 125</c><00:08:49.580><c> so</c><00:08:50.060><c> this</c><00:08:50.660><c> is</c><00:08:50.810><c> some</c><00:08:51.020><c> often</c>

00:08:51.400 --> 00:08:51.410 align:start position:0%
equal to 125 so this is some often
 

00:08:51.410 --> 00:08:52.960 align:start position:0%
equal to 125 so this is some often
convenient<00:08:51.830><c> if</c><00:08:52.190><c> you</c><00:08:52.280><c> need</c><00:08:52.520><c> to</c><00:08:52.610><c> define</c><00:08:52.910><c> a</c>

00:08:52.960 --> 00:08:52.970 align:start position:0%
convenient if you need to define a
 

00:08:52.970 --> 00:08:55.860 align:start position:0%
convenient if you need to define a
function<00:08:53.450><c> that</c><00:08:53.660><c> returns</c><00:08:54.110><c> multiple</c><00:08:54.710><c> values</c>

00:08:55.860 --> 00:08:55.870 align:start position:0%
function that returns multiple values
 

00:08:55.870 --> 00:08:58.030 align:start position:0%
function that returns multiple values
finally<00:08:56.870><c> I'm</c><00:08:56.990><c> going</c><00:08:57.170><c> to</c><00:08:57.260><c> show</c><00:08:57.410><c> you</c><00:08:57.440><c> just</c><00:08:57.770><c> one</c>

00:08:58.030 --> 00:08:58.040 align:start position:0%
finally I'm going to show you just one
 

00:08:58.040 --> 00:09:00.300 align:start position:0%
finally I'm going to show you just one
more<00:08:58.190><c> sophisticated</c><00:08:58.790><c> example</c><00:08:59.480><c> of</c><00:08:59.630><c> a</c><00:08:59.780><c> function</c>

00:09:00.300 --> 00:09:00.310 align:start position:0%
more sophisticated example of a function
 

00:09:00.310 --> 00:09:02.620 align:start position:0%
more sophisticated example of a function
let's<00:09:01.310><c> say</c><00:09:01.460><c> I</c><00:09:01.520><c> have</c><00:09:01.730><c> a</c><00:09:01.760><c> data</c><00:09:02.060><c> set</c><00:09:02.330><c> that</c><00:09:02.540><c> looks</c>

00:09:02.620 --> 00:09:02.630 align:start position:0%
let's say I have a data set that looks
 

00:09:02.630 --> 00:09:05.050 align:start position:0%
let's say I have a data set that looks
like<00:09:02.870><c> this</c><00:09:03.050><c> with</c><00:09:03.290><c> data</c><00:09:03.590><c> points</c><00:09:04.070><c> at</c><00:09:04.190><c> 1</c><00:09:04.430><c> 1</c><00:09:04.580><c> 2</c><00:09:04.820><c> 2</c><00:09:05.030><c> 3</c>

00:09:05.050 --> 00:09:05.060 align:start position:0%
like this with data points at 1 1 2 2 3
 

00:09:05.060 --> 00:09:08.830 align:start position:0%
like this with data points at 1 1 2 2 3
3<00:09:05.360><c> and</c><00:09:06.340><c> what</c><00:09:07.340><c> I'd</c><00:09:07.430><c> like</c><00:09:07.550><c> to</c><00:09:07.610><c> do</c><00:09:07.850><c> is</c><00:09:08.150><c> to</c><00:09:08.420><c> define</c>

00:09:08.830 --> 00:09:08.840 align:start position:0%
3 and what I'd like to do is to define
 

00:09:08.840 --> 00:09:10.690 align:start position:0%
3 and what I'd like to do is to define
an<00:09:09.110><c> octave</c><00:09:09.470><c> function</c><00:09:09.860><c> to</c><00:09:10.010><c> compute</c><00:09:10.400><c> the</c><00:09:10.520><c> cost</c>

00:09:10.690 --> 00:09:10.700 align:start position:0%
an octave function to compute the cost
 

00:09:10.700 --> 00:09:12.970 align:start position:0%
an octave function to compute the cost
function<00:09:11.000><c> J</c><00:09:11.270><c> of</c><00:09:11.570><c> theta</c><00:09:11.720><c> for</c><00:09:12.350><c> different</c><00:09:12.650><c> values</c>

00:09:12.970 --> 00:09:12.980 align:start position:0%
function J of theta for different values
 

00:09:12.980 --> 00:09:15.760 align:start position:0%
function J of theta for different values
of<00:09:13.130><c> theta</c><00:09:13.630><c> first</c><00:09:14.630><c> let's</c><00:09:14.930><c> put</c><00:09:15.080><c> the</c><00:09:15.170><c> data</c><00:09:15.260><c> into</c>

00:09:15.760 --> 00:09:15.770 align:start position:0%
of theta first let's put the data into
 

00:09:15.770 --> 00:09:17.680 align:start position:0%
of theta first let's put the data into
octave<00:09:15.890><c> so</c><00:09:16.310><c> it</c><00:09:16.430><c> does</c><00:09:16.580><c> not</c><00:09:16.730><c> set</c><00:09:17.270><c> my</c><00:09:17.390><c> design</c>

00:09:17.680 --> 00:09:17.690 align:start position:0%
octave so it does not set my design
 

00:09:17.690 --> 00:09:23.260 align:start position:0%
octave so it does not set my design
matrix<00:09:17.870><c> to</c><00:09:18.230><c> be</c><00:09:18.320><c> 1</c><00:09:18.590><c> 1</c><00:09:18.770><c> 1</c><00:09:19.580><c> 2</c><00:09:19.820><c> 1</c><00:09:20.120><c> 3</c><00:09:20.660><c> so</c><00:09:21.500><c> this</c><00:09:21.800><c> is</c><00:09:22.010><c> a</c><00:09:22.270><c> my</c>

00:09:23.260 --> 00:09:23.270 align:start position:0%
matrix to be 1 1 1 2 1 3 so this is a my
 

00:09:23.270 --> 00:09:26.350 align:start position:0%
matrix to be 1 1 1 2 1 3 so this is a my
design<00:09:24.050><c> matrix</c><00:09:24.230><c> X</c><00:09:24.530><c> with</c><00:09:25.010><c> X</c><00:09:25.370><c> 0</c><00:09:25.490><c> the</c><00:09:26.090><c> first</c>

00:09:26.350 --> 00:09:26.360 align:start position:0%
design matrix X with X 0 the first
 

00:09:26.360 --> 00:09:27.910 align:start position:0%
design matrix X with X 0 the first
column<00:09:26.750><c> being</c><00:09:26.990><c> in</c><00:09:27.170><c> the</c><00:09:27.290><c> set</c><00:09:27.470><c> term</c><00:09:27.740><c> and</c><00:09:27.860><c> the</c>

00:09:27.910 --> 00:09:27.920 align:start position:0%
column being in the set term and the
 

00:09:27.920 --> 00:09:29.740 align:start position:0%
column being in the set term and the
second<00:09:28.280><c> term</c><00:09:28.340><c> being</c><00:09:28.790><c> my</c><00:09:28.970><c> you</c><00:09:29.360><c> know</c><00:09:29.450><c> the</c><00:09:29.570><c> X</c>

00:09:29.740 --> 00:09:29.750 align:start position:0%
second term being my you know the X
 

00:09:29.750 --> 00:09:31.810 align:start position:0%
second term being my you know the X
values<00:09:29.990><c> of</c><00:09:30.440><c> my</c><00:09:30.560><c> three</c><00:09:30.800><c> training</c><00:09:31.190><c> examples</c><00:09:31.220><c> and</c>

00:09:31.810 --> 00:09:31.820 align:start position:0%
values of my three training examples and
 

00:09:31.820 --> 00:09:35.860 align:start position:0%
values of my three training examples and
let<00:09:32.570><c> me</c><00:09:32.660><c> say</c><00:09:32.810><c> Y</c><00:09:33.050><c> to</c><00:09:33.110><c> be</c><00:09:33.470><c> 1</c><00:09:33.710><c> 2</c><00:09:34.130><c> 3</c><00:09:34.160><c> as</c><00:09:34.910><c> follows</c>

00:09:35.860 --> 00:09:35.870 align:start position:0%
let me say Y to be 1 2 3 as follows
 

00:09:35.870 --> 00:09:39.820 align:start position:0%
let me say Y to be 1 2 3 as follows
which<00:09:36.140><c> were</c><00:09:36.320><c> the</c><00:09:36.560><c> y-axis</c><00:09:37.280><c> values</c><00:09:38.020><c> so</c><00:09:39.020><c> let's</c>

00:09:39.820 --> 00:09:39.830 align:start position:0%
which were the y-axis values so let's
 

00:09:39.830 --> 00:09:44.920 align:start position:0%
which were the y-axis values so let's
say<00:09:39.980><c> theta</c><00:09:40.250><c> is</c><00:09:40.490><c> equal</c><00:09:40.940><c> to</c><00:09:41.090><c> 0</c><00:09:41.690><c> semicolon</c><00:09:42.170><c> 1</c><00:09:43.930><c> here</c>

00:09:44.920 --> 00:09:44.930 align:start position:0%
say theta is equal to 0 semicolon 1 here
 

00:09:44.930 --> 00:09:46.930 align:start position:0%
say theta is equal to 0 semicolon 1 here
on<00:09:45.020><c> my</c><00:09:45.110><c> desktop</c><00:09:45.410><c> are</c><00:09:45.710><c> predefined</c><00:09:46.340><c> this</c><00:09:46.520><c> cost</c>

00:09:46.930 --> 00:09:46.940 align:start position:0%
on my desktop are predefined this cost
 

00:09:46.940 --> 00:09:49.960 align:start position:0%
on my desktop are predefined this cost
function<00:09:47.420><c> J</c><00:09:47.780><c> and</c><00:09:48.050><c> if</c><00:09:48.830><c> I</c><00:09:48.980><c> bring</c><00:09:49.010><c> up</c><00:09:49.340><c> the</c>

00:09:49.960 --> 00:09:49.970 align:start position:0%
function J and if I bring up the
 

00:09:49.970 --> 00:09:51.490 align:start position:0%
function J and if I bring up the
definition<00:09:50.420><c> of</c><00:09:50.480><c> that</c><00:09:50.540><c> function</c><00:09:50.600><c> it</c><00:09:51.170><c> looks</c><00:09:51.200><c> as</c>

00:09:51.490 --> 00:09:51.500 align:start position:0%
definition of that function it looks as
 

00:09:51.500 --> 00:09:53.170 align:start position:0%
definition of that function it looks as
follows<00:09:51.650><c> so</c><00:09:52.190><c> function</c><00:09:52.550><c> J</c><00:09:52.730><c> equals</c><00:09:53.000><c> cost</c>

00:09:53.170 --> 00:09:53.180 align:start position:0%
follows so function J equals cost
 

00:09:53.180 --> 00:09:56.410 align:start position:0%
follows so function J equals cost
function<00:09:53.630><c> J</c><00:09:53.800><c> inputs</c><00:09:54.800><c> X</c><00:09:55.010><c> Y</c><00:09:55.160><c> theta</c><00:09:55.490><c> some</c>

00:09:56.410 --> 00:09:56.420 align:start position:0%
function J inputs X Y theta some
 

00:09:56.420 --> 00:09:59.500 align:start position:0%
function J inputs X Y theta some
comments<00:09:56.900><c> specifying</c><00:09:57.350><c> the</c><00:09:57.500><c> inputs</c><00:09:58.030><c> and</c><00:09:59.030><c> then</c>

00:09:59.500 --> 00:09:59.510 align:start position:0%
comments specifying the inputs and then
 

00:09:59.510 --> 00:10:01.840 align:start position:0%
comments specifying the inputs and then
fire<00:09:59.810><c> a</c><00:09:59.840><c> few</c><00:10:00.080><c> steps</c><00:10:00.320><c> set</c><00:10:01.010><c> m</c><00:10:01.250><c> to</c><00:10:01.550><c> be</c><00:10:01.640><c> the</c><00:10:01.670><c> number</c>

00:10:01.840 --> 00:10:01.850 align:start position:0%
fire a few steps set m to be the number
 

00:10:01.850 --> 00:10:03.640 align:start position:0%
fire a few steps set m to be the number
training<00:10:02.510><c> examples</c><00:10:02.930><c> there's</c><00:10:03.230><c> a</c><00:10:03.320><c> number</c><00:10:03.500><c> of</c>

00:10:03.640 --> 00:10:03.650 align:start position:0%
training examples there's a number of
 

00:10:03.650 --> 00:10:06.460 align:start position:0%
training examples there's a number of
rows<00:10:03.980><c> and</c><00:10:04.220><c> X</c><00:10:04.960><c> computer</c><00:10:05.960><c> predictions</c>

00:10:06.460 --> 00:10:06.470 align:start position:0%
rows and X computer predictions
 

00:10:06.470 --> 00:10:09.300 align:start position:0%
rows and X computer predictions
predictions<00:10:06.800><c> equals</c><00:10:07.490><c> x</c><00:10:07.730><c> times</c><00:10:07.940><c> theta</c><00:10:08.330><c> and</c>

00:10:09.300 --> 00:10:09.310 align:start position:0%
predictions equals x times theta and
 

00:10:09.310 --> 00:10:11.800 align:start position:0%
predictions equals x times theta and
this<00:10:10.310><c> is</c><00:10:10.430><c> a</c><00:10:10.490><c> comment</c><00:10:11.270><c> that's</c><00:10:11.420><c> wrapped</c><00:10:11.660><c> around</c>

00:10:11.800 --> 00:10:11.810 align:start position:0%
this is a comment that's wrapped around
 

00:10:11.810 --> 00:10:13.750 align:start position:0%
this is a comment that's wrapped around
so<00:10:12.170><c> this</c><00:10:12.350><c> is</c><00:10:12.440><c> for</c><00:10:12.620><c> the</c><00:10:12.770><c> preceding</c><00:10:13.310><c> comment</c>

00:10:13.750 --> 00:10:13.760 align:start position:0%
so this is for the preceding comment
 

00:10:13.760 --> 00:10:16.840 align:start position:0%
so this is for the preceding comment
line<00:10:14.140><c> computer</c><00:10:15.140><c> squared</c><00:10:15.470><c> errors</c><00:10:15.800><c> by</c><00:10:16.100><c> taking</c>

00:10:16.840 --> 00:10:16.850 align:start position:0%
line computer squared errors by taking
 

00:10:16.850 --> 00:10:18.040 align:start position:0%
line computer squared errors by taking
the<00:10:16.940><c> difference</c><00:10:17.060><c> between</c><00:10:17.450><c> their</c><00:10:17.570><c> predictions</c>

00:10:18.040 --> 00:10:18.050 align:start position:0%
the difference between their predictions
 

00:10:18.050 --> 00:10:20.560 align:start position:0%
the difference between their predictions
and<00:10:18.320><c> the</c><00:10:18.770><c> y-values</c><00:10:19.430><c> and</c><00:10:19.790><c> taking</c><00:10:20.089><c> element</c><00:10:20.450><c> wise</c>

00:10:20.560 --> 00:10:20.570 align:start position:0%
and the y-values and taking element wise
 

00:10:20.570 --> 00:10:23.920 align:start position:0%
and the y-values and taking element wise
squaring<00:10:20.600><c> and</c><00:10:21.290><c> then</c><00:10:22.040><c> finally</c><00:10:22.670><c> computing</c><00:10:23.630><c> the</c>

00:10:23.920 --> 00:10:23.930 align:start position:0%
squaring and then finally computing the
 

00:10:23.930 --> 00:10:26.440 align:start position:0%
squaring and then finally computing the
cost<00:10:24.140><c> function</c><00:10:24.380><c> J</c><00:10:24.710><c> and</c><00:10:25.100><c> octave</c><00:10:25.850><c> knows</c><00:10:26.000><c> that</c><00:10:26.240><c> J</c>

00:10:26.440 --> 00:10:26.450 align:start position:0%
cost function J and octave knows that J
 

00:10:26.450 --> 00:10:28.780 align:start position:0%
cost function J and octave knows that J
is<00:10:26.660><c> the</c><00:10:26.690><c> value</c><00:10:27.110><c> I</c><00:10:27.230><c> want</c><00:10:27.620><c> to</c><00:10:27.710><c> return</c><00:10:28.010><c> because</c><00:10:28.280><c> J</c>

00:10:28.780 --> 00:10:28.790 align:start position:0%
is the value I want to return because J
 

00:10:28.790 --> 00:10:30.100 align:start position:0%
is the value I want to return because J
over<00:10:29.000><c> here</c><00:10:29.210><c> here</c><00:10:29.450><c> in</c><00:10:29.630><c> the</c><00:10:29.750><c> function</c>

00:10:30.100 --> 00:10:30.110 align:start position:0%
over here here in the function
 

00:10:30.110 --> 00:10:32.740 align:start position:0%
over here here in the function
definition<00:10:30.580><c> feel</c><00:10:31.580><c> free</c><00:10:31.760><c> by</c><00:10:31.910><c> the</c><00:10:31.940><c> way</c><00:10:32.060><c> to</c>

00:10:32.740 --> 00:10:32.750 align:start position:0%
definition feel free by the way to
 

00:10:32.750 --> 00:10:36.130 align:start position:0%
definition feel free by the way to
oppose<00:10:33.230><c> this</c><00:10:33.730><c> video</c><00:10:34.730><c> if</c><00:10:34.970><c> you</c><00:10:35.089><c> want</c><00:10:35.270><c> to</c><00:10:35.420><c> look</c><00:10:35.990><c> at</c>

00:10:36.130 --> 00:10:36.140 align:start position:0%
oppose this video if you want to look at
 

00:10:36.140 --> 00:10:38.110 align:start position:0%
oppose this video if you want to look at
this<00:10:36.260><c> function</c><00:10:36.470><c> definition</c><00:10:36.830><c> for</c><00:10:37.490><c> longer</c><00:10:37.880><c> and</c>

00:10:38.110 --> 00:10:38.120 align:start position:0%
this function definition for longer and
 

00:10:38.120 --> 00:10:40.500 align:start position:0%
this function definition for longer and
kind<00:10:38.750><c> of</c><00:10:38.780><c> make</c><00:10:38.990><c> sure</c><00:10:39.200><c> that</c><00:10:39.410><c> you</c><00:10:39.530><c> understand</c><00:10:40.070><c> is</c>

00:10:40.500 --> 00:10:40.510 align:start position:0%
kind of make sure that you understand is
 

00:10:40.510 --> 00:10:43.380 align:start position:0%
kind of make sure that you understand is
understand<00:10:41.510><c> there's</c><00:10:41.870><c> the</c><00:10:42.080><c> different</c><00:10:42.410><c> steps</c>

00:10:43.380 --> 00:10:43.390 align:start position:0%
understand there's the different steps
 

00:10:43.390 --> 00:10:46.260 align:start position:0%
understand there's the different steps
but<00:10:44.200><c> when</c><00:10:44.470><c> I</c><00:10:44.500><c> run</c><00:10:44.860><c> it</c><00:10:45.010><c> in</c><00:10:45.160><c> octave</c><00:10:45.610><c> I</c><00:10:45.820><c> find</c><00:10:46.060><c> J</c>

00:10:46.260 --> 00:10:46.270 align:start position:0%
but when I run it in octave I find J
 

00:10:46.270 --> 00:10:51.270 align:start position:0%
but when I run it in octave I find J
equals<00:10:46.660><c> cost</c><00:10:46.900><c> function</c><00:10:47.770><c> J</c><00:10:48.370><c> X</c><00:10:48.820><c> Y</c><00:10:49.600><c> theta</c><00:10:50.320><c> it</c>

00:10:51.270 --> 00:10:51.280 align:start position:0%
equals cost function J X Y theta it
 

00:10:51.280 --> 00:10:55.320 align:start position:0%
equals cost function J X Y theta it
computes<00:10:52.950><c> oops</c><00:10:53.950><c> I</c><00:10:54.250><c> mean</c><00:10:54.430><c> typo</c><00:10:54.880><c> there</c><00:10:55.060><c> should</c>

00:10:55.320 --> 00:10:55.330 align:start position:0%
computes oops I mean typo there should
 

00:10:55.330 --> 00:10:58.050 align:start position:0%
computes oops I mean typo there should
have<00:10:55.360><c> been</c><00:10:55.450><c> capital</c><00:10:56.050><c> X</c><00:10:56.260><c> it</c><00:10:56.890><c> computes</c><00:10:57.430><c> J</c><00:10:57.640><c> equals</c>

00:10:58.050 --> 00:10:58.060 align:start position:0%
have been capital X it computes J equals
 

00:10:58.060 --> 00:11:02.360 align:start position:0%
have been capital X it computes J equals
zero<00:10:58.470><c> because</c><00:10:59.700><c> if</c><00:11:00.700><c> my</c><00:11:00.850><c> data</c><00:11:01.060><c> set</c><00:11:01.360><c> was</c><00:11:01.600><c> you</c><00:11:02.110><c> know</c>

00:11:02.360 --> 00:11:02.370 align:start position:0%
zero because if my data set was you know
 

00:11:02.370 --> 00:11:05.520 align:start position:0%
zero because if my data set was you know
one<00:11:03.370><c> two</c><00:11:03.550><c> three</c><00:11:03.850><c> one</c><00:11:04.180><c> two</c><00:11:04.360><c> three</c><00:11:04.390><c> then</c><00:11:05.020><c> setting</c>

00:11:05.520 --> 00:11:05.530 align:start position:0%
one two three one two three then setting
 

00:11:05.530 --> 00:11:07.860 align:start position:0%
one two three one two three then setting
right<00:11:06.070><c> David</c><00:11:06.490><c> zero</c><00:11:06.760><c> equals</c><00:11:07.090><c> zero</c><00:11:07.150><c> theta</c><00:11:07.720><c> one</c>

00:11:07.860 --> 00:11:07.870 align:start position:0%
right David zero equals zero theta one
 

00:11:07.870 --> 00:11:10.230 align:start position:0%
right David zero equals zero theta one
equals<00:11:08.170><c> one</c><00:11:08.470><c> this</c><00:11:09.100><c> gives</c><00:11:09.400><c> me</c><00:11:09.520><c> exactly</c><00:11:09.760><c> the</c>

00:11:10.230 --> 00:11:10.240 align:start position:0%
equals one this gives me exactly the
 

00:11:10.240 --> 00:11:12.930 align:start position:0%
equals one this gives me exactly the
45-degree<00:11:11.200><c> line</c><00:11:11.230><c> that</c><00:11:12.040><c> fits</c><00:11:12.190><c> my</c><00:11:12.400><c> dataset</c>

00:11:12.930 --> 00:11:12.940 align:start position:0%
45-degree line that fits my dataset
 

00:11:12.940 --> 00:11:14.840 align:start position:0%
45-degree line that fits my dataset
perfectly

00:11:14.840 --> 00:11:14.850 align:start position:0%
perfectly
 

00:11:14.850 --> 00:11:17.180 align:start position:0%
perfectly
whereas<00:11:15.850><c> in</c><00:11:16.000><c> contrast</c><00:11:16.150><c> if</c><00:11:16.630><c> I</c><00:11:16.690><c> set</c><00:11:16.930><c> theta</c>

00:11:17.180 --> 00:11:17.190 align:start position:0%
whereas in contrast if I set theta
 

00:11:17.190 --> 00:11:21.120 align:start position:0%
whereas in contrast if I set theta
equals<00:11:18.190><c> say</c><00:11:19.180><c> zero</c><00:11:19.660><c> zero</c><00:11:19.890><c> then</c><00:11:20.890><c> this</c>

00:11:21.120 --> 00:11:21.130 align:start position:0%
equals say zero zero then this
 

00:11:21.130 --> 00:11:23.640 align:start position:0%
equals say zero zero then this
hypothesis<00:11:21.910><c> is</c><00:11:22.480><c> predicting</c><00:11:23.050><c> zeros</c><00:11:23.470><c> and</c>

00:11:23.640 --> 00:11:23.650 align:start position:0%
hypothesis is predicting zeros and
 

00:11:23.650 --> 00:11:25.080 align:start position:0%
hypothesis is predicting zeros and
everything<00:11:24.010><c> to</c><00:11:24.190><c> the</c><00:11:24.250><c> same</c><00:11:24.430><c> theta</c><00:11:24.670><c> zero</c><00:11:25.030><c> equals</c>

00:11:25.080 --> 00:11:25.090 align:start position:0%
everything to the same theta zero equals
 

00:11:25.090 --> 00:11:28.230 align:start position:0%
everything to the same theta zero equals
zero<00:11:25.330><c> theta</c><00:11:26.140><c> one</c><00:11:26.320><c> equals</c><00:11:26.530><c> zero</c><00:11:26.920><c> and</c><00:11:27.400><c> a</c><00:11:27.910><c> compute</c>

00:11:28.230 --> 00:11:28.240 align:start position:0%
zero theta one equals zero and a compute
 

00:11:28.240 --> 00:11:30.120 align:start position:0%
zero theta one equals zero and a compute
the<00:11:28.330><c> cost</c><00:11:28.510><c> function</c><00:11:28.630><c> then</c><00:11:29.500><c> there's</c><00:11:29.740><c> a</c><00:11:29.800><c> two</c>

00:11:30.120 --> 00:11:30.130 align:start position:0%
the cost function then there's a two
 

00:11:30.130 --> 00:11:31.680 align:start position:0%
the cost function then there's a two
point<00:11:30.400><c> three</c><00:11:30.610><c> three</c><00:11:30.970><c> three</c><00:11:31.030><c> and</c><00:11:31.270><c> that's</c>

00:11:31.680 --> 00:11:31.690 align:start position:0%
point three three three and that's
 

00:11:31.690 --> 00:11:35.970 align:start position:0%
point three three three and that's
actually<00:11:32.110><c> equal</c><00:11:32.200><c> to</c><00:11:32.350><c> 1</c><00:11:33.190><c> squared</c><00:11:34.650><c> which</c><00:11:35.650><c> is</c><00:11:35.710><c> my</c>

00:11:35.970 --> 00:11:35.980 align:start position:0%
actually equal to 1 squared which is my
 

00:11:35.980 --> 00:11:38.250 align:start position:0%
actually equal to 1 squared which is my
squared<00:11:36.340><c> error</c><00:11:36.490><c> on</c><00:11:36.760><c> the</c><00:11:36.880><c> first</c><00:11:37.090><c> example</c><00:11:37.480><c> plus</c>

00:11:38.250 --> 00:11:38.260 align:start position:0%
squared error on the first example plus
 

00:11:38.260 --> 00:11:42.240 align:start position:0%
squared error on the first example plus
two<00:11:38.530><c> squared</c><00:11:38.950><c> plus</c><00:11:39.630><c> three</c><00:11:40.630><c> squared</c><00:11:41.110><c> and</c><00:11:41.440><c> then</c>

00:11:42.240 --> 00:11:42.250 align:start position:0%
two squared plus three squared and then
 

00:11:42.250 --> 00:11:45.780 align:start position:0%
two squared plus three squared and then
divided<00:11:43.000><c> by</c><00:11:43.030><c> 2m</c><00:11:43.840><c> which</c><00:11:44.830><c> is</c><00:11:45.010><c> two</c><00:11:45.220><c> times</c><00:11:45.490><c> number</c>

00:11:45.780 --> 00:11:45.790 align:start position:0%
divided by 2m which is two times number
 

00:11:45.790 --> 00:11:48.810 align:start position:0%
divided by 2m which is two times number
training<00:11:46.030><c> examples</c><00:11:46.480><c> which</c><00:11:47.230><c> is</c><00:11:47.440><c> oops</c><00:11:48.340><c> which</c><00:11:48.670><c> is</c>

00:11:48.810 --> 00:11:48.820 align:start position:0%
training examples which is oops which is
 

00:11:48.820 --> 00:11:51.060 align:start position:0%
training examples which is oops which is
indeed<00:11:49.270><c> two</c><00:11:49.450><c> point</c><00:11:49.660><c> three</c><00:11:49.810><c> three</c><00:11:50.020><c> and</c><00:11:50.410><c> so</c><00:11:50.830><c> that</c>

00:11:51.060 --> 00:11:51.070 align:start position:0%
indeed two point three three and so that
 

00:11:51.070 --> 00:11:54.330 align:start position:0%
indeed two point three three and so that
sanity<00:11:51.910><c> checks</c><00:11:52.180><c> that</c><00:11:52.480><c> this</c><00:11:53.470><c> function</c><00:11:53.890><c> here</c><00:11:54.100><c> is</c>

00:11:54.330 --> 00:11:54.340 align:start position:0%
sanity checks that this function here is
 

00:11:54.340 --> 00:11:56.250 align:start position:0%
sanity checks that this function here is
you<00:11:54.850><c> know</c><00:11:54.970><c> computing</c><00:11:55.570><c> the</c><00:11:55.780><c> correct</c><00:11:56.080><c> cost</c>

00:11:56.250 --> 00:11:56.260 align:start position:0%
you know computing the correct cost
 

00:11:56.260 --> 00:11:58.290 align:start position:0%
you know computing the correct cost
function<00:11:56.680><c> and</c><00:11:56.890><c> using</c><00:11:57.070><c> the</c><00:11:57.400><c> couple</c><00:11:57.820><c> examples</c>

00:11:58.290 --> 00:11:58.300 align:start position:0%
function and using the couple examples
 

00:11:58.300 --> 00:12:00.830 align:start position:0%
function and using the couple examples
we<00:11:58.420><c> tried</c><00:11:58.660><c> out</c><00:11:58.840><c> on</c><00:11:59.050><c> on</c><00:11:59.320><c> our</c><00:11:59.950><c> simple</c><00:12:00.550><c> training</c>

00:12:00.830 --> 00:12:00.840 align:start position:0%
we tried out on on our simple training
 

00:12:00.840 --> 00:12:05.100 align:start position:0%
we tried out on on our simple training
example<00:12:01.840><c> and</c><00:12:02.760><c> so</c><00:12:03.760><c> that</c><00:12:04.000><c> sanity</c><00:12:04.540><c> checks</c><00:12:04.810><c> that</c>

00:12:05.100 --> 00:12:05.110 align:start position:0%
example and so that sanity checks that
 

00:12:05.110 --> 00:12:09.390 align:start position:0%
example and so that sanity checks that
the<00:12:05.920><c> cost</c><00:12:06.190><c> function</c><00:12:06.310><c> J</c><00:12:06.700><c> as</c><00:12:07.740><c> as</c><00:12:08.740><c> defined</c><00:12:09.310><c> here</c>

00:12:09.390 --> 00:12:09.400 align:start position:0%
the cost function J as as defined here
 

00:12:09.400 --> 00:12:11.960 align:start position:0%
the cost function J as as defined here
that<00:12:10.120><c> it</c><00:12:10.270><c> is</c><00:12:10.420><c> indeed</c><00:12:10.870><c> you</c><00:12:11.200><c> know</c><00:12:11.260><c> seeming</c><00:12:11.710><c> to</c>

00:12:11.960 --> 00:12:11.970 align:start position:0%
that it is indeed you know seeming to
 

00:12:11.970 --> 00:12:14.310 align:start position:0%
that it is indeed you know seeming to
compute<00:12:12.970><c> the</c><00:12:13.090><c> correct</c><00:12:13.330><c> cost</c><00:12:13.540><c> function</c><00:12:14.050><c> at</c>

00:12:14.310 --> 00:12:14.320 align:start position:0%
compute the correct cost function at
 

00:12:14.320 --> 00:12:17.730 align:start position:0%
compute the correct cost function at
least<00:12:14.740><c> on</c><00:12:15.070><c> our</c><00:12:15.370><c> simple</c><00:12:15.910><c> training</c><00:12:15.940><c> set</c><00:12:16.620><c> that</c><00:12:17.620><c> we</c>

00:12:17.730 --> 00:12:17.740 align:start position:0%
least on our simple training set that we
 

00:12:17.740 --> 00:12:21.450 align:start position:0%
least on our simple training set that we
had<00:12:17.950><c> here</c><00:12:18.250><c> with</c><00:12:18.550><c> X&amp;Y</c><00:12:19.500><c> being</c><00:12:20.500><c> the</c><00:12:20.830><c> simple</c>

00:12:21.450 --> 00:12:21.460 align:start position:0%
had here with X&amp;Y being the simple
 

00:12:21.460 --> 00:12:24.450 align:start position:0%
had here with X&amp;Y being the simple
training<00:12:21.640><c> example</c><00:12:22.210><c> that</c><00:12:22.240><c> we</c><00:12:22.450><c> saw</c>

00:12:24.450 --> 00:12:24.460 align:start position:0%
training example that we saw
 

00:12:24.460 --> 00:12:26.910 align:start position:0%
training example that we saw
so<00:12:25.420><c> now</c><00:12:25.840><c> you</c><00:12:25.900><c> know</c><00:12:26.080><c> how</c><00:12:26.230><c> to</c><00:12:26.290><c> write</c><00:12:26.500><c> control</c>

00:12:26.910 --> 00:12:26.920 align:start position:0%
so now you know how to write control
 

00:12:26.920 --> 00:12:28.650 align:start position:0%
so now you know how to write control
statements<00:12:27.070><c> like</c><00:12:27.850><c> for</c><00:12:28.180><c> loops</c><00:12:28.390><c> while</c><00:12:28.600><c> loops</c>

00:12:28.650 --> 00:12:28.660 align:start position:0%
statements like for loops while loops
 

00:12:28.660 --> 00:12:30.960 align:start position:0%
statements like for loops while loops
and<00:12:29.050><c> if</c><00:12:29.170><c> statements</c><00:12:29.770><c> in</c><00:12:29.920><c> octave</c><00:12:30.310><c> as</c><00:12:30.580><c> well</c><00:12:30.850><c> as</c>

00:12:30.960 --> 00:12:30.970 align:start position:0%
and if statements in octave as well as
 

00:12:30.970 --> 00:12:33.600 align:start position:0%
and if statements in octave as well as
how<00:12:31.150><c> to</c><00:12:31.180><c> define</c><00:12:31.570><c> and</c><00:12:31.810><c> use</c><00:12:31.840><c> functions</c><00:12:32.280><c> in</c><00:12:33.280><c> the</c>

00:12:33.600 --> 00:12:33.610 align:start position:0%
how to define and use functions in the
 

00:12:33.610 --> 00:12:35.550 align:start position:0%
how to define and use functions in the
next<00:12:34.000><c> video</c><00:12:34.240><c> I'm</c><00:12:34.450><c> going</c><00:12:34.660><c> to</c><00:12:34.750><c> just</c><00:12:35.380><c> very</c>

00:12:35.550 --> 00:12:35.560 align:start position:0%
next video I'm going to just very
 

00:12:35.560 --> 00:12:37.350 align:start position:0%
next video I'm going to just very
quickly<00:12:35.890><c> step</c><00:12:36.370><c> you</c><00:12:36.520><c> through</c><00:12:36.550><c> the</c><00:12:36.820><c> logistics</c>

00:12:37.350 --> 00:12:37.360 align:start position:0%
quickly step you through the logistics
 

00:12:37.360 --> 00:12:40.740 align:start position:0%
quickly step you through the logistics
of<00:12:38.050><c> working</c><00:12:38.890><c> on</c><00:12:39.340><c> and</c><00:12:39.640><c> submitting</c><00:12:39.750><c> problem</c>

00:12:40.740 --> 00:12:40.750 align:start position:0%
of working on and submitting problem
 

00:12:40.750 --> 00:12:43.770 align:start position:0%
of working on and submitting problem
sets<00:12:40.990><c> for</c><00:12:41.620><c> this</c><00:12:41.770><c> class</c><00:12:42.040><c> and</c><00:12:42.360><c> how</c><00:12:43.360><c> to</c><00:12:43.420><c> use</c><00:12:43.600><c> our</c>

00:12:43.770 --> 00:12:43.780 align:start position:0%
sets for this class and how to use our
 

00:12:43.780 --> 00:12:46.530 align:start position:0%
sets for this class and how to use our
submission<00:12:44.200><c> system</c><00:12:44.620><c> and</c><00:12:44.940><c> finally</c><00:12:45.940><c> after</c><00:12:46.240><c> that</c>

00:12:46.530 --> 00:12:46.540 align:start position:0%
submission system and finally after that
 

00:12:46.540 --> 00:12:49.110 align:start position:0%
submission system and finally after that
in<00:12:46.750><c> the</c><00:12:46.960><c> final</c><00:12:47.230><c> opto</c><00:12:48.040><c> tutorial</c><00:12:48.460><c> video</c><00:12:48.730><c> I</c><00:12:48.910><c> want</c>

00:12:49.110 --> 00:12:49.120 align:start position:0%
in the final opto tutorial video I want
 

00:12:49.120 --> 00:12:51.480 align:start position:0%
in the final opto tutorial video I want
to<00:12:49.150><c> tell</c><00:12:49.330><c> you</c><00:12:49.420><c> about</c><00:12:49.510><c> vectorization</c><00:12:50.440><c> which</c><00:12:51.370><c> is</c>

00:12:51.480 --> 00:12:51.490 align:start position:0%
to tell you about vectorization which is
 

00:12:51.490 --> 00:12:53.730 align:start position:0%
to tell you about vectorization which is
an<00:12:51.580><c> idea</c><00:12:51.880><c> for</c><00:12:52.210><c> how</c><00:12:52.420><c> to</c><00:12:52.480><c> make</c><00:12:53.110><c> your</c><00:12:53.170><c> octave</c>

00:12:53.730 --> 00:12:53.740 align:start position:0%
an idea for how to make your octave
 

00:12:53.740 --> 00:12:57.390 align:start position:0%
an idea for how to make your octave
programs<00:12:54.220><c> run</c><00:12:54.610><c> much</c><00:12:54.850><c> faster</c>

