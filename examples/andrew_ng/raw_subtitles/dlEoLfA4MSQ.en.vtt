WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:01.939 align:start position:0%
 
in<00:00:00.179><c> the</c><00:00:00.510><c> previous</c><00:00:00.840><c> video</c><00:00:01.319><c> we</c><00:00:01.560><c> talked</c><00:00:01.800><c> about</c>

00:00:01.939 --> 00:00:01.949 align:start position:0%
in the previous video we talked about
 

00:00:01.949 --> 00:00:04.130 align:start position:0%
in the previous video we talked about
how<00:00:02.280><c> to</c><00:00:02.310><c> use</c><00:00:02.610><c> back</c><00:00:02.850><c> propagation</c><00:00:03.110><c> to</c><00:00:04.110><c> compute</c>

00:00:04.130 --> 00:00:04.140 align:start position:0%
how to use back propagation to compute
 

00:00:04.140 --> 00:00:06.829 align:start position:0%
how to use back propagation to compute
the<00:00:04.650><c> derivatives</c><00:00:05.250><c> of</c><00:00:05.460><c> your</c><00:00:05.549><c> cost</c><00:00:05.609><c> function</c><00:00:06.029><c> in</c>

00:00:06.829 --> 00:00:06.839 align:start position:0%
the derivatives of your cost function in
 

00:00:06.839 --> 00:00:08.720 align:start position:0%
the derivatives of your cost function in
this<00:00:07.200><c> video</c><00:00:07.589><c> I</c><00:00:07.830><c> want</c><00:00:08.010><c> to</c><00:00:08.069><c> quickly</c><00:00:08.280><c> tell</c><00:00:08.610><c> you</c>

00:00:08.720 --> 00:00:08.730 align:start position:0%
this video I want to quickly tell you
 

00:00:08.730 --> 00:00:10.790 align:start position:0%
this video I want to quickly tell you
about<00:00:08.849><c> one</c><00:00:09.210><c> implementational</c><00:00:10.170><c> detail</c><00:00:10.200><c> of</c>

00:00:10.790 --> 00:00:10.800 align:start position:0%
about one implementational detail of
 

00:00:10.800 --> 00:00:14.120 align:start position:0%
about one implementational detail of
unrolling<00:00:11.670><c> your</c><00:00:12.090><c> parameters</c><00:00:12.780><c> from</c><00:00:13.290><c> matrices</c>

00:00:14.120 --> 00:00:14.130 align:start position:0%
unrolling your parameters from matrices
 

00:00:14.130 --> 00:00:16.279 align:start position:0%
unrolling your parameters from matrices
into<00:00:14.490><c> vectors</c><00:00:14.880><c> which</c><00:00:15.450><c> we'll</c><00:00:15.660><c> need</c><00:00:15.690><c> in</c><00:00:16.109><c> order</c>

00:00:16.279 --> 00:00:16.289 align:start position:0%
into vectors which we'll need in order
 

00:00:16.289 --> 00:00:17.840 align:start position:0%
into vectors which we'll need in order
to<00:00:16.470><c> use</c><00:00:16.650><c> the</c><00:00:17.130><c> advanced</c><00:00:17.730><c> optimization</c>

00:00:17.840 --> 00:00:17.850 align:start position:0%
to use the advanced optimization
 

00:00:17.850 --> 00:00:21.830 align:start position:0%
to use the advanced optimization
routines<00:00:19.939><c> concretely</c><00:00:20.939><c> let's</c><00:00:21.150><c> say</c><00:00:21.600><c> you've</c>

00:00:21.830 --> 00:00:21.840 align:start position:0%
routines concretely let's say you've
 

00:00:21.840 --> 00:00:23.990 align:start position:0%
routines concretely let's say you've
implemented<00:00:22.289><c> a</c><00:00:22.769><c> cost</c><00:00:23.100><c> function</c><00:00:23.340><c> that</c><00:00:23.820><c> takes</c>

00:00:23.990 --> 00:00:24.000 align:start position:0%
implemented a cost function that takes
 

00:00:24.000 --> 00:00:26.140 align:start position:0%
implemented a cost function that takes
as<00:00:24.210><c> input</c><00:00:24.600><c> your</c><00:00:24.840><c> parameters</c><00:00:25.410><c> theta</c><00:00:25.650><c> and</c>

00:00:26.140 --> 00:00:26.150 align:start position:0%
as input your parameters theta and
 

00:00:26.150 --> 00:00:28.609 align:start position:0%
as input your parameters theta and
returns<00:00:27.150><c> the</c><00:00:27.449><c> cost</c><00:00:27.660><c> function</c><00:00:27.840><c> and</c><00:00:28.320><c> returns</c>

00:00:28.609 --> 00:00:28.619 align:start position:0%
returns the cost function and returns
 

00:00:28.619 --> 00:00:31.730 align:start position:0%
returns the cost function and returns
derivatives<00:00:29.279><c> then</c><00:00:30.210><c> you</c><00:00:30.420><c> can</c><00:00:30.570><c> post</c><00:00:30.840><c> this</c><00:00:31.080><c> to</c><00:00:31.320><c> an</c>

00:00:31.730 --> 00:00:31.740 align:start position:0%
derivatives then you can post this to an
 

00:00:31.740 --> 00:00:33.229 align:start position:0%
derivatives then you can post this to an
advanced<00:00:32.160><c> optimization</c><00:00:32.730><c> algorithm</c><00:00:33.090><c> by</c>

00:00:33.229 --> 00:00:33.239 align:start position:0%
advanced optimization algorithm by
 

00:00:33.239 --> 00:00:35.660 align:start position:0%
advanced optimization algorithm by
fminunc<00:00:33.630><c> and</c><00:00:33.660><c> fminunc</c><00:00:34.350><c> isn't</c><00:00:35.190><c> the</c><00:00:35.280><c> only</c><00:00:35.399><c> one</c>

00:00:35.660 --> 00:00:35.670 align:start position:0%
fminunc and fminunc isn't the only one
 

00:00:35.670 --> 00:00:36.709 align:start position:0%
fminunc and fminunc isn't the only one
by<00:00:35.820><c> the</c><00:00:35.880><c> way</c><00:00:36.030><c> there</c><00:00:36.210><c> are</c><00:00:36.360><c> there</c><00:00:36.510><c> are</c><00:00:36.570><c> also</c>

00:00:36.709 --> 00:00:36.719 align:start position:0%
by the way there are there are also
 

00:00:36.719 --> 00:00:39.170 align:start position:0%
by the way there are there are also
other<00:00:37.200><c> advanced</c><00:00:38.129><c> optimization</c><00:00:38.700><c> algorithms</c>

00:00:39.170 --> 00:00:39.180 align:start position:0%
other advanced optimization algorithms
 

00:00:39.180 --> 00:00:42.319 align:start position:0%
other advanced optimization algorithms
but<00:00:39.870><c> what</c><00:00:40.379><c> all</c><00:00:40.620><c> of</c><00:00:40.829><c> them</c><00:00:40.980><c> do</c><00:00:41.190><c> is</c><00:00:41.520><c> take</c><00:00:41.820><c> as</c><00:00:41.969><c> input</c>

00:00:42.319 --> 00:00:42.329 align:start position:0%
but what all of them do is take as input
 

00:00:42.329 --> 00:00:44.840 align:start position:0%
but what all of them do is take as input
the<00:00:42.540><c> point</c><00:00:43.050><c> of</c><00:00:43.200><c> the</c><00:00:43.320><c> cost</c><00:00:43.559><c> function</c><00:00:44.040><c> and</c><00:00:44.219><c> some</c>

00:00:44.840 --> 00:00:44.850 align:start position:0%
the point of the cost function and some
 

00:00:44.850 --> 00:00:48.350 align:start position:0%
the point of the cost function and some
initial<00:00:45.270><c> value</c><00:00:45.600><c> of</c><00:00:45.690><c> theta</c><00:00:45.870><c> and</c><00:00:46.820><c> both</c><00:00:47.820><c> and</c><00:00:48.059><c> this</c>

00:00:48.350 --> 00:00:48.360 align:start position:0%
initial value of theta and both and this
 

00:00:48.360 --> 00:00:51.830 align:start position:0%
initial value of theta and both and this
these<00:00:48.629><c> routines</c><00:00:49.170><c> assume</c><00:00:49.829><c> that</c><00:00:50.280><c> theta</c><00:00:51.090><c> and</c><00:00:51.570><c> the</c>

00:00:51.830 --> 00:00:51.840 align:start position:0%
these routines assume that theta and the
 

00:00:51.840 --> 00:00:54.020 align:start position:0%
these routines assume that theta and the
initial<00:00:52.170><c> value</c><00:00:52.289><c> of</c><00:00:52.559><c> theta</c><00:00:52.770><c> that</c><00:00:53.460><c> these</c><00:00:53.760><c> are</c>

00:00:54.020 --> 00:00:54.030 align:start position:0%
initial value of theta that these are
 

00:00:54.030 --> 00:00:57.020 align:start position:0%
initial value of theta that these are
parameter<00:00:54.719><c> vectors</c><00:00:55.260><c> may</c><00:00:55.530><c> be</c><00:00:55.590><c> RN</c><00:00:56.100><c> or</c><00:00:56.309><c> RN</c><00:00:56.370><c> plus</c><00:00:57.000><c> 1</c>

00:00:57.020 --> 00:00:57.030 align:start position:0%
parameter vectors may be RN or RN plus 1
 

00:00:57.030 --> 00:01:00.740 align:start position:0%
parameter vectors may be RN or RN plus 1
but<00:00:57.899><c> that</c><00:00:58.079><c> these</c><00:00:58.199><c> are</c><00:00:58.410><c> vectors</c><00:00:59.340><c> and</c><00:00:59.969><c> it</c><00:01:00.570><c> also</c>

00:01:00.740 --> 00:01:00.750 align:start position:0%
but that these are vectors and it also
 

00:01:00.750 --> 00:01:03.110 align:start position:0%
but that these are vectors and it also
seems<00:01:01.140><c> that</c><00:01:01.469><c> your</c><00:01:01.920><c> cost</c><00:01:02.160><c> function</c><00:01:02.399><c> will</c>

00:01:03.110 --> 00:01:03.120 align:start position:0%
seems that your cost function will
 

00:01:03.120 --> 00:01:05.780 align:start position:0%
seems that your cost function will
return<00:01:03.510><c> as</c><00:01:03.870><c> a</c><00:01:03.899><c> second</c><00:01:04.470><c> return</c><00:01:05.070><c> value</c><00:01:05.549><c> this</c>

00:01:05.780 --> 00:01:05.790 align:start position:0%
return as a second return value this
 

00:01:05.790 --> 00:01:08.600 align:start position:0%
return as a second return value this
gradient<00:01:06.360><c> which</c><00:01:06.540><c> is</c><00:01:06.570><c> also</c><00:01:07.080><c> like</c><00:01:07.350><c> RM</c><00:01:07.770><c> our</c><00:01:08.100><c> RN</c>

00:01:08.600 --> 00:01:08.610 align:start position:0%
gradient which is also like RM our RN
 

00:01:08.610 --> 00:01:11.510 align:start position:0%
gradient which is also like RM our RN
plus<00:01:08.790><c> 1</c><00:01:08.820><c> so</c><00:01:09.150><c> also</c><00:01:09.390><c> a</c><00:01:09.780><c> vector</c><00:01:10.080><c> this</c><00:01:11.010><c> worked</c><00:01:11.250><c> fine</c>

00:01:11.510 --> 00:01:11.520 align:start position:0%
plus 1 so also a vector this worked fine
 

00:01:11.520 --> 00:01:13.580 align:start position:0%
plus 1 so also a vector this worked fine
when<00:01:11.909><c> we</c><00:01:11.939><c> were</c><00:01:12.090><c> using</c><00:01:12.600><c> logistic</c><00:01:12.750><c> regression</c>

00:01:13.580 --> 00:01:13.590 align:start position:0%
when we were using logistic regression
 

00:01:13.590 --> 00:01:15.170 align:start position:0%
when we were using logistic regression
but<00:01:14.189><c> now</c><00:01:14.369><c> that</c><00:01:14.549><c> we're</c><00:01:14.670><c> using</c><00:01:14.790><c> a</c><00:01:15.060><c> neural</c>

00:01:15.170 --> 00:01:15.180 align:start position:0%
but now that we're using a neural
 

00:01:15.180 --> 00:01:17.660 align:start position:0%
but now that we're using a neural
network<00:01:15.509><c> our</c><00:01:16.229><c> parameters</c><00:01:16.979><c> are</c><00:01:17.280><c> no</c><00:01:17.430><c> longer</c>

00:01:17.660 --> 00:01:17.670 align:start position:0%
network our parameters are no longer
 

00:01:17.670 --> 00:01:19.580 align:start position:0%
network our parameters are no longer
vectors<00:01:18.540><c> but</c><00:01:18.780><c> instead</c><00:01:19.140><c> they're</c><00:01:19.439><c> these</c>

00:01:19.580 --> 00:01:19.590 align:start position:0%
vectors but instead they're these
 

00:01:19.590 --> 00:01:21.980 align:start position:0%
vectors but instead they're these
matrices<00:01:20.100><c> where</c><00:01:20.970><c> for</c><00:01:21.270><c> a</c><00:01:21.299><c> folder</c><00:01:21.750><c> in</c><00:01:21.869><c> your</c>

00:01:21.980 --> 00:01:21.990 align:start position:0%
matrices where for a folder in your
 

00:01:21.990 --> 00:01:24.469 align:start position:0%
matrices where for a folder in your
network<00:01:22.470><c> we</c><00:01:22.650><c> would</c><00:01:22.830><c> have</c><00:01:22.890><c> parameter</c><00:01:23.700><c> matrices</c>

00:01:24.469 --> 00:01:24.479 align:start position:0%
network we would have parameter matrices
 

00:01:24.479 --> 00:01:27.200 align:start position:0%
network we would have parameter matrices
theta<00:01:24.869><c> 1</c><00:01:25.140><c> theta</c><00:01:25.320><c> 2</c><00:01:25.500><c> theta</c><00:01:25.650><c> 3</c><00:01:25.979><c> that</c><00:01:26.850><c> we</c><00:01:27.000><c> might</c>

00:01:27.200 --> 00:01:27.210 align:start position:0%
theta 1 theta 2 theta 3 that we might
 

00:01:27.210 --> 00:01:29.420 align:start position:0%
theta 1 theta 2 theta 3 that we might
represent<00:01:27.420><c> in</c><00:01:27.960><c> octave</c><00:01:28.470><c> as</c><00:01:28.710><c> these</c><00:01:29.009><c> matrices</c>

00:01:29.420 --> 00:01:29.430 align:start position:0%
represent in octave as these matrices
 

00:01:29.430 --> 00:01:32.480 align:start position:0%
represent in octave as these matrices
theta<00:01:29.790><c> 1</c><00:01:30.060><c> theta</c><00:01:30.210><c> 2</c><00:01:30.390><c> theta</c><00:01:30.540><c> 3</c><00:01:30.840><c> and</c><00:01:31.490><c> similarly</c>

00:01:32.480 --> 00:01:32.490 align:start position:0%
theta 1 theta 2 theta 3 and similarly
 

00:01:32.490 --> 00:01:34.700 align:start position:0%
theta 1 theta 2 theta 3 and similarly
these<00:01:33.030><c> gradient</c><00:01:33.659><c> terms</c><00:01:33.960><c> that</c><00:01:34.170><c> were</c><00:01:34.259><c> expected</c>

00:01:34.700 --> 00:01:34.710 align:start position:0%
these gradient terms that were expected
 

00:01:34.710 --> 00:01:36.890 align:start position:0%
these gradient terms that were expected
to<00:01:34.740><c> return</c><00:01:34.829><c> well</c><00:01:35.700><c> in</c><00:01:36.000><c> the</c><00:01:36.090><c> previous</c><00:01:36.509><c> video</c><00:01:36.840><c> we</c>

00:01:36.890 --> 00:01:36.900 align:start position:0%
to return well in the previous video we
 

00:01:36.900 --> 00:01:39.170 align:start position:0%
to return well in the previous video we
show<00:01:37.259><c> how</c><00:01:37.530><c> to</c><00:01:37.560><c> compute</c><00:01:38.100><c> these</c><00:01:38.250><c> gradient</c>

00:01:39.170 --> 00:01:39.180 align:start position:0%
show how to compute these gradient
 

00:01:39.180 --> 00:01:42.230 align:start position:0%
show how to compute these gradient
matrices<00:01:40.049><c> which</c><00:01:40.470><c> was</c><00:01:40.680><c> capital</c><00:01:41.400><c> D</c><00:01:41.520><c> 1</c><00:01:41.700><c> capital</c><00:01:42.119><c> D</c>

00:01:42.230 --> 00:01:42.240 align:start position:0%
matrices which was capital D 1 capital D
 

00:01:42.240 --> 00:01:44.450 align:start position:0%
matrices which was capital D 1 capital D
2<00:01:42.420><c> in</c><00:01:42.570><c> faculty</c><00:01:42.960><c> 3</c><00:01:43.259><c> which</c><00:01:43.860><c> we</c><00:01:44.040><c> might</c><00:01:44.250><c> represent</c>

00:01:44.450 --> 00:01:44.460 align:start position:0%
2 in faculty 3 which we might represent
 

00:01:44.460 --> 00:01:48.139 align:start position:0%
2 in faculty 3 which we might represent
in<00:01:44.820><c> octave</c><00:01:45.270><c> as</c><00:01:45.479><c> matrices</c><00:01:46.110><c> D</c><00:01:46.409><c> 1</c><00:01:46.590><c> D</c><00:01:46.710><c> 2</c><00:01:46.740><c> D</c><00:01:46.920><c> 3</c><00:01:47.189><c> in</c>

00:01:48.139 --> 00:01:48.149 align:start position:0%
in octave as matrices D 1 D 2 D 3 in
 

00:01:48.149 --> 00:01:50.060 align:start position:0%
in octave as matrices D 1 D 2 D 3 in
this<00:01:48.540><c> video</c><00:01:48.930><c> I</c><00:01:48.990><c> want</c><00:01:49.350><c> to</c><00:01:49.380><c> quickly</c><00:01:49.590><c> tell</c><00:01:49.950><c> you</c>

00:01:50.060 --> 00:01:50.070 align:start position:0%
this video I want to quickly tell you
 

00:01:50.070 --> 00:01:51.859 align:start position:0%
this video I want to quickly tell you
about<00:01:50.130><c> the</c><00:01:50.490><c> idea</c><00:01:50.820><c> of</c><00:01:51.119><c> how</c><00:01:51.299><c> to</c><00:01:51.360><c> take</c><00:01:51.540><c> these</c>

00:01:51.859 --> 00:01:51.869 align:start position:0%
about the idea of how to take these
 

00:01:51.869 --> 00:01:54.770 align:start position:0%
about the idea of how to take these
matrices<00:01:51.930><c> and</c><00:01:52.710><c> unroll</c><00:01:53.220><c> them</c><00:01:53.820><c> into</c><00:01:54.119><c> vectors</c><00:01:54.299><c> so</c>

00:01:54.770 --> 00:01:54.780 align:start position:0%
matrices and unroll them into vectors so
 

00:01:54.780 --> 00:01:56.630 align:start position:0%
matrices and unroll them into vectors so
that<00:01:54.990><c> they</c><00:01:55.110><c> end</c><00:01:55.710><c> up</c><00:01:55.860><c> being</c><00:01:56.100><c> in</c><00:01:56.250><c> a</c><00:01:56.369><c> format</c>

00:01:56.630 --> 00:01:56.640 align:start position:0%
that they end up being in a format
 

00:01:56.640 --> 00:01:59.690 align:start position:0%
that they end up being in a format
suitable<00:01:57.060><c> for</c><00:01:57.990><c> passing</c><00:01:58.439><c> into</c><00:01:58.770><c> as</c><00:01:59.040><c> theta</c><00:01:59.280><c> here</c>

00:01:59.690 --> 00:01:59.700 align:start position:0%
suitable for passing into as theta here
 

00:01:59.700 --> 00:02:02.889 align:start position:0%
suitable for passing into as theta here
all<00:01:59.939><c> for</c><00:02:00.149><c> getting</c><00:02:00.450><c> out</c><00:02:00.630><c> for</c><00:02:01.320><c> a</c><00:02:01.380><c> gradient</c><00:02:01.829><c> there</c>

00:02:02.889 --> 00:02:02.899 align:start position:0%
all for getting out for a gradient there
 

00:02:02.899 --> 00:02:05.209 align:start position:0%
all for getting out for a gradient there
concretely<00:02:03.899><c> let's</c><00:02:04.170><c> say</c><00:02:04.500><c> we</c><00:02:04.680><c> have</c><00:02:04.860><c> a</c><00:02:04.890><c> neural</c>

00:02:05.209 --> 00:02:05.219 align:start position:0%
concretely let's say we have a neural
 

00:02:05.219 --> 00:02:08.180 align:start position:0%
concretely let's say we have a neural
network<00:02:05.399><c> with</c><00:02:06.000><c> one</c><00:02:06.450><c> input</c><00:02:07.320><c> layer</c><00:02:07.530><c> with</c>

00:02:08.180 --> 00:02:08.190 align:start position:0%
network with one input layer with
 

00:02:08.190 --> 00:02:10.609 align:start position:0%
network with one input layer with
units<00:02:08.580><c> hidden</c><00:02:09.450><c> there</c><00:02:09.600><c> with</c><00:02:09.780><c> ten</c><00:02:09.990><c> units</c><00:02:10.140><c> and</c>

00:02:10.609 --> 00:02:10.619 align:start position:0%
units hidden there with ten units and
 

00:02:10.619 --> 00:02:12.950 align:start position:0%
units hidden there with ten units and
one<00:02:10.890><c> output</c><00:02:11.160><c> there</c><00:02:11.550><c> with</c><00:02:12.030><c> just</c><00:02:12.270><c> one</c><00:02:12.450><c> unit</c><00:02:12.780><c> so</c>

00:02:12.950 --> 00:02:12.960 align:start position:0%
one output there with just one unit so
 

00:02:12.960 --> 00:02:15.290 align:start position:0%
one output there with just one unit so
s1<00:02:13.320><c> is</c><00:02:13.650><c> the</c><00:02:13.680><c> number</c><00:02:13.980><c> of</c><00:02:14.010><c> units</c><00:02:14.400><c> in</c><00:02:14.550><c> layer</c><00:02:14.640><c> 1</c><00:02:14.820><c> s2</c>

00:02:15.290 --> 00:02:15.300 align:start position:0%
s1 is the number of units in layer 1 s2
 

00:02:15.300 --> 00:02:18.080 align:start position:0%
s1 is the number of units in layer 1 s2
is<00:02:15.690><c> number</c><00:02:15.960><c> of</c><00:02:16.020><c> units</c><00:02:16.260><c> in</c><00:02:16.350><c> layer</c><00:02:16.410><c> 2</c><00:02:16.800><c> and</c><00:02:17.100><c> s</c><00:02:17.640><c> 3</c><00:02:17.880><c> is</c>

00:02:18.080 --> 00:02:18.090 align:start position:0%
is number of units in layer 2 and s 3 is
 

00:02:18.090 --> 00:02:20.060 align:start position:0%
is number of units in layer 2 and s 3 is
the<00:02:18.270><c> number</c><00:02:18.570><c> of</c><00:02:18.600><c> layers</c><00:02:18.840><c> is</c><00:02:19.200><c> number</c><00:02:19.650><c> of</c><00:02:19.710><c> units</c>

00:02:20.060 --> 00:02:20.070 align:start position:0%
the number of layers is number of units
 

00:02:20.070 --> 00:02:23.330 align:start position:0%
the number of layers is number of units
in<00:02:20.250><c> layer</c><00:02:20.280><c> 3</c><00:02:20.910><c> in</c><00:02:21.630><c> this</c><00:02:21.960><c> case</c><00:02:22.260><c> the</c><00:02:22.530><c> dimension</c><00:02:23.130><c> of</c>

00:02:23.330 --> 00:02:23.340 align:start position:0%
in layer 3 in this case the dimension of
 

00:02:23.340 --> 00:02:26.390 align:start position:0%
in layer 3 in this case the dimension of
your<00:02:23.610><c> matrices</c><00:02:24.210><c> theta</c><00:02:25.080><c> and</c><00:02:25.560><c> D</c><00:02:25.800><c> are</c><00:02:26.040><c> going</c><00:02:26.280><c> to</c>

00:02:26.390 --> 00:02:26.400 align:start position:0%
your matrices theta and D are going to
 

00:02:26.400 --> 00:02:29.600 align:start position:0%
your matrices theta and D are going to
be<00:02:26.520><c> given</c><00:02:26.910><c> by</c><00:02:27.150><c> these</c><00:02:27.290><c> expressions</c><00:02:28.430><c> now</c><00:02:29.430><c> for</c>

00:02:29.600 --> 00:02:29.610 align:start position:0%
be given by these expressions now for
 

00:02:29.610 --> 00:02:31.640 align:start position:0%
be given by these expressions now for
example<00:02:29.700><c> theta</c><00:02:30.300><c> one</c><00:02:30.570><c> is</c><00:02:30.600><c> going</c><00:02:30.960><c> to</c><00:02:31.050><c> be</c><00:02:31.170><c> a</c><00:02:31.200><c> 10</c><00:02:31.470><c> by</c>

00:02:31.640 --> 00:02:31.650 align:start position:0%
example theta one is going to be a 10 by
 

00:02:31.650 --> 00:02:35.750 align:start position:0%
example theta one is going to be a 10 by
11<00:02:32.130><c> matrix</c><00:02:32.280><c> and</c><00:02:32.820><c> so</c><00:02:33.060><c> on</c><00:02:33.620><c> so</c><00:02:34.620><c> in</c><00:02:34.950><c> octave</c><00:02:35.490><c> if</c><00:02:35.640><c> you</c>

00:02:35.750 --> 00:02:35.760 align:start position:0%
11 matrix and so on so in octave if you
 

00:02:35.760 --> 00:02:38.420 align:start position:0%
11 matrix and so on so in octave if you
want<00:02:35.970><c> to</c><00:02:36.060><c> convert</c><00:02:36.540><c> between</c><00:02:36.870><c> these</c><00:02:37.430><c> matrices</c>

00:02:38.420 --> 00:02:38.430 align:start position:0%
want to convert between these matrices
 

00:02:38.430 --> 00:02:41.660 align:start position:0%
want to convert between these matrices
and<00:02:38.670><c> vectors</c><00:02:38.730><c> we</c><00:02:39.660><c> can</c><00:02:39.900><c> do</c><00:02:40.110><c> is</c><00:02:40.440><c> take</c><00:02:40.800><c> your</c><00:02:41.010><c> theta</c>

00:02:41.660 --> 00:02:41.670 align:start position:0%
and vectors we can do is take your theta
 

00:02:41.670 --> 00:02:44.600 align:start position:0%
and vectors we can do is take your theta
1<00:02:41.910><c> theta</c><00:02:42.060><c> 2</c><00:02:42.240><c> theta</c><00:02:42.390><c> 3</c><00:02:42.720><c> and</c><00:02:43.230><c> write</c><00:02:44.160><c> this</c><00:02:44.370><c> piece</c>

00:02:44.600 --> 00:02:44.610 align:start position:0%
1 theta 2 theta 3 and write this piece
 

00:02:44.610 --> 00:02:46.280 align:start position:0%
1 theta 2 theta 3 and write this piece
of<00:02:44.790><c> code</c><00:02:44.970><c> and</c><00:02:45.210><c> this</c><00:02:45.420><c> will</c><00:02:45.630><c> take</c><00:02:45.840><c> all</c><00:02:45.990><c> the</c>

00:02:46.280 --> 00:02:46.290 align:start position:0%
of code and this will take all the
 

00:02:46.290 --> 00:02:48.830 align:start position:0%
of code and this will take all the
elements<00:02:46.440><c> of</c><00:02:46.860><c> your</c><00:02:46.980><c> 3</c><00:02:47.340><c> theta</c><00:02:47.670><c> matrices</c><00:02:48.540><c> and</c>

00:02:48.830 --> 00:02:48.840 align:start position:0%
elements of your 3 theta matrices and
 

00:02:48.840 --> 00:02:51.260 align:start position:0%
elements of your 3 theta matrices and
take<00:02:49.080><c> all</c><00:02:49.260><c> the</c><00:02:49.410><c> elements</c><00:02:49.590><c> of</c><00:02:50.010><c> theta</c><00:02:50.160><c> 1</c><00:02:50.460><c> all</c><00:02:51.000><c> the</c>

00:02:51.260 --> 00:02:51.270 align:start position:0%
take all the elements of theta 1 all the
 

00:02:51.270 --> 00:02:53.180 align:start position:0%
take all the elements of theta 1 all the
elements<00:02:51.720><c> of</c><00:02:51.780><c> theta</c><00:02:51.960><c> 2</c><00:02:52.260><c> all</c><00:02:52.530><c> the</c><00:02:52.710><c> elements</c><00:02:53.100><c> of</c>

00:02:53.180 --> 00:02:53.190 align:start position:0%
elements of theta 2 all the elements of
 

00:02:53.190 --> 00:02:56.090 align:start position:0%
elements of theta 2 all the elements of
theta<00:02:53.310><c> 3</c><00:02:53.700><c> and</c><00:02:54.020><c> unroll</c><00:02:55.020><c> them</c><00:02:55.230><c> and</c><00:02:55.530><c> put</c><00:02:55.770><c> all</c><00:02:55.950><c> the</c>

00:02:56.090 --> 00:02:56.100 align:start position:0%
theta 3 and unroll them and put all the
 

00:02:56.100 --> 00:02:58.490 align:start position:0%
theta 3 and unroll them and put all the
elements<00:02:56.580><c> into</c><00:02:56.820><c> a</c><00:02:56.850><c> big</c><00:02:57.150><c> long</c><00:02:57.390><c> vector</c><00:02:57.470><c> which</c><00:02:58.470><c> is</c>

00:02:58.490 --> 00:02:58.500 align:start position:0%
elements into a big long vector which is
 

00:02:58.500 --> 00:03:01.520 align:start position:0%
elements into a big long vector which is
thetavec<00:02:58.950><c> and</c><00:02:59.340><c> similarly</c><00:03:00.330><c> the</c><00:03:01.080><c> second</c>

00:03:01.520 --> 00:03:01.530 align:start position:0%
thetavec and similarly the second
 

00:03:01.530 --> 00:03:03.470 align:start position:0%
thetavec and similarly the second
command<00:03:02.100><c> would</c><00:03:02.430><c> take</c><00:03:02.730><c> all</c><00:03:02.940><c> of</c><00:03:03.000><c> your</c><00:03:03.270><c> D</c>

00:03:03.470 --> 00:03:03.480 align:start position:0%
command would take all of your D
 

00:03:03.480 --> 00:03:06.050 align:start position:0%
command would take all of your D
matrices<00:03:03.900><c> and</c><00:03:04.350><c> unroll</c><00:03:04.620><c> them</c><00:03:05.070><c> into</c><00:03:05.370><c> a</c><00:03:05.400><c> big</c><00:03:05.610><c> long</c>

00:03:06.050 --> 00:03:06.060 align:start position:0%
matrices and unroll them into a big long
 

00:03:06.060 --> 00:03:09.290 align:start position:0%
matrices and unroll them into a big long
vector<00:03:06.120><c> and</c><00:03:06.780><c> call</c><00:03:06.990><c> it</c><00:03:07.110><c> D</c><00:03:07.320><c> vector</c><00:03:07.650><c> and</c><00:03:08.300><c> finally</c>

00:03:09.290 --> 00:03:09.300 align:start position:0%
vector and call it D vector and finally
 

00:03:09.300 --> 00:03:11.030 align:start position:0%
vector and call it D vector and finally
if<00:03:09.540><c> you</c><00:03:09.630><c> want</c><00:03:09.660><c> to</c><00:03:09.870><c> go</c><00:03:10.080><c> back</c><00:03:10.290><c> from</c><00:03:10.500><c> the</c><00:03:10.680><c> vector</c>

00:03:11.030 --> 00:03:11.040 align:start position:0%
if you want to go back from the vector
 

00:03:11.040 --> 00:03:13.310 align:start position:0%
if you want to go back from the vector
representations<00:03:11.850><c> to</c><00:03:12.120><c> the</c><00:03:12.600><c> matrix</c>

00:03:13.310 --> 00:03:13.320 align:start position:0%
representations to the matrix
 

00:03:13.320 --> 00:03:15.830 align:start position:0%
representations to the matrix
representations<00:03:14.130><c> what</c><00:03:14.760><c> you</c><00:03:14.880><c> do</c><00:03:15.090><c> to</c><00:03:15.480><c> get</c><00:03:15.660><c> back</c>

00:03:15.830 --> 00:03:15.840 align:start position:0%
representations what you do to get back
 

00:03:15.840 --> 00:03:18.560 align:start position:0%
representations what you do to get back
data<00:03:16.140><c> one</c><00:03:16.410><c> say</c><00:03:16.709><c> is</c><00:03:16.920><c> take</c><00:03:17.670><c> van</c><00:03:17.880><c> Tate</c><00:03:18.150><c> thetavec</c>

00:03:18.560 --> 00:03:18.570 align:start position:0%
data one say is take van Tate thetavec
 

00:03:18.570 --> 00:03:21.590 align:start position:0%
data one say is take van Tate thetavec
and<00:03:18.930><c> pull</c><00:03:19.500><c> out</c><00:03:19.680><c> the</c><00:03:19.860><c> first</c><00:03:20.040><c> 110</c><00:03:20.550><c> elements</c><00:03:20.850><c> so</c>

00:03:21.590 --> 00:03:21.600 align:start position:0%
and pull out the first 110 elements so
 

00:03:21.600 --> 00:03:24.320 align:start position:0%
and pull out the first 110 elements so
theta<00:03:21.900><c> one</c><00:03:22.200><c> has</c><00:03:22.890><c> 110</c><00:03:23.640><c> elements</c><00:03:23.820><c> because</c>

00:03:24.320 --> 00:03:24.330 align:start position:0%
theta one has 110 elements because
 

00:03:24.330 --> 00:03:27.050 align:start position:0%
theta one has 110 elements because
there's<00:03:24.510><c> a</c><00:03:24.600><c> 10</c><00:03:24.780><c> by</c><00:03:24.930><c> 11</c><00:03:25.320><c> matrix</c><00:03:25.440><c> so</c><00:03:26.370><c> that</c><00:03:26.700><c> pulls</c>

00:03:27.050 --> 00:03:27.060 align:start position:0%
there's a 10 by 11 matrix so that pulls
 

00:03:27.060 --> 00:03:28.520 align:start position:0%
there's a 10 by 11 matrix so that pulls
out<00:03:27.270><c> the</c><00:03:27.420><c> first</c><00:03:27.630><c> hundred</c><00:03:27.870><c> and</c><00:03:28.110><c> 10</c><00:03:28.260><c> elements</c>

00:03:28.520 --> 00:03:28.530 align:start position:0%
out the first hundred and 10 elements
 

00:03:28.530 --> 00:03:31.490 align:start position:0%
out the first hundred and 10 elements
and<00:03:29.150><c> then</c><00:03:30.150><c> you</c><00:03:30.180><c> can</c><00:03:30.390><c> use</c><00:03:30.570><c> the</c><00:03:30.720><c> reshape</c><00:03:30.900><c> command</c>

00:03:31.490 --> 00:03:31.500 align:start position:0%
and then you can use the reshape command
 

00:03:31.500 --> 00:03:33.920 align:start position:0%
and then you can use the reshape command
to<00:03:31.650><c> reshape</c><00:03:32.040><c> this</c><00:03:32.250><c> back</c><00:03:32.459><c> into</c><00:03:32.760><c> theta</c><00:03:32.970><c> 1</c><00:03:33.209><c> and</c>

00:03:33.920 --> 00:03:33.930 align:start position:0%
to reshape this back into theta 1 and
 

00:03:33.930 --> 00:03:36.199 align:start position:0%
to reshape this back into theta 1 and
similarly<00:03:34.230><c> to</c><00:03:34.770><c> get</c><00:03:34.920><c> back</c><00:03:35.100><c> beta</c><00:03:35.370><c> 2</c><00:03:35.640><c> you</c><00:03:35.880><c> pull</c>

00:03:36.199 --> 00:03:36.209 align:start position:0%
similarly to get back beta 2 you pull
 

00:03:36.209 --> 00:03:38.090 align:start position:0%
similarly to get back beta 2 you pull
the<00:03:36.420><c> next</c><00:03:36.660><c> hundred</c><00:03:36.930><c> and</c><00:03:37.170><c> ten</c><00:03:37.350><c> elements</c><00:03:37.680><c> and</c>

00:03:38.090 --> 00:03:38.100 align:start position:0%
the next hundred and ten elements and
 

00:03:38.100 --> 00:03:41.270 align:start position:0%
the next hundred and ten elements and
reshape<00:03:38.670><c> it</c><00:03:39.150><c> and</c><00:03:39.390><c> for</c><00:03:39.959><c> theta</c><00:03:40.080><c> 3</c><00:03:40.500><c> you</c><00:03:40.980><c> pull</c><00:03:41.250><c> out</c>

00:03:41.270 --> 00:03:41.280 align:start position:0%
reshape it and for theta 3 you pull out
 

00:03:41.280 --> 00:03:42.610 align:start position:0%
reshape it and for theta 3 you pull out
the<00:03:41.550><c> final</c><00:03:42.000><c> 11</c>

00:03:42.610 --> 00:03:42.620 align:start position:0%
the final 11
 

00:03:42.620 --> 00:03:48.040 align:start position:0%
the final 11
and<00:03:43.129><c> reshape</c><00:03:43.910><c> to</c><00:03:44.180><c> get</c><00:03:44.540><c> back</c><00:03:44.720><c> pay</c><00:03:44.959><c> the</c><00:03:45.019><c> three</c>

00:03:48.040 --> 00:03:48.050 align:start position:0%
 
 

00:03:48.050 --> 00:03:50.680 align:start position:0%
 
here's<00:03:49.040><c> a</c><00:03:49.100><c> quick</c><00:03:49.370><c> octave</c><00:03:49.970><c> demo</c><00:03:50.210><c> of</c><00:03:50.510><c> that</c>

00:03:50.680 --> 00:03:50.690 align:start position:0%
here's a quick octave demo of that
 

00:03:50.690 --> 00:03:53.560 align:start position:0%
here's a quick octave demo of that
process<00:03:51.200><c> so</c><00:03:51.230><c> for</c><00:03:52.160><c> this</c><00:03:52.310><c> example</c><00:03:52.610><c> let's</c><00:03:53.000><c> set</c>

00:03:53.560 --> 00:03:53.570 align:start position:0%
process so for this example let's set
 

00:03:53.570 --> 00:03:58.720 align:start position:0%
process so for this example let's set
theta<00:03:53.810><c> 1</c><00:03:54.170><c> equal</c><00:03:54.740><c> to</c><00:03:55.010><c> be</c><00:03:55.760><c> a</c><00:03:55.790><c> 1</c><00:03:56.420><c> of</c><00:03:56.840><c> 10</c><00:03:57.320><c> by</c><00:03:57.620><c> 11</c><00:03:57.800><c> this</c>

00:03:58.720 --> 00:03:58.730 align:start position:0%
theta 1 equal to be a 1 of 10 by 11 this
 

00:03:58.730 --> 00:04:00.820 align:start position:0%
theta 1 equal to be a 1 of 10 by 11 this
is<00:03:58.850><c> a</c><00:03:58.910><c> matrix</c><00:03:59.150><c> of</c><00:03:59.450><c> all</c><00:03:59.600><c> ones</c><00:03:59.630><c> and</c><00:04:00.140><c> just</c><00:04:00.620><c> to</c><00:04:00.680><c> make</c>

00:04:00.820 --> 00:04:00.830 align:start position:0%
is a matrix of all ones and just to make
 

00:04:00.830 --> 00:04:02.590 align:start position:0%
is a matrix of all ones and just to make
this<00:04:00.980><c> easier</c><00:04:01.280><c> see</c><00:04:01.640><c> you</c><00:04:01.760><c> let's</c><00:04:01.940><c> set</c><00:04:02.120><c> that</c><00:04:02.300><c> to</c><00:04:02.480><c> be</c>

00:04:02.590 --> 00:04:02.600 align:start position:0%
this easier see you let's set that to be
 

00:04:02.600 --> 00:04:07.780 align:start position:0%
this easier see you let's set that to be
two<00:04:03.260><c> times</c><00:04:03.560><c> ones</c><00:04:04.120><c> 10</c><00:04:05.120><c> by</c><00:04:05.300><c> 11</c><00:04:05.330><c> and</c><00:04:06.550><c> let's</c><00:04:07.550><c> set</c>

00:04:07.780 --> 00:04:07.790 align:start position:0%
two times ones 10 by 11 and let's set
 

00:04:07.790 --> 00:04:13.270 align:start position:0%
two times ones 10 by 11 and let's set
theta<00:04:08.000><c> 3</c><00:04:08.480><c> equals</c><00:04:08.860><c> 3</c><00:04:09.860><c> times</c><00:04:10.790><c> ones</c><00:04:11.240><c> of</c><00:04:12.100><c> 1</c><00:04:13.100><c> by</c><00:04:13.250><c> 11</c>

00:04:13.270 --> 00:04:13.280 align:start position:0%
theta 3 equals 3 times ones of 1 by 11
 

00:04:13.280 --> 00:04:16.150 align:start position:0%
theta 3 equals 3 times ones of 1 by 11
so<00:04:13.880><c> this</c><00:04:14.180><c> is</c><00:04:14.360><c> three</c><00:04:15.170><c> separate</c><00:04:15.530><c> matrices</c><00:04:15.920><c> theta</c>

00:04:16.150 --> 00:04:16.160 align:start position:0%
so this is three separate matrices theta
 

00:04:16.160 --> 00:04:18.310 align:start position:0%
so this is three separate matrices theta
1<00:04:16.400><c> theta</c><00:04:16.520><c> 2</c><00:04:16.760><c> theta</c><00:04:16.820><c> 2</c><00:04:17.120><c> me</c><00:04:17.390><c> if</c><00:04:17.870><c> I</c><00:04:17.959><c> want</c><00:04:18.110><c> to</c><00:04:18.170><c> put</c>

00:04:18.310 --> 00:04:18.320 align:start position:0%
1 theta 2 theta 2 me if I want to put
 

00:04:18.320 --> 00:04:19.840 align:start position:0%
1 theta 2 theta 2 me if I want to put
all<00:04:18.500><c> of</c><00:04:18.530><c> these</c><00:04:18.709><c> into</c><00:04:18.950><c> the</c><00:04:19.040><c> vector</c><00:04:19.250><c> I've</c><00:04:19.610><c> set</c>

00:04:19.840 --> 00:04:19.850 align:start position:0%
all of these into the vector I've set
 

00:04:19.850 --> 00:04:25.480 align:start position:0%
all of these into the vector I've set
theta<00:04:20.090><c> Veck</c><00:04:20.450><c> equals</c><00:04:22.060><c> theta</c><00:04:23.060><c> 1</c><00:04:24.490><c> semicolon</c>

00:04:25.480 --> 00:04:25.490 align:start position:0%
theta Veck equals theta 1 semicolon
 

00:04:25.490 --> 00:04:32.680 align:start position:0%
theta Veck equals theta 1 semicolon
theta<00:04:26.150><c> 2</c><00:04:26.570><c> theta</c><00:04:27.940><c> 3</c><00:04:30.880><c> right</c><00:04:31.880><c> there's</c><00:04:32.120><c> a</c><00:04:32.180><c> colon</c><00:04:32.420><c> in</c>

00:04:32.680 --> 00:04:32.690 align:start position:0%
theta 2 theta 3 right there's a colon in
 

00:04:32.690 --> 00:04:37.500 align:start position:0%
theta 2 theta 3 right there's a colon in
the<00:04:32.750><c> middle</c><00:04:33.080><c> and</c><00:04:33.470><c> like</c><00:04:34.160><c> so</c><00:04:34.460><c> and</c><00:04:35.920><c> now</c><00:04:36.920><c> theta</c>

00:04:37.500 --> 00:04:37.510 align:start position:0%
the middle and like so and now theta
 

00:04:37.510 --> 00:04:40.270 align:start position:0%
the middle and like so and now theta
that<00:04:38.510><c> is</c><00:04:38.960><c> going</c><00:04:39.230><c> to</c><00:04:39.350><c> be</c><00:04:39.440><c> a</c><00:04:39.470><c> very</c><00:04:39.770><c> long</c><00:04:40.010><c> vector</c>

00:04:40.270 --> 00:04:40.280 align:start position:0%
that is going to be a very long vector
 

00:04:40.280 --> 00:04:43.690 align:start position:0%
that is going to be a very long vector
there's<00:04:40.930><c> 231</c><00:04:41.930><c> elements</c><00:04:42.380><c> if</c><00:04:42.500><c> I</c><00:04:42.620><c> if</c><00:04:43.040><c> I</c><00:04:43.220><c> display</c>

00:04:43.690 --> 00:04:43.700 align:start position:0%
there's 231 elements if I if I display
 

00:04:43.700 --> 00:04:47.410 align:start position:0%
there's 231 elements if I if I display
it<00:04:43.730><c> I</c><00:04:45.250><c> find</c><00:04:46.250><c> that</c><00:04:46.370><c> this</c><00:04:46.490><c> is</c><00:04:46.550><c> very</c><00:04:46.910><c> long</c><00:04:47.120><c> vector</c>

00:04:47.410 --> 00:04:47.420 align:start position:0%
it I find that this is very long vector
 

00:04:47.420 --> 00:04:49.030 align:start position:0%
it I find that this is very long vector
of<00:04:47.810><c> all</c><00:04:47.930><c> the</c><00:04:48.080><c> elements</c><00:04:48.470><c> in</c><00:04:48.560><c> the</c><00:04:48.620><c> first</c><00:04:48.800><c> matrix</c>

00:04:49.030 --> 00:04:49.040 align:start position:0%
of all the elements in the first matrix
 

00:04:49.040 --> 00:04:51.280 align:start position:0%
of all the elements in the first matrix
all<00:04:49.520><c> the</c><00:04:49.610><c> others</c><00:04:49.850><c> second</c><00:04:50.300><c> matrix</c><00:04:50.630><c> then</c><00:04:51.140><c> all</c>

00:04:51.280 --> 00:04:51.290 align:start position:0%
all the others second matrix then all
 

00:04:51.290 --> 00:04:53.920 align:start position:0%
all the others second matrix then all
the<00:04:51.410><c> elements</c><00:04:51.530><c> of</c><00:04:51.890><c> the</c><00:04:52.010><c> third</c><00:04:52.220><c> matrix</c><00:04:52.720><c> and</c><00:04:53.720><c> if</c>

00:04:53.920 --> 00:04:53.930 align:start position:0%
the elements of the third matrix and if
 

00:04:53.930 --> 00:04:56.020 align:start position:0%
the elements of the third matrix and if
I<00:04:53.990><c> want</c><00:04:54.170><c> to</c><00:04:54.260><c> get</c><00:04:54.380><c> back</c><00:04:54.650><c> my</c><00:04:55.070><c> original</c><00:04:55.250><c> matrices</c>

00:04:56.020 --> 00:04:56.030 align:start position:0%
I want to get back my original matrices
 

00:04:56.030 --> 00:05:01.900 align:start position:0%
I want to get back my original matrices
I<00:04:56.300><c> can</c><00:04:56.450><c> do</c><00:04:56.570><c> Lee</c><00:04:56.780><c> shape</c><00:04:58.120><c> theta</c><00:04:59.230><c> deck</c><00:05:00.550><c> let's</c><00:05:01.550><c> pull</c>

00:05:01.900 --> 00:05:01.910 align:start position:0%
I can do Lee shape theta deck let's pull
 

00:05:01.910 --> 00:05:04.270 align:start position:0%
I can do Lee shape theta deck let's pull
out<00:05:02.000><c> the</c><00:05:02.150><c> first</c><00:05:02.270><c> 110</c><00:05:02.990><c> elements</c><00:05:03.290><c> and</c><00:05:03.980><c> reshape</c>

00:05:04.270 --> 00:05:04.280 align:start position:0%
out the first 110 elements and reshape
 

00:05:04.280 --> 00:05:07.180 align:start position:0%
out the first 110 elements and reshape
that<00:05:04.730><c> into</c><00:05:04.970><c> 10</c><00:05:05.210><c> by</c><00:05:05.360><c> 11</c><00:05:05.390><c> matrix</c><00:05:05.840><c> and</c><00:05:06.290><c> just</c><00:05:07.010><c> gives</c>

00:05:07.180 --> 00:05:07.190 align:start position:0%
that into 10 by 11 matrix and just gives
 

00:05:07.190 --> 00:05:10.060 align:start position:0%
that into 10 by 11 matrix and just gives
me<00:05:07.370><c> back</c><00:05:07.550><c> beta</c><00:05:07.850><c> 1</c><00:05:08.210><c> and</c><00:05:08.480><c> if</c><00:05:09.320><c> I</c><00:05:09.440><c> then</c><00:05:09.470><c> pull</c><00:05:09.710><c> out</c>

00:05:10.060 --> 00:05:10.070 align:start position:0%
me back beta 1 and if I then pull out
 

00:05:10.070 --> 00:05:13.510 align:start position:0%
me back beta 1 and if I then pull out
the<00:05:10.190><c> next</c><00:05:10.400><c> 110</c><00:05:11.350><c> elements</c><00:05:12.350><c> so</c><00:05:12.860><c> that's</c><00:05:13.070><c> indices</c>

00:05:13.510 --> 00:05:13.520 align:start position:0%
the next 110 elements so that's indices
 

00:05:13.520 --> 00:05:18.520 align:start position:0%
the next 110 elements so that's indices
101<00:05:14.150><c> to</c><00:05:14.390><c> 220</c><00:05:15.050><c> I</c><00:05:15.670><c> get</c><00:05:16.670><c> back</c><00:05:16.910><c> all</c><00:05:17.480><c> of</c><00:05:17.540><c> my</c><00:05:17.810><c> 2s</c><00:05:17.960><c> and</c>

00:05:18.520 --> 00:05:18.530 align:start position:0%
101 to 220 I get back all of my 2s and
 

00:05:18.530 --> 00:05:22.480 align:start position:0%
101 to 220 I get back all of my 2s and
if<00:05:19.190><c> I</c><00:05:19.340><c> go</c><00:05:19.550><c> from</c><00:05:19.990><c> 2</c><00:05:20.990><c> to</c><00:05:21.200><c> 1</c><00:05:21.230><c> up</c><00:05:21.740><c> to</c><00:05:22.040><c> the</c><00:05:22.220><c> lost</c>

00:05:22.480 --> 00:05:22.490 align:start position:0%
if I go from 2 to 1 up to the lost
 

00:05:22.490 --> 00:05:25.690 align:start position:0%
if I go from 2 to 1 up to the lost
elements<00:05:23.120><c> just</c><00:05:23.450><c> element</c><00:05:23.930><c> 2</c><00:05:24.050><c> 3</c><00:05:24.350><c> 1</c><00:05:24.620><c> and</c><00:05:25.250><c> reciate</c>

00:05:25.690 --> 00:05:25.700 align:start position:0%
elements just element 2 3 1 and reciate
 

00:05:25.700 --> 00:05:30.210 align:start position:0%
elements just element 2 3 1 and reciate
2<00:05:25.940><c> 1</c><00:05:26.180><c> by</c><00:05:26.330><c> 11</c><00:05:26.360><c> I</c><00:05:26.900><c> get</c><00:05:27.110><c> back</c><00:05:27.350><c> from</c><00:05:27.380><c> day</c><00:05:27.740><c> two</c><00:05:27.800><c> three</c>

00:05:30.210 --> 00:05:30.220 align:start position:0%
 
 

00:05:30.220 --> 00:05:32.580 align:start position:0%
 
to<00:05:31.000><c> make</c><00:05:31.150><c> this</c><00:05:31.300><c> process</c><00:05:31.600><c> really</c><00:05:32.140><c> concrete</c>

00:05:32.580 --> 00:05:32.590 align:start position:0%
to make this process really concrete
 

00:05:32.590 --> 00:05:36.030 align:start position:0%
to make this process really concrete
here's<00:05:33.160><c> how</c><00:05:33.370><c> we</c><00:05:33.430><c> use</c><00:05:33.790><c> the</c><00:05:34.060><c> unrolling</c><00:05:34.710><c> idea</c><00:05:35.710><c> to</c>

00:05:36.030 --> 00:05:36.040 align:start position:0%
here's how we use the unrolling idea to
 

00:05:36.040 --> 00:05:38.370 align:start position:0%
here's how we use the unrolling idea to
implement<00:05:36.550><c> our</c><00:05:36.670><c> learning</c><00:05:36.730><c> algorithm</c><00:05:37.480><c> let's</c>

00:05:38.370 --> 00:05:38.380 align:start position:0%
implement our learning algorithm let's
 

00:05:38.380 --> 00:05:40.410 align:start position:0%
implement our learning algorithm let's
say<00:05:38.590><c> that</c><00:05:38.740><c> you</c><00:05:38.890><c> have</c><00:05:39.100><c> some</c><00:05:39.370><c> initial</c><00:05:39.940><c> value</c><00:05:40.360><c> of</c>

00:05:40.410 --> 00:05:40.420 align:start position:0%
say that you have some initial value of
 

00:05:40.420 --> 00:05:42.440 align:start position:0%
say that you have some initial value of
the<00:05:40.660><c> parameters</c><00:05:41.200><c> theta</c><00:05:41.380><c> 1</c><00:05:41.530><c> theta</c><00:05:41.740><c> 2</c><00:05:41.890><c> theta</c><00:05:42.040><c> 3</c>

00:05:42.440 --> 00:05:42.450 align:start position:0%
the parameters theta 1 theta 2 theta 3
 

00:05:42.450 --> 00:05:45.260 align:start position:0%
the parameters theta 1 theta 2 theta 3
what<00:05:43.450><c> we're</c><00:05:43.540><c> going</c><00:05:43.690><c> to</c><00:05:43.720><c> do</c><00:05:43.930><c> is</c><00:05:44.230><c> take</c><00:05:44.650><c> these</c><00:05:44.860><c> and</c>

00:05:45.260 --> 00:05:45.270 align:start position:0%
what we're going to do is take these and
 

00:05:45.270 --> 00:05:48.870 align:start position:0%
what we're going to do is take these and
unroll<00:05:46.270><c> them</c><00:05:46.510><c> into</c><00:05:47.050><c> a</c><00:05:47.080><c> long</c><00:05:47.560><c> vector</c><00:05:48.040><c> we're</c>

00:05:48.870 --> 00:05:48.880 align:start position:0%
unroll them into a long vector we're
 

00:05:48.880 --> 00:05:51.320 align:start position:0%
unroll them into a long vector we're
going<00:05:49.000><c> to</c><00:05:49.090><c> call</c><00:05:49.270><c> initial</c><00:05:49.750><c> theta</c><00:05:49.960><c> to</c><00:05:50.710><c> pass</c><00:05:50.950><c> into</c>

00:05:51.320 --> 00:05:51.330 align:start position:0%
going to call initial theta to pass into
 

00:05:51.330 --> 00:05:54.390 align:start position:0%
going to call initial theta to pass into
fminunc<00:05:52.330><c> as</c><00:05:52.960><c> this</c><00:05:53.230><c> initial</c><00:05:53.740><c> setting</c><00:05:54.160><c> of</c><00:05:54.310><c> the</c>

00:05:54.390 --> 00:05:54.400 align:start position:0%
fminunc as this initial setting of the
 

00:05:54.400 --> 00:05:56.910 align:start position:0%
fminunc as this initial setting of the
parameters<00:05:54.550><c> theta</c><00:05:55.410><c> the</c><00:05:56.410><c> other</c><00:05:56.500><c> thing</c><00:05:56.710><c> we</c><00:05:56.800><c> need</c>

00:05:56.910 --> 00:05:56.920 align:start position:0%
parameters theta the other thing we need
 

00:05:56.920 --> 00:05:58.530 align:start position:0%
parameters theta the other thing we need
to<00:05:56.980><c> do</c><00:05:57.190><c> is</c><00:05:57.460><c> to</c><00:05:57.550><c> implement</c><00:05:57.790><c> the</c><00:05:58.060><c> cost</c><00:05:58.300><c> function</c>

00:05:58.530 --> 00:05:58.540 align:start position:0%
to do is to implement the cost function
 

00:05:58.540 --> 00:06:01.440 align:start position:0%
to do is to implement the cost function
here's<00:05:59.500><c> my</c><00:05:59.680><c> implementation</c><00:06:00.040><c> of</c><00:06:00.850><c> the</c><00:06:01.090><c> cost</c>

00:06:01.440 --> 00:06:01.450 align:start position:0%
here's my implementation of the cost
 

00:06:01.450 --> 00:06:04.200 align:start position:0%
here's my implementation of the cost
function<00:06:02.010><c> the</c><00:06:03.010><c> cost</c><00:06:03.280><c> function</c><00:06:03.460><c> is</c><00:06:03.880><c> going</c><00:06:04.120><c> to</c>

00:06:04.200 --> 00:06:04.210 align:start position:0%
function the cost function is going to
 

00:06:04.210 --> 00:06:06.180 align:start position:0%
function the cost function is going to
give<00:06:04.360><c> us</c><00:06:04.510><c> input</c><00:06:04.690><c> theta</c><00:06:05.440><c> vector</c><00:06:05.770><c> which</c><00:06:06.160><c> is</c>

00:06:06.180 --> 00:06:06.190 align:start position:0%
give us input theta vector which is
 

00:06:06.190 --> 00:06:08.400 align:start position:0%
give us input theta vector which is
going<00:06:06.760><c> to</c><00:06:06.850><c> be</c><00:06:07.000><c> all</c><00:06:07.300><c> my</c><00:06:07.510><c> parameter</c><00:06:08.020><c> vector</c><00:06:08.050><c> is</c>

00:06:08.400 --> 00:06:08.410 align:start position:0%
going to be all my parameter vector is
 

00:06:08.410 --> 00:06:10.230 align:start position:0%
going to be all my parameter vector is
that<00:06:08.500><c> in</c><00:06:08.890><c> the</c><00:06:09.010><c> form</c><00:06:09.250><c> that's</c><00:06:09.490><c> been</c><00:06:09.610><c> unrolled</c>

00:06:10.230 --> 00:06:10.240 align:start position:0%
that in the form that's been unrolled
 

00:06:10.240 --> 00:06:12.660 align:start position:0%
that in the form that's been unrolled
into<00:06:10.480><c> a</c><00:06:10.660><c> vector</c><00:06:11.110><c> so</c><00:06:12.100><c> the</c><00:06:12.220><c> first</c><00:06:12.430><c> thing</c><00:06:12.550><c> I'm</c>

00:06:12.660 --> 00:06:12.670 align:start position:0%
into a vector so the first thing I'm
 

00:06:12.670 --> 00:06:14.310 align:start position:0%
into a vector so the first thing I'm
going<00:06:12.700><c> to</c><00:06:12.880><c> do</c><00:06:13.000><c> is</c><00:06:13.270><c> I'm</c><00:06:13.540><c> going</c><00:06:13.690><c> to</c><00:06:13.780><c> use</c><00:06:13.840><c> data</c>

00:06:14.310 --> 00:06:14.320 align:start position:0%
going to do is I'm going to use data
 

00:06:14.320 --> 00:06:16.230 align:start position:0%
going to do is I'm going to use data
back<00:06:14.560><c> and</c><00:06:14.860><c> I'm</c><00:06:14.920><c> going</c><00:06:15.040><c> to</c><00:06:15.130><c> use</c><00:06:15.370><c> the</c><00:06:16.030><c> reshape</c>

00:06:16.230 --> 00:06:16.240 align:start position:0%
back and I'm going to use the reshape
 

00:06:16.240 --> 00:06:18.630 align:start position:0%
back and I'm going to use the reshape
function<00:06:16.990><c> to</c><00:06:17.200><c> pull</c><00:06:17.560><c> elements</c><00:06:18.130><c> from</c><00:06:18.250><c> thetavec</c>

00:06:18.630 --> 00:06:18.640 align:start position:0%
function to pull elements from thetavec
 

00:06:18.640 --> 00:06:21.330 align:start position:0%
function to pull elements from thetavec
and<00:06:19.060><c> use</c><00:06:19.330><c> reshape</c><00:06:19.870><c> to</c><00:06:20.440><c> get</c><00:06:20.620><c> back</c><00:06:20.830><c> my</c><00:06:21.070><c> original</c>

00:06:21.330 --> 00:06:21.340 align:start position:0%
and use reshape to get back my original
 

00:06:21.340 --> 00:06:23.610 align:start position:0%
and use reshape to get back my original
parameter<00:06:22.270><c> matrices</c><00:06:22.570><c> theta</c><00:06:22.930><c> 1</c><00:06:23.169><c> theta</c><00:06:23.320><c> 2</c><00:06:23.470><c> theta</c>

00:06:23.610 --> 00:06:23.620 align:start position:0%
parameter matrices theta 1 theta 2 theta
 

00:06:23.620 --> 00:06:26.159 align:start position:0%
parameter matrices theta 1 theta 2 theta
3<00:06:23.890><c> so</c><00:06:24.250><c> these</c><00:06:24.430><c> are</c><00:06:24.610><c> going</c><00:06:24.760><c> to</c><00:06:24.880><c> be</c><00:06:25.060><c> matrices</c><00:06:25.930><c> that</c>

00:06:26.159 --> 00:06:26.169 align:start position:0%
3 so these are going to be matrices that
 

00:06:26.169 --> 00:06:28.800 align:start position:0%
3 so these are going to be matrices that
I<00:06:26.380><c> get</c><00:06:26.590><c> so</c><00:06:27.400><c> that</c><00:06:27.580><c> gives</c><00:06:27.820><c> me</c><00:06:27.940><c> a</c><00:06:28.030><c> more</c><00:06:28.270><c> convenient</c>

00:06:28.800 --> 00:06:28.810 align:start position:0%
I get so that gives me a more convenient
 

00:06:28.810 --> 00:06:31.590 align:start position:0%
I get so that gives me a more convenient
form<00:06:29.080><c> I</c><00:06:29.620><c> wish</c><00:06:30.100><c> to</c><00:06:30.280><c> use</c><00:06:30.520><c> these</c><00:06:30.700><c> matrices</c><00:06:30.970><c> so</c>

00:06:31.590 --> 00:06:31.600 align:start position:0%
form I wish to use these matrices so
 

00:06:31.600 --> 00:06:33.420 align:start position:0%
form I wish to use these matrices so
they<00:06:31.750><c> can</c><00:06:31.960><c> run</c><00:06:32.140><c> forward</c><00:06:32.800><c> propagation</c><00:06:33.190><c> and</c>

00:06:33.420 --> 00:06:33.430 align:start position:0%
they can run forward propagation and
 

00:06:33.430 --> 00:06:35.550 align:start position:0%
they can run forward propagation and
back<00:06:33.640><c> propagation</c><00:06:33.820><c> to</c><00:06:34.600><c> compute</c><00:06:34.960><c> my</c>

00:06:35.550 --> 00:06:35.560 align:start position:0%
back propagation to compute my
 

00:06:35.560 --> 00:06:37.409 align:start position:0%
back propagation to compute my
derivatives<00:06:36.130><c> and</c><00:06:36.430><c> to</c><00:06:36.640><c> compute</c><00:06:37.060><c> my</c><00:06:37.150><c> cost</c>

00:06:37.409 --> 00:06:37.419 align:start position:0%
derivatives and to compute my cost
 

00:06:37.419 --> 00:06:40.710 align:start position:0%
derivatives and to compute my cost
function<00:06:37.810><c> J</c><00:06:38.020><c> of</c><00:06:38.140><c> theta</c><00:06:38.669><c> and</c><00:06:39.669><c> finally</c><00:06:40.419><c> I</c><00:06:40.630><c> can</c>

00:06:40.710 --> 00:06:40.720 align:start position:0%
function J of theta and finally I can
 

00:06:40.720 --> 00:06:43.230 align:start position:0%
function J of theta and finally I can
then<00:06:41.110><c> take</c><00:06:41.350><c> my</c><00:06:41.560><c> derivatives</c><00:06:42.160><c> and</c><00:06:42.430><c> unroll</c><00:06:43.000><c> them</c>

00:06:43.230 --> 00:06:43.240 align:start position:0%
then take my derivatives and unroll them
 

00:06:43.240 --> 00:06:45.630 align:start position:0%
then take my derivatives and unroll them
so<00:06:43.570><c> keeping</c><00:06:44.140><c> the</c><00:06:44.320><c> elements</c><00:06:44.500><c> in</c><00:06:44.950><c> the</c><00:06:45.460><c> same</c>

00:06:45.630 --> 00:06:45.640 align:start position:0%
so keeping the elements in the same
 

00:06:45.640 --> 00:06:47.280 align:start position:0%
so keeping the elements in the same
ordering<00:06:45.880><c> as</c><00:06:46.270><c> I</c><00:06:46.390><c> did</c><00:06:46.570><c> want</c><00:06:46.810><c> to</c><00:06:46.900><c> unroll</c><00:06:47.229><c> my</c>

00:06:47.280 --> 00:06:47.290 align:start position:0%
ordering as I did want to unroll my
 

00:06:47.290 --> 00:06:49.800 align:start position:0%
ordering as I did want to unroll my
Thetas<00:06:47.890><c> then</c><00:06:48.460><c> I'm</c><00:06:48.550><c> going</c><00:06:48.700><c> to</c><00:06:48.760><c> unroll</c><00:06:49.060><c> d1</c><00:06:49.510><c> d2</c><00:06:49.660><c> d3</c>

00:06:49.800 --> 00:06:49.810 align:start position:0%
Thetas then I'm going to unroll d1 d2 d3
 

00:06:49.810 --> 00:06:53.219 align:start position:0%
Thetas then I'm going to unroll d1 d2 d3
to<00:06:50.650><c> get</c><00:06:50.860><c> gradient</c><00:06:51.430><c> back</c><00:06:51.640><c> which</c><00:06:52.330><c> is</c><00:06:52.479><c> now</c><00:06:52.690><c> what's</c>

00:06:53.219 --> 00:06:53.229 align:start position:0%
to get gradient back which is now what's
 

00:06:53.229 --> 00:06:56.340 align:start position:0%
to get gradient back which is now what's
my<00:06:53.530><c> cost</c><00:06:54.430><c> function</c><00:06:54.550><c> and</c><00:06:55.240><c> return</c><00:06:55.540><c> to</c><00:06:55.780><c> return</c><00:06:55.930><c> a</c>

00:06:56.340 --> 00:06:56.350 align:start position:0%
my cost function and return to return a
 

00:06:56.350 --> 00:06:58.360 align:start position:0%
my cost function and return to return a
vector<00:06:56.530><c> of</c><00:06:57.010><c> these</c>

00:06:58.360 --> 00:06:58.370 align:start position:0%
vector of these
 

00:06:58.370 --> 00:07:01.040 align:start position:0%
vector of these
so<00:06:59.370><c> hopefully</c><00:06:59.730><c> you</c><00:07:00.150><c> now</c><00:07:00.300><c> have</c><00:07:00.330><c> a</c><00:07:00.540><c> good</c><00:07:00.750><c> sense</c>

00:07:01.040 --> 00:07:01.050 align:start position:0%
so hopefully you now have a good sense
 

00:07:01.050 --> 00:07:03.140 align:start position:0%
so hopefully you now have a good sense
of<00:07:01.230><c> how</c><00:07:01.560><c> to</c><00:07:01.590><c> convert</c><00:07:02.160><c> back</c><00:07:02.490><c> and</c><00:07:02.550><c> forth</c><00:07:02.790><c> between</c>

00:07:03.140 --> 00:07:03.150 align:start position:0%
of how to convert back and forth between
 

00:07:03.150 --> 00:07:05.120 align:start position:0%
of how to convert back and forth between
their<00:07:03.570><c> matrix</c><00:07:03.960><c> representation</c><00:07:04.800><c> of</c><00:07:05.040><c> the</c>

00:07:05.120 --> 00:07:05.130 align:start position:0%
their matrix representation of the
 

00:07:05.130 --> 00:07:07.220 align:start position:0%
their matrix representation of the
parameters<00:07:05.510><c> versus</c><00:07:06.510><c> the</c><00:07:06.750><c> vector</c>

00:07:07.220 --> 00:07:07.230 align:start position:0%
parameters versus the vector
 

00:07:07.230 --> 00:07:09.440 align:start position:0%
parameters versus the vector
representation<00:07:08.010><c> of</c><00:07:08.160><c> the</c><00:07:08.220><c> parameters</c><00:07:08.450><c> the</c>

00:07:09.440 --> 00:07:09.450 align:start position:0%
representation of the parameters the
 

00:07:09.450 --> 00:07:11.480 align:start position:0%
representation of the parameters the
advantage<00:07:09.960><c> of</c><00:07:10.140><c> the</c><00:07:10.320><c> matrix</c><00:07:10.490><c> representation</c>

00:07:11.480 --> 00:07:11.490 align:start position:0%
advantage of the matrix representation
 

00:07:11.490 --> 00:07:13.520 align:start position:0%
advantage of the matrix representation
is<00:07:11.730><c> that</c><00:07:12.000><c> when</c><00:07:12.480><c> your</c><00:07:12.630><c> parameters</c><00:07:12.750><c> are</c><00:07:13.260><c> stored</c>

00:07:13.520 --> 00:07:13.530 align:start position:0%
is that when your parameters are stored
 

00:07:13.530 --> 00:07:15.830 align:start position:0%
is that when your parameters are stored
as<00:07:13.680><c> matrices</c><00:07:13.710><c> is</c><00:07:14.640><c> more</c><00:07:14.970><c> convenient</c><00:07:15.390><c> when</c>

00:07:15.830 --> 00:07:15.840 align:start position:0%
as matrices is more convenient when
 

00:07:15.840 --> 00:07:17.510 align:start position:0%
as matrices is more convenient when
you're<00:07:15.990><c> doing</c><00:07:16.350><c> forward</c><00:07:16.710><c> propagation</c><00:07:16.800><c> and</c>

00:07:17.510 --> 00:07:17.520 align:start position:0%
you're doing forward propagation and
 

00:07:17.520 --> 00:07:20.120 align:start position:0%
you're doing forward propagation and
back<00:07:17.580><c> propagation</c><00:07:17.760><c> and</c><00:07:18.570><c> is</c><00:07:19.020><c> easier</c><00:07:19.500><c> when</c><00:07:19.950><c> your</c>

00:07:20.120 --> 00:07:20.130 align:start position:0%
back propagation and is easier when your
 

00:07:20.130 --> 00:07:22.460 align:start position:0%
back propagation and is easier when your
parameters<00:07:20.640><c> are</c><00:07:20.850><c> stored</c><00:07:21.150><c> as</c><00:07:21.300><c> matrices</c><00:07:21.470><c> to</c>

00:07:22.460 --> 00:07:22.470 align:start position:0%
parameters are stored as matrices to
 

00:07:22.470 --> 00:07:24.680 align:start position:0%
parameters are stored as matrices to
take<00:07:22.770><c> advantage</c><00:07:23.280><c> of</c><00:07:23.310><c> the</c><00:07:23.790><c> sort</c><00:07:24.060><c> of</c><00:07:24.150><c> vectorized</c>

00:07:24.680 --> 00:07:24.690 align:start position:0%
take advantage of the sort of vectorized
 

00:07:24.690 --> 00:07:27.290 align:start position:0%
take advantage of the sort of vectorized
implementations<00:07:25.560><c> whereas</c><00:07:26.490><c> in</c><00:07:26.610><c> contrast</c><00:07:26.790><c> the</c>

00:07:27.290 --> 00:07:27.300 align:start position:0%
implementations whereas in contrast the
 

00:07:27.300 --> 00:07:29.240 align:start position:0%
implementations whereas in contrast the
advantage<00:07:27.750><c> of</c><00:07:27.780><c> the</c><00:07:28.200><c> vector</c><00:07:28.440><c> representation</c>

00:07:29.240 --> 00:07:29.250 align:start position:0%
advantage of the vector representation
 

00:07:29.250 --> 00:07:32.000 align:start position:0%
advantage of the vector representation
we<00:07:29.820><c> have</c><00:07:29.850><c> like</c><00:07:30.240><c> thetavec</c><00:07:30.690><c> o</c><00:07:30.870><c> defect</c><00:07:31.440><c> is</c><00:07:31.710><c> that</c>

00:07:32.000 --> 00:07:32.010 align:start position:0%
we have like thetavec o defect is that
 

00:07:32.010 --> 00:07:34.430 align:start position:0%
we have like thetavec o defect is that
when<00:07:32.700><c> you're</c><00:07:33.240><c> using</c><00:07:33.450><c> the</c><00:07:33.810><c> advanced</c>

00:07:34.430 --> 00:07:34.440 align:start position:0%
when you're using the advanced
 

00:07:34.440 --> 00:07:36.560 align:start position:0%
when you're using the advanced
optimization<00:07:35.130><c> algorithms</c><00:07:35.610><c> those</c><00:07:36.090><c> algorithms</c>

00:07:36.560 --> 00:07:36.570 align:start position:0%
optimization algorithms those algorithms
 

00:07:36.570 --> 00:07:38.570 align:start position:0%
optimization algorithms those algorithms
tend<00:07:36.810><c> to</c><00:07:37.020><c> assume</c><00:07:37.230><c> that</c><00:07:37.560><c> you</c><00:07:37.770><c> have</c><00:07:37.980><c> all</c><00:07:38.280><c> of</c><00:07:38.310><c> your</c>

00:07:38.570 --> 00:07:38.580 align:start position:0%
tend to assume that you have all of your
 

00:07:38.580 --> 00:07:40.670 align:start position:0%
tend to assume that you have all of your
parameters<00:07:38.900><c> unrolled</c><00:07:39.900><c> into</c><00:07:40.080><c> a</c><00:07:40.260><c> big</c><00:07:40.500><c> long</c>

00:07:40.670 --> 00:07:40.680 align:start position:0%
parameters unrolled into a big long
 

00:07:40.680 --> 00:07:43.250 align:start position:0%
parameters unrolled into a big long
vector<00:07:40.740><c> and</c><00:07:41.340><c> so</c><00:07:42.150><c> with</c><00:07:42.450><c> what</c><00:07:42.870><c> we</c><00:07:42.960><c> just</c><00:07:43.080><c> went</c>

00:07:43.250 --> 00:07:43.260 align:start position:0%
vector and so with what we just went
 

00:07:43.260 --> 00:07:44.930 align:start position:0%
vector and so with what we just went
through<00:07:43.380><c> hopefully</c><00:07:44.010><c> you</c><00:07:44.160><c> can</c><00:07:44.370><c> now</c><00:07:44.430><c> quickly</c>

00:07:44.930 --> 00:07:44.940 align:start position:0%
through hopefully you can now quickly
 

00:07:44.940 --> 00:07:49.340 align:start position:0%
through hopefully you can now quickly
convert<00:07:45.810><c> between</c><00:07:46.080><c> the</c><00:07:46.410><c> two</c><00:07:46.590><c> as</c><00:07:46.860><c> needed</c>

